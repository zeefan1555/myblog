{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/1241655078859_.pic.jpg","path":"img/1241655078859_.pic.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/1251655078974_.pic.jpg","path":"img/1251655078974_.pic.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/17.用最少数量的箭引爆气球(carl).mp4","path":"img/17.用最少数量的箭引爆气球(carl).mp4","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/19.划分字母区间(carl).mp4","path":"img/19.划分字母区间(carl).mp4","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/BAB手势 2022-06-09 17.21.49.excalidraw.md","path":"img/BAB手势 2022-06-09 17.21.49.excalidraw.md","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/Pasted image 20220608090057.png","path":"img/Pasted image 20220608090057.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/Pasted image 20220608090858.png","path":"img/Pasted image 20220608090858.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/Pasted image 20220609175251.png","path":"img/Pasted image 20220609175251.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/Pasted image 20220609175258.png","path":"img/Pasted image 20220609175258.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/Pasted image 20220609175653.png","path":"img/Pasted image 20220609175653.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/Pasted image 20220609175744.png","path":"img/Pasted image 20220609175744.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/Pasted image 20220610104400.png","path":"img/Pasted image 20220610104400.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/Pasted image 20220614145454.png","path":"img/Pasted image 20220614145454.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/Pasted image 20220614162823.png","path":"img/Pasted image 20220614162823.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/air.png","path":"img/air.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.jpg","path":"img/default.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fan.png","path":"img/fan.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/网站头像.png","path":"img/网站头像.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1654080173000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1654080173000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1654080173000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1654080173000},{"_id":"themes/fluid/package.json","hash":"1a78b235631783e6d73adb3037064b1d5146fb83","modified":1654080173000},{"_id":"themes/fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1654578491630},{"_id":"themes/fluid/README_en.md","hash":"8c874f309e346fffa392e174385b5cc08510f218","modified":1654578491650},{"_id":"themes/fluid/.DS_Store","hash":"f4f857851e6aa0495d12527b492980fdd4c2f7f0","modified":1656157929540},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1654080173000},{"_id":"themes/fluid/source/.DS_Store","hash":"71de8d9e1642c238f25b256d4002de53efdef101","modified":1656158414880},{"_id":"themes/fluid/layout/404.ejs","hash":"9569c5c8f67d2783f372f671c57b93a00dc63c2f","modified":1654080173000},{"_id":"themes/fluid/_config.yml","hash":"4b19c7f005e80ee95f9159018865c31080b8e248","modified":1654698115080},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1654080173000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1654080173000},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1654080173000},{"_id":"themes/fluid/layout/index.ejs","hash":"b15d13877827e99e0ff783a6b13b13cca90bfe8c","modified":1654080173000},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1654080173000},{"_id":"themes/fluid/layout/about.ejs","hash":"23e5db06cfdc1cb26503204f074db58647adfbf3","modified":1654080173000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1654080173000},{"_id":"themes/fluid/layout/links.ejs","hash":"edcbef65037759c3a7b3539f2edcd72b082267e9","modified":1654080173000},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1654080173000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1654080173000},{"_id":"themes/fluid/layout/page.ejs","hash":"a4a6b184bd91d9fe090da28891e74afc3b71c7fd","modified":1654080173000},{"_id":"themes/fluid/layout/post.ejs","hash":"27499c6d2dfc1d92223942063ab9a4911d776fea","modified":1654080173000},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1654080173000},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1654080173000},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1654080173000},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1654080173000},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1654080173000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1654080173000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1654080173000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1654080173000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1654080173000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1654080173000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1654080173000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1654080173000},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1654080173000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1654080173000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1654080173000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1654080173000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1654080173000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1654080173000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1654080173000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1654080173000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1654080173000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"43620b0944ffb67ea1fa6cc838f65a7351222eb0","modified":1654080173000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1654080173000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1654080173000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1654080173000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1654080173000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"b917b893b1777e6ffcb53188f9f5644510e5f20d","modified":1654080173000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1654080173000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1654080173000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1654080173000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1654080173000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1654080173000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1654080173000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1654080173000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1654080173000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1654080173000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1654080173000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1654080173000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1654080173000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1654080173000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1654080173000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1654080173000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1654080173000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1654080173000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1654080173000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1654080173000},{"_id":"themes/fluid/source/js/boot.js","hash":"6b7319b36ca2e2d3afe336623ef438994f3d26de","modified":1654080173000},{"_id":"themes/fluid/source/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1654080173000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1654080173000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1654080173000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"ed23208de670d7a5900f2669cc715e2479885958","modified":1654080173000},{"_id":"themes/fluid/source/js/utils.js","hash":"d49d462f8547de07ca49e1ea195dff864b08706b","modified":1654080173000},{"_id":"themes/fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1654080173000},{"_id":"themes/fluid/source/js/plugins.js","hash":"b4ca98f68bf09a74678932e4ac73ac56a7c01e03","modified":1654080173000},{"_id":"themes/fluid/source/img/.DS_Store","hash":"5939d5d8779afc51e16b3dcf70029c7bc65e35dd","modified":1655630963470},{"_id":"themes/fluid/source/img/BAB手势 2022-06-09 17.21.49.excalidraw.md","hash":"e624137e11de00f5d04007dca7657b3e4ad3e8ea","modified":1659718306483},{"_id":"themes/fluid/source/img/Pasted image 20220609175744.png","hash":"66bd2eb77e341fedadecb8beac5b0d36e4a80127","modified":1654768664570},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1654080173000},{"_id":"themes/fluid/source/img/fan.png","hash":"63b2dfc00a64bd717c14c714d2fc1d0cc2782bcd","modified":1654846194030},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1654080173000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1654080173000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"a591fedbc5759fb00152304f9ea486dfba3a246a","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"24ef242aa01e5f5bc397cf3f83ae48b1e8353dab","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"eb2c46aa2508ea65d6e5c397c4bc20d05761d754","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1654080173000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1654080173000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"54933c294d9b469a76a5ed36328e778ed740158f","modified":1654080173000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"3d8912b68fcf51c38f6e1c5dd2bd74657bb3b7fb","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1654080173000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"99b6382a32c1888eaa3684ad08fb1dda36a8f9f8","modified":1654080173000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1654080173000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1654080173000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1654080173000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1654080173000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"2465f604eea63b14cd2b0cc142769d963a0193a0","modified":1654080173000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"ef56f0903762a7a2c853417dfa6b0463440295e0","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"129a8b19ab26efd02ff1806ff4012376d2cd3497","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"953552425f0b86c98d1026fdb04e716fdff356e7","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"38990ed9dbccd88342ee4b4cb5e60818e9eb8e8a","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"3b3b0be9f7624ff72fbb2da6ae3663adcfb7d118","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"88420e83c0968f7da69aa423f42d3033891c9229","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"e74fb49526ddb14fee2c6360a560d17f57262ef7","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"91a1de823492d9225f9daa3ef59efbca345456a0","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"99e8e25e84d513b869a17140f63a5c1e48a0e7e1","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"c80bdc171aa53eb7205dcdc77764cec87a1dafd6","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1654080173000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1654080173000},{"_id":"source/杂项/零散笔记/简历.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659407927702},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"7054d79c9d5966fc57baf0adcdf3b19275987b62","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"078e5496a1852952ce4ee49016e86b9f70d31908","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"e6e48d6ba2951ce4abc2876600f85eef64095338","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"896179810e1ee986208ae2d57a44719f6b839bde","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1654080173000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1654080173000},{"_id":"themes/fluid/source/img/air.png","hash":"1d7119be8f53f8be73982d2c44a2121489392d2e","modified":1655630959390},{"_id":"themes/fluid/source/img/网站头像.png","hash":"a68f88a26a8a940567cae302bfe8fc3ba9f2e715","modified":1654844998190},{"_id":"source/.obsidian/appearance.json","hash":"7daf81f7e69448941828f6914b8bbff0c15d4a73","modified":1659407926472},{"_id":"source/404.md","hash":"d416f3e676513633b8c9c38fe2f978e567adb2f6","modified":1654161820010},{"_id":"source/CNAME","hash":"8a89dc1c75eec6ae663e7fa7fd9c2817b94a69fc","modified":1657617609420},{"_id":"source/.DS_Store","hash":"51821f20b05b8e10b875b2350b8367cbdc8c59c0","modified":1659974809593},{"_id":"source/.obsidian/community-plugins.json","hash":"79563bac806e528961b57ca4f8dd4583a3f6fb2d","modified":1659407928013},{"_id":"source/.obsidian/.DS_Store","hash":"c04ea4355e4a936015021e65e054d824d191e6ec","modified":1657091224530},{"_id":"source/.obsidian/app.json","hash":"473cac812b94207690a8dc4c3dc4557adb4afe76","modified":1659407926465},{"_id":"source/.obsidian/graph.json","hash":"4bf1725f155e159d2ad6702095492371032fc17e","modified":1657598533620},{"_id":"source/.obsidian/core-plugins.json","hash":"c4f578cacb019c215163db7815100d0ed1a82dd3","modified":1659407927683},{"_id":"source/.obsidian/global-search.json","hash":"8fb14cef13481482281ec4d61ba3d073b2ba537a","modified":1658278230000},{"_id":"source/_posts/.DS_Store","hash":"6299d2ba66af1425c2318f3f88f68c164d66ede6","modified":1659591272548},{"_id":"source/.obsidian/hotkeys.json","hash":"3cf8ba0b74ffcc98fb0b1f332743ea3510095312","modified":1658938562280},{"_id":"source/.obsidian/page-preview.json","hash":"0e11053059eccd7fcd84ab8c0a5cf6ab8e2f1916","modified":1649998498820},{"_id":"source/_posts/🏡 Home.md","hash":"b6da1a7e365fa2de081d68746b63db153a3188d4","modified":1659407635014},{"_id":"source/.obsidian/workspace","hash":"1edc668cc81d3d85e729aad8e3336f1c51984816","modified":1659407934000},{"_id":"source/.obsidian/templates.json","hash":"77b3f7fd248e31d1bb08efd8e8a4edf3b872e2e5","modified":1652844232240},{"_id":"source/.git/config","hash":"39ea9ba27b7bdecded78b81032f6b579f4f5997f","modified":1657601409730},{"_id":"source/.git/index","hash":"95550c1793dba6218e3dee12b136a1c1dbf506f1","modified":1659355027819},{"_id":"source/contact/index.md","hash":"543e39afa39588a1c4cec1a9060dcf19fb8f2c2d","modified":1654164494260},{"_id":"source/.git/COMMIT_EDITMSG","hash":"9c04e6235506644fc5e44d26d22d5207375ac7e8","modified":1659355027832},{"_id":"source/about/index.md","hash":"88f13f97a2f066c2fd3031176062a8b1b9b2ec27","modified":1655631363630},{"_id":"source/categories/index.md","hash":"d99eaf9ff3a2febd0b31eb394e49b043f7139bcf","modified":1654159563270},{"_id":"source/.obsidian/snippets/color-Heading.css","hash":"5d4462671e80c31b952ed27e4cef3e8d18f0a58f","modified":1627806803000},{"_id":"source/_posts/.obsidian/app.json","hash":"ad001769c49663b0d6d8e447f9e16955b7db5876","modified":1658975535683},{"_id":"source/tags/index.md","hash":"9897e22b3e10cb380eacc82eed0f1267b00ea810","modified":1654159603490},{"_id":"source/_posts/.obsidian/workspace","hash":"72ac2dfec41540309dc33beb2ba8d2911a981851","modified":1658975535743},{"_id":"source/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1657598185000},{"_id":"source/_posts/.git/config","hash":"40060afe37ce847ba4f87d86c2a40806e2e151c3","modified":1659354240519},{"_id":"source/.trash/18.完全背包理论基础 2.md","hash":"8a0b95c05cb3c97970edbbc4853fd8f3d171c5c8","modified":1659353045149},{"_id":"source/_posts/.obsidian/hotkeys.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1656145201990},{"_id":"source/_posts/👨🏻‍🎓科研/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1656993701030},{"_id":"source/_posts/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1659354240511},{"_id":"source/_posts/.obsidian/core-plugins.json","hash":"976d952b62e40a1e700ad1d8709b7825e468e629","modified":1658975535186},{"_id":"source/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1657598185000},{"_id":"source/_posts/.obsidian/appearance.json","hash":"57c7c8fb67fd5761836fc0773a72310caea2c6d6","modified":1658975535703},{"_id":"source/_posts/👨🏻‍🎓科研/切割材料+制样.md","hash":"75a61d6fd95186fffbeae076edf099d655ddfb65","modified":1657616534270},{"_id":"source/_posts/👨🏻‍🎓科研/科研材料总结.md","hash":"269e238822b61de304f3fe6e39841029e398417e","modified":1657616534260},{"_id":"source/_posts/👨🏻‍🎓科研/材料内部结构.md","hash":"4552717815a1e7732e2b6bded53823c7de3ab8a6","modified":1657616534260},{"_id":"source/_posts/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1659354240516},{"_id":"source/.obsidian/themes/Clair de Lune.css","hash":"a9108f1432459d3677b03568b708a405a6ba0c64","modified":1650186098980},{"_id":"source/_posts/.git/sourcetreeconfig","hash":"f3d12ac680c0158ae72a573f3da7609bd5fc6be0","modified":1659420672375},{"_id":"source/_posts/👨🏻‍🎓科研/退火.md","hash":"1636c3c0aee364c71f45580c2d4657d543e4b69a","modified":1657616534270},{"_id":"source/.obsidian/themes/Atom.css","hash":"b2d68016b4757e113b4e0f26dc76158a29e71858","modified":1650186030920},{"_id":"source/.obsidian/themes/Comfort Smooth.css","hash":"4c141df23c5a69559f869de150f1a61d110a49bd","modified":1654765549870},{"_id":"source/.obsidian/themes/Dracula for Obsidian.css","hash":"dcba5626b1aaf4bb2119b1733af5f93f2f6c5726","modified":1650185346050},{"_id":"source/.obsidian/themes/Deep Work.css","hash":"926340fde407959c7eff522e2d1b2c47b40bb084","modified":1650107541750},{"_id":"source/.obsidian/themes/Everforest.css","hash":"a4d546d7b76161c78bcb56d521a45fe0afe8e368","modified":1650108714770},{"_id":"source/.obsidian/themes/Night Owl.css","hash":"f5e20d3f3f69a181ff000cf5b9a4925cd3acaebb","modified":1650186109630},{"_id":"source/.obsidian/themes/Obsidian Nord.css","hash":"b4c93d44aaf75751c9b563b400ed70a6dce53eee","modified":1650185971880},{"_id":"source/.obsidian/themes/Obsidian You.css","hash":"0b52a5b202112c3a4ecc6218c5dfc03e49498742","modified":1650108741610},{"_id":"source/.obsidian/themes/Obsidianite.css","hash":"b357e706c59af9306fa851b243262ee11088802a","modified":1650186046030},{"_id":"source/.obsidian/themes/Notation.css","hash":"8462a837e83760d66205bcae075bf3a7907337a7","modified":1650185087800},{"_id":"source/.obsidian/themes/Obsidian gruvbox.css","hash":"f896ede02a7a66713d5d1e1d515d96495b619ac8","modified":1650108693340},{"_id":"source/.obsidian/themes/Spectrum.css","hash":"a82d448d0344beb7eff8dfe6f623a545637347fb","modified":1650186110390},{"_id":"source/_posts/👨🏻‍🎓科研/实验设计.md","hash":"fcf5136f1ab0565f127179e9ff84df0648a137bc","modified":1657616534260},{"_id":"source/.obsidian/themes/Pine Forest Berry.css","hash":"e376f400a84e0babb12325f6fd754732e07a53c0","modified":1650185179700},{"_id":"source/_posts/👨🏻‍🎓科研/纯铝的性能指标.md","hash":"f6a323b9847fdb231a586688fc1afd6501a986e7","modified":1657616534270},{"_id":"source/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1657598185000},{"_id":"source/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1657598185000},{"_id":"source/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1657598185000},{"_id":"source/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1657598185000},{"_id":"source/_posts/🏫学校/.DS_Store","hash":"c14029c891ad6836b4bf93f22df8027ea2eb5ae1","modified":1659352515964},{"_id":"source/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1657598185000},{"_id":"source/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1657598185000},{"_id":"source/.obsidian/plugins/.DS_Store","hash":"57b1806bd91e6cbfc1e5e3b8ca2e5e26433fb8ca","modified":1657091393120},{"_id":"source/.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1657598185000},{"_id":"source/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1657598185000},{"_id":"source/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1657598185000},{"_id":"source/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1657598185000},{"_id":"source/.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1657598185000},{"_id":"source/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1657598185000},{"_id":"source/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1657598185000},{"_id":"source/_posts/🚀技能/PPT技巧-文字高亮.md","hash":"05b3217330b2f1178d88e94a046ff952d12854f5","modified":1657616534270},{"_id":"source/_posts/🚀技能/.DS_Store","hash":"a9ac03f4b7632123b32fa89b2ff51fece1984747","modified":1659352515963},{"_id":"source/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1657598185000},{"_id":"source/.git/logs/HEAD","hash":"2f398000e21677369408e149fa2f9f0416460423","modified":1657600939910},{"_id":"source/_posts/🚀技能/BAB.md","hash":"401d9c08272277faf6e78c1a8507ffb85305301a","modified":1659718609983},{"_id":"source/_posts/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1659354240511},{"_id":"source/_posts/🚀技能/网易云本地音乐怎么添加歌词.md","hash":"3bc4aeef54dd223ad129497146ea9ff939c445c6","modified":1658975210529},{"_id":"source/_posts/🚀技能/LaTex公式.md","hash":"a4a42f213a016363c0c6c30214808c7da7907216","modified":1659592226594},{"_id":"source/_posts/👨🏻‍💻code/.DS_Store","hash":"15dd64e991e24fe8e3c94939c78fb10299dbdadc","modified":1659353120956},{"_id":"source/_posts/🚀技能/罗技G502 显示停用的解决办法.md","hash":"4f400df339374bf59ca7e056193ebd42b22c325f","modified":1659591310332},{"_id":"source/_posts/.git/co.gitup.mac/snapshots.data","hash":"3864168225da65c635e0b07bdde5b7e126006f99","modified":1659354257935},{"_id":"source/_posts/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1659354240514},{"_id":"source/_posts/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1659354240512},{"_id":"source/_posts/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1659354240512},{"_id":"source/_posts/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1659354240511},{"_id":"source/_posts/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1659354240512},{"_id":"source/_posts/.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1659354240514},{"_id":"source/_posts/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1659354240513},{"_id":"source/_posts/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1659354240513},{"_id":"source/_posts/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1659354240512},{"_id":"source/_posts/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1659354240513},{"_id":"source/_posts/.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1659354240514},{"_id":"source/_posts/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1659354240513},{"_id":"source/_posts/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1659354240514},{"_id":"source/_posts/🏫学校/研究生考试/六级考试时间安排.md","hash":"e9d64ab4d53c70fdfd0f1cdb670fbd29a99ce379","modified":1657616534270},{"_id":"source/_posts/🏫学校/研究生考试/自然辩证法考试重点.md","hash":"69fd64ab0dbdd49621e81f85bce1fe387330275e","modified":1657616534270},{"_id":"source/_posts/🏫学校/研究生考试/最优化.md","hash":"c63a0fcc897315451070f6990de002a6c617440b","modified":1657616534270},{"_id":"source/.obsidian/plugins/ObsidianAnkiSync/manifest.json","hash":"56c5184ef27e3278ba7ce60965f1a0ddc24ab6f5","modified":1658283824000},{"_id":"source/_posts/🏫学校/研究生考试/英语口语.md","hash":"76d0937121b8dad7f90117198e3de271fb5c14b0","modified":1657616534270},{"_id":"source/.obsidian/plugins/ObsidianAnkiSync/data.json","hash":"47c71ab27b25ff871d21e6d6cc06bab26c3c6e57","modified":1658283910000},{"_id":"source/.obsidian/plugins/Enhanced-editing-0.5.2/data.json","hash":"58c6df9155454e6deb0bffedd016dcaccf8765a2","modified":1652711342050},{"_id":"source/.obsidian/plugins/Enhanced-editing-0.5.2/styles.css","hash":"dec0a3f79147141ade294634605fae8d4db73c4b","modified":1650200287000},{"_id":"source/.obsidian/plugins/Enhanced-editing-0.5.2/README.md","hash":"22aa0e3b52ef03517448a06b14929ab2c6e663de","modified":1650200287000},{"_id":"source/.obsidian/plugins/Enhanced-editing-0.5.2/manifest.json","hash":"374ac4100cb16d389448738ec6604beeac1e0aaa","modified":1650200287000},{"_id":"source/_posts/🏫学校/研究生考试/现代制造工程.md","hash":"c2168f071c16a69373c5772c3fb0f5c9c527ad6b","modified":1657616534270},{"_id":"source/.obsidian/plugins/better-word-count/main.js","hash":"474d6bda6d573b32e04a9c948debcada6d59a079","modified":1654434080940},{"_id":"source/.obsidian/plugins/better-word-count/manifest.json","hash":"b137ccae071b3e7389021cb51ddf4777eeb144fd","modified":1654434079080},{"_id":"source/.obsidian/plugins/cm-editor-syntax-highlight-obsidian/styles.css","hash":"bf4c2be6551315ccdc8afd273712309e804bd85f","modified":1650184022980},{"_id":"source/.obsidian/plugins/cmenu-plugin/data.json","hash":"7c768e3f08174d10e4eaa0a6257e9e420defd8a4","modified":1658824420760},{"_id":"source/.obsidian/plugins/cm-editor-syntax-highlight-obsidian/manifest.json","hash":"d6aa6760155722fc07c7af078b2ffdfc76ec56dc","modified":1650184013370},{"_id":"source/.obsidian/plugins/cmenu-plugin/manifest.json","hash":"6b6a5aa4ddcd6842382c2747f0aee2f1a2fbcd5d","modified":1650186746520},{"_id":"source/.obsidian/plugins/copy-as-latex/manifest.json","hash":"4b0b1fdbbb8f7aa2fa79fbc8a60f7b80630c035c","modified":1658825043880},{"_id":"source/.obsidian/plugins/cmenu-plugin/styles.css","hash":"de7ccd5024e883fcf679d413811a1ddeae580d8b","modified":1650186766920},{"_id":"source/.obsidian/plugins/customizable-menu/data.json","hash":"2785e0f2ffaa5fc615f24af474351d042b7b7bc7","modified":1658938503670},{"_id":"source/.obsidian/plugins/customizable-menu/styles.css","hash":"8a76b653e45d6ad9e3b7ab9e51b63f66ea6dc3a2","modified":1658140974000},{"_id":"source/.obsidian/plugins/darlal-switcher-plus/manifest.json","hash":"99013c45a821cceb87278f7e9a97e4314aaf6376","modified":1655367660510},{"_id":"source/.obsidian/plugins/customizable-menu/manifest.json","hash":"c7043137e3966e794de00dd564cd7b71992d9100","modified":1658140972000},{"_id":"source/.obsidian/plugins/darlal-switcher-plus/styles.css","hash":"28ce7d4b5e838c5a4a6df56d0127d7c632cfada7","modified":1655367663270},{"_id":"source/.obsidian/plugins/code-block-copy/main.js","hash":"2e3f1c8abda3b0f2b85ee37f44a3f2e063680b6a","modified":1653720341350},{"_id":"source/.obsidian/plugins/copy-as-html/manifest.json","hash":"944e53015a5a927a2acb13b78270c35bc51bf616","modified":1653987282250},{"_id":"source/.obsidian/plugins/code-block-copy/manifest.json","hash":"d23c922f9ea6db2421fa96721dd05280caf64e9d","modified":1653720341040},{"_id":"source/.obsidian/plugins/code-block-copy/styles.css","hash":"598779a78964f7b052268c520683165d9ed8ad5b","modified":1653720341600},{"_id":"source/.obsidian/plugins/customizable-sidebar/data.json","hash":"96fe9b672fb018e47502c8be0f1099acbe540420","modified":1657090960670},{"_id":"source/.obsidian/plugins/easy-typing-obsidian/data.json","hash":"fab0ef1df3a462618e10d886c155d09d53b70dad","modified":1650962784970},{"_id":"source/.obsidian/plugins/customizable-sidebar/styles.css","hash":"4b32dad31dcb935e99eb1688f4bc2a77230423e6","modified":1653273924910},{"_id":"source/.obsidian/plugins/customizable-sidebar/manifest.json","hash":"1a999b1186ec8ff70506fb6773e4392c94dab582","modified":1653273922670},{"_id":"source/.obsidian/plugins/easy-typing-obsidian/manifest.json","hash":"01180beb009527ba0b00ab8abb0bc730123424e3","modified":1650956631270},{"_id":"source/.obsidian/plugins/flashcards-obsidian/data.json","hash":"83fcc55e7dd2453510d81d3f4749b2e988904ca9","modified":1658804753830},{"_id":"source/.obsidian/plugins/dataview/manifest.json","hash":"a9768ade73e489b0435238c2471a45775b8a24f0","modified":1652531525990},{"_id":"source/.obsidian/plugins/dataview/styles.css","hash":"0e82ba9935e7cde551735c1e0465f5ef89b21d00","modified":1652531531410},{"_id":"source/.obsidian/plugins/flashcards-obsidian/manifest.json","hash":"6ce816ecccbf7e7c53c005ea12265c89043a5e35","modified":1658284284000},{"_id":"source/.obsidian/plugins/file-explorer-note-count/manifest.json","hash":"3f5c855e7acc6578b6399db490d892d42b16bba3","modified":1649999743920},{"_id":"source/.obsidian/plugins/file-explorer-note-count/styles.css","hash":"66df9d179042c88e810fac5dc184065f6b8deeaa","modified":1649999746870},{"_id":"source/.obsidian/plugins/file-tree-alternative/data.json","hash":"1421ea3b353a6366a70a0b2b3db4ea4878da0d9f","modified":1659407927664},{"_id":"source/.obsidian/plugins/file-tree-alternative/styles.css","hash":"d2ab5cc72c1f63da8381e00f7d0e6e7016446126","modified":1658367982000},{"_id":"source/.obsidian/plugins/file-tree-alternative/manifest.json","hash":"3c41dd2d8c6261cd1ba4659d1dc38f7d4a9c9825","modified":1658367978000},{"_id":"source/.obsidian/plugins/digitalgarden/styles.css","hash":"42f311d7838922b143441939eeabadef696ec4ee","modified":1653297571070},{"_id":"source/.obsidian/plugins/digitalgarden/data.json","hash":"0cf04e4289179524d2b7dfc301a554465de2e902","modified":1654070947510},{"_id":"source/.obsidian/plugins/digitalgarden/manifest.json","hash":"648dab54b136f1e62dc40381cda6c02b4967d556","modified":1653297566280},{"_id":"source/.obsidian/plugins/homepage/data.json","hash":"8ea6643b1599fcdd91e5c3647dbfcbb5e11de683","modified":1658968556430},{"_id":"source/.obsidian/plugins/homepage/manifest.json","hash":"0ea555ab1e8e508a59fb839ec1aaca2fae07e9d9","modified":1655871356150},{"_id":"source/.obsidian/plugins/lapel/main.js","hash":"3f585884a4aa2a45b90a0fc6554e58a303b4af13","modified":1652355104860},{"_id":"source/.obsidian/plugins/lapel/styles.css","hash":"9a8bf6b9ef7945984dec8131866cc9cda0ed60eb","modified":1652355106240},{"_id":"source/.obsidian/plugins/lapel/data.json","hash":"3719789b358fea0a82dfd7aeee30007dec8ff4ba","modified":1652363333530},{"_id":"source/.obsidian/plugins/lapel/manifest.json","hash":"9e9d91bf1b4a7d8a36f43b4ed3f6b2bfde056769","modified":1652355103460},{"_id":"source/.obsidian/plugins/marginnote-companion/data.json","hash":"e88dd33beb8ea82ffc2e02d3ce80fe064aa2563d","modified":1653985828290},{"_id":"source/.obsidian/plugins/marginnote-companion/styles.css","hash":"aa161515a95e3db61442b49254099c65e6c09b15","modified":1653306511370},{"_id":"source/.obsidian/plugins/marginnote-companion/manifest.json","hash":"d8ba2172c0e4079c0b9c93f57187787f3f272883","modified":1653306507550},{"_id":"source/.obsidian/plugins/media-extended/data.json","hash":"d53b0ffca313888dae1998f3b48f9a37ec3e8ea8","modified":1655260796370},{"_id":"source/.obsidian/plugins/media-extended/styles.css","hash":"4c9bafb6f907753a26e423997ec8aeb0d14fca54","modified":1654824013250},{"_id":"source/.obsidian/plugins/media-extended/manifest.json","hash":"8ec08b22a96ee4efb40ec17510e6b69b8fdfc243","modified":1654824011090},{"_id":"source/.obsidian/plugins/highlightr-plugin/manifest.json","hash":"34a937d942ba5e73ed4a80f2e1904ec7c1587a3d","modified":1650614094570},{"_id":"source/.obsidian/plugins/highlightr-plugin/styles.css","hash":"d6da6f529b5da4a42e36344742444a44a3499334","modified":1650614097780},{"_id":"source/.obsidian/plugins/graph-analysis/manifest.json","hash":"423a3e40173e9b90e14bc42944a24e6ce85baabd","modified":1653273793140},{"_id":"source/.obsidian/plugins/mousewheel-image-zoom/data.json","hash":"f5527bcd77107e904cb7f98c9190e61a54d49960","modified":1654173243110},{"_id":"source/.obsidian/plugins/extract-url/manifest.json","hash":"2533cc35f2d3b6d0c62ef88e2842d1ded9a09ada","modified":1654825902370},{"_id":"source/.obsidian/plugins/notion-like-tables/manifest.json","hash":"7ff9644e6dca282a89fa81adcf1a0dfb73310c55","modified":1652355161620},{"_id":"source/.obsidian/plugins/notion-like-tables/styles.css","hash":"9d4da569c8d13c7cc792a61969272170013065af","modified":1652355206000},{"_id":"source/.obsidian/plugins/mousewheel-image-zoom/main.js","hash":"9b6cf502eec9fc80ac83547ea233d425d6a037fd","modified":1653278482770},{"_id":"source/.obsidian/plugins/mousewheel-image-zoom/manifest.json","hash":"47f3b131d3bbdd7fa7bcf0e3875f0d5d66dd4167","modified":1653278481720},{"_id":"source/.obsidian/plugins/number-headings-obsidian/styles.css","hash":"05abe2172fed7e455b676e187e884e1a8190c95b","modified":1652354672910},{"_id":"source/.obsidian/plugins/number-headings-obsidian/data.json","hash":"c314b8aac1d7d710ea22c0dd3d98c5f25bd5de0d","modified":1654569714620},{"_id":"source/.obsidian/plugins/mrj-text-expand/manifest.json","hash":"ee143a1300e775083cf7fa6f9a4765c254392f61","modified":1652709718080},{"_id":"source/.obsidian/plugins/obsidian-advanced-uri/data.json","hash":"2720fc16258aaed5f4d1a6f147fff5615b22a085","modified":1655264750950},{"_id":"source/.obsidian/plugins/obsidian-advanced-uri/manifest.json","hash":"4e3f2c3f27fbe79b8c44f1de5be93ed220496bcc","modified":1653290933710},{"_id":"source/.obsidian/plugins/number-headings-obsidian/manifest.json","hash":"e113e18ef96a112ece2c53e45ffca6667355a028","modified":1652354667280},{"_id":"source/.obsidian/plugins/note-refactor-obsidian/manifest.json","hash":"5a8934a71ece6d59611e1be660145d2dd22fef08","modified":1653273164120},{"_id":"source/.obsidian/plugins/obsidian-annotator/manifest.json","hash":"77e7a255797726bd525cda1af65083f95b04397d","modified":1650005471990},{"_id":"source/.obsidian/plugins/note-refactor-obsidian/styles.css","hash":"0a2fe4a3f6792f8bd7fdac30e51ae5378be83c41","modified":1653273167870},{"_id":"source/.obsidian/plugins/obsidian-auto-link-title/main.js","hash":"0c9d8c3645e138d712b8fa7dd789f39617cb3a9f","modified":1654826234650},{"_id":"source/.obsidian/plugins/obsidian-auto-link-title/manifest.json","hash":"d02a086357cdd3dab1cc16de98518f8c7cfb1179","modified":1654826233450},{"_id":"source/.obsidian/plugins/obsidian-auto-link-title/styles.css","hash":"ab566e8ba2a21c8f92b056d37e7d5264888c145a","modified":1654826235660},{"_id":"source/.obsidian/plugins/note-refactor-obsidian/data.json","hash":"d084fc6fcfc1ed60569cae001bfc475ff78395a9","modified":1655368991490},{"_id":"source/.obsidian/plugins/mx-bili-plugin/data.json","hash":"b16818544f51d78b302f451dba7a562dc957c5a7","modified":1658977565640},{"_id":"source/.obsidian/plugins/obsidian-code-block-enhancer/data.json","hash":"d38bb819bbd40fb91a782f490ba051c837d073aa","modified":1651564600170},{"_id":"source/.obsidian/plugins/obsidian-code-block-enhancer/styles.css","hash":"988edf7a76fda51a535aaf1db6a2ee4837a305f4","modified":1650613716790},{"_id":"source/.obsidian/plugins/mx-bili-plugin/manifest.json","hash":"5ba7724fd8d1a0026dae945c95285bece125c36a","modified":1653834970600},{"_id":"source/.obsidian/plugins/obsidian-code-block-enhancer/manifest.json","hash":"d9b858cc07aea2f8023a6517d2fc61302109d9c6","modified":1650613714280},{"_id":"source/.obsidian/plugins/obsidian-completr/styles.css","hash":"da2de970f6414fe3e7d86cb82ac2dd985a5b6235","modified":1658824566470},{"_id":"source/.obsidian/plugins/obsidian-completr/latex_commands.json","hash":"2d1403e72fc202a6401a57c0c5428ee73b04f2b6","modified":1658824568020},{"_id":"source/.obsidian/plugins/obsidian-completr/manifest.json","hash":"1ea4926cdd5a8662f0aa3f478b4cc8ccde222bcf","modified":1658824563210},{"_id":"source/.obsidian/plugins/obsidian-code-block-enhancer/main.js","hash":"94a44f4862c18ebef8573900457c0524bebec0ac","modified":1650613715600},{"_id":"source/.obsidian/plugins/obsidian-embedded-code-title/main.js","hash":"f51db2c52594e9fec990ab6803db2938e3490420","modified":1651131674500},{"_id":"source/.obsidian/plugins/obsidian-better-command-palette/manifest.json","hash":"51a3545a850eafb9640c6c7d1cfe66ce3065ace5","modified":1650956848150},{"_id":"source/.obsidian/plugins/obsidian-better-command-palette/main.js","hash":"d1a35c62c9813ae686e90fc24d9f4a9a21883c2d","modified":1650956849950},{"_id":"source/.obsidian/plugins/obsidian-completr/scanned_words.txt","hash":"c6d851b8f635583bd35b45dd6c80eb440f756a0f","modified":1659407927000},{"_id":"source/.obsidian/plugins/obsidian-better-command-palette/styles.css","hash":"f134bea71be1b84bcccbfc21d0166a25ceb0ce52","modified":1650956852150},{"_id":"source/.obsidian/plugins/obsidian-embedded-code-title/styles.css","hash":"295493fc97d0e413ae05122748a9e96013bee2e4","modified":1651131675800},{"_id":"source/.obsidian/plugins/obsidian-embedded-code-title/manifest.json","hash":"96f377911d217652094bd52f5c596aac4493ffc9","modified":1651131672390},{"_id":"source/.obsidian/plugins/obsidian-codemirror-options/data.json","hash":"8b2c3def256475791c7058c7bcc6ca5965ecdcea","modified":1650702768910},{"_id":"source/.obsidian/plugins/obsidian-codemirror-options/manifest.json","hash":"6189de2f324890a3caca0d82ae880ff686c06b49","modified":1650613949110},{"_id":"source/.obsidian/plugins/obsidian-copy-block-link/main.js","hash":"dae840df2639662b7b3d436f663a4ae035c21c14","modified":1653042685500},{"_id":"source/.obsidian/plugins/obsidian-copy-block-link/manifest.json","hash":"d37d3a7655711f17047bcb4cd337ce313cb922c6","modified":1653042684460},{"_id":"source/.obsidian/plugins/obsidian-codemirror-options/styles.css","hash":"e08f6d05e9d8cd5ed693f14f8dfd7f400c6e3e3e","modified":1650613953350},{"_id":"source/.obsidian/plugins/obsidian-columns/main.js","hash":"00cd9a26ae8c0b565632fe7d475538decf1aa3fb","modified":1651656663780},{"_id":"source/.obsidian/plugins/obsidian-excalidraw-plugin/data.json","hash":"6dec0ec58684621df6e73206e3ecb8dc09f81823","modified":1658968549350},{"_id":"source/.obsidian/plugins/obsidian-columns/manifest.json","hash":"02bfdc02e48b993535523e047de16ee9554cae58","modified":1651656663570},{"_id":"source/.obsidian/plugins/obsidian-columns/styles.css","hash":"00985162e1e3beeca99a26ddcbc69a3e595b1b99","modified":1651656664000},{"_id":"source/.obsidian/plugins/obsidian-find-and-replace-in-selection/manifest.json","hash":"d51fda3b780ef8ae226945ad2464d98ad7e2e8e1","modified":1658938361480},{"_id":"source/.obsidian/plugins/obsidian-excalidraw-plugin/styles.css","hash":"700d5b3c080b8826f1177c46df0b0531dc698704","modified":1658936431620},{"_id":"source/.obsidian/plugins/obsidian-excalidraw-plugin/manifest.json","hash":"ff80ec0a77b993637944e713bd63107b0e58f32c","modified":1658936429390},{"_id":"source/.obsidian/plugins/obsidian-find-and-replace-in-selection/main.js","hash":"77cc2989cbf705820493f143683a380a9321ef79","modified":1658938363390},{"_id":"source/.obsidian/plugins/obsidian-find-and-replace-in-selection/styles.css","hash":"923080fd67b34de71625da31b89488ee3bca3c34","modified":1658938364730},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin/styles.css","hash":"fc56bfa1f994825af28e1875c5e1f2550c30a031","modified":1648865752000},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin/manifest.json","hash":"1de40727b609574b035a6994685f60f8079f03f0","modified":1648865720000},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master 2/.DS_Store","hash":"b31022d24cafb499bc3e6322f2116f27daa1c212","modified":1654766233900},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master 2/.editorconfig","hash":"50a727ff530cc9014fbb26604d1ff99b82c21fca","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master 2/.gitignore","hash":"8badcad6284987e61e64b2eb928a6cabf9ca6635","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master 2/.eslintignore","hash":"8fb810eb69b952557ed450b1fc4b58ef7eefa650","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master 2/manifest.json","hash":"fc2abd732e3528051c123be46a2078cdff5f2c1f","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master 2/.eslintrc","hash":"0b3e050190384d747e6b3d911fc8d0ec1a72e24a","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master 2/README.md","hash":"a8f4684748205fa94b36eea34047b72e15fb1224","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master 2/esbuild.config.mjs","hash":"e6863fe0f322d4b44c39798205c1528f83659e48","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master 2/versions.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master 2/package.json","hash":"241aa5ba402964f69de8f81f0dcded2fd4fe04b7","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master 2/tsconfig.json","hash":"5c6991e24c8cf4cfd081c9300954b7560ef8d96b","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master 2/styles.css","hash":"cec8f6303b81029822367ce016cae862bbe8bed2","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-footnotes/manifest.json","hash":"7a2a1b85c405620d7200bf600234387c3e640b69","modified":1655085905550},{"_id":"source/.obsidian/plugins/obsidian-footnotes/styles.css","hash":"fdfeab728f6e2ea375114693d6b942bc3a245a01","modified":1655085906520},{"_id":"source/.obsidian/plugins/obsidian-git/manifest.json","hash":"f447dd2b89516b5788b9c39fd055ef0d1ea01931","modified":1657600320340},{"_id":"source/.obsidian/plugins/obsidian-footnotes/main.js","hash":"9648c81a3cbd063113a2fd7d13439f7665616a1e","modified":1655085906040},{"_id":"source/.obsidian/plugins/obsidian-git/data.json","hash":"c2b53320c1f7ad5a48818e0bf23e30432419924a","modified":1652530162210},{"_id":"source/.obsidian/plugins/obsidian-hider/manifest.json","hash":"bec906b9c8519ebc85a66dbc59c04a44191fdae3","modified":1649916427360},{"_id":"source/.obsidian/plugins/obsidian-hider/data.json","hash":"fcd73047317620e4186e00d9cb0df294822cd8ba","modified":1657610936320},{"_id":"source/.obsidian/plugins/obsidian-git/styles.css","hash":"9a1d304b69c7e8b551b35d177d11ab5c94b3479b","modified":1657600326280},{"_id":"source/.obsidian/plugins/obsidian-hider/main.js","hash":"8f6df37504b2775d030ab77852b96095be28f012","modified":1649916428970},{"_id":"source/.obsidian/plugins/obsidian-hider/styles.css","hash":"1458548d0d2802dc1102ba4acfd5c47132342934","modified":1649916431450},{"_id":"source/.obsidian/plugins/obsidian-hover-editor/styles.css","hash":"39accc9df158adc5fcb1d93302750eca595b9eb9","modified":1657700490650},{"_id":"source/.obsidian/plugins/obsidian-hover-editor/data.json","hash":"b1dcbc6b08a1a69cccc6885845111b96309ca94b","modified":1650342574500},{"_id":"source/.obsidian/plugins/obsidian-hover-editor/manifest.json","hash":"45012b971761166f9b66ed6fbe56c93edf15f284","modified":1657700484410},{"_id":"source/.obsidian/plugins/obsidian-hypothesis-plugin/data.json","hash":"7f5d6eadf84062f5d5d5368385fbfd2bbc2330ea","modified":1652709805610},{"_id":"source/.obsidian/plugins/obsidian-hypothesis-plugin/manifest.json","hash":"bd2db4360ed2b66dec3c414835ee720f13b6a01b","modified":1652528344480},{"_id":"source/.obsidian/plugins/obsidian-file-link/manifest.json","hash":"6a261d04ee1c77e503b6caba0242b463d2944ec0","modified":1656583538850},{"_id":"source/.obsidian/plugins/obsidian-image-auto-upload-plugin/manifest.json","hash":"519b3fb108c10d2d08024a79f7d6e1f1cce794ce","modified":1653557660550},{"_id":"source/.obsidian/plugins/obsidian-image-auto-upload-plugin/data.json","hash":"393a0ea701dd66d9283b002ecf142da8f3a6526b","modified":1658142110000},{"_id":"source/.obsidian/plugins/obsidian-file-link/main.js","hash":"8ba2e06470c368f0f62bdda0a86fbe32c127f46b","modified":1656583540370},{"_id":"source/.obsidian/plugins/obsidian-imgur-plugin/data.json","hash":"cf53174ad08961d259be1bb4740091fcf49ba607","modified":1658142078000},{"_id":"source/.obsidian/plugins/obsidian-latex-environments/manifest.json","hash":"432f354276f3cf2b688341badecee048b083fbb7","modified":1658824819100},{"_id":"source/.obsidian/plugins/obsidian-imgur-plugin/main.js","hash":"4ff322e8f9c27852bc9d709afefc58d5a1dcaaf5","modified":1653987458910},{"_id":"source/.obsidian/plugins/obsidian-imgur-plugin/manifest.json","hash":"3f051432c4256dc6b42d560da5d745fbf6c00b17","modified":1653987457150},{"_id":"source/.obsidian/plugins/obsidian-kanban/styles.css","hash":"c44a1c5abf7176ef4e8600d1db1f1e1377c477c8","modified":1652711128090},{"_id":"source/.obsidian/plugins/obsidian-kanban/manifest.json","hash":"8768f8bc5eddb753accd1d6097d59ae04635d139","modified":1652711124870},{"_id":"source/.obsidian/plugins/obsidian-image-toolkit/manifest.json","hash":"86117823500ee975a6d9f261b7618f5b2188d35d","modified":1655908147120},{"_id":"source/.obsidian/plugins/obsidian-latex-environments/main.js","hash":"da3aaf7b767645b94db958c130c98c93381a18ca","modified":1658824820410},{"_id":"source/.obsidian/plugins/obsidian-minimal-settings/data.json","hash":"2d1f79b9cac48dfcc03d44837f26a3ac6d17c87b","modified":1659407925487},{"_id":"source/.obsidian/plugins/obsidian-mind-map/manifest.json","hash":"c20e6d31d855e79e6345f69b64e1252a13fcda39","modified":1657002579420},{"_id":"source/.obsidian/plugins/obsidian-mind-map/data.json","hash":"8028f4cf4f859e45f81e438b7eac5191b5c340a0","modified":1657002817350},{"_id":"source/.obsidian/plugins/obsidian-image-toolkit/styles.css","hash":"49f104ee3b65554be832aee1c7681362c1167501","modified":1655908151190},{"_id":"source/.obsidian/plugins/obsidian-minimal-settings/styles.css","hash":"6c7eebc3fb3a5cfa60e866cf00d8b3f5abb634a6","modified":1649916449890},{"_id":"source/.obsidian/plugins/obsidian-minimal-settings/manifest.json","hash":"b469f2cbf006d80cd237e32d8ba1b963bd7ed0d7","modified":1649916445500},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master/.eslintignore","hash":"8fb810eb69b952557ed450b1fc4b58ef7eefa650","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master/.eslintrc","hash":"0b3e050190384d747e6b3d911fc8d0ec1a72e24a","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master/.editorconfig","hash":"50a727ff530cc9014fbb26604d1ff99b82c21fca","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master/.gitignore","hash":"8badcad6284987e61e64b2eb928a6cabf9ca6635","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master/README.md","hash":"a8f4684748205fa94b36eea34047b72e15fb1224","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master/esbuild.config.mjs","hash":"e6863fe0f322d4b44c39798205c1528f83659e48","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master/package.json","hash":"241aa5ba402964f69de8f81f0dcded2fd4fe04b7","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master/styles.css","hash":"cec8f6303b81029822367ce016cae862bbe8bed2","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master/versions.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-pandoc/data.json","hash":"beecc71d1e8680b3b3a7f97cec2b500275dd36fe","modified":1650353781250},{"_id":"source/.obsidian/plugins/obsidian-pandoc/manifest.json","hash":"d4a4ca7af5f34800e39bb52fd6fb1ac5d79edb0e","modified":1649999774410},{"_id":"source/.obsidian/plugins/obsidian-pandoc/styles.css","hash":"8842ddb1014c9dc7d2c1026e2fc42b5f6f4924eb","modified":1649999776120},{"_id":"source/.obsidian/plugins/obsidian-read-it-later/data.json","hash":"f03566d0f0af550fc684b133c956047b5e30fcc1","modified":1651655169110},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master/manifest.json","hash":"fc2abd732e3528051c123be46a2078cdff5f2c1f","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master/tsconfig.json","hash":"5c6991e24c8cf4cfd081c9300954b7560ef8d96b","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-sidebar-expand-on-hover/manifest.json","hash":"5f645da99f033d94737053f915b8c8b1cb474ee7","modified":1658141242000},{"_id":"source/.obsidian/plugins/obsidian-sidebar-expand-on-hover/data.json","hash":"28b9470bed7c23ef736079a068a130c6d1e10aac","modified":1659407928087},{"_id":"source/.obsidian/plugins/obsidian-sidebar-expand-on-hover/main.js","hash":"cba0d89d02b6d3ebb34f752255bf0918fd87b01a","modified":1658141242000},{"_id":"source/.obsidian/plugins/obsidian-read-it-later/manifest.json","hash":"fcba2b89a59110ed222a162aa471c1624513195d","modified":1651655103500},{"_id":"source/.obsidian/plugins/obsidian-sidekick/manifest.json","hash":"c5689a3a675531ede45b4e97583f24775b595508","modified":1650940530500},{"_id":"source/.obsidian/plugins/obsidian-spaced-repetition/data.json","hash":"9f24a3ca62ef205eae9eb9ee6f83b6423d1348aa","modified":1653284724530},{"_id":"source/.obsidian/plugins/obsidian-spaced-repetition/styles.css","hash":"82d5a89784380c0395fdb350c3dd2e0c24673983","modified":1653273177120},{"_id":"source/.obsidian/plugins/obsidian-tasks-plugin/manifest.json","hash":"23b02920072495edb745d1b7f9e7efb0ea75137f","modified":1652531606020},{"_id":"source/.obsidian/plugins/obsidian-tasks-plugin/styles.css","hash":"585564ffe7b7bac37125c1b2af04af006be90724","modified":1652531609820},{"_id":"source/.obsidian/plugins/obsidian-spaced-repetition/manifest.json","hash":"553589ea5cd5a8f05f5da051ee3915cd3d19bda9","modified":1653273172990},{"_id":"source/.obsidian/plugins/obsidian-zoom/manifest.json","hash":"bf86feea36a8017e7a3e8fd4404dd22195bfaca4","modified":1651564061700},{"_id":"source/.obsidian/plugins/obsidian-style-settings/data.json","hash":"c1319d290757051f7c45c828511c9205c2b89209","modified":1652359976190},{"_id":"source/.obsidian/plugins/obsidian-style-settings/manifest.json","hash":"b9d32ca7e33e3d8b17df60e9400c8726d1e10147","modified":1650702225500},{"_id":"source/.obsidian/plugins/obsidian-zoom/data.json","hash":"a2e478091c1a3c425fd38e18c573d5a7aeae0e1a","modified":1655347119010},{"_id":"source/.obsidian/plugins/obsidian-style-settings/styles.css","hash":"b6caa76098da9d3b85b7b14724e883e28081f42c","modified":1650702228070},{"_id":"source/.obsidian/plugins/obsidian-tidy-footnotes/manifest.json","hash":"aca37014d85b3b1d437cdeef88b738a1315c4f97","modified":1655085897020},{"_id":"source/.obsidian/plugins/obsidian-zoom/styles.css","hash":"0e25642558775cb485fcf28e526d138153729f77","modified":1651564064340},{"_id":"source/.obsidian/plugins/obsidian-to-anki-plugin/styles.css","hash":"d6d967c75f70db8835a30f868fd163357e5e1c39","modified":1658244306000},{"_id":"source/.obsidian/plugins/obsidian-to-anki-plugin/manifest.json","hash":"2f950f457c7e741a0260fe485d0b6bde9fb3381f","modified":1658244290000},{"_id":"source/.obsidian/plugins/obsidian-outliner/data.json","hash":"5e98a6d115b1c73766acad5c91f40771f8fb6c0d","modified":1651563301500},{"_id":"source/.obsidian/plugins/obsidian-tidy-footnotes/main.js","hash":"22ce204509caa6b663e9658825f77588ae2f12a4","modified":1655085898000},{"_id":"source/.obsidian/plugins/obsius-publish/data.json","hash":"067115301d8c8071f86af8b57b80dc38ecc0d8f5","modified":1653296929190},{"_id":"source/.obsidian/plugins/obsidian-outliner/styles.css","hash":"466ac6c67f95ea5bfbb07c04ec902dff37abaacd","modified":1651563185400},{"_id":"source/.obsidian/plugins/obsidian-outliner/manifest.json","hash":"15afe26dba005d6db4fb1bfc1805ba6664496088","modified":1651563182480},{"_id":"source/.obsidian/plugins/obsius-publish/manifest.json","hash":"384ef9e1cab632f2ee03829e325f05e42747f906","modified":1653296828000},{"_id":"source/.obsidian/plugins/obsidian42-text-transporter/styles.css","hash":"b858cb282617fb0956d960215c8e84d1ccf909c6","modified":1653042976390},{"_id":"source/.obsidian/plugins/obsidian42-text-transporter/manifest.json","hash":"955b0654685c8c0c29a7cc0f0f676288eebb0116","modified":1653042973760},{"_id":"source/.obsidian/plugins/obsius-publish/main.js","hash":"b9e35733ef2656a27635dca9530ff3391dbc1407","modified":1653296829030},{"_id":"source/.obsidian/plugins/oz-clear-unused-images/manifest.json","hash":"dc8b2f6d9419ce16647e6415d57c8b4b38a85a7c","modified":1653313773050},{"_id":"source/.obsidian/plugins/oz-clear-unused-images/data.json","hash":"ae17b55a2f30011f919ca7ec005502376909927a","modified":1654765507730},{"_id":"source/.obsidian/plugins/oz-clear-unused-images/main.js","hash":"5d087bc5768a7c7889e14ca575b6e3fa52cfd194","modified":1653313774370},{"_id":"source/.obsidian/plugins/oz-clear-unused-images/styles.css","hash":"694f91afc8815562c0ef05758991db9724da6d83","modified":1653313775600},{"_id":"source/.obsidian/plugins/quickadd/manifest.json","hash":"8669a58b4e489cf144b83c4113013006f72568a1","modified":1649916480440},{"_id":"source/.obsidian/plugins/quickadd/data.json","hash":"72bf3f2defe941490d76ee6588124f4b0370eb73","modified":1659407925496},{"_id":"source/.obsidian/plugins/quickadd/styles.css","hash":"aa4cbb881bb026aefa32644f5e9d443ebc423a0c","modified":1649916485960},{"_id":"source/.obsidian/plugins/recent-files-obsidian/manifest.json","hash":"9eceda20b71c89721b6202085efa803bdc80992e","modified":1649999761910},{"_id":"source/.obsidian/plugins/remember-cursor-position/cursor-positions.json","hash":"875654da2cec5e2a79b46535461ce63c6ac81d92","modified":1659407934000},{"_id":"source/.obsidian/plugins/recent-files-obsidian/styles.css","hash":"0ca564bbfea827b1b24737da3d1ee21e4b968a5d","modified":1649999763500},{"_id":"source/.obsidian/plugins/recent-files-obsidian/data.json","hash":"3f5d81eecb082b834c38beb9120cd3b6f5af6643","modified":1659407927000},{"_id":"source/.obsidian/plugins/table-extended/manifest.json","hash":"fb9c083b8422b610b8e3b50a43e086050434b7be","modified":1656934932000},{"_id":"source/.obsidian/plugins/remember-cursor-position/data.json","hash":"209c67ee52080bf0d2c1379d4ce09f1765c3cc10","modified":1650012917250},{"_id":"source/.obsidian/plugins/remember-cursor-position/manifest.json","hash":"78c9e3291d13894015601b6dcf15a3baa11f4a85","modified":1650012785620},{"_id":"source/.obsidian/plugins/remember-cursor-position/main.js","hash":"6793b4da057b74d8b8b273982239893b7e9521db","modified":1650012785770},{"_id":"source/.obsidian/plugins/sliding-panes-obsidian/manifest.json","hash":"da8a1d3a83f0bab182f4e57f1d648373745b86f2","modified":1657012265110},{"_id":"source/.obsidian/plugins/table-editor-obsidian/manifest.json","hash":"8582f8f37addbcfd3eed48e5470b1b1d28a5fd9c","modified":1657613670440},{"_id":"source/.obsidian/plugins/sliding-panes-obsidian/styles.css","hash":"9ba5c0be939b940fbb84b56e0339401e97167fec","modified":1657012271900},{"_id":"source/.obsidian/plugins/table-editor-obsidian/data.json","hash":"94c879cd5c6a819bd39c4de9d25919dcf08764a0","modified":1659407926876},{"_id":"source/.obsidian/plugins/table-editor-obsidian/styles.css","hash":"9a623ac4d888f18c3d0c4d5e57f3dd6ae4654c24","modified":1657613670920},{"_id":"source/.obsidian/plugins/quick-latex/manifest.json","hash":"c7cba3dee26f9326731aad76c33803ba078e300c","modified":1658824954390},{"_id":"source/.obsidian/plugins/tag-wrangler/manifest.json","hash":"dcc2926e5ec7f40fe907bdd84314e9c7b09fd10f","modified":1658278206000},{"_id":"source/.obsidian/plugins/tag-wrangler/styles.css","hash":"34335c37789f16e580c3a786c5b4d618e02aa2e0","modified":1658278212000},{"_id":"source/.obsidian/plugins/url-into-selection/manifest.json","hash":"fe08e09046dff13d2eac92d68a4d773b172cad3f","modified":1653568630840},{"_id":"source/.obsidian/plugins/templater-obsidian/data.json","hash":"d6c33be71684584157b2f1310303a8caac629dfc","modified":1658937707610},{"_id":"source/.obsidian/plugins/templater-obsidian/manifest.json","hash":"38f94f2ae56fd6db4d6b0ca321f0473e38e7cc9e","modified":1654056686110},{"_id":"source/_posts/🚀技能/obsidian/obsidian flashcard 插件.md","hash":"a71759705a58812acd81debd8090cc75692b7da0","modified":1659591691974},{"_id":"source/.obsidian/plugins/templater-obsidian/styles.css","hash":"60ec0953d74fba5a32c22fbae69d4a01d1880f05","modified":1654056688760},{"_id":"source/_posts/🚀技能/obsidian/obsidian media 插件.md","hash":"6f406d68d4d5be36d688d16d70d3cd758e000e60","modified":1659591942722},{"_id":"source/_posts/🚀技能/obsidian/obsidian templater 插件.md","hash":"ad2c94f9fb782d9845931823de12fe02c99a4bfb","modified":1659591923780},{"_id":"source/_posts/🚀技能/notion/notion函数公式.md","hash":"5dd329bb52e88ebb4788aeac88250ee33a1c6830","modified":1657616534270},{"_id":"source/_posts/🚀技能/notion/notion函数详解.md","hash":"8220d69edddf7e794f2726e89f3fd37430f5b2d3","modified":1657616534270},{"_id":"source/.obsidian/plugins/various-complements/data.json","hash":"e15c14737b0083a0008d2602d231bd0e8169866e","modified":1655256819620},{"_id":"source/.obsidian/plugins/various-complements/styles.css","hash":"905e8d4a6bf4d48b5fb4b39ff26d35e62a66a27d","modified":1652522173620},{"_id":"source/.obsidian/plugins/various-complements/manifest.json","hash":"4a3ca2c0d4d08e68d5b6abb9effb7f892ab2bf16","modified":1652522168880},{"_id":"source/.git/objects/01/654994e7d2526d3687dbeaa13a3abc78a45a63","hash":"94de14efae7f1b50d59a86cb6b0dcc5a82787287","modified":1657600939900},{"_id":"source/.git/objects/02/38b246f340d5bad734e12e022696cf8145fdf8","hash":"f2c7b3b7e07b6bde4d65088b57117aaef6371c33","modified":1657598920490},{"_id":"source/.git/objects/00/0ae4ee7bfccddab7e74f0ee00d2310736f9fd3","hash":"c285f4e26705f6dc354b7bbbafa76e6907f15943","modified":1657598920500},{"_id":"source/.git/objects/01/8c4ccf61278b0596ecb032145c54dfb34edfc4","hash":"4dc7ab45d23387d58ebb4ec917a0aa3457dc81ff","modified":1657598920500},{"_id":"source/.git/objects/00/9c08e962ac2a40ace6d0f2349b4a26d8b2c0cd","hash":"63d2be310be0b60ec59930a9248d636a8ed01a42","modified":1657598920480},{"_id":"source/.git/objects/0a/3956818e3bec8987f71b6481051a725b95c26e","hash":"99ca1500621bcc9a5c8d566eee2fff4b42c748d4","modified":1657598920490},{"_id":"source/.git/objects/09/6e4d5e123c2ce5ed3d271e423e667a0875d0b8","hash":"fb9a47df7c4b759014562e4b9363eca682342440","modified":1657598920510},{"_id":"source/.git/objects/08/4345e0336e1fed874accfe741bc1ca8e5abc9f","hash":"df151da2832797afdc6f348789c5963187a82608","modified":1657598920490},{"_id":"source/.git/objects/11/75b794005a37252dfe404ce26bfcd604733a04","hash":"9c5f8fffb382224db849ab261be4b1daf2755362","modified":1657599135340},{"_id":"source/.git/objects/26/c291841efdf638fb65e2d0e164bb197d049825","hash":"dcd6b6abc6ea5490a5585caee7ba17c6984fc3f5","modified":1657599135340},{"_id":"source/.git/objects/1a/63e986119f55b6937b4dc2ef59cf7d3a741f50","hash":"0f05b1f667aa70c01c25fd7f28122fc3b67705cf","modified":1657599135340},{"_id":"source/.git/objects/05/32632b59aa98cf377c33aea35cbb82201cbf52","hash":"e28a4e0b5725879164d9db495fc059b4de244d85","modified":1657598920480},{"_id":"source/.git/objects/14/1d3eb7104478a5e3c05517bafbe54737b292b2","hash":"3101b0d73360ed730570acd477fa0ae5f1e75199","modified":1657598920490},{"_id":"source/.git/objects/27/f23c9a77fbcb2751ecd375b8f1fc9ba41cc0e4","hash":"6d92689d941eafb425677e41a4831c46b429d039","modified":1657598920480},{"_id":"source/.git/objects/0b/dd3c9777ce4db7dff72b6177b49e602122a064","hash":"80ea1ce11e8f6f943905cd322dbb819bc6159132","modified":1657598920500},{"_id":"source/.git/objects/29/1498d0c2e54c1ac758977e921c3aff97822752","hash":"453bc1d12fceb9ecfa5f8964691d9d60065ac07c","modified":1657598920480},{"_id":"source/.git/objects/22/79483dfb078e744a5b945a4700d38c75d26a76","hash":"03a5d2d4a238453c51fd61eb256d5572f6623a94","modified":1657599135340},{"_id":"source/.git/objects/2b/cc1370297c60ce6de9905fad6c67b7a120aafa","hash":"af56701168d97d1459f77369117dc2d7f6b49951","modified":1657598920480},{"_id":"source/.git/objects/29/816c69e720eb3961a10a2a0c4a4ec5fb6d1033","hash":"e517c45e3a736e65b45964070947237e998d2ef6","modified":1657600910130},{"_id":"source/.git/objects/1f/09767c8bcdefd0ce4674c8634d64b3abcf9da7","hash":"133c88f692cc451a92f3b02d212ce79916fb1af4","modified":1657598920460},{"_id":"source/.git/objects/18/d05d0caafd68e6669a6019aef7e2a3e7a7d8c2","hash":"73dbb557322bbd2a862fef2e1c32f7b2a0695e7e","modified":1659355027818},{"_id":"source/.git/objects/37/6f5e9efb8c7f3dd780a67b5091864b44f92a5b","hash":"7e8fb3ebff8d258b50648e2e1fb444869e062132","modified":1657599135350},{"_id":"source/.git/objects/3a/dcd34050812f8fde925be51807853b6a6d5623","hash":"2a7aedaab44277ed8fcbf8f166d15db9a60b3ec4","modified":1657598920470},{"_id":"source/.git/objects/37/c78aab8331356d85fce31d4d71371ae3221dad","hash":"3ebacccb991cfe1c4eed84a4871a2448f5f6d7f8","modified":1657598920480},{"_id":"source/.git/objects/03/a282a9cbfd0eaba0454612c670e6f05774cf9e","hash":"0b44eae256d58e91ab0b51708006c27390cfa570","modified":1659355027817},{"_id":"source/.git/objects/30/2b8b31d6decfdf662cbab71964978c6bb9164f","hash":"62ecb5f0ee89f0b659db90782f296088e41e1c73","modified":1657599936270},{"_id":"source/.git/objects/3e/60fff4e596a075260f2b90b4a5cbc1881e916f","hash":"26dd5bb063ef4a7a59f7d67e6ad887d936404a39","modified":1657598920500},{"_id":"source/.git/objects/3f/f4ca89254d816d66507cffebc1c4cab6c6fe14","hash":"7672557736756dbea3df2e195a0c50b5089370af","modified":1657598920470},{"_id":"source/.git/objects/1b/9844efcbcfd0613a9a597dfdcdb4b1bb488290","hash":"6522824d9d2d09d849d7770e585d2e72d4fbbecb","modified":1657600926500},{"_id":"source/.git/objects/45/5f6463cba3b76e3820e059471a3eedb356a0a8","hash":"505d9f27c433d35e2a8c9ea8dafc637f03ca1578","modified":1657598920490},{"_id":"source/.git/objects/42/77da3bb3fc3eb31f9aabd6d00590ce30b3fa02","hash":"0070728b1bc54b0016bf63104f2070069509b87e","modified":1657598307900},{"_id":"source/.git/objects/44/a48fc15dadbdfb11c5fd914827e6960c62c44c","hash":"e5118008510bc2fc7b6514327c46866b6922ceda","modified":1657598920500},{"_id":"source/.git/objects/3e/beefc4c468216f13c6186e45eaca32369dec62","hash":"a3447421ca0b29977afa51b172a6e5656fc3a73d","modified":1657598920490},{"_id":"source/.git/objects/1b/3c0951efe7e548bd052921d4a97e0f9bb00cc9","hash":"efbc793de83255d6aa75ed850072bacebda65d04","modified":1657600153960},{"_id":"source/.git/objects/32/1b9a9c78abe39f68c30e8fbe42c96acd80a1b1","hash":"e2cfb9d61cdef34b7875400d52771a374843b487","modified":1657598920510},{"_id":"source/.git/objects/4d/c118ba9665452daf96e66b09924fff437cc262","hash":"f513d77d727addd938a3ebdf37dbd8f222128087","modified":1657598920480},{"_id":"source/.git/objects/3b/018fcf03467b1a2a57d205d94dc9383f6e83e8","hash":"8ce292709f1b02c6fdd6827507443304c83f6785","modified":1657598920470},{"_id":"source/.git/objects/4e/aaac25d159bc61ff652d5ddbd9a0fefc6c790b","hash":"61bd991864ef9bd5b8c80b1f83c85fc2793ea624","modified":1657599135350},{"_id":"source/.git/objects/50/08ddfcf53c02e82d7eee2e57c38e5672ef89f6","hash":"646e892c2ded0fc655c787b940b90325b0cf328d","modified":1657598920480},{"_id":"source/.git/objects/55/7e750b326d6da1a335a498c0acac159bcb1843","hash":"a4eb38a50c777366bcf49db63e366c545e90a7d7","modified":1657598920480},{"_id":"source/.git/objects/32/3619d05485a519ac73d6c9c5bef62e83c08933","hash":"37054234650ba29124a831f19b8f866369b8ddcb","modified":1657601844630},{"_id":"source/.git/objects/58/4e49a0b3a6a77a15db8f70fb50df9a45f9d0b8","hash":"aaa29b64d5ef93dfb8dd43bc7c2696c011c7f9b7","modified":1657598920510},{"_id":"source/.git/objects/5a/f67ba3621334ed955c14a4fa2c507ba134f48c","hash":"08079a4a30af4a6d781d30ffbed57fce2cd73dd3","modified":1657599135340},{"_id":"source/.git/objects/5d/953acee59e3762770d6c8ef883160ba9003fd0","hash":"010fbc1cde9f39ddd45d5947e2da26517317b45d","modified":1657599135340},{"_id":"source/.git/objects/48/82590542fbf51e2d791466214e4a501446f780","hash":"4d2f05b455b2c36909cbbb87fd798b6a28eb1d1a","modified":1657598920490},{"_id":"source/.git/objects/60/b42847a43e736566103c635dfbf2d24a6b22d9","hash":"8091e3122863d79cfaad8f29ad648a303c7affb0","modified":1657599135340},{"_id":"source/.git/objects/49/80e57126b437add913ec76f81f4a57b90d260e","hash":"daa620eb6df3f1990a501f4759ae4970113d20d4","modified":1657598920480},{"_id":"source/.git/objects/64/bb10d7103de9b8c52c72afd13c4b5c874fb3b0","hash":"a706731036cefe9417c8ca51704617255c9e2996","modified":1657598920490},{"_id":"source/.git/objects/67/b024322501c33c53724eb44980cd28d765ad29","hash":"1f800c469d43dfac212693227c6a8a1701920449","modified":1657598920490},{"_id":"source/.git/objects/5e/edea2ddab0cfd43f6f43f6553a36a3c3b390b3","hash":"26be25f42327b9804db6385513a98376aaec88cb","modified":1659355027816},{"_id":"source/.git/objects/65/895878d0c178831c9f016cf7018e08063f835d","hash":"fee9f9bc67f418261b62e1bb276d782962a68d33","modified":1657600137440},{"_id":"source/.git/objects/6a/a9f2fcece28315ccbf4c63d73c1e954dcf1182","hash":"f67a05e555be4a6e85427addeaabb6f6ffab3e9e","modified":1657599135350},{"_id":"source/.git/objects/59/b4c5cadbe16b7b4c0fba41ffbd16cc80c0a495","hash":"389be7eb187c7a497f7b0796130df758190a692d","modified":1657598920480},{"_id":"source/.git/objects/71/d14de586d335adf76fcf7c26d9a305255e6c92","hash":"03d0464e384d04973fd5af424d249308450e8c94","modified":1657598920490},{"_id":"source/.git/objects/67/facb95041c87b8e276433cfa660161432140c8","hash":"219f79122ca960f3e4e67a9d0c00bc39a0ef4adb","modified":1657598920490},{"_id":"source/.git/objects/69/85d1b71aa82847070e616598750b39d3336fc8","hash":"7cb912c0ca96cc262b906861765547590a7ef6f9","modified":1657599135340},{"_id":"source/.git/objects/75/cd4dab53926d9284d721684345991f5736dc7c","hash":"b27fc3b4eb69b0ced0259553717e3901aa5289f8","modified":1657598920510},{"_id":"source/.git/objects/70/17579bd901767fe28b539d471a6ae74be34585","hash":"31fd3dcc4067006ec8a5141184f7ab6e812d2fe1","modified":1657598920480},{"_id":"source/.git/objects/81/4c4cc12d6a6d4eb2e5a3d908789ed54c660042","hash":"efe48d7ba026d7e8fe0868808a40dbdfb69e7fa6","modified":1657598920470},{"_id":"source/.git/objects/7c/8788897e82affa2ec89b8d6b5348cbafc91dfe","hash":"6adf21acec2e6ef5a0ceb4ba6a429f911c8ff1e2","modified":1657598920490},{"_id":"source/.git/objects/7d/07424a5fd63b4e31d93814e7dc575b665f432e","hash":"46a0137d1def7b509bbca4d83e648867f77231ff","modified":1657598920460},{"_id":"source/.git/objects/84/4474024d4b78560aa3ec558a97d5035c4a2d98","hash":"7f705b8e0950c5c5d3e45daf516299d5eecc075c","modified":1657599135340},{"_id":"source/.git/objects/82/b035b0580747199e1d0ce47c7c186166be180d","hash":"c31dd095d2463a8e66e519093e15f010d445d94c","modified":1657599135340},{"_id":"source/.git/objects/89/4c31e4e6d4d688bb72dcdd1929aa1476da5c77","hash":"f708551640fc071a2324ea5fd4928260d8f49cf7","modified":1657598920500},{"_id":"source/.git/objects/79/0facb3bdcd5924d8b0516415898500abef0261","hash":"00056d01e6f4815d4112b57d7acde17319a8bf55","modified":1657598920500},{"_id":"source/.git/objects/8b/f5b6874e07119eb678b4f9f6c4721aee2483be","hash":"dbacea718718a30857d294d8c23b7e3e68c9b5ac","modified":1657598920510},{"_id":"source/.git/objects/87/e49e6a17f43d9e5e68d5189a9e79c177202933","hash":"f3ad384fa10bdac2f392b6b2bd7fb9e2c478e51e","modified":1657599135350},{"_id":"source/.git/objects/8a/3f8fe52abedd6f7b00c10cc799f6fde3ca53e3","hash":"4e1b07b5452f80e3a54d73c0b4a8776225f3420b","modified":1659355027816},{"_id":"source/.git/objects/97/62697130bcdc24e7933eb80a8fc8e48b26caee","hash":"56f838aaf0cddf3be2506ac3e119f4d63248737d","modified":1657599135350},{"_id":"source/.git/objects/93/bce116b45cca612bbb27495be802a18381f53e","hash":"8295502de57fcef5eef923ab2565444a5d6378d6","modified":1657598920480},{"_id":"source/.git/objects/99/16c2b8f810939dce34706c58168f8a5a71bc0d","hash":"039730de954362baed020079c31949b1a2bd4dd9","modified":1657598920480},{"_id":"source/.git/objects/9e/26dfeeb6e641a33dae4961196235bdb965b21b","hash":"c0c50fafa1c20a13abb103b09bf46424c767d546","modified":1657598920470},{"_id":"source/.git/objects/a5/389f612819b1e7a7b3a43699ef1f62c57b2c95","hash":"f27ab806d18ab42306ed65d447cdc712282acce9","modified":1657598920490},{"_id":"source/.git/objects/a2/4ef05b6d7816fbaec3a275b4e17b8b6cb7e791","hash":"2883933d3b8154d5c62d015bfc772796aee8be6b","modified":1657598920470},{"_id":"source/.git/objects/9c/6de10b6858ee67a11de2ab8101ef008846009c","hash":"6da8c6f212c8c54fc58ad8a20b8cb07bdf4bcdae","modified":1657599135340},{"_id":"source/.git/objects/96/22a9170af0575c2b9d414a87d2bf9646f21bcd","hash":"af00bd1870b7302d297695ed526f807019423339","modified":1657598920470},{"_id":"source/.git/objects/a8/b1e375fd66f89cd3b6b725601de9be7b37c053","hash":"8033432aa3446342a16e93da950190604b01c95c","modified":1657598920470},{"_id":"source/.git/objects/a1/bc03a72567a1964a2b4c3c0224279a04f75c7e","hash":"fa63d3ee2819496cc505abb64e3542e82640b1c1","modified":1657598920490},{"_id":"source/.git/objects/ae/8077460aaa05b03e1fd3284ccfcbda9ef25b3e","hash":"ca30f7babc322b0b917ce81ebca9f5f44dc7149d","modified":1657599135350},{"_id":"source/.git/objects/b5/55aed8e02af1af0041cbd372f032b918accd54","hash":"1afae9ab0915e730436ee386ae342d1e701460b7","modified":1657598920480},{"_id":"source/.git/objects/b3/34d304ab7b0eee15cecd4e066956e569f7d923","hash":"dcc0b7ce5e82ab6a9c9b939856f8383952c5f60f","modified":1657598920490},{"_id":"source/.git/objects/ad/5c5bc554d72cc3ebf090f14fb98eb576ee02b0","hash":"9f741444b00460ebde6c7a9c28912e4441fc8b42","modified":1657598920480},{"_id":"source/.git/objects/b3/097558da71ca9cd554592c543fe11bc0982782","hash":"eb8d41784b15011589df4d8805760f5b130df303","modified":1657598920490},{"_id":"source/.git/objects/b4/223098417a08298bc253c3628faf3ab189598d","hash":"a23f3053e6bdadb134da9377058bd3cdfc3605d4","modified":1657598920500},{"_id":"source/.git/objects/a9/55c77fb1d08f9280fee85eafc44fc50c9cffd5","hash":"ede00c1a924008cf5d3a9645d3559de12ce8ca6a","modified":1657598920470},{"_id":"source/.git/objects/b7/b4aa949d6c1e371f46fc4b2ecd374dc124e16f","hash":"9accd25d8c7f906228716a25f1594a27ddc36a0a","modified":1657598920490},{"_id":"source/.git/objects/bb/393e2a198e1a4be73e229ba127535386a025dd","hash":"09ce8bca3c5b10b15f14dd77a5923c65f721dff9","modified":1657598920490},{"_id":"source/.git/objects/b8/ab6f89a29bda3b32e7251cc0ef3b14ada2dc8a","hash":"8e18348fdfe2d8b6549f89887448efa294660690","modified":1657599135340},{"_id":"source/.git/objects/ab/1d5111cfbc6b633386f4eb3567c0d7716ed97e","hash":"a7453b07c863b477854a1f495fba40b0cdf35fdc","modified":1657598920470},{"_id":"source/.git/objects/b8/633ae760ca9360cd2467165f73e3dbe423ffec","hash":"887b2661128fe60a55a4c23d1568e18d32505f35","modified":1657599135340},{"_id":"source/.git/objects/ba/9df1d4b1ed0b546275fcb2c0699936e0a57ccd","hash":"92c04674bc6aa8d0ca963a4bf4fffb1c352cb3cd","modified":1657598920510},{"_id":"source/.git/objects/c3/3c3c982d6b2f50bfc27a19beb359a5e451a537","hash":"f45dfdf725c0121e3044566d01a7d5696e328dfa","modified":1657599135340},{"_id":"source/.git/objects/d3/f893ef5736b3823d248309d6b51d7c0cfd1ffb","hash":"bd697ba28eab058a6e113c71f0e8d858d3ba9dd6","modified":1657598920480},{"_id":"source/.git/objects/ab/364ba3cfd7738963fe604bd6576f66c3b01942","hash":"5a68d330d5b0b3fdb1c6c2ab17f7588278b8287e","modified":1657599135340},{"_id":"source/.git/objects/be/4ef2eb17ac92d5910e656649ecc783c8d8f7f0","hash":"5c2e0d1f0d83c56c8527c7d8d9634e67f138b741","modified":1657598920510},{"_id":"source/.git/objects/be/0e345e30805f0a2897342873cd1c3adf352aaa","hash":"82680f36b37e2f626abeec7b5f01292b6e533bbe","modified":1657598920500},{"_id":"source/.git/objects/d7/d97d6bb49b97293cf77e25bb96be049c981ea6","hash":"eb712096d4a60f74fded1073d8fa247e202e865a","modified":1657598920490},{"_id":"source/.git/objects/db/577278c58ec0b923031822be04b591e125c01b","hash":"2c5a241e6c63b1fe524636af49ca2756d5bae2f2","modified":1657598920490},{"_id":"source/.git/objects/bf/21f2352cfc383d26268cfa8a4fc3689f36304e","hash":"e7c9054801c168ae35cacd38e94afd5db18ff4e8","modified":1657598920460},{"_id":"source/.git/objects/d5/af5b2beb22b31adc549c765eac91fb3b49d057","hash":"8fea154b6150d3af8dc9a771eaac405dc622ada2","modified":1657598920500},{"_id":"source/.git/objects/cb/2419ee15d3820b1676e9ee3892f468373c470d","hash":"440205eb6c792035f64b17886ae076ada3411b70","modified":1657598920510},{"_id":"source/.git/objects/d8/6789179791ffb00572693d69cdfa7a949708eb","hash":"2aea18c87d90587039820243cf21dbf95a901896","modified":1657598920500},{"_id":"source/.git/objects/e0/2f1f99bddd1d3e9d0183d57ba93dda779fbeb2","hash":"0daaebf1f0a2d551a3961815ce7f428fdf395719","modified":1657599135350},{"_id":"source/.git/objects/90/9daded9bdf9f02ca791a93aee2553ec8d4745d","hash":"847f00e92357d59c914f500eee27ed2a6c1af9af","modified":1657598920500},{"_id":"source/.git/objects/ee/1b14bee0299a6e2acc64f19135530126a1f534","hash":"528ce82c1ef51b18741391d03ae762cfe7b87169","modified":1657600140820},{"_id":"source/.git/objects/dd/f33cbb7072da7b1a427a1c240a5ad9495cd544","hash":"4c0380fa4a5c477c1b7f2f0afc3b79fb38472530","modified":1657599135350},{"_id":"source/.git/objects/ec/763658ee529d313cdd19b733b9b5543528a1b5","hash":"9d827184952ceec1ae6fb5bf2df10109f52435a6","modified":1657598920460},{"_id":"source/.git/objects/ed/c6a7583df5937245137fc4d3d042a43a1ad01f","hash":"ee89b35f1f7c9613a671e63de695a4e1930e086a","modified":1657598920500},{"_id":"source/.git/objects/e0/67770e4a927c4a79636cb4596b36847eac79cd","hash":"65e8fd9e0ce6f0e384f5f83365fcc19c92c397f0","modified":1657599135350},{"_id":"source/.git/objects/ee/3f44d602ce7f03b69a26e9a69664e77280882b","hash":"112dd7ba98106c88d830c35e381712783a958949","modified":1657598920480},{"_id":"source/.git/objects/e2/bb565525b81e4e7bac104f55b79aa8cbe5dd00","hash":"13ec468fc2bb05916159948fe7c87158279e7f3d","modified":1657598920510},{"_id":"source/.git/objects/f4/0bd5d49995a5ea9e3cd60470d45ccaeefe7b0f","hash":"3526bdd1312a04964148467ddcf6e535fe0e2ec5","modified":1657598786800},{"_id":"source/.git/objects/e1/db5fa4209bfdd96fc4add27fdeaec6af7ebafc","hash":"1f98937464f6fa2f69f08e4b48c0856f02526eb5","modified":1657599135340},{"_id":"source/.git/objects/f5/ca47cbb8b4a6818fa8d80dbb9a63dec730e0fd","hash":"65ad1f3f41299a23c07275481becfbe62fbb5b0c","modified":1659355027819},{"_id":"source/.git/objects/f9/25b021e01dd5cacf85df4501a4ba793694cadf","hash":"1b9358c17083fd985af862e241b1f98a8ac36ecc","modified":1657599135340},{"_id":"source/.git/objects/e1/68e20af28d68094c2d14a7412a70d8dff6c07f","hash":"dc54de123b9abcc70eb43899b2757059ea304389","modified":1657599135350},{"_id":"source/.git/objects/f7/621f6351591e3de01e4899e655767989c346b9","hash":"042b09100d05b2aa549bddd8b64e329ea13df510","modified":1657598920470},{"_id":"source/.git/objects/f0/7c31378216b6e1b7dc7a569556771d3845e7ef","hash":"f1487418122851e984d1c84478d79ce1fa05a73f","modified":1657598920490},{"_id":"source/.git/objects/f0/820a5470677211d4a9f6ca3fb2c56094028275","hash":"2a54ec4e2e114b93c8e41005e7813127a855f52e","modified":1657598920490},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/.DS_Store","hash":"abde3b8e7e929242f7ffd6b1e4c3009645ab0331","modified":1659353120957},{"_id":"source/.git/refs/heads/master","hash":"13247b2b031707d9945b08ca53d4dd0e233f6f59","modified":1657600939910},{"_id":"source/_posts/👨🏻‍💻code/学习感悟/由hexo clean 问题引发的一些学习感想.md","hash":"d4733ff3babc8aba9b6e2b1919952887f7d11bfa","modified":1657616534270},{"_id":"source/_posts/👨🏻‍💻code/mac/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1656040197360},{"_id":"source/.git/objects/fb/09b618244f91f2df3ee2b35004c1fb47b0c1f7","hash":"171b4631ad8cd66a070c618362088e05b2063673","modified":1657598920480},{"_id":"source/_posts/👨🏻‍💻code/mac/linux 生成ssh密钥.md","hash":"2b095b87f2b7860a79886dcc0600e5678d4bc70b","modified":1657616534280},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master 2/src/main.ts","hash":"85156ee9fc2c575c4e82db881320b6b6d20d81e2","modified":1641997472000},{"_id":"source/.git/logs/refs/heads/master","hash":"2f398000e21677369408e149fa2f9f0416460423","modified":1657600939910},{"_id":"source/_posts/👨🏻‍💻code/计算机网络/三次握手.md","hash":"35c62e526c983fcf9cbf0dcf30ae1986bfff2118","modified":1657616534270},{"_id":"source/_posts/👨🏻‍💻code/C++/.DS_Store","hash":"1518e731d32ae6042c2e7d28491514b8deb42480","modified":1656993715870},{"_id":"source/_posts/👨🏻‍💻code/项目/.DS_Store","hash":"aeb47724bae3efe171b30a61ed56d44ecf271abc","modified":1657620836990},{"_id":"source/_posts/👨🏻‍💻code/C++/C++ primer plus/continue.md","hash":"af73ab0a0fb71a96ef99ed37be4747f90aef172d","modified":1657616534280},{"_id":"source/_posts/👨🏻‍💻code/C++/C++ primer plus/insert函数.md","hash":"1386facb76a513d5961004b56f4f380272d4e5da","modified":1657616534280},{"_id":"source/.git/refs/remotes/origin/master","hash":"13247b2b031707d9945b08ca53d4dd0e233f6f59","modified":1657601409740},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master/src/main.ts","hash":"85156ee9fc2c575c4e82db881320b6b6d20d81e2","modified":1641997472000},{"_id":"source/_posts/👨🏻‍💻code/C++/C++ primer plus/begin,end.md","hash":"c51c98d37767181c40934700f666047683fcd0ac","modified":1657616534280},{"_id":"source/_posts/👨🏻‍💻code/C++/C++ primer plus/C++ new的用法.md","hash":"480ee80301a0218ac89e1010951e62d694323fef","modified":1659970180292},{"_id":"source/_posts/👨🏻‍💻code/C++/C++ primer plus/for 循环.md","hash":"345ed93b5025e74207c4ccb31283cfff6414f536","modified":1659970278834},{"_id":"source/_posts/👨🏻‍💻code/C++/C++ primer plus/sort函数.md","hash":"d27e5b08b6641ed47f2af36406567fab326321cb","modified":1659949083375},{"_id":"source/_posts/👨🏻‍💻code/C++/C++ primer plus/c++中 - ‘0’ 以及 -'a' 的相减操作解释.md","hash":"19907b2cbc26fdcf68467f16097bd17a4ac988fd","modified":1659626826809},{"_id":"source/_posts/👨🏻‍💻code/C++/C++ primer plus/static 关键字.md","hash":"651bf7cbb3691c6c0fde5029d1a32acc1bca645c","modified":1657616534280},{"_id":"source/_posts/👨🏻‍💻code/项目/git/技术蛋老师(git).md","hash":"bdb4b04a84fef52d471585e2eba9de0b45146c90","modified":1657616534290},{"_id":"source/_posts/👨🏻‍💻code/项目/hexo blog/GitHub如何取消域名绑定.md","hash":"d48d67ab8082fd350ea28a5630809f3714ae7f6a","modified":1658143398000},{"_id":"source/_posts/👨🏻‍💻code/C++/C++ primer plus/容器的使用.md","hash":"03bdf95e26d43da52af89c93f0cde58aa579000a","modified":1659951864908},{"_id":"source/_posts/👨🏻‍💻code/C++/C++ primer plus/vector.md","hash":"67cd9d45952cddefc28699ab948f6bcdba0d8e61","modified":1659952094620},{"_id":"source/_posts/👨🏻‍💻code/项目/hexo blog/brew安装.md","hash":"8659125bdeae0e79fcee1d1d5897a242723d1b2f","modified":1657619650700},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/.DS_Store","hash":"8810c0c94500867d434b72f0e83050a5f17fd157","modified":1659921563926},{"_id":"source/_posts/👨🏻‍💻code/C++/C++ primer plus/while 循环.md","hash":"4f6d37901765f0222588e957d4b36101843f0132","modified":1657616534280},{"_id":"source/_posts/👨🏻‍💻code/项目/hexo blog/域名失效问题.md","hash":"0ca562d53fa75caf9372039bd7517e7e812e7852","modified":1657620039300},{"_id":"source/_posts/👨🏻‍💻code/项目/hexo blog/fluid写文章好用的代码.md","hash":"a67bd8fbaee9ba769d3fdd95d48ca0cec4d90d27","modified":1657619650720},{"_id":"source/_posts/👨🏻‍💻code/项目/hexo blog/hexo如何创建短的url.md","hash":"c11eb86a83147a9d8595f49ba2ba5cae8bb10a79","modified":1657619650740},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/英雄哪里出来/《C++零基础99题》.md","hash":"e1e500c7ef2eccf3630bb4e794e5e8cdc5c396ca","modified":1659432526753},{"_id":"source/_posts/👨🏻‍💻code/C++/C++ primer plus/进制转换.md","hash":"223ccf9b4f3b75691e342b528aa8eca3dcc11191","modified":1659925838106},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master/src/components/FloatingTableOfContents.vue","hash":"0223ae81ee7b1714b5cc563a668c1e168225241b","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master/src/components/HeadingListItem.vue","hash":"ef3a736d14111429fbfbe5a66e44488e46a50429","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master 2/src/components/FloatingTableOfContents.vue","hash":"0223ae81ee7b1714b5cc563a668c1e168225241b","modified":1641997472000},{"_id":"source/.git/logs/refs/remotes/origin/master","hash":"1ba305a4f6ba7f033bd07f259bbc6f0a6b8cadd5","modified":1657601409740},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master 2/src/components/HeadingListItem.vue","hash":"ef3a736d14111429fbfbe5a66e44488e46a50429","modified":1641997472000},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/回溯算法/20.N皇后.md","hash":"6395611d9648deeb77e7170f3329b4b9f38d3203","modified":1657616534300},{"_id":"source/_posts/👨🏻‍💻code/项目/hexo blog/用hexo s 引发的一些错误.md","hash":"55c21dcbcd740c175860fb62cdb5857a327abe02","modified":1659409013112},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/回溯算法/21.解数独.md","hash":"92c67bde7290366611679f37cb68afaf31fb13a1","modified":1657616534290},{"_id":"source/_posts/👨🏻‍💻code/项目/hexo blog/图床的设置.md","hash":"f4bc409477b393909283f83f0934e97cb558b32b","modified":1658976058175},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/1.算法性能分析/时间复杂度分析.md","hash":"60ca45487a62b36a5a2d4fcffe6a07ef6194005f","modified":1659949264073},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/双指针法/双指针法总述.md","hash":"1a4e9d6b21b9a164fe81502fe2a8ffa1d230975a","modified":1659968494627},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/1.算法性能分析/算法为什么会超时.md","hash":"c1f7f5caf305002350cd04a266ab2ec66f13d620","modified":1659429037056},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/1.算法性能分析/代码内存消耗.md","hash":"0bfaf8d5f6954c1a72cb90b38b82d4a6c1171b00","modified":1659970249148},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/1.算法性能分析/空间复杂度分析.md","hash":"806104fe68d8da613fcb2bf50651607d94da7443","modified":1659972723509},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/13.分割等和子集.md","hash":"c1ccdb6eb3ce73cea3756b73750d063ddaff9c9e","modified":1658998093123},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/1.算法性能分析/递归算法的复杂度.md","hash":"415c09f36fe4c279abe269830f0559e9538052d8","modified":1659943864078},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/12.0-1背包理论基础（二）.md","hash":"6eb246fe6c50d4083f4cb23431d9194cc3f54771","modified":1659970080014},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/14.最后一块石头的重量 II 2.md","hash":"55340c6c235d36e91edc8701a997ed03a7fb2cf2","modified":1659970100803},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/1.动态规划理论基础.md","hash":"46c701a89de6870fd1073e5d5709a48c80a5bc14","modified":1657616534320},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/14.最后一块石头的重量 II.md","hash":"d231d337e45f4d9881863adc6a2f8a3bda1c3b8a","modified":1659970086748},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/11.0-1背包理论基础(一).md","hash":"80e2f5d0f2c6a1ddd30ce02257fbbf3525e09fbe","modified":1658387812000},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/18.完全背包理论基础.md","hash":"4a72f21a429e349b040d3973efe0164d272fe30c","modified":1659970242994},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/17.一和零 2.md","hash":"28b04cffd7b9881415cba6873e4a5173550228fb","modified":1659353086587},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/17.一和零.md","hash":"28b04cffd7b9881415cba6873e4a5173550228fb","modified":1658976833280},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/1.算法性能分析/递归思想.md","hash":"97f168a24d62c2c825464fda4882c3b86ddce5f2","modified":1659716340315},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/15.动归周总结.md","hash":"6bc83812dde262b1232e46a9ba52e796c7a479b1","modified":1659624219707},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/19.零钱兑换II.md","hash":"f851442c3f3f426056f7a8ded77971cb3bf5492c","modified":1658976833280},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/16.目标和(装满背包有多少种方法).md","hash":"24546933f22be8a263e40c0dc5637e953e527b33","modified":1659970229673},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/2.斐波那契数.md","hash":"a423c686ffa5afb634140f61dc7565e9139fe483","modified":1657616534330},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/7.不同路径 II.md","hash":"5af9d9facffa7590720048bf6886b632154ff1d3","modified":1657616534330},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/3.爬楼梯.md","hash":"9691c6278a3740f4673a409548e6d8dad75e270b","modified":1657616534320},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/19.零钱兑换II 2.md","hash":"f851442c3f3f426056f7a8ded77971cb3bf5492c","modified":1659353086587},{"_id":"source/_posts/👨🏻‍💻code/项目/hexo blog/LaTex 环境配置.md","hash":"1fe93612f26f13d53ed613bb84b4d88dccc4cef5","modified":1659408292433},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/6.不同路径 2.md","hash":"f7aea6f2701dce7df3da220c76b190a7765845bd","modified":1658214102000},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/4.使用最小花费爬楼梯.md","hash":"2cc46d67e9f8f3883af9acd9c015ad084ba65764","modified":1657616534320},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/9.不同的二叉搜索树.md","hash":"a54ccdcf0c898c05acb6e69d7d22772ba789bde6","modified":1657616534330},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/8.整数拆分.md","hash":"72ed4eb2468fa38de59a35cebf3bfdcb183fc0ad","modified":1657620126510},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/6.不同路径.md","hash":"f7aea6f2701dce7df3da220c76b190a7765845bd","modified":1658214102000},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/1.贪心算法理论基础.md","hash":"537e3f30773c1f5543593698a844c10e40394472","modified":1657616534290},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/13.柠檬水找零.md","hash":"3b88433e2c541c54412c092a84ee7301460734f4","modified":1657616534290},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/14.根据身高重建队列.md","hash":"89d6079a853f47d6b5f9f8bd59b217f349e5c025","modified":1657616534300},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/.DS_Store","hash":"1332f12fd0852c983e6ef724901db36b13d81fc5","modified":1656038367830},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/18.无重叠区间.md","hash":"e029ee09cc93d7acf22a8a8d2ef51b064cdec627","modified":1657616534300},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/19.划分字母区间.md","hash":"3a3abf79c5a30fe51899f036268905b60ddacf1a","modified":1657616534300},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/22.单调递增的数字.md","hash":"5404aeb6e97f46f1e75f70845186d1902dccf0ca","modified":1657616534310},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/17.用最少数量的箭引爆气球.md","hash":"1bb97dc612089c48936c753f25242e1742884a56","modified":1657616534300},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/12.分发糖果.md","hash":"cb9092e6827ad9eecb816cad922c8320f92f34d6","modified":1657616534290},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/20.合并区间.md","hash":"4d51572b37dd47fdb5690ca3fba2b9cf6907b90d","modified":1659626826864},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/24.监控二叉树.md","hash":"72fbd6cb732b777b3309d853c8b0a5368df8ea22","modified":1657616534310},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/3.摆动序列.md","hash":"b563dad77ea9f1375b330adb57f3d682fad2133e","modified":1657616534310},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/23.买卖股票的最佳时机含手续费.md","hash":"86892e401f5b670f0acc29433562545ad1255a5f","modified":1659626826913},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/16.目标和(装满背包有多少种方法) 2.md","hash":"4ff7bcf9d218b16f2e940bff3560f03b658b9028","modified":1659353086586},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/9. K次取反后最大化的数组和.md","hash":"7bc56be973be408e3c2cb06524979ae933acf2a9","modified":1657616534320},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/2.分发饼干.md","hash":"1e4ff9b820b6a7812ec8531ce064567d241465ed","modified":1657616534310},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/数组/1. 数组理论基础.md","hash":"1658d3a0a18f1191a18c0f15495a7ebcf4d0dcb4","modified":1659945194443},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/数组/2.  二分查找.md","hash":"b22a4af72c712a8dc5aad5ff8b6eed010fc813f7","modified":1659945184638},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/数组/5. 长度最小的子数组.md","hash":"1a840be750e0cb60b4c3c53365b094aaa9ba6495","modified":1659969302439},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/数组/4. 有序数组的平方.md","hash":"cb332384a6efe78ef0ba0b228da2703e18c67e1d","modified":1659952175645},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/6. 买卖股票的最佳时机II.md","hash":"f084babb88cdde775e48df30ecfa6d6d7021b29f","modified":1657616534320},{"_id":"themes/fluid/source/img/Pasted image 20220608090057.png","hash":"2d85c9e9253e0f14a48503f8b6ee479db2cf2807","modified":1654650057770},{"_id":"themes/fluid/source/img/Pasted image 20220614145454.png","hash":"6e38669ea46478479a7a79f8cd9a8e051436d307","modified":1655189694480},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/数组/3. 移除元素.md","hash":"79f9128969c0383da93bd83dc229ea2dec442dbb","modified":1659947097597},{"_id":"source/.obsidian/plugins/customizable-menu/main.js","hash":"b656ae8c8d8354a54887a907bc4d0ca8799819fb","modified":1658140972000},{"_id":"source/.obsidian/plugins/file-explorer-note-count/main.js","hash":"538c21f4892e9e8b2b29f8486ea39c0c1c80ea63","modified":1649999745800},{"_id":"source/.obsidian/plugins/homepage/main.js","hash":"ad2ad054e3592072fdd4b88280d538795a4dd63d","modified":1655871357370},{"_id":"source/.obsidian/plugins/obsidian-completr/main.js","hash":"bb913022801d292d7d91e0f23ae6bf6683282ae3","modified":1658824565160},{"_id":"source/.obsidian/plugins/sliding-panes-obsidian/main.js","hash":"b48bee9678c675642cb32290fff6b26f18591c3f","modified":1657012268710},{"_id":"source/.obsidian/plugins/url-into-selection/main.js","hash":"40cf06e2b3a977e16c6062104de0c45f954aab43","modified":1653568633080},{"_id":"themes/fluid/source/img/Pasted image 20220608090858.png","hash":"4b26f3c619bbb5642209fdbdb00239615a5de4c4","modified":1654650538440},{"_id":"source/.obsidian/plugins/Enhanced-editing-0.5.2/main.js","hash":"522c00ffc4eb5b45f0ba7bbf4d08f9ed34adb4f9","modified":1650200287000},{"_id":"source/.obsidian/plugins/copy-as-html/main.js","hash":"889459e2de739d55d96fa2db09111e0fadca4f2e","modified":1653987284510},{"_id":"source/.obsidian/plugins/file-tree-alternative/main.js","hash":"dea9912f45ebd47bda2d08aac0cf5763ae3a2f09","modified":1658367980000},{"_id":"source/.obsidian/plugins/digitalgarden/main.js","hash":"abcf71a50f14b761f0d5cb53b38a893ae5536754","modified":1653297569770},{"_id":"source/.obsidian/plugins/highlightr-plugin/main.js","hash":"9de84ab7153d4bbae32aeeefb2d174a7b7abcfec","modified":1650614096540},{"_id":"source/.obsidian/plugins/number-headings-obsidian/main.js","hash":"459bf27b837aba933a8b4be5a15f43ac4c485d39","modified":1652354671440},{"_id":"source/.obsidian/plugins/mrj-text-expand/main.js","hash":"87d3bcf6bcba9f741ce5a9cf5e82826d1dc7739d","modified":1652709720750},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master 2/package-lock.json","hash":"fec9dae1a9ef57543fa6bba305a995c3139bca78","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-hover-editor/main.js","hash":"7df309ad8bd39a9e253a5b60924015579298435f","modified":1657700489120},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin-master/package-lock.json","hash":"fec9dae1a9ef57543fa6bba305a995c3139bca78","modified":1641997472000},{"_id":"source/.obsidian/plugins/obsidian-zoom/main.js","hash":"a669d971efd4949546c07c1d368a548cf2f49ae9","modified":1651564063240},{"_id":"source/.obsidian/plugins/obsidian42-text-transporter/main.js","hash":"ff37fe4bf9b30bd718c2f164165f0bd2b992f9c6","modified":1653042975340},{"_id":"source/.obsidian/plugins/recent-files-obsidian/main.js","hash":"722149fc8dea95268029a99e0359f35e22c56b0e","modified":1649999762350},{"_id":"themes/fluid/source/img/1251655078974_.pic.jpg","hash":"23e1c68bda12855e9b97a002b5d7c31e89521570","modified":1655086108370},{"_id":"themes/fluid/source/img/Pasted image 20220609175251.png","hash":"1e69e06ffa2221278bf0be927b19514a3f3de840","modified":1654768371090},{"_id":"themes/fluid/source/img/Pasted image 20220609175258.png","hash":"1e69e06ffa2221278bf0be927b19514a3f3de840","modified":1654768378130},{"_id":"source/.obsidian/themes/Things.css","hash":"fb900ad071c30aaf4170dba7b2d4ce6c303444d2","modified":1650107472590},{"_id":"source/.obsidian/plugins/darlal-switcher-plus/main.js","hash":"8237e1c0562342ecc57f9a2f0ab1a1b6e2c61f4e","modified":1655367662100},{"_id":"source/.obsidian/plugins/easy-typing-obsidian/main.js","hash":"1a155095185e4fd24daf6135333be553bb1880de","modified":1650956634030},{"_id":"source/.obsidian/plugins/obsidian-floating-toc-plugin/main.js","hash":"a34696a762ff16084dd28e1c4a7b6b25801d6009","modified":1648865802000},{"_id":"source/.obsidian/plugins/obsidian-to-anki-plugin/data.json","hash":"ebe5099afe0a1bc7dad2389b9a57f4a926e9ebac","modified":1658804072010},{"_id":"source/.obsidian/plugins/templater-obsidian/main.js","hash":"65d29819bb1ac377d8213d3b8a5c87e4b6c7e9c9","modified":1654056687720},{"_id":"themes/fluid/source/img/1241655078859_.pic.jpg","hash":"ffab639c499549f58e127ec7cfd783b19ef7e691","modified":1655086066800},{"_id":"themes/fluid/source/img/Pasted image 20220614162823.png","hash":"ff7d37a756ecd2436949938cf7cc22767e8be9a7","modified":1655195303620},{"_id":"source/.obsidian/plugins/customizable-sidebar/main.js","hash":"fcf2f9655cc0b5ca3ed72c0f54e5750f37e8d6e1","modified":1653273923980},{"_id":"source/.obsidian/plugins/obsidian-codemirror-options/main.js","hash":"654f8aa89e4f8a6fd6443929a837283d5764a41b","modified":1650613951620},{"_id":"source/.obsidian/plugins/obsidian-image-auto-upload-plugin/main.js","hash":"a8e65f24e4ea87795c416d4ff0399096e5590943","modified":1653557663960},{"_id":"source/.obsidian/plugins/obsidian-minimal-settings/main.js","hash":"c859215a34f80bd328ddf50ea416a4f2ddd578d6","modified":1649916448850},{"_id":"source/.obsidian/plugins/obsidian-style-settings/main.js","hash":"bc1bc673cf9e91858760d4e0200584846fd98fff","modified":1650702227340},{"_id":"source/.obsidian/plugins/quick-latex/main.js","hash":"6d8f28350c4e05ed43e5b77e85defd8cbba143cf","modified":1658824970590},{"_id":"themes/fluid/source/img/Pasted image 20220610104400.png","hash":"8b870176211ff64e179e88178ce1aad7bccdfda8","modified":1654829040880},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1654080173000},{"_id":"source/.obsidian/themes/California Coast.css","hash":"f93acbd2d47ca3b70223a6637700df86222d7926","modified":1650108624080},{"_id":"source/.obsidian/plugins/obsidian-image-toolkit/main.js","hash":"262cca27ce510202ae7b9ee875b02198750b633f","modified":1655908149570},{"_id":"source/.obsidian/plugins/obsidian-outliner/main.js","hash":"99004ddd5df5edf1e8fea8cdba7eeeb8c0099be1","modified":1651563184320},{"_id":"source/.obsidian/themes/Minimal.css","hash":"d18730eb5f973ee043c1d147d19acedbdaa54be1","modified":1654765390750},{"_id":"source/.obsidian/themes/Yin and Yang.css","hash":"30e35dce2b2e05f4f020206451a22a2940afca45","modified":1650185718890},{"_id":"source/.obsidian/plugins/marginnote-companion/main.js","hash":"26d22567025f4b3fbfdfb20a5a1270941cdcb712","modified":1653306510070},{"_id":"source/.obsidian/plugins/obsidian-hypothesis-plugin/main.js","hash":"01e65c2611928afb4b2a3f03f1027d5526d33781","modified":1652528346580},{"_id":"source/.obsidian/plugins/obsidian-read-it-later/main.js","hash":"65ad76907f5e709344b4443a7c4fdce870ea0267","modified":1651655106270},{"_id":"source/.obsidian/plugins/quickadd/main.js","hash":"530a5a82546933abb8b1537f560ce7e19365baaa","modified":1649916485070},{"_id":"themes/fluid/source/img/17.用最少数量的箭引爆气球(carl).mp4","hash":"368ab66fcc659f07ffe8e7af515410c9be7b5e7a","modified":1654764515870},{"_id":"source/.obsidian/plugins/obsidian-git/main.js","hash":"ff58021fd4889fec1353dd888f2e99f55b42f89b","modified":1657600324320},{"_id":"source/.obsidian/plugins/obsidian-tasks-plugin/main.js","hash":"11f739bb98b03df20096455b75fbb6a7a45049bc","modified":1652531608650},{"_id":"themes/fluid/source/img/Pasted image 20220609175653.png","hash":"2985057192ead4c89358798c0ecad4a8d31454af","modified":1654768613220},{"_id":"source/.obsidian/plugins/ObsidianAnkiSync/main.js","hash":"c94f9bbfe99f9c26443e9822635cd7fc917925e5","modified":1658283826000},{"_id":"source/.obsidian/plugins/table-extended/main.js","hash":"1f3455e27f4ce5b2844121be7fde75a19016230c","modified":1656934934110},{"_id":"source/.obsidian/plugins/obsidian-kanban/main.js","hash":"2db7e8dae4697d92025865070d96117b806c71db","modified":1652711126770},{"_id":"themes/fluid/source/img/default.jpg","hash":"f40a20c8860c95e88ac134620b25a48be8e43a30","modified":1655454158900},{"_id":"source/.obsidian/plugins/copy-as-latex/main.js","hash":"a92c1c4681ab48be9ed3e054962f5737ba61bff7","modified":1658825141110},{"_id":"source/.obsidian/plugins/note-refactor-obsidian/main.js","hash":"6eea79762f35a65825c9f2f29e672a1cdc5c3243","modified":1653273166250},{"_id":"source/.obsidian/plugins/various-complements/main.js","hash":"334ae04916346fa36150901af26f3921ff5716f4","modified":1652522172340},{"_id":"source/.obsidian/themes/Sanctum.css","hash":"0bd17ea79db7743b309d3f869690a7fa8d32c456","modified":1649925331390},{"_id":"source/_posts/.git/co.gitup.mac/cache.db","hash":"25ecb56ac5654d5a1ca6c21ae3b48f1d7da5d4e0","modified":1659354258176},{"_id":"source/.obsidian/plugins/media-extended/main.js","hash":"529b43eee5bfd50f5206dbb54a0b2831d49c8207","modified":1654824012350},{"_id":"source/.obsidian/plugins/obsidian-advanced-uri/main.js","hash":"e5ecc0c4094c4c93cb8f43928a999e123150dbfe","modified":1653290935860},{"_id":"source/.obsidian/plugins/obsidian-spaced-repetition/main.js","hash":"39a840461de669d3a737f517d7360d475a2804c2","modified":1653273176190},{"_id":"source/.obsidian/plugins/flashcards-obsidian/main.js","hash":"005e2c465dbe752cd38e8c8bc9c9f9d126cfad24","modified":1658284286000},{"_id":"source/.obsidian/plugins/tag-wrangler/main.js","hash":"1b851d9952a317e61f72249205d38507312811b1","modified":1658278210000},{"_id":"source/.obsidian/themes/Shimmering Focus.css","hash":"d62bd6940539d7e4a3af2ebb6cb38885737e4cc2","modified":1650186078360},{"_id":"source/.obsidian/plugins/obsidian-to-anki-plugin/main.js","hash":"ef0cd418d1a580b66febd4ca7467959b6550d25a","modified":1658244298000},{"_id":"source/.obsidian/plugins/obsidian-pandoc/main.js","hash":"2aef2f502ad9a2cc67f0021bf047596e69159cfe","modified":1649999775020},{"_id":"source/.obsidian/plugins/dataview/main.js","hash":"dbc4e3af6acf1d8b43d93ef96fa325ca6db04b3c","modified":1652531530300},{"_id":"source/.obsidian/plugins/obsidian-excalidraw-plugin/main.js","hash":"528851935d81965680eef3ddd5417327feee9870","modified":1658936430740},{"_id":"source/.obsidian/plugins/notion-like-tables/main.js","hash":"caed70fb86946b0567fdac318db8e56c5ebb76cb","modified":1652355203990},{"_id":"source/.obsidian/themes/Primary.css","hash":"1e088541258615afce199cb7c8e549514d13fa6b","modified":1649916813000},{"_id":"source/.obsidian/plugins/table-editor-obsidian/main.js","hash":"a720470eec7058ba6bda9ce8df9bb83c219a6555","modified":1657613670690},{"_id":"source/.obsidian/themes/Blue Topaz.css","hash":"b0ec7812e765d205519e8879c19b95db4d55a3e9","modified":1649917110000},{"_id":"source/.obsidian/plugins/extract-url/main.js","hash":"810cc3a223938c66723bf4b597e88cb8da617c80","modified":1654825904120},{"_id":"source/.obsidian/plugins/graph-analysis/main.js","hash":"0e46751290f6b73f7e4a4ce2b146e5f6dbcd8340","modified":1653273798500},{"_id":"source/.obsidian/plugins/obsidian-mind-map/main.js","hash":"f911e25347f63465b1ce964cb7664468a1e7e606","modified":1657002607620},{"_id":"source/.obsidian/plugins/cm-editor-syntax-highlight-obsidian/main.js","hash":"e323a58e8753732f143f3dd453d27f344bc5222f","modified":1650184021940},{"_id":"source/.obsidian/plugins/cmenu-plugin/main.js","hash":"bc2bea08624291e1ce943362c940d3ca0ad72a11","modified":1650186765740},{"_id":"source/.obsidian/plugins/mx-bili-plugin/main.js","hash":"dd9bdc2c7e1d69450e3d281ac44867a16f1c538c","modified":1653834976080},{"_id":"source/.obsidian/plugins/obsidian-sidekick/main.js","hash":"e0b40be31fb61780e52eec280131cdf18bec558c","modified":1650940533990},{"_id":"source/.obsidian/plugins/obsidian-annotator/main.js","hash":"7d2a30a0c15e165d78b219ef709effce52ada1e8","modified":1650005503240},{"_id":"themes/fluid/source/img/19.划分字母区间(carl).mp4","hash":"170a6939c657015d1f612e161137edd3f2ff9482","modified":1655258130000},{"_id":"public/search.xml","hash":"7f67d3e482c5d29f77d9828cb3fde9b88d01aaaa","modified":1659968244824},{"_id":"public/local-search.xml","hash":"e291ed45e4270167eae43f8dffa8acffc68dd563","modified":1659968244824},{"_id":"public/404.html","hash":"fd452a1c04951ba6cc4383ae4158b6d9198c82f5","modified":1659968244824},{"_id":"public/about/index.html","hash":"f82e6588727957ef0f65bca8a4b587499802744f","modified":1659968244824},{"_id":"public/contact/index.html","hash":"05d7475114adbbf69b18ae6cc4ec20090873cd9b","modified":1659968244824},{"_id":"public/tags/index.html","hash":"9da057abbde1ad71e6db435f09ee1adad0cbd23f","modified":1659968244824},{"_id":"public/杂项/零散笔记/简历.html","hash":"0ba6674a0456c7195d730bc6390ce57d44066645","modified":1659968244824},{"_id":"public/archives/index.html","hash":"63d55e31acde21c2d5e69938daef276e2d0fc867","modified":1659968244824},{"_id":"public/archives/page/2/index.html","hash":"f70a09f4741c408ae516614049a1c7662d1af3c1","modified":1659968244824},{"_id":"public/archives/page/3/index.html","hash":"4aaca20f6c9ab4857d54a82ddda52c735d199704","modified":1659968244824},{"_id":"public/archives/page/4/index.html","hash":"9869c6e719c3763011677a0108b99d3383dc2b13","modified":1659968244824},{"_id":"public/archives/page/5/index.html","hash":"b84b28916835e48e02d35b46c014efb446234704","modified":1659968244824},{"_id":"public/archives/page/6/index.html","hash":"0b521b77295e4423d8b37d2da20502021451ffe9","modified":1659968244824},{"_id":"public/archives/page/8/index.html","hash":"5a4adaf97e0050a66d85f66f59151cb5182e68a5","modified":1659968244824},{"_id":"public/archives/page/7/index.html","hash":"9d701de9d5979544217b03e3441d43271df79f20","modified":1659968244824},{"_id":"public/archives/page/9/index.html","hash":"030107f3a14cb572002abed7e70a8a6abd21b03a","modified":1659968244824},{"_id":"public/archives/page/10/index.html","hash":"dbb66e189f2ac5dcd6ef1cb77c0092299a9363fb","modified":1659968244824},{"_id":"public/archives/2022/index.html","hash":"a67e20a9eb9b1a491d59a6ad926d5eac187ee320","modified":1659968244824},{"_id":"public/archives/2022/page/2/index.html","hash":"171fd211045540f3c046dafce87992f87382ee34","modified":1659968244824},{"_id":"public/archives/2022/page/3/index.html","hash":"54a8f1b0062ccc2f385960b16f9d71f9cc517720","modified":1659968244824},{"_id":"public/archives/2022/page/4/index.html","hash":"0f32834298005172de79a3df59050d0bb0b995f0","modified":1659968244824},{"_id":"public/archives/2022/page/6/index.html","hash":"a8b9828b052dcec6a4a7f5af20698d38101f9bf2","modified":1659968244824},{"_id":"public/archives/2022/page/5/index.html","hash":"845a67507aa0826583cc94c92e7f8ece3057c969","modified":1659968244824},{"_id":"public/archives/2022/page/8/index.html","hash":"4d797a2cbc3f7a265af0a9a7597c20515b21ce63","modified":1659968244824},{"_id":"public/archives/2022/page/7/index.html","hash":"7322f1b086280bb1e8498749c6232782c600a10d","modified":1659968244824},{"_id":"public/archives/2022/page/9/index.html","hash":"95ea86985b8c61971159b0e04cdf6ee9ab5b2e1c","modified":1659968244824},{"_id":"public/archives/2022/page/10/index.html","hash":"577bc99080972c5b6810b4b728254dfe57c2d8e2","modified":1659968244824},{"_id":"public/archives/2022/05/index.html","hash":"7031cf4d6d1db7f41e2013609dc013a19f97d3dd","modified":1659968244824},{"_id":"public/archives/2022/06/index.html","hash":"3916ced7eb8ee224af34011018c8149962e8df8e","modified":1659968244824},{"_id":"public/archives/2022/06/page/2/index.html","hash":"289d8de66d5446afde58febcca761ac179348917","modified":1659968244824},{"_id":"public/archives/2022/06/page/3/index.html","hash":"a0e3a4c24113210acb0133834b8c5954c9244b9c","modified":1659968244824},{"_id":"public/archives/2022/06/page/4/index.html","hash":"07bcf899cafffe640118d6f01260a986a2014975","modified":1659968244824},{"_id":"public/archives/2022/05/page/2/index.html","hash":"9fe56e74f53326e30ce66570250bd888af447743","modified":1659968244824},{"_id":"public/archives/2022/07/index.html","hash":"8927128eb85429b2f2cd9d38cbc3f2ea8aaf42a3","modified":1659968244824},{"_id":"public/archives/2022/07/page/2/index.html","hash":"77ec40e49012c8c6444f62d4b9876e1a655261c7","modified":1659968244824},{"_id":"public/archives/2022/07/page/3/index.html","hash":"09a697ce8a5b22af12b0b5124c478de4ca01a6b7","modified":1659968244824},{"_id":"public/archives/2022/07/page/4/index.html","hash":"35c0d552b2faaaf3bafb07de99b5a8c9d6f284c8","modified":1659968244824},{"_id":"public/archives/2022/08/index.html","hash":"e4c1a65046954d029a1ccaccc7025353d21924fc","modified":1659968244824},{"_id":"public/archives/2022/08/page/2/index.html","hash":"ca5c7b082f32395636232b7a7fd96deca9b43441","modified":1659968244824},{"_id":"public/categories/👨🏻‍🎓科研/index.html","hash":"719c50c014bab23df420be6fff4e0f6eec077ae9","modified":1659968244824},{"_id":"public/categories/🚀技能/index.html","hash":"e5fccdae6184558946388d33621f7b87f0227af2","modified":1659968244824},{"_id":"public/categories/🏫学校/index.html","hash":"138fdaf8250df578f56b4a4b14b92fa9e80073eb","modified":1659968244824},{"_id":"public/categories/🏫学校/研究生考试/index.html","hash":"72219276ed65805145307ea0bbd417602924490d","modified":1659968244824},{"_id":"public/categories/🚀技能/obsidian/index.html","hash":"593e64efafe6f8f63a051e348f1ed1d599a9cc07","modified":1659968244824},{"_id":"public/categories/🚀技能/notion/index.html","hash":"86898a712212feddef0e05bd2651fbf8e1ef246e","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/index.html","hash":"3c810af52b9f19f81e66ceb88c8d23bb5adc6690","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/page/2/index.html","hash":"b85f3ecd51eedb93570aaf5114276655584b324c","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/page/3/index.html","hash":"370d8f043e8a0184f515f3d000d1fc927ec8b51b","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/page/6/index.html","hash":"2036d43b6fb14d98849cbe456c303b29a66fdc2c","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/page/5/index.html","hash":"6ad76c410a9b299a509523ca86a4f40a8ac8da42","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/page/7/index.html","hash":"0d6293e8451df9a202c9a655d8d16542d8471090","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/项目/index.html","hash":"025fce57f5211da6f3b8a218c172ca297fadf482","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/学习感悟/index.html","hash":"59e58f0aac96655ccbc5e6924249afa53411697d","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/page/8/index.html","hash":"b15980a50bf9a57bfd9e5ee9a0b1d06209eb69e0","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/C/index.html","hash":"8301e8e881c7654da982415b8fe6c09cc9d623d5","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/数据结构与算法/index.html","hash":"f4274aa53da21777f4edb654bb65e28a39b6e344","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/数据结构与算法/page/2/index.html","hash":"2031b20885580395c4af0b19f88e36ef9a06166a","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/C/page/2/index.html","hash":"e4169ccc2ba15ab4feff0d726d3a70e5cbdb5076","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/数据结构与算法/page/3/index.html","hash":"438026d3c3ab88f4215c6672d122f146f8435bdf","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/数据结构与算法/page/4/index.html","hash":"a48748a2e2619111aa3bb012461dc079ba032453","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/page/4/index.html","hash":"de2b6f922222d3b423c8b68afa26dcc120c6ef73","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/mac/index.html","hash":"66dd9c309033dbdfb4c6a6a429861d5d9239d7d4","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/数据结构与算法/page/5/index.html","hash":"e94055a7d71b441bf13aec91dd428d61b8b0610d","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/计算机网络/index.html","hash":"bfd917f0cac49d2711d03afaeac47f9a72553dd3","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/C/C-primer-plus/index.html","hash":"14d23013a0f70180847a82a1031d4a7d2918d75f","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/数据结构与算法/page/6/index.html","hash":"94e229d1798d147401ff3f681028d31aa3108e7f","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/项目/hexo-blog/index.html","hash":"151a84716ac740886087f840d3bdabf7d351661b","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/数据结构与算法/代码随想录/index.html","hash":"71bc8379999f50aa078734ea89d4d2ecf2af6381","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/数据结构与算法/代码随想录/page/2/index.html","hash":"0938aaeb13f89740d71681f4e634d8bd71625043","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/数据结构与算法/代码随想录/page/4/index.html","hash":"1e456d71f3ffb342f3ccdf49fb32db1f8680d277","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/数据结构与算法/代码随想录/page/3/index.html","hash":"30734d7a4bf5395cca5e51be181130eda9679be8","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/数据结构与算法/代码随想录/page/5/index.html","hash":"c0c0bfb3fbed4800f2d4e0f0ca898913e1f61ed2","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/数据结构与算法/代码随想录/page/6/index.html","hash":"7b6cbb4aea567fef5b09b23ba9e4a9883b6b9b0a","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/C/C-primer-plus/page/2/index.html","hash":"f69b4cd48c2b4fef8e3a152c0ded610c67bc91a5","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/数据结构与算法/英雄哪里出来/index.html","hash":"061041065060823a38b6d46d332040492981d254","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/项目/git/index.html","hash":"79f99ae5d1bf050eb598cdb60c55d0fc77ef4d11","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/数据结构与算法/代码随想录/回溯算法/index.html","hash":"71af759894402f370a2b581b9b01f380bc5cba0e","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/数据结构与算法/代码随想录/双指针法/index.html","hash":"94b00d2f259dadd717588adb3fc944cf9b27b06d","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/数据结构与算法/代码随想录/1-算法性能分析/index.html","hash":"a98809be8d7e2c6a42b06f8fa6d7eef06e0a1869","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/index.html","hash":"3cb1eef3c04b2b06acc6a57d8d9a1004b0799232","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/page/2/index.html","hash":"2e22a3da5bdf49e3019f43a6f0e17c0f7720928f","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/page/3/index.html","hash":"f0c9c435feed4d8e14d7a856fcef55f08003ebcc","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/index.html","hash":"ab687b2ab2834dfc331cbb2bf6590b4ec79ba4f5","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/page/2/index.html","hash":"5c3d40cbdfb556f886058440a16b8b37e5ff055c","modified":1659968244824},{"_id":"public/categories/👨🏻‍💻code/数据结构与算法/代码随想录/数组/index.html","hash":"ce368467c1d9af2b31e541ac694c48580fa4c307","modified":1659968244824},{"_id":"public/tags/材料/index.html","hash":"532aeef212126ad64d21c64ae942809ddb510f03","modified":1659968244824},{"_id":"public/tags/热处理/index.html","hash":"c1c872e4fb5bcda3b3c8860e2edad8b3384c83d0","modified":1659968244824},{"_id":"public/tags/材料性能/index.html","hash":"2e73290449893f23b18b250472b51b0adb53f10c","modified":1659968244824},{"_id":"public/tags/塑性流动挤出/index.html","hash":"96e5210d7212c98a71416501ae43f5f246277e37","modified":1659968244824},{"_id":"public/tags/技能/index.html","hash":"3bac4665341f334e0f05ba9473ee108eeb7d30b1","modified":1659968244824},{"_id":"public/tags/已迁移/index.html","hash":"51b0aa834f96563c28ddc05c363a05e28865dde9","modified":1659968244824},{"_id":"public/tags/六级/index.html","hash":"2f81b457dfc5276e4cceaa4b7551e244d28278ce","modified":1659968244824},{"_id":"public/tags/obsidian/index.html","hash":"c33abea5507065896fbb065ab36d4a289e23f6db","modified":1659968244824},{"_id":"public/tags/动态规划/index.html","hash":"ff4034abd3d36c59a81ee1113c46e69137ef9dac","modified":1659968244824},{"_id":"public/tags/动态规划/page/2/index.html","hash":"9913c20514efc93648831df5f8f435a13f37d962","modified":1659968244824},{"_id":"public/tags/动态规划/page/3/index.html","hash":"4357476f2c8e8a9e43dc8764a02c656f28709793","modified":1659968244824},{"_id":"public/tags/notion/index.html","hash":"cc1fcdb776e7981a5ec5623a37b99cfc77cfc483","modified":1659968244824},{"_id":"public/tags/hexo-问题/index.html","hash":"aeaa4a29f9d6e0615a212d0ebd1f559688a5979b","modified":1659968244824},{"_id":"public/tags/linux命令/index.html","hash":"f5baf62d5f8acfb8e0a506c653b2eea1d5565be8","modified":1659968244824},{"_id":"public/tags/计算机网络/index.html","hash":"b06edaf36cbad059424c217402f5c4811d3998d7","modified":1659968244824},{"_id":"public/tags/函数/index.html","hash":"c0c52a887f2292738ed49261f81dd9dcaae07004","modified":1659968244824},{"_id":"public/tags/C/index.html","hash":"8668360143e3eee98ca76929b10046e2209c983e","modified":1659968244824},{"_id":"public/tags/算法/index.html","hash":"10e8b4541022be69c30e32b91a9c3abb4bf9c43c","modified":1659968244824},{"_id":"public/tags/git/index.html","hash":"2dd2dc48437b557aea589e2882972bdd0b413e9e","modified":1659968244824},{"_id":"public/tags/blog/index.html","hash":"fa3271be531ebc41328b63c587a5b985d7fa0435","modified":1659968244824},{"_id":"public/tags/mac下软件安装/index.html","hash":"c1664e7ff80c3512bfa8f9c5ca33448925bba119","modified":1659968244824},{"_id":"public/tags/hexo/index.html","hash":"fea02f55d4badc22384890948831a6af548c8b20","modified":1659968244824},{"_id":"public/tags/代码随想录/index.html","hash":"49d7bf426fa7fdc56c07e52624ebb27e0bcc65f1","modified":1659968244824},{"_id":"public/tags/复杂度/index.html","hash":"4353ec00d5a2c0539244385507e32ec714e3e083","modified":1659968244824},{"_id":"public/tags/递归/index.html","hash":"1aebbce0a3681aa601b5aa965ead6f87455654b1","modified":1659968244824},{"_id":"public/tags/待解决/index.html","hash":"f53a2ed5687297edf10f9ce042fdfa070ff6dd6f","modified":1659968244824},{"_id":"public/tags/贪心算法/index.html","hash":"b52bf8aea15de48765f069c10dbba1b31927ffb9","modified":1659968244824},{"_id":"public/tags/贪心算法/page/2/index.html","hash":"9990056f3950d3d3dc594359e25daef06f78d12a","modified":1659968244824},{"_id":"public/categories/index.html","hash":"c43b2fa3f23ca120ad6487f1a669b7c6e7fe18ae","modified":1659968244824},{"_id":"public/posts/57173/index.html","hash":"ff9b7fb9ea51efedf0064f76713aa76447d6b012","modified":1659968244824},{"_id":"public/posts/31461/index.html","hash":"26778a7bc42ab91719f96de5fe60e63d9a0428a5","modified":1659968244824},{"_id":"public/posts/21713/index.html","hash":"8774df1a6771586c25c17b94b772e7e6021725b6","modified":1659968244824},{"_id":"public/posts/34285/index.html","hash":"eaec521eff42dc57753810d588fe94227f843850","modified":1659968244824},{"_id":"public/posts/37506/index.html","hash":"24948beb54318a1263cef5f54a122146be29894c","modified":1659968244824},{"_id":"public/posts/42878/index.html","hash":"89e1180f6c467e26020cb00ad18e2b7f72900494","modified":1659968244824},{"_id":"public/posts/35590/index.html","hash":"751fae4ecec2ea79cc4720350db5b2b367740c10","modified":1659968244824},{"_id":"public/posts/60393/index.html","hash":"ecdbbfe7cb0925008082e98bb13f8a6da9e75812","modified":1659968244824},{"_id":"public/posts/52749/index.html","hash":"b8ec60e75425bf4001cbdb544464bc84b0b28275","modified":1659968244824},{"_id":"public/posts/32256/index.html","hash":"d6f4e27860da1f891f28223ca86a9fd44fb1370e","modified":1659968244824},{"_id":"public/posts/36172/index.html","hash":"2a3eb65402c73c6b64dea01186cc86d09a9958c4","modified":1659968244824},{"_id":"public/posts/11552/index.html","hash":"9a57f1d090d21224224c02377f8e1fe81a0c69b0","modified":1659968244824},{"_id":"public/posts/9398/index.html","hash":"425921f8bbdad6e401dcb15046531a9126466d9e","modified":1659968244824},{"_id":"public/posts/26126/index.html","hash":"4048501a0911ce0cb36fbc09f3e3becdca165ced","modified":1659968244824},{"_id":"public/posts/8679/index.html","hash":"56b57e19ca28746f4d92cced1ebcd6b9629f1423","modified":1659968244824},{"_id":"public/posts/4371/index.html","hash":"4c6b90de5d3460ad09e30a2d2c4787feba1e818a","modified":1659968244824},{"_id":"public/posts/1424/index.html","hash":"6e8de33b605f6fc1e4366f8ca8e06c7501e4e59f","modified":1659968244824},{"_id":"public/posts/27260/index.html","hash":"54d8fcde604bd3899ec6cb2376caf342cebcbadc","modified":1659968244824},{"_id":"public/posts/54162/index.html","hash":"688d8e8408b5906626656d65f52f239f01867c92","modified":1659968244824},{"_id":"public/posts/48085/index.html","hash":"d8af63ea06e9a88842c3ff109e0ac36077ab00c3","modified":1659968244824},{"_id":"public/posts/10752/index.html","hash":"d3c3716a6f0ef0a537d5357f4683535e5536b43a","modified":1659968244824},{"_id":"public/posts/31990/index.html","hash":"3f03a2a4e900b10992ca8267039df0a3d791df31","modified":1659968244824},{"_id":"public/posts/60439/index.html","hash":"cf471fd1e44a1402356d96f8c60d106c16658d1b","modified":1659968244824},{"_id":"public/posts/57305/index.html","hash":"d19be30e4c113b25093f0cb399eefc9b1df65470","modified":1659968244824},{"_id":"public/posts/47640/index.html","hash":"74c4cdad78435f216713c75fa0ee5e81b74f1376","modified":1659968244824},{"_id":"public/posts/11266/index.html","hash":"02f769d1d20dbd26f787b120be7722801addf453","modified":1659968244824},{"_id":"public/posts/62628/index.html","hash":"0b2fbf5c79a8e65ce39e2e4115e5e0dc2a295014","modified":1659968244824},{"_id":"public/posts/25586/index.html","hash":"51e8445cc0bcce4fdc1807cac471d4f7791a3ac3","modified":1659968244824},{"_id":"public/posts/38902/index.html","hash":"d703b578eddd91956ab339cc20973f3df11611e3","modified":1659968244824},{"_id":"public/posts/38995/index.html","hash":"6b7cab3b4103c922c4adb7eb73cf4ef3d9d73c56","modified":1659968244824},{"_id":"public/posts/62729/index.html","hash":"b4e8aa85f24c9de02a213e8b58a1c3390ee40f47","modified":1659968244824},{"_id":"public/posts/14830/index.html","hash":"55a3746d6e7461857f18459f29ea2684943dae34","modified":1659968244824},{"_id":"public/posts/30256/index.html","hash":"1f1b89850e601f98ab878b6dc4ed055a376d807d","modified":1659968244824},{"_id":"public/posts/8980/index.html","hash":"160ae047b8d8822191d0814e4f234098f08a1a6b","modified":1659968244824},{"_id":"public/posts/15258/index.html","hash":"8ce9f6e3d5a1c3c40692ca6ab7c97c827e1e17b7","modified":1659968244824},{"_id":"public/posts/29642/index.html","hash":"043ccc19c9bc4b459aa43d7af4c4232c51fba521","modified":1659968244824},{"_id":"public/posts/5255/index.html","hash":"f30cc9787846b627147f0142c003294af787fe7a","modified":1659968244824},{"_id":"public/posts/13413/index.html","hash":"ad033c3888e17b1d16c6a35b91d567d93877d09c","modified":1659968244824},{"_id":"public/posts/45809/index.html","hash":"515c9843eba1c79db6a1bc416a4262018ca01ed4","modified":1659968244824},{"_id":"public/posts/31702/index.html","hash":"ad1bfc03946b7fafe9b9381c989c05fd4e4fd275","modified":1659968244824},{"_id":"public/posts/27967/index.html","hash":"ac2d3b5987f64295c94b21a94abf80c117815813","modified":1659968244824},{"_id":"public/posts/34749/index.html","hash":"8888df1bfee7854e73a92bc82c64d1f86aa3b174","modified":1659968244824},{"_id":"public/posts/31294/index.html","hash":"382e3abc7b2996993bbfecca6695d492523d67be","modified":1659968244824},{"_id":"public/posts/9689/index.html","hash":"9412357f2f2dd50cc0da1d82ed0e67dbadc674f5","modified":1659968244824},{"_id":"public/posts/43575/index.html","hash":"65f269a1c53ab0f1015a3c2295f02835a2fadc78","modified":1659968244824},{"_id":"public/posts/65372/index.html","hash":"9ddbe3c47d18b1b69afa58ad2d8da02861da0580","modified":1659968244824},{"_id":"public/posts/17411/index.html","hash":"af7e0c7626003bc33fc4d2d56fb991d65ef8b805","modified":1659968244824},{"_id":"public/posts/65236/index.html","hash":"b19df3d15eddfdd3228b09d5db4a0fc3b090bed7","modified":1659968244824},{"_id":"public/posts/33325/index.html","hash":"1ee18c2d99f9d20905b2f199b9dd33afc224fb31","modified":1659968244824},{"_id":"public/posts/64386/index.html","hash":"90cbb042b64ec2451393c39fb8bbe7b6f2fdcf7d","modified":1659968244824},{"_id":"public/posts/20576/index.html","hash":"8904eaf712e0716b61ee6750ca53d7e8e3bab63c","modified":1659968244824},{"_id":"public/posts/13436/index.html","hash":"f345a2d1534ddc961640af790034885488ed9500","modified":1659968244824},{"_id":"public/posts/15457/index.html","hash":"0585c664abbb9abc9357c4a434f0512ae5676f44","modified":1659968244824},{"_id":"public/posts/49277/index.html","hash":"3d8eff91f38fe73397bcdcbaafb575a88e17f14b","modified":1659968244824},{"_id":"public/posts/42381/index.html","hash":"3fc6964b6e87db818c9f30c6b971f92b85cbe1da","modified":1659968244824},{"_id":"public/posts/16303/index.html","hash":"1499096df63b4df87cbf999f1e622cae3933410d","modified":1659968244824},{"_id":"public/posts/37878/index.html","hash":"a540adb38f0fc3e2feac114f88849d9dc3de6a80","modified":1659968244824},{"_id":"public/posts/14697/index.html","hash":"3694864da1f008fc5123e9be6062445aefb35a82","modified":1659968244824},{"_id":"public/posts/12295/index.html","hash":"bff06c94db2ad1150852641fd7c5238f2dbb10c1","modified":1659968244824},{"_id":"public/posts/12294/index.html","hash":"aaa51e99dae0b4594184d8dd04c39b4587d213cb","modified":1659968244824},{"_id":"public/posts/36387/index.html","hash":"b4713b1ac3981277f85201987b07969251a92e95","modified":1659968244824},{"_id":"public/posts/47598/index.html","hash":"cac0ab89c7d8c7416b4bb358898ff5742ddbb36a","modified":1659968244824},{"_id":"public/posts/22082/index.html","hash":"85fbbb9c1b68bd7a790257bd0b433baac7516c6d","modified":1659968244824},{"_id":"public/posts/36733/index.html","hash":"3ba579cbcc3d45d528008fede53a6edc132da612","modified":1659968244824},{"_id":"public/posts/60394/index.html","hash":"a8b583568d69e38c27044fcd602f1bfeff314d4a","modified":1659968244824},{"_id":"public/posts/11772/index.html","hash":"f6eb839b791d05dc2089bf68489faff99cb6814b","modified":1659968244824},{"_id":"public/posts/19528/index.html","hash":"2a7a560827852d24fcc504b34b4aa15b315ad042","modified":1659968244824},{"_id":"public/posts/52144/index.html","hash":"1fccd048849334d1f3a4b441a5f69a9c7d2c30e1","modified":1659968244824},{"_id":"public/posts/34584/index.html","hash":"9e60b89322a934ec85c1dce56b9f464938fa49f0","modified":1659968244824},{"_id":"public/posts/2006/index.html","hash":"25302e508d857f93582a4a33028b49f721e33fac","modified":1659968244824},{"_id":"public/posts/36637/index.html","hash":"6f22fd4f22d29e8c8a4d1dd7787bb26a8aac5e80","modified":1659968244824},{"_id":"public/posts/29968/index.html","hash":"9a0dc840012b9a021142fef46e2295c8a9e68f7d","modified":1659968244824},{"_id":"public/posts/35757/index.html","hash":"0637beeece4ed7f40de5d3be12ff140c971973e5","modified":1659968244824},{"_id":"public/posts/18356/index.html","hash":"40190a22df8390aa7d989594f013b66e267c9123","modified":1659968244824},{"_id":"public/posts/21392/index.html","hash":"e78f149db91d5e844c99dd7ea80dbcd6817ac338","modified":1659968244824},{"_id":"public/posts/54708/index.html","hash":"7657e9928ffc74bec3a8dd13e03e1f76080ed3f0","modified":1659968244824},{"_id":"public/posts/43465/index.html","hash":"ef255e164e23e86b9a250d0a8ae274b1b4866411","modified":1659968244824},{"_id":"public/posts/52728/index.html","hash":"1e537fd8c117e143e92ffa60a924aff049df2b24","modified":1659968244824},{"_id":"public/posts/44424/index.html","hash":"96472e9660991586bd445515cb947d4e4a96c82f","modified":1659968244824},{"_id":"public/posts/28967/index.html","hash":"085253c0ebd3d3336c3877eaf455a0991ab606fc","modified":1659968244824},{"_id":"public/posts/25410/index.html","hash":"7fa782b7daca88db569dc14c7e02baaf7cacd77d","modified":1659968244824},{"_id":"public/posts/3/index.html","hash":"9cdd68a715f85639a9a05f4d3ce05f90badaa321","modified":1659968244824},{"_id":"public/posts/4/index.html","hash":"de15ddd032f519bc9756a7fa9605316cab0927cf","modified":1659968244824},{"_id":"public/posts/74/index.html","hash":"8c1bed0621ea5347e5f9e29bce036f90a73ffdfc","modified":1659968244824},{"_id":"public/posts/37179/index.html","hash":"7d760a7e99f5ee5062541758915d86cf25f537d6","modified":1659968244824},{"_id":"public/posts/38547/index.html","hash":"6f9462394ce43b00a6ee0646fb8061912829a46a","modified":1659968244824},{"_id":"public/posts/4339/index.html","hash":"0798c9248946c8367b5881a94e1c3a0dd68dc6d8","modified":1659968244824},{"_id":"public/posts/18965/index.html","hash":"81ffeb88fd31748ccc9561240d9292e7a83542d2","modified":1659968244824},{"_id":"public/posts/42003/index.html","hash":"7cf6fa5766a5872631db1ea854c60ce6a583aeaf","modified":1659968244824},{"_id":"public/posts/1/index.html","hash":"6bd86e1db02d014100769e3430a053d519cb33c8","modified":1659968244824},{"_id":"public/posts/61990/index.html","hash":"c797f4ba93615f92a6c14673255358b818f5a967","modified":1659968244824},{"_id":"public/posts/5566/index.html","hash":"cfd49fb8f37fb4165990ea71d7bed2c33bdcd5b5","modified":1659968244824},{"_id":"public/posts/2/index.html","hash":"62e0e274cc43a02b9804313f0e6c8dd40bad8716","modified":1659968244824},{"_id":"public/index.html","hash":"dd4afb31c19a3928830c7bb1f9671f1d21e745bb","modified":1659968244824},{"_id":"public/page/3/index.html","hash":"8e89162526a882c2106cc7846b9d81569f6f64fe","modified":1659968244824},{"_id":"public/page/2/index.html","hash":"3a7a3e6f381bff649e066f16837c5b2ca6bf0c26","modified":1659968244824},{"_id":"public/page/6/index.html","hash":"ca08261c01952acb1c0a32baa2fa7bb275366ced","modified":1659968244824},{"_id":"public/page/4/index.html","hash":"6b8d2543523f967bb1d3734640fd2b8a644cd72a","modified":1659968244824},{"_id":"public/page/7/index.html","hash":"53682de79881d543c5d5ca14eb9e0c376b003211","modified":1659968244824},{"_id":"public/page/8/index.html","hash":"7839626903d1ca6c63fd9b6c832826c8ca204b39","modified":1659968244824},{"_id":"public/page/5/index.html","hash":"9667b871b685edd7998194fa5148585e02960105","modified":1659968244824},{"_id":"public/page/9/index.html","hash":"8af25b099cc5a4e2e6a16f1f6026a7e844b228fe","modified":1659968244824},{"_id":"public/page/10/index.html","hash":"99f1c7e7d9e2cfb31fae06ae15bcebb02776db2c","modified":1659968244824},{"_id":"public/tags/数组/index.html","hash":"2b427e68319130a69b13330aa04521cc2db3a83e","modified":1659968244824},{"_id":"public/links/index.html","hash":"c02494ce65b3d7b1ad86c7c57050b12dec6339f2","modified":1659968244824},{"_id":"public/CNAME","hash":"8a89dc1c75eec6ae663e7fa7fd9c2817b94a69fc","modified":1659968244824},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1659968244824},{"_id":"public/img/Pasted image 20220609175744.png","hash":"66bd2eb77e341fedadecb8beac5b0d36e4a80127","modified":1659968244824},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1659968244824},{"_id":"public/img/fan.png","hash":"63b2dfc00a64bd717c14c714d2fc1d0cc2782bcd","modified":1659968244824},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1659968244824},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1659968244824},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1659968244824},{"_id":"public/css/hbe.style.css","hash":"b0a0077cb588c0941823905fcc383aa7509ade73","modified":1659968244824},{"_id":"public/lib/hbe.js","hash":"136dba00826bdd086153bf0acb5473aea7183ad1","modified":1659968244824},{"_id":"public/css/highlight.css","hash":"a2c84a974dc81a2612b6cdd9bc5991f5ae5c75cd","modified":1659968244824},{"_id":"public/img/air.png","hash":"1d7119be8f53f8be73982d2c44a2121489392d2e","modified":1659968244824},{"_id":"public/img/网站头像.png","hash":"a68f88a26a8a940567cae302bfe8fc3ba9f2e715","modified":1659968244824},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1659968244824},{"_id":"public/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1659968244824},{"_id":"public/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1659968244824},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1659968244824},{"_id":"public/js/leancloud.js","hash":"ed23208de670d7a5900f2669cc715e2479885958","modified":1659968244824},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1659968244824},{"_id":"public/js/boot.js","hash":"6b7319b36ca2e2d3afe336623ef438994f3d26de","modified":1659968244824},{"_id":"public/js/plugins.js","hash":"b4ca98f68bf09a74678932e4ac73ac56a7c01e03","modified":1659968244824},{"_id":"public/js/utils.js","hash":"d49d462f8547de07ca49e1ea195dff864b08706b","modified":1659968244824},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1659968244824},{"_id":"public/img/BAB手势 2022-06-09 17.21.49.excalidraw.html","hash":"bfb40174a1a170880df90900660ba9db4197bf18","modified":1659968244824},{"_id":"public/css/main.css","hash":"ec1656dcd5a591bf342a14e3fa675471e6772c2b","modified":1659968244824},{"_id":"public/img/Pasted image 20220608090057.png","hash":"2d85c9e9253e0f14a48503f8b6ee479db2cf2807","modified":1659968244824},{"_id":"public/img/Pasted image 20220614145454.png","hash":"6e38669ea46478479a7a79f8cd9a8e051436d307","modified":1659968244824},{"_id":"public/img/Pasted image 20220608090858.png","hash":"4b26f3c619bbb5642209fdbdb00239615a5de4c4","modified":1659968244824},{"_id":"public/img/1251655078974_.pic.jpg","hash":"23e1c68bda12855e9b97a002b5d7c31e89521570","modified":1659968244824},{"_id":"public/img/Pasted image 20220609175258.png","hash":"1e69e06ffa2221278bf0be927b19514a3f3de840","modified":1659968244824},{"_id":"public/img/Pasted image 20220609175251.png","hash":"1e69e06ffa2221278bf0be927b19514a3f3de840","modified":1659968244824},{"_id":"public/img/1241655078859_.pic.jpg","hash":"ffab639c499549f58e127ec7cfd783b19ef7e691","modified":1659968244824},{"_id":"public/img/Pasted image 20220614162823.png","hash":"ff7d37a756ecd2436949938cf7cc22767e8be9a7","modified":1659968244824},{"_id":"public/img/Pasted image 20220610104400.png","hash":"8b870176211ff64e179e88178ce1aad7bccdfda8","modified":1659968244824},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1659968244824},{"_id":"public/img/17.用最少数量的箭引爆气球(carl).mp4","hash":"368ab66fcc659f07ffe8e7af515410c9be7b5e7a","modified":1659968244824},{"_id":"public/img/Pasted image 20220609175653.png","hash":"2985057192ead4c89358798c0ecad4a8d31454af","modified":1659968244824},{"_id":"public/img/default.jpg","hash":"f40a20c8860c95e88ac134620b25a48be8e43a30","modified":1659968244824},{"_id":"public/img/19.划分字母区间(carl).mp4","hash":"170a6939c657015d1f612e161137edd3f2ff9482","modified":1659968244824},{"_id":"source/_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/测试.md","hash":"81caecc8c14e0895b28fe30bc74d18e59f60df6b","modified":1660026618822}],"Category":[{"name":"👨🏻‍🎓科研","_id":"cl6ku8fir0004e0mg90ahcv1i"},{"name":"🚀技能","_id":"cl6ku8fix000pe0mg71ks4zmr"},{"name":"🏫学校","_id":"cl6ku8fj1001be0mgg0wq29oo"},{"name":"研究生考试","parent":"cl6ku8fj1001be0mgg0wq29oo","_id":"cl6ku8fj4001we0mgbd3xasco"},{"name":"obsidian","parent":"cl6ku8fix000pe0mg71ks4zmr","_id":"cl6ku8fj60028e0mg1fvr9k48"},{"name":"notion","parent":"cl6ku8fix000pe0mg71ks4zmr","_id":"cl6ku8fja0031e0mga15vc1tb"},{"name":"👨🏻‍💻code","_id":"cl6ku8fjb003ge0mgf70u94h5"},{"name":"项目","parent":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fjq006xe0mg84qz6atm"},{"name":"学习感悟","parent":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fjr0073e0mg0gneb4xh"},{"name":"C++","parent":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fjs007se0mgdos2h84i"},{"name":"数据结构与算法","parent":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fjs007we0mg4u2i1qfz"},{"name":"mac","parent":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fjs0080e0mg7bojczrs"},{"name":"计算机网络","parent":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fjt0087e0mg8xgr23f9"},{"name":"hexo blog","parent":"cl6ku8fjq006xe0mg84qz6atm","_id":"cl6ku8fjx009oe0mgc202c3py"},{"name":"C++ primer plus","parent":"cl6ku8fjs007se0mgdos2h84i","_id":"cl6ku8fjz00a3e0mgf8p88g05"},{"name":"代码随想录","parent":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fjz00a7e0mg3tm8eh7a"},{"name":"英雄哪里出来","parent":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fk400cde0mg6m4ubl8v"},{"name":"git","parent":"cl6ku8fjq006xe0mg84qz6atm","_id":"cl6ku8fk500cje0mg80ynb830"},{"name":"回溯算法","parent":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fk600dbe0mgbte7friv"},{"name":"双指针法","parent":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fk600dde0mg7qtid23k"},{"name":"1.算法性能分析","parent":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fk600dhe0mgbd7469yx"},{"name":"动态规划","parent":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fk700dze0mgbquc9705"},{"name":"贪心算法","parent":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fka00fte0mg2goc54t7"},{"name":"数组","parent":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkh00jbe0mg7tow3c9v"}],"Data":[],"Page":[{"_content":"<script type=\"text/javascript\" src=\"js/bodymovin.js\"></script>\n<script type=\"text/javascript\" src=\"js/data.js\"></script>\n\n<div id=\"svgContainer\"></div>\n\n<script type=\"text/javascript\">\nvar svgContainer = document.getElementById('svgContainer');\nvar animItem = bodymovin.loadAnimation({\n  wrapper: svgContainer,\n  animType: 'svg',\n  loop: true,\n  animationData: JSON.parse(animationData)\n});\n</script>\n","source":"404.md","raw":"<script type=\"text/javascript\" src=\"js/bodymovin.js\"></script>\n<script type=\"text/javascript\" src=\"js/data.js\"></script>\n\n<div id=\"svgContainer\"></div>\n\n<script type=\"text/javascript\">\nvar svgContainer = document.getElementById('svgContainer');\nvar animItem = bodymovin.loadAnimation({\n  wrapper: svgContainer,\n  animType: 'svg',\n  loop: true,\n  animationData: JSON.parse(animationData)\n});\n</script>\n","date":"2022-07-26T02:14:38.056Z","updated":"2022-06-02T09:23:40.010Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cl6ku8fin0000e0mg8qv26xmb","content":"<div id=\"svgContainer\"></div>\n<script type=\"text/javascript\">\nvar svgContainer = document.getElementById('svgContainer');\nvar animItem = bodymovin.loadAnimation({\n  wrapper: svgContainer,\n  animType: 'svg',\n  loop: true,\n  animationData: JSON.parse(animationData)\n});\n</script>\n","site":{"data":{}},"wordcount":181,"excerpt":"","more":"<script type=\"text/javascript\" src=\"js/bodymovin.js\"></script>\n<script type=\"text/javascript\" src=\"js/data.js\"></script>\n<div id=\"svgContainer\"></div>\n<script type=\"text/javascript\">\nvar svgContainer = document.getElementById('svgContainer');\nvar animItem = bodymovin.loadAnimation({\n  wrapper: svgContainer,\n  animType: 'svg',\n  loop: true,\n  animationData: JSON.parse(animationData)\n});\n</script>\n"},{"title":"about","date":"2022-06-19T09:25:53.000Z","layout":"about","_content":"\n一个努力转码的选手\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-06-19 17:25:53\nlayout: about\n---\n\n一个努力转码的选手\n\n","updated":"2022-06-19T09:36:03.630Z","path":"about/index.html","comments":1,"_id":"cl6ku8fiq0002e0mgb4d11k7b","content":"<p>一个努力转码的选手</p>\n","site":{"data":{}},"wordcount":9,"excerpt":"","more":"<p>一个努力转码的选手</p>\n"},{"title":"categories","date":"2018-09-30T09:25:30.000Z","type":"categories","layout":"categories","_content":"\n","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---\n\n","updated":"2022-06-02T08:46:03.270Z","path":"categories/index.html","comments":1,"_id":"cl6ku8fis0006e0mgaar5hcc6","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""},{"title":"contact","date":"2018-09-30T09:25:30.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2018-09-30 17:25:30\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2022-06-02T10:08:14.260Z","path":"contact/index.html","comments":1,"_id":"cl6ku8fit0008e0mgabqs5uwa","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""},{"title":"tags","date":"2018-09-30T10:23:38.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-09-30 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2022-06-02T08:46:43.490Z","path":"tags/index.html","comments":1,"_id":"cl6ku8fiu000ae0mg6hq27zw2","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""},{"_content":"","source":"杂项/零散笔记/简历.md","raw":"","date":"2022-08-02T02:38:48.087Z","updated":"2022-08-02T02:38:47.702Z","path":"杂项/零散笔记/简历.html","title":"","comments":1,"layout":"page","_id":"cl6ku8fiv000ee0mgdq0d4ja3","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""}],"Post":[{"id":"c94962a5-c07b-4fe5-b5c1-4d72c4fb033a","title":"科研材料总结","date":"2022-06-10T12:37:00.000Z","abbrlink":52144,"_content":"\n\n\n\n\n\n硬度单位\n洛氏硬度：HR；布氏硬度：HB；维氏硬度：HV\n\n自用[^2]\n\n# 1 镁合金\n## 1.1 硬度\n镁合金型号：**AZ31B(HR70)** AZ61 AZ91  ZK60 WE40\n镁合金的hv：45~75不等\n\n\n纯铜：HB85，50~65HV\n纯铝：HB28\n7075铝合金：退火后的HV140\n\n\n**硬度低于纯铜的材料：**\n**纯铜**：HB：85，HV：50~65\n\t退火(软)铜硬度为：50HV\n\n304不锈钢：\n淘宝：硬度在HBW85左右(淘宝)\n网上：HB187，HRB90，HV200\n\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207041914021.png)\n\n\n# 2 模具材料硬度\nskh51 热处理淬火后硬度可以达到64HRC\n\nskd11 热处理后硬度58~60HRC\n\n# 3 [[退火]]\n\n\n\n\n\n\n\n\n\n[^2]: [ob](obsidian://advanced-uri?vault=Documents&uid=c94962a5-c07b-4fe5-b5c1-4d72c4fb033a)","source":"_posts/👨🏻‍🎓科研/科研材料总结.md","raw":"---\nid: c94962a5-c07b-4fe5-b5c1-4d72c4fb033a\ntitle: 科研材料总结\ndate: '2022-06-10 20:37'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F393科研\"\ntags:\n  - 材料\nabbrlink: 52144\n---\n\n\n\n\n\n\n硬度单位\n洛氏硬度：HR；布氏硬度：HB；维氏硬度：HV\n\n自用[^2]\n\n# 1 镁合金\n## 1.1 硬度\n镁合金型号：**AZ31B(HR70)** AZ61 AZ91  ZK60 WE40\n镁合金的hv：45~75不等\n\n\n纯铜：HB85，50~65HV\n纯铝：HB28\n7075铝合金：退火后的HV140\n\n\n**硬度低于纯铜的材料：**\n**纯铜**：HB：85，HV：50~65\n\t退火(软)铜硬度为：50HV\n\n304不锈钢：\n淘宝：硬度在HBW85左右(淘宝)\n网上：HB187，HRB90，HV200\n\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207041914021.png)\n\n\n# 2 模具材料硬度\nskh51 热处理淬火后硬度可以达到64HRC\n\nskd11 热处理后硬度58~60HRC\n\n# 3 [[退火]]\n\n\n\n\n\n\n\n\n\n[^2]: [ob](obsidian://advanced-uri?vault=Documents&uid=c94962a5-c07b-4fe5-b5c1-4d72c4fb033a)","slug":"👨🏻‍🎓科研/科研材料总结","published":1,"updated":"2022-07-12T09:02:14.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fio0001e0mghlvw3bkw","content":"<p>硬度单位<br>\n洛氏硬度：HR；布氏硬度：HB；维氏硬度：HV</p>\n<p>自用<sup id=\"fnref:2\" class=\"footnote-ref\"><a href=\"#fn:2\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"ob\n\">[2]</span></a></sup></p>\n<h1 id=\"1-镁合金\"><a class=\"markdownIt-Anchor\" href=\"#1-镁合金\"></a> 1 镁合金</h1>\n<h2 id=\"11-硬度\"><a class=\"markdownIt-Anchor\" href=\"#11-硬度\"></a> 1.1 硬度</h2>\n<p>镁合金型号：<strong>AZ31B(HR70)</strong> AZ61 AZ91  ZK60 WE40<br>\n镁合金的hv：45~75不等</p>\n<p>纯铜：HB85，50~65HV<br>\n纯铝：HB28<br>\n7075铝合金：退火后的HV140</p>\n<p><strong>硬度低于纯铜的材料：</strong><br>\n<strong>纯铜</strong>：HB：85，HV：50~65<br>\n退火(软)铜硬度为：50HV</p>\n<p>304不锈钢：<br>\n淘宝：硬度在HBW85左右(淘宝)<br>\n网上：HB187，HRB90，HV200</p>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207041914021.png\" alt=\"\"></p>\n<h1 id=\"2-模具材料硬度\"><a class=\"markdownIt-Anchor\" href=\"#2-模具材料硬度\"></a> 2 模具材料硬度</h1>\n<p>skh51 热处理淬火后硬度可以达到64HRC</p>\n<p>skd11 热处理后硬度58~60HRC</p>\n<h1 id=\"3-退火\"><a class=\"markdownIt-Anchor\" href=\"#3-退火\"></a> 3 [[退火]]</h1>\n<section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:2\" class=\"footnote-text\"><span><a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=c94962a5-c07b-4fe5-b5c1-4d72c4fb033a\">ob</a>\n<a href=\"#fnref:2\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>","site":{"data":{}},"wordcount":270,"excerpt":"","more":"<p>硬度单位<br />\n洛氏硬度：HR；布氏硬度：HB；维氏硬度：HV</p>\n<p>自用<sup id=\"fnref:2\" class=\"footnote-ref\"><a href=\"#fn:2\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"ob\n\">[2]</span></a></sup></p>\n<h1 id=\"1-镁合金\"><a class=\"markdownIt-Anchor\" href=\"#1-镁合金\"></a> 1 镁合金</h1>\n<h2 id=\"11-硬度\"><a class=\"markdownIt-Anchor\" href=\"#11-硬度\"></a> 1.1 硬度</h2>\n<p>镁合金型号：<strong>AZ31B(HR70)</strong> AZ61 AZ91  ZK60 WE40<br />\n镁合金的hv：45~75不等</p>\n<p>纯铜：HB85，50~65HV<br />\n纯铝：HB28<br />\n7075铝合金：退火后的HV140</p>\n<p><strong>硬度低于纯铜的材料：</strong><br />\n<strong>纯铜</strong>：HB：85，HV：50~65<br />\n退火(软)铜硬度为：50HV</p>\n<p>304不锈钢：<br />\n淘宝：硬度在HBW85左右(淘宝)<br />\n网上：HB187，HRB90，HV200</p>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207041914021.png\" alt=\"\" /></p>\n<h1 id=\"2-模具材料硬度\"><a class=\"markdownIt-Anchor\" href=\"#2-模具材料硬度\"></a> 2 模具材料硬度</h1>\n<p>skh51 热处理淬火后硬度可以达到64HRC</p>\n<p>skd11 热处理后硬度58~60HRC</p>\n<h1 id=\"3-退火\"><a class=\"markdownIt-Anchor\" href=\"#3-退火\"></a> 3 [[退火]]</h1>\n<section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:2\" class=\"footnote-text\"><span><a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=c94962a5-c07b-4fe5-b5c1-4d72c4fb033a\">ob</a>\n<a href=\"#fnref:2\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>"},{"id":"21d4dd80-d623-4f79-abdd-2ddc6281f7d5","title":"🏡 Home","date":"2022-06-22T03:57:00.000Z","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206211042389.jpg","index_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206240956178.jpg","hide":true,"abbrlink":20576,"_content":"\n\n# 1 👨🏻‍💻code\n- **数据结构与算法**：[[代码随想录]]🌵\n- **项目**：[[webserver]]\n- **简历**：[[简历]]\n- **C++ primer plus**: \n\n\n# 2 👨🏻‍🎓科研\n\n\n# 3 🏫学校\n**考试**： [[最优化]]\n\n# 4 🏘生活\n\n\n# 5 🚀技能\n## 5.1 软件学习\n- **notion**：[[函数公式]]\n- **obsidian**：[[templater]]🌵[[obsidian media 插件]]\n\n\n---\n\n自用跳转连接：[ob](obsidian://advanced-uri?vault=Documents&uid=21d4dd80-d623-4f79-abdd-2ddc6281f7d5)， [blog](http://localhost:4000/2022/06/22/home/)\n⚠️upload failed, check dev console\n\n\n\n\n","source":"_posts/🏡 Home.md","raw":"---\nid: 21d4dd80-d623-4f79-abdd-2ddc6281f7d5\ntitle: \"\\U0001F3E1 Home\"\ndate: '2022-06-22 11:57'\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206211042389.jpg'\nindex_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206240956178.jpg'\nhide: true\nabbrlink: 20576\n---\n\n\n# 1 👨🏻‍💻code\n- **数据结构与算法**：[[代码随想录]]🌵\n- **项目**：[[webserver]]\n- **简历**：[[简历]]\n- **C++ primer plus**: \n\n\n# 2 👨🏻‍🎓科研\n\n\n# 3 🏫学校\n**考试**： [[最优化]]\n\n# 4 🏘生活\n\n\n# 5 🚀技能\n## 5.1 软件学习\n- **notion**：[[函数公式]]\n- **obsidian**：[[templater]]🌵[[obsidian media 插件]]\n\n\n---\n\n自用跳转连接：[ob](obsidian://advanced-uri?vault=Documents&uid=21d4dd80-d623-4f79-abdd-2ddc6281f7d5)， [blog](http://localhost:4000/2022/06/22/home/)\n⚠️upload failed, check dev console\n\n\n\n\n","slug":"🏡 Home","published":1,"updated":"2022-08-02T02:33:55.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fir0003e0mgdhnm0e4u","content":"<h1 id=\"1-code\"><a class=\"markdownIt-Anchor\" href=\"#1-code\"></a> 1 👨🏻‍💻code</h1>\n<ul>\n<li><strong>数据结构与算法</strong>：[[代码随想录]]🌵</li>\n<li><strong>项目</strong>：[[webserver]]</li>\n<li><strong>简历</strong>：[[简历]]</li>\n<li><strong>C++ primer plus</strong>:</li>\n</ul>\n<h1 id=\"2-科研\"><a class=\"markdownIt-Anchor\" href=\"#2-科研\"></a> 2 👨🏻‍🎓科研</h1>\n<h1 id=\"3-学校\"><a class=\"markdownIt-Anchor\" href=\"#3-学校\"></a> 3 🏫学校</h1>\n<p><strong>考试</strong>： [[最优化]]</p>\n<h1 id=\"4-生活\"><a class=\"markdownIt-Anchor\" href=\"#4-生活\"></a> 4 🏘生活</h1>\n<h1 id=\"5-技能\"><a class=\"markdownIt-Anchor\" href=\"#5-技能\"></a> 5 🚀技能</h1>\n<h2 id=\"51-软件学习\"><a class=\"markdownIt-Anchor\" href=\"#51-软件学习\"></a> 5.1 软件学习</h2>\n<ul>\n<li><strong>notion</strong>：[[函数公式]]</li>\n<li><strong>obsidian</strong>：[[templater]]🌵[[obsidian media 插件]]</li>\n</ul>\n<hr>\n<p>自用跳转连接：<a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=21d4dd80-d623-4f79-abdd-2ddc6281f7d5\">ob</a>， <a href=\"http://localhost:4000/2022/06/22/home/\">blog</a><br>\n⚠️upload failed, check dev console</p>\n","site":{"data":{}},"wordcount":214,"excerpt":"","more":"<h1 id=\"1-code\"><a class=\"markdownIt-Anchor\" href=\"#1-code\"></a> 1 👨🏻‍💻code</h1>\n<ul>\n<li><strong>数据结构与算法</strong>：[[代码随想录]]🌵</li>\n<li><strong>项目</strong>：[[webserver]]</li>\n<li><strong>简历</strong>：[[简历]]</li>\n<li><strong>C++ primer plus</strong>:</li>\n</ul>\n<h1 id=\"2-科研\"><a class=\"markdownIt-Anchor\" href=\"#2-科研\"></a> 2 👨🏻‍🎓科研</h1>\n<h1 id=\"3-学校\"><a class=\"markdownIt-Anchor\" href=\"#3-学校\"></a> 3 🏫学校</h1>\n<p><strong>考试</strong>： [[最优化]]</p>\n<h1 id=\"4-生活\"><a class=\"markdownIt-Anchor\" href=\"#4-生活\"></a> 4 🏘生活</h1>\n<h1 id=\"5-技能\"><a class=\"markdownIt-Anchor\" href=\"#5-技能\"></a> 5 🚀技能</h1>\n<h2 id=\"51-软件学习\"><a class=\"markdownIt-Anchor\" href=\"#51-软件学习\"></a> 5.1 软件学习</h2>\n<ul>\n<li><strong>notion</strong>：[[函数公式]]</li>\n<li><strong>obsidian</strong>：[[templater]]🌵[[obsidian media 插件]]</li>\n</ul>\n<hr />\n<p>自用跳转连接：<a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=21d4dd80-d623-4f79-abdd-2ddc6281f7d5\">ob</a>， <a href=\"http://localhost:4000/2022/06/22/home/\">blog</a><br />\n⚠️upload failed, check dev console</p>\n"},{"id":"0a90dfa0-acef-4bf3-bb8b-0b72eb035933","title":"切割材料+制样","date":"2022-06-14T08:20:00.000Z","abbrlink":47598,"_content":"\n\n# 1 切割\n切割圆棒和圆盘分离处12mm范围内，\n<img src=\"https://s1.vika.cn/space/2022/06/14/2d7ff49ea0c8442ab6e80f41c0f30a32\"\nwidth=\"500\" height=\"500\">\n\n# 2 制样\n \n第一次溶液做点稀点：一次性杯子，倒4分之一的水(配套粉的)，4勺粉。搅拌至拉丝\n倒到模具当中，先倒一点(3分之一)，然后用镊子在把材料拿起在压下去\n>主要让切割材料底下溶液渗透均匀\n![|400](https://s1.vika.cn/space/2022/06/14/7139d0510c9e43e2a3bcc0b7816cfbe8)\n\n\n第二次溶液做点稠点：一次性杯子，倒3分之一的水(配套粉的)，7勺粉。搅拌至拉丝\n这次把模具倒满\n\n\n\n\n\n\n\n\n\n---\n跳转回ob：[ob](obsidian://advanced-uri?vault=Documents&uid=0a90dfa0-acef-4bf3-bb8b-0b72eb035933)\n\n\n\n","source":"_posts/👨🏻‍🎓科研/切割材料+制样.md","raw":"---\nid: 0a90dfa0-acef-4bf3-bb8b-0b72eb035933\ntitle: 切割材料+制样\ndate: '2022-06-14 16:20'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F393科研\"\ntags:\n  - null\nabbrlink: 47598\n---\n\n\n# 1 切割\n切割圆棒和圆盘分离处12mm范围内，\n<img src=\"https://s1.vika.cn/space/2022/06/14/2d7ff49ea0c8442ab6e80f41c0f30a32\"\nwidth=\"500\" height=\"500\">\n\n# 2 制样\n \n第一次溶液做点稀点：一次性杯子，倒4分之一的水(配套粉的)，4勺粉。搅拌至拉丝\n倒到模具当中，先倒一点(3分之一)，然后用镊子在把材料拿起在压下去\n>主要让切割材料底下溶液渗透均匀\n![|400](https://s1.vika.cn/space/2022/06/14/7139d0510c9e43e2a3bcc0b7816cfbe8)\n\n\n第二次溶液做点稠点：一次性杯子，倒3分之一的水(配套粉的)，7勺粉。搅拌至拉丝\n这次把模具倒满\n\n\n\n\n\n\n\n\n\n---\n跳转回ob：[ob](obsidian://advanced-uri?vault=Documents&uid=0a90dfa0-acef-4bf3-bb8b-0b72eb035933)\n\n\n\n","slug":"👨🏻‍🎓科研/切割材料+制样","published":1,"updated":"2022-07-12T09:02:14.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fit0007e0mg445walpp","content":"<h1 id=\"1-切割\"><a class=\"markdownIt-Anchor\" href=\"#1-切割\"></a> 1 切割</h1>\n<p>切割圆棒和圆盘分离处12mm范围内，<br>\n<img src=\"https://s1.vika.cn/space/2022/06/14/2d7ff49ea0c8442ab6e80f41c0f30a32\" width=\"500\" height=\"500\"></p>\n<h1 id=\"2-制样\"><a class=\"markdownIt-Anchor\" href=\"#2-制样\"></a> 2 制样</h1>\n<p>第一次溶液做点稀点：一次性杯子，倒4分之一的水(配套粉的)，4勺粉。搅拌至拉丝<br>\n倒到模具当中，先倒一点(3分之一)，然后用镊子在把材料拿起在压下去</p>\n<blockquote>\n<p>主要让切割材料底下溶液渗透均匀<br>\n<img src=\"https://s1.vika.cn/space/2022/06/14/7139d0510c9e43e2a3bcc0b7816cfbe8\" alt=\"|400\"></p>\n</blockquote>\n<p>第二次溶液做点稠点：一次性杯子，倒3分之一的水(配套粉的)，7勺粉。搅拌至拉丝<br>\n这次把模具倒满</p>\n<hr>\n<p>跳转回ob：<a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=0a90dfa0-acef-4bf3-bb8b-0b72eb035933\">ob</a></p>\n","site":{"data":{}},"wordcount":165,"excerpt":"","more":"<h1 id=\"1-切割\"><a class=\"markdownIt-Anchor\" href=\"#1-切割\"></a> 1 切割</h1>\n<p>切割圆棒和圆盘分离处12mm范围内，<br />\n<img src=\"https://s1.vika.cn/space/2022/06/14/2d7ff49ea0c8442ab6e80f41c0f30a32\"\nwidth=\"500\" height=\"500\"></p>\n<h1 id=\"2-制样\"><a class=\"markdownIt-Anchor\" href=\"#2-制样\"></a> 2 制样</h1>\n<p>第一次溶液做点稀点：一次性杯子，倒4分之一的水(配套粉的)，4勺粉。搅拌至拉丝<br />\n倒到模具当中，先倒一点(3分之一)，然后用镊子在把材料拿起在压下去</p>\n<blockquote>\n<p>主要让切割材料底下溶液渗透均匀<br />\n<img src=\"https://s1.vika.cn/space/2022/06/14/7139d0510c9e43e2a3bcc0b7816cfbe8\" alt=\"|400\" /></p>\n</blockquote>\n<p>第二次溶液做点稠点：一次性杯子，倒3分之一的水(配套粉的)，7勺粉。搅拌至拉丝<br />\n这次把模具倒满</p>\n<hr />\n<p>跳转回ob：<a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=0a90dfa0-acef-4bf3-bb8b-0b72eb035933\">ob</a></p>\n"},{"id":"b9ec2231-bc80-4831-9b86-5e112ada3bfb","title":"材料内部结构","date":"2022-06-28T02:23:00.000Z","index_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206262135081.jpg","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206262135081.jpg","excerpt":"材料的硬度","abbrlink":65236,"_content":"\n\n\n滑移性能最好的晶格为：面心立方 > 体心立方 > 密排六方 \n>(塑性性能指标)\n\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206281433535.png)\n>BCC是体心立方，上边写错了\n\n面心立方材料：铝（Al）、铜（Cu）、镍（Ni）、金（Au）、银（Ag）、γ-铁（γ-Fe,912℃~1394℃)\n\n\n\n密排六方材料：Mg， Zn，铍\n镁合金等密排六方晶格金属在 250~400℃之间成形,密排六方(hcp)金属滑移系少,主要靠孪生变形\n\nV体：Fe Cr Mo\n>V体是什么，等查一查\n\n\n\n自用跳转连接：[黄珍媛老师](marginnote3app://note/D9087A24-CEF0-4136-B1D1-42F789B404D2)，[夏琴香老师讲塑性变形](marginnote3app://note/40F63EDC-2FA9-46FE-BC55-141C72946015)\n[ob](obsidian://advanced-uri?vault=Documents&uid=b9ec2231-bc80-4831-9b86-5e112ada3bfb)，[blog](http://localhost:4000/2022/06/28/ke-yan/cai-liao-nei-bu-jie-gou/)\n","source":"_posts/👨🏻‍🎓科研/材料内部结构.md","raw":"---\nid: b9ec2231-bc80-4831-9b86-5e112ada3bfb\ntitle: 材料内部结构\ndate: '2022-06-28 10:23'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F393科研\"\nindex_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206262135081.jpg'\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206262135081.jpg'\nexcerpt: 材料的硬度\ntags: 材料\nabbrlink: 65236\n---\n\n\n\n滑移性能最好的晶格为：面心立方 > 体心立方 > 密排六方 \n>(塑性性能指标)\n\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206281433535.png)\n>BCC是体心立方，上边写错了\n\n面心立方材料：铝（Al）、铜（Cu）、镍（Ni）、金（Au）、银（Ag）、γ-铁（γ-Fe,912℃~1394℃)\n\n\n\n密排六方材料：Mg， Zn，铍\n镁合金等密排六方晶格金属在 250~400℃之间成形,密排六方(hcp)金属滑移系少,主要靠孪生变形\n\nV体：Fe Cr Mo\n>V体是什么，等查一查\n\n\n\n自用跳转连接：[黄珍媛老师](marginnote3app://note/D9087A24-CEF0-4136-B1D1-42F789B404D2)，[夏琴香老师讲塑性变形](marginnote3app://note/40F63EDC-2FA9-46FE-BC55-141C72946015)\n[ob](obsidian://advanced-uri?vault=Documents&uid=b9ec2231-bc80-4831-9b86-5e112ada3bfb)，[blog](http://localhost:4000/2022/06/28/ke-yan/cai-liao-nei-bu-jie-gou/)\n","slug":"👨🏻‍🎓科研/材料内部结构","published":1,"updated":"2022-07-12T09:02:14.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fit0009e0mg3o12dkk9","content":"<p>滑移性能最好的晶格为：面心立方 &gt; 体心立方 &gt; 密排六方</p>\n<blockquote>\n<p>(塑性性能指标)</p>\n</blockquote>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206281433535.png\" alt=\"\"></p>\n<blockquote>\n<p>BCC是体心立方，上边写错了</p>\n</blockquote>\n<p>面心立方材料：铝（Al）、铜（Cu）、镍（Ni）、金（Au）、银（Ag）、γ-铁（γ-Fe,912℃~1394℃)</p>\n<p>密排六方材料：Mg， Zn，铍<br>\n镁合金等密排六方晶格金属在 250~400℃之间成形,密排六方(hcp)金属滑移系少,主要靠孪生变形</p>\n<p>V体：Fe Cr Mo</p>\n<blockquote>\n<p>V体是什么，等查一查</p>\n</blockquote>\n<p>自用跳转连接：<a href=\"marginnote3app://note/D9087A24-CEF0-4136-B1D1-42F789B404D2\">黄珍媛老师</a>，<a href=\"marginnote3app://note/40F63EDC-2FA9-46FE-BC55-141C72946015\">夏琴香老师讲塑性变形</a><br>\n<a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=b9ec2231-bc80-4831-9b86-5e112ada3bfb\">ob</a>，<a href=\"http://localhost:4000/2022/06/28/ke-yan/cai-liao-nei-bu-jie-gou/\">blog</a></p>\n","site":{"data":{}},"wordcount":222,"more":"<p>滑移性能最好的晶格为：面心立方 &gt; 体心立方 &gt; 密排六方</p>\n<blockquote>\n<p>(塑性性能指标)</p>\n</blockquote>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206281433535.png\" alt=\"\" /></p>\n<blockquote>\n<p>BCC是体心立方，上边写错了</p>\n</blockquote>\n<p>面心立方材料：铝（Al）、铜（Cu）、镍（Ni）、金（Au）、银（Ag）、γ-铁（γ-Fe,912℃~1394℃)</p>\n<p>密排六方材料：Mg， Zn，铍<br />\n镁合金等密排六方晶格金属在 250~400℃之间成形,密排六方(hcp)金属滑移系少,主要靠孪生变形</p>\n<p>V体：Fe Cr Mo</p>\n<blockquote>\n<p>V体是什么，等查一查</p>\n</blockquote>\n<p>自用跳转连接：<a href=\"marginnote3app://note/D9087A24-CEF0-4136-B1D1-42F789B404D2\">黄珍媛老师</a>，<a href=\"marginnote3app://note/40F63EDC-2FA9-46FE-BC55-141C72946015\">夏琴香老师讲塑性变形</a><br />\n<a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=b9ec2231-bc80-4831-9b86-5e112ada3bfb\">ob</a>，<a href=\"http://localhost:4000/2022/06/28/ke-yan/cai-liao-nei-bu-jie-gou/\">blog</a></p>\n"},{"title":"退火","date":"2022-06-16T08:25:00.000Z","abbrlink":16303,"_content":"\n# 1 摘要\n**是否退火**：能够直接挤出就没必要退火，硬度低，比如纯铝，就没必要退火\n**目的：**\n\t提高成形后表面质量，**提高它的塑性**，便于改善成形效果，减少表面缺陷\n\t退火主要是去应力，使材料组织回到初始状态，这样能保证挤压前每个工件的组织都一样\n\t让晶粒均匀，能够好观察以后的梯度样貌\n**成形要求**：表面无缺陷，形状规整，就和松青挤出的纯铜差不多就行\n# 2 AZ13B镁合金 退火\n![|600](https://s1.vika.cn/space/2022/06/15/07272ec877d24b698c8944d6a1296f0b)\n150 ℃-240 min 退火后只有部分区域发生了再结晶(这不行)\n在 300℃退火处理后,晶粒尺寸比较稳定,由平均晶粒尺寸为9.1μm 的再结晶组织组成\n\n较高的温度(300℃)能够改善镁合金的塑性[^1]。 \nAZ31B 镁合金轧制态板材经 300 ℃退火 60 min 后伸长率最高,为 27.3%。\n![|600](https://s1.vika.cn/space/2022/06/15/b41108bd01ba4924a6f8e98e64d285c6)\n\n![|600](https://s1.vika.cn/space/2022/06/15/d56b14c8de0348a292f42e2572ea922e)\n\n\n## 2.1 镁合金退火总结\n退火温度升至 300℃, 保温 60min，退火后炉内冷却取出\n\n将锻态镁合金在350°C、2h的条件下进行再结晶退火[^2]\n\n退火处理工艺及参数为：加热温度为260°C，保温15min， 升温速率取 5°C/min，随炉冷却后取出工件[^3]\n\n镁合金板材[^4]：将A Z 3 1 B镁合金板分别在2 0 0, 3 0 0, 4 0 0 ℃下保温1 0m i n,\n未 热 处 理 A Z 3 1 B镁 合 金 板的显微组 织 主 要 由 大 小 不 均 匀 的 等 轴 晶 粒 组 成, 晶粒 尺 寸 为1 0~4 0μm, 形 成 的β析 出 相 (M g 1 7 A l 1 2相) 较少[ 1 4]; 2 0 0 ℃热 处 理 后 的 显 微 组 织 变 化不大, 等轴晶粒尺寸仍为1 0~4 0μm, 析出相的 分布也 没 有 明 显 变 化; 当 热 处 理 温 度 达 到 3 0 0, 4 0 0 ℃时, 镁 合 金 板 的 显 微 组 织 发 生 了 明 显 的 变化, 主要表现为大尺寸晶粒的数量明显增 多, 晶 粒的最大尺寸达到了5 0μm, 且析出相的分布更加弥散。对比可知, 2 0 0 ℃为 A Z 3 1 B镁 合 金 板 较 为 理想的加热 温 度, 该 温 度 下 能 够 较 好 地 保 持 细 小 的显微组织。\n>这个好像是先退火200,300,400后，在挤压后的晶相\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207042001235.png)\n\n\n\n\n# 3 19号楼马弗炉加热操作\n\n\n## 3.1 操作文档\n\n\n{% gi 3 3.. %}\n \n\n\n![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206162017876.png)\n\n![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206162017391.png)\n\n![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206162018849.png)\n\n{% endgi %}\n\n# 4 参考资料\n[^1]: [margin](marginnote3app://note/78EE4419-7316-4B0F-9104-116415CFBD95)\n[^2]: [AZ31B镁合金筒形件多道次强旋织构演化及强化机理研究 - 中国知网](https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CMFD&dbname=CMFD202201&filename=1021900755.nh&uniplatform=NZKPT&v=5Rx9z0dEkJU4WzR6pCnp0XWyhQb8xRZ5iMRPNdPJBPVDo9CF-RagrxkNh-MQaLMa)\n[^3]: [AZ31B镁合金表面滚压强化研究 - 中国知网](https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CMFD&dbname=CMFD202201&filename=1021155229.nh&uniplatform=NZKPT&v=us7-K1qgCpj5f5QN9eOdchJ9P2om_2zkT5iLqRdK25tWa_Bp7kcv2OYETpRo6scL)\n[^4]: [AZ31B镁合金板热成形温...理温度下成形件的组织与性能_呼啸](marginnote3app://note/5D3F197F-7FDC-42A0-8C97-2618192A9CC2)","source":"_posts/👨🏻‍🎓科研/退火.md","raw":"---\ntitle: 退火\ndate: '2022-06-16 16:25'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F393科研\"\ntags:\n  - 热处理\nabbrlink: 16303\n---\n\n# 1 摘要\n**是否退火**：能够直接挤出就没必要退火，硬度低，比如纯铝，就没必要退火\n**目的：**\n\t提高成形后表面质量，**提高它的塑性**，便于改善成形效果，减少表面缺陷\n\t退火主要是去应力，使材料组织回到初始状态，这样能保证挤压前每个工件的组织都一样\n\t让晶粒均匀，能够好观察以后的梯度样貌\n**成形要求**：表面无缺陷，形状规整，就和松青挤出的纯铜差不多就行\n# 2 AZ13B镁合金 退火\n![|600](https://s1.vika.cn/space/2022/06/15/07272ec877d24b698c8944d6a1296f0b)\n150 ℃-240 min 退火后只有部分区域发生了再结晶(这不行)\n在 300℃退火处理后,晶粒尺寸比较稳定,由平均晶粒尺寸为9.1μm 的再结晶组织组成\n\n较高的温度(300℃)能够改善镁合金的塑性[^1]。 \nAZ31B 镁合金轧制态板材经 300 ℃退火 60 min 后伸长率最高,为 27.3%。\n![|600](https://s1.vika.cn/space/2022/06/15/b41108bd01ba4924a6f8e98e64d285c6)\n\n![|600](https://s1.vika.cn/space/2022/06/15/d56b14c8de0348a292f42e2572ea922e)\n\n\n## 2.1 镁合金退火总结\n退火温度升至 300℃, 保温 60min，退火后炉内冷却取出\n\n将锻态镁合金在350°C、2h的条件下进行再结晶退火[^2]\n\n退火处理工艺及参数为：加热温度为260°C，保温15min， 升温速率取 5°C/min，随炉冷却后取出工件[^3]\n\n镁合金板材[^4]：将A Z 3 1 B镁合金板分别在2 0 0, 3 0 0, 4 0 0 ℃下保温1 0m i n,\n未 热 处 理 A Z 3 1 B镁 合 金 板的显微组 织 主 要 由 大 小 不 均 匀 的 等 轴 晶 粒 组 成, 晶粒 尺 寸 为1 0~4 0μm, 形 成 的β析 出 相 (M g 1 7 A l 1 2相) 较少[ 1 4]; 2 0 0 ℃热 处 理 后 的 显 微 组 织 变 化不大, 等轴晶粒尺寸仍为1 0~4 0μm, 析出相的 分布也 没 有 明 显 变 化; 当 热 处 理 温 度 达 到 3 0 0, 4 0 0 ℃时, 镁 合 金 板 的 显 微 组 织 发 生 了 明 显 的 变化, 主要表现为大尺寸晶粒的数量明显增 多, 晶 粒的最大尺寸达到了5 0μm, 且析出相的分布更加弥散。对比可知, 2 0 0 ℃为 A Z 3 1 B镁 合 金 板 较 为 理想的加热 温 度, 该 温 度 下 能 够 较 好 地 保 持 细 小 的显微组织。\n>这个好像是先退火200,300,400后，在挤压后的晶相\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207042001235.png)\n\n\n\n\n# 3 19号楼马弗炉加热操作\n\n\n## 3.1 操作文档\n\n\n{% gi 3 3.. %}\n \n\n\n![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206162017876.png)\n\n![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206162017391.png)\n\n![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206162018849.png)\n\n{% endgi %}\n\n# 4 参考资料\n[^1]: [margin](marginnote3app://note/78EE4419-7316-4B0F-9104-116415CFBD95)\n[^2]: [AZ31B镁合金筒形件多道次强旋织构演化及强化机理研究 - 中国知网](https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CMFD&dbname=CMFD202201&filename=1021900755.nh&uniplatform=NZKPT&v=5Rx9z0dEkJU4WzR6pCnp0XWyhQb8xRZ5iMRPNdPJBPVDo9CF-RagrxkNh-MQaLMa)\n[^3]: [AZ31B镁合金表面滚压强化研究 - 中国知网](https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CMFD&dbname=CMFD202201&filename=1021155229.nh&uniplatform=NZKPT&v=us7-K1qgCpj5f5QN9eOdchJ9P2om_2zkT5iLqRdK25tWa_Bp7kcv2OYETpRo6scL)\n[^4]: [AZ31B镁合金板热成形温...理温度下成形件的组织与性能_呼啸](marginnote3app://note/5D3F197F-7FDC-42A0-8C97-2618192A9CC2)","slug":"👨🏻‍🎓科研/退火","published":1,"updated":"2022-07-12T09:02:14.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fiu000be0mghzb30kbo","content":"<h1 id=\"1-摘要\"><a class=\"markdownIt-Anchor\" href=\"#1-摘要\"></a> 1 摘要</h1>\n<p><strong>是否退火</strong>：能够直接挤出就没必要退火，硬度低，比如纯铝，就没必要退火<br>\n<strong>目的：</strong><br>\n提高成形后表面质量，<strong>提高它的塑性</strong>，便于改善成形效果，减少表面缺陷<br>\n退火主要是去应力，使材料组织回到初始状态，这样能保证挤压前每个工件的组织都一样<br>\n让晶粒均匀，能够好观察以后的梯度样貌<br>\n<strong>成形要求</strong>：表面无缺陷，形状规整，就和松青挤出的纯铜差不多就行</p>\n<h1 id=\"2-az13b镁合金-退火\"><a class=\"markdownIt-Anchor\" href=\"#2-az13b镁合金-退火\"></a> 2 AZ13B镁合金 退火</h1>\n<p><img src=\"https://s1.vika.cn/space/2022/06/15/07272ec877d24b698c8944d6a1296f0b\" alt=\"|600\"><br>\n150 ℃-240 min 退火后只有部分区域发生了再结晶(这不行)<br>\n在 300℃退火处理后,晶粒尺寸比较稳定,由平均晶粒尺寸为9.1μm 的再结晶组织组成</p>\n<p>较高的温度(300℃)能够改善镁合金的塑性<sup id=\"fnref:1\" class=\"footnote-ref\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"margin\n\">[1]</span></a></sup>。<br>\nAZ31B 镁合金轧制态板材经 300 ℃退火 60 min 后伸长率最高,为 27.3%。<br>\n<img src=\"https://s1.vika.cn/space/2022/06/15/b41108bd01ba4924a6f8e98e64d285c6\" alt=\"|600\"></p>\n<p><img src=\"https://s1.vika.cn/space/2022/06/15/d56b14c8de0348a292f42e2572ea922e\" alt=\"|600\"></p>\n<h2 id=\"21-镁合金退火总结\"><a class=\"markdownIt-Anchor\" href=\"#21-镁合金退火总结\"></a> 2.1 镁合金退火总结</h2>\n<p>退火温度升至 300℃, 保温 60min，退火后炉内冷却取出</p>\n<p>将锻态镁合金在350°C、2h的条件下进行再结晶退火<sup id=\"fnref:2\" class=\"footnote-ref\"><a href=\"#fn:2\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"AZ31B镁合金筒形件多道次强旋织构演化及强化机理研究 - 中国知网\n\">[2]</span></a></sup></p>\n<p>退火处理工艺及参数为：加热温度为260°C，保温15min， 升温速率取 5°C/min，随炉冷却后取出工件<sup id=\"fnref:3\" class=\"footnote-ref\"><a href=\"#fn:3\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"AZ31B镁合金表面滚压强化研究 - 中国知网\n\">[3]</span></a></sup></p>\n<p>镁合金板材<sup id=\"fnref:4\" class=\"footnote-ref\"><a href=\"#fn:4\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"AZ31B镁合金板热成形温…理温度下成形件的组织与性能_呼啸\n\">[4]</span></a></sup>：将A Z 3 1 B镁合金板分别在2 0 0, 3 0 0, 4 0 0 ℃下保温1 0m i n,<br>\n未 热 处 理 A Z 3 1 B镁 合 金 板的显微组 织 主 要 由 大 小 不 均 匀 的 等 轴 晶 粒 组 成, 晶粒 尺 寸 为1 0~4 0μm, 形 成 的β析 出 相 (M g 1 7 A l 1 2相) 较少[ 1 4]; 2 0 0 ℃热 处 理 后 的 显 微 组 织 变 化不大, 等轴晶粒尺寸仍为1 0~4 0μm, 析出相的 分布也 没 有 明 显 变 化; 当 热 处 理 温 度 达 到 3 0 0, 4 0 0 ℃时, 镁 合 金 板 的 显 微 组 织 发 生 了 明 显 的 变化, 主要表现为大尺寸晶粒的数量明显增 多, 晶 粒的最大尺寸达到了5 0μm, 且析出相的分布更加弥散。对比可知, 2 0 0 ℃为 A Z 3 1 B镁 合 金 板 较 为 理想的加热 温 度, 该 温 度 下 能 够 较 好 地 保 持 细 小 的显微组织。</p>\n<blockquote>\n<p>这个好像是先退火200,300,400后，在挤压后的晶相<br>\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207042001235.png\" alt=\"\"></p>\n</blockquote>\n<h1 id=\"3-19号楼马弗炉加热操作\"><a class=\"markdownIt-Anchor\" href=\"#3-19号楼马弗炉加热操作\"></a> 3 19号楼马弗炉加热操作</h1>\n<h2 id=\"31-操作文档\"><a class=\"markdownIt-Anchor\" href=\"#31-操作文档\"></a> 3.1 操作文档</h2>\n<div class=\"group-image-container\"><div class=\"group-image-row\"><div class=\"group-image-wrap\"><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206162017876.png\" alt=\"|600\"></div><div class=\"group-image-wrap\"><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206162017391.png\" alt=\"|600\"></div><div class=\"group-image-wrap\"><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206162018849.png\" alt=\"|600\"></div></div></div>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span><a href=\"marginnote3app://note/78EE4419-7316-4B0F-9104-116415CFBD95\">margin</a>\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li><li><span id=\"fn:2\" class=\"footnote-text\"><span><a href=\"https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CMFD&amp;dbname=CMFD202201&amp;filename=1021900755.nh&amp;uniplatform=NZKPT&amp;v=5Rx9z0dEkJU4WzR6pCnp0XWyhQb8xRZ5iMRPNdPJBPVDo9CF-RagrxkNh-MQaLMa\">AZ31B镁合金筒形件多道次强旋织构演化及强化机理研究 - 中国知网</a>\n<a href=\"#fnref:2\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li><li><span id=\"fn:3\" class=\"footnote-text\"><span><a href=\"https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CMFD&amp;dbname=CMFD202201&amp;filename=1021155229.nh&amp;uniplatform=NZKPT&amp;v=us7-K1qgCpj5f5QN9eOdchJ9P2om_2zkT5iLqRdK25tWa_Bp7kcv2OYETpRo6scL\">AZ31B镁合金表面滚压强化研究 - 中国知网</a>\n<a href=\"#fnref:3\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li><li><span id=\"fn:4\" class=\"footnote-text\"><span><a href=\"marginnote3app://note/5D3F197F-7FDC-42A0-8C97-2618192A9CC2\">AZ31B镁合金板热成形温…理温度下成形件的组织与性能_呼啸</a>\n<a href=\"#fnref:4\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>","site":{"data":{}},"wordcount":864,"excerpt":"","more":"<h1 id=\"1-摘要\"><a class=\"markdownIt-Anchor\" href=\"#1-摘要\"></a> 1 摘要</h1>\n<p><strong>是否退火</strong>：能够直接挤出就没必要退火，硬度低，比如纯铝，就没必要退火<br />\n<strong>目的：</strong><br />\n提高成形后表面质量，<strong>提高它的塑性</strong>，便于改善成形效果，减少表面缺陷<br />\n退火主要是去应力，使材料组织回到初始状态，这样能保证挤压前每个工件的组织都一样<br />\n让晶粒均匀，能够好观察以后的梯度样貌<br />\n<strong>成形要求</strong>：表面无缺陷，形状规整，就和松青挤出的纯铜差不多就行</p>\n<h1 id=\"2-az13b镁合金-退火\"><a class=\"markdownIt-Anchor\" href=\"#2-az13b镁合金-退火\"></a> 2 AZ13B镁合金 退火</h1>\n<p><img src=\"https://s1.vika.cn/space/2022/06/15/07272ec877d24b698c8944d6a1296f0b\" alt=\"|600\" /><br />\n150 ℃-240 min 退火后只有部分区域发生了再结晶(这不行)<br />\n在 300℃退火处理后,晶粒尺寸比较稳定,由平均晶粒尺寸为9.1μm 的再结晶组织组成</p>\n<p>较高的温度(300℃)能够改善镁合金的塑性<sup id=\"fnref:1\" class=\"footnote-ref\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"margin\n\">[1]</span></a></sup>。<br />\nAZ31B 镁合金轧制态板材经 300 ℃退火 60 min 后伸长率最高,为 27.3%。<br />\n<img src=\"https://s1.vika.cn/space/2022/06/15/b41108bd01ba4924a6f8e98e64d285c6\" alt=\"|600\" /></p>\n<p><img src=\"https://s1.vika.cn/space/2022/06/15/d56b14c8de0348a292f42e2572ea922e\" alt=\"|600\" /></p>\n<h2 id=\"21-镁合金退火总结\"><a class=\"markdownIt-Anchor\" href=\"#21-镁合金退火总结\"></a> 2.1 镁合金退火总结</h2>\n<p>退火温度升至 300℃, 保温 60min，退火后炉内冷却取出</p>\n<p>将锻态镁合金在350°C、2h的条件下进行再结晶退火<sup id=\"fnref:2\" class=\"footnote-ref\"><a href=\"#fn:2\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"AZ31B镁合金筒形件多道次强旋织构演化及强化机理研究 - 中国知网\n\">[2]</span></a></sup></p>\n<p>退火处理工艺及参数为：加热温度为260°C，保温15min， 升温速率取 5°C/min，随炉冷却后取出工件<sup id=\"fnref:3\" class=\"footnote-ref\"><a href=\"#fn:3\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"AZ31B镁合金表面滚压强化研究 - 中国知网\n\">[3]</span></a></sup></p>\n<p>镁合金板材<sup id=\"fnref:4\" class=\"footnote-ref\"><a href=\"#fn:4\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"AZ31B镁合金板热成形温…理温度下成形件的组织与性能_呼啸\n\">[4]</span></a></sup>：将A Z 3 1 B镁合金板分别在2 0 0, 3 0 0, 4 0 0 ℃下保温1 0m i n,<br />\n未 热 处 理 A Z 3 1 B镁 合 金 板的显微组 织 主 要 由 大 小 不 均 匀 的 等 轴 晶 粒 组 成, 晶粒 尺 寸 为1 0~4 0μm, 形 成 的β析 出 相 (M g 1 7 A l 1 2相) 较少[ 1 4]; 2 0 0 ℃热 处 理 后 的 显 微 组 织 变 化不大, 等轴晶粒尺寸仍为1 0~4 0μm, 析出相的 分布也 没 有 明 显 变 化; 当 热 处 理 温 度 达 到 3 0 0, 4 0 0 ℃时, 镁 合 金 板 的 显 微 组 织 发 生 了 明 显 的 变化, 主要表现为大尺寸晶粒的数量明显增 多, 晶 粒的最大尺寸达到了5 0μm, 且析出相的分布更加弥散。对比可知, 2 0 0 ℃为 A Z 3 1 B镁 合 金 板 较 为 理想的加热 温 度, 该 温 度 下 能 够 较 好 地 保 持 细 小 的显微组织。</p>\n<blockquote>\n<p>这个好像是先退火200,300,400后，在挤压后的晶相<br />\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207042001235.png\" alt=\"\" /></p>\n</blockquote>\n<h1 id=\"3-19号楼马弗炉加热操作\"><a class=\"markdownIt-Anchor\" href=\"#3-19号楼马弗炉加热操作\"></a> 3 19号楼马弗炉加热操作</h1>\n<h2 id=\"31-操作文档\"><a class=\"markdownIt-Anchor\" href=\"#31-操作文档\"></a> 3.1 操作文档</h2>\n<div class=\"group-image-container\"><div class=\"group-image-row\"><div class=\"group-image-wrap\"><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206162017876.png\" alt=\"|600\" /></div><div class=\"group-image-wrap\"><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206162017391.png\" alt=\"|600\" /></div><div class=\"group-image-wrap\"><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206162018849.png\" alt=\"|600\" /></div></div></div>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span><a href=\"marginnote3app://note/78EE4419-7316-4B0F-9104-116415CFBD95\">margin</a>\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li><li><span id=\"fn:2\" class=\"footnote-text\"><span><a href=\"https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CMFD&amp;dbname=CMFD202201&amp;filename=1021900755.nh&amp;uniplatform=NZKPT&amp;v=5Rx9z0dEkJU4WzR6pCnp0XWyhQb8xRZ5iMRPNdPJBPVDo9CF-RagrxkNh-MQaLMa\">AZ31B镁合金筒形件多道次强旋织构演化及强化机理研究 - 中国知网</a>\n<a href=\"#fnref:2\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li><li><span id=\"fn:3\" class=\"footnote-text\"><span><a href=\"https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CMFD&amp;dbname=CMFD202201&amp;filename=1021155229.nh&amp;uniplatform=NZKPT&amp;v=us7-K1qgCpj5f5QN9eOdchJ9P2om_2zkT5iLqRdK25tWa_Bp7kcv2OYETpRo6scL\">AZ31B镁合金表面滚压强化研究 - 中国知网</a>\n<a href=\"#fnref:3\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li><li><span id=\"fn:4\" class=\"footnote-text\"><span><a href=\"marginnote3app://note/5D3F197F-7FDC-42A0-8C97-2618192A9CC2\">AZ31B镁合金板热成形温…理温度下成形件的组织与性能_呼啸</a>\n<a href=\"#fnref:4\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>"},{"title":"实验设计","date":"2022-07-04T11:33:00.000Z","index_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206262135081.jpg","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206262135081.jpg","excerpt":"镁合金的温度设计","abbrlink":65372,"_content":"\n镁合金设置温度分布\n挤压角度：100°，110，120，130，140\n>110， 120 的圆盘成形效果最好，140的圆棒成形效果最好\n>因为110°的倾角小\n\n![[实验设计 2022-07-09 16.42.40.excalidraw|600]]\n\n华南理工的统一认证账号是哪个啊\n我现在有16个镁合金圆棒\n7月份的实验\n- 控制角度变温度\n\t- 110°挤压块性能最好 100°→400°的做7个\n\t- 120°挤压块同理7个\n\t- 在做一个无加热的，对比实验，主要是拍照片\n\t- 综上测出性能最好的角度和温度，确定好最合适的温度\n\n- 控制温度变角度\n\t- 先确定一个最合适的温度\n\t- 在用该温度做其他挤压块的角度 (5个：100°→140°)\n\n\n---\n试验温度为室温和100, 150, 200, 250, 300, 350, 400 ℃[^1]\n200°时，得到最好的性能\n\n# 1 参考资料\n[^1]: [AZ31B镁合金板热成形温...理温度下成形件的组织与性能_呼啸](marginnote3app://note/F62253DC-5296-4BB8-A7BF-97F9BD2553CF)","source":"_posts/👨🏻‍🎓科研/实验设计.md","raw":"---\ntitle: 实验设计\ndate: '2022-07-04 19:33'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F393科研\"\nindex_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206262135081.jpg'\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206262135081.jpg'\nexcerpt: 镁合金的温度设计\nabbrlink: 65372\ntags:\n---\n\n镁合金设置温度分布\n挤压角度：100°，110，120，130，140\n>110， 120 的圆盘成形效果最好，140的圆棒成形效果最好\n>因为110°的倾角小\n\n![[实验设计 2022-07-09 16.42.40.excalidraw|600]]\n\n华南理工的统一认证账号是哪个啊\n我现在有16个镁合金圆棒\n7月份的实验\n- 控制角度变温度\n\t- 110°挤压块性能最好 100°→400°的做7个\n\t- 120°挤压块同理7个\n\t- 在做一个无加热的，对比实验，主要是拍照片\n\t- 综上测出性能最好的角度和温度，确定好最合适的温度\n\n- 控制温度变角度\n\t- 先确定一个最合适的温度\n\t- 在用该温度做其他挤压块的角度 (5个：100°→140°)\n\n\n---\n试验温度为室温和100, 150, 200, 250, 300, 350, 400 ℃[^1]\n200°时，得到最好的性能\n\n# 1 参考资料\n[^1]: [AZ31B镁合金板热成形温...理温度下成形件的组织与性能_呼啸](marginnote3app://note/F62253DC-5296-4BB8-A7BF-97F9BD2553CF)","slug":"👨🏻‍🎓科研/实验设计","published":1,"updated":"2022-07-12T09:02:14.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fiv000fe0mgdx5p70r8","content":"<p>镁合金设置温度分布<br>\n挤压角度：100°，110，120，130，140</p>\n<blockquote>\n<p>110， 120 的圆盘成形效果最好，140的圆棒成形效果最好<br>\n因为110°的倾角小</p>\n</blockquote>\n<p>![[实验设计 2022-07-09 16.42.40.excalidraw|600]]</p>\n<p>华南理工的统一认证账号是哪个啊<br>\n我现在有16个镁合金圆棒<br>\n7月份的实验</p>\n<ul>\n<li>\n<p>控制角度变温度</p>\n<ul>\n<li>110°挤压块性能最好 100°→400°的做7个</li>\n<li>120°挤压块同理7个</li>\n<li>在做一个无加热的，对比实验，主要是拍照片</li>\n<li>综上测出性能最好的角度和温度，确定好最合适的温度</li>\n</ul>\n</li>\n<li>\n<p>控制温度变角度</p>\n<ul>\n<li>先确定一个最合适的温度</li>\n<li>在用该温度做其他挤压块的角度 (5个：100°→140°)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>试验温度为室温和100, 150, 200, 250, 300, 350, 400 ℃<sup id=\"fnref:1\" class=\"footnote-ref\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"AZ31B镁合金板热成形温…理温度下成形件的组织与性能_呼啸\n\">[1]</span></a></sup><br>\n200°时，得到最好的性能</p>\n<h1 id=\"1-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#1-参考资料\"></a> 1 参考资料</h1>\n<section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span><a href=\"marginnote3app://note/F62253DC-5296-4BB8-A7BF-97F9BD2553CF\">AZ31B镁合金板热成形温…理温度下成形件的组织与性能_呼啸</a>\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>","site":{"data":{}},"wordcount":368,"more":"<p>镁合金设置温度分布<br />\n挤压角度：100°，110，120，130，140</p>\n<blockquote>\n<p>110， 120 的圆盘成形效果最好，140的圆棒成形效果最好<br />\n因为110°的倾角小</p>\n</blockquote>\n<p>![[实验设计 2022-07-09 16.42.40.excalidraw|600]]</p>\n<p>华南理工的统一认证账号是哪个啊<br />\n我现在有16个镁合金圆棒<br />\n7月份的实验</p>\n<ul>\n<li>\n<p>控制角度变温度</p>\n<ul>\n<li>110°挤压块性能最好 100°→400°的做7个</li>\n<li>120°挤压块同理7个</li>\n<li>在做一个无加热的，对比实验，主要是拍照片</li>\n<li>综上测出性能最好的角度和温度，确定好最合适的温度</li>\n</ul>\n</li>\n<li>\n<p>控制温度变角度</p>\n<ul>\n<li>先确定一个最合适的温度</li>\n<li>在用该温度做其他挤压块的角度 (5个：100°→140°)</li>\n</ul>\n</li>\n</ul>\n<hr />\n<p>试验温度为室温和100, 150, 200, 250, 300, 350, 400 ℃<sup id=\"fnref:1\" class=\"footnote-ref\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"AZ31B镁合金板热成形温…理温度下成形件的组织与性能_呼啸\n\">[1]</span></a></sup><br />\n200°时，得到最好的性能</p>\n<h1 id=\"1-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#1-参考资料\"></a> 1 参考资料</h1>\n<section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span><a href=\"marginnote3app://note/F62253DC-5296-4BB8-A7BF-97F9BD2553CF\">AZ31B镁合金板热成形温…理温度下成形件的组织与性能_呼啸</a>\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>"},{"id":"1eb5db61-b344-4a33-a07a-7a34f51a00d0","title":"纯铝的性能指标","toc":true,"abbrlink":25410,"date":"2022-06-02T13:47:52.000Z","_content":"\n\n[margin](marginnote3app://note/3AE993AE-E623-4E05-BDD8-A7A400FEE1A2)\n[ob](obsidian://advanced-uri?vault=Documents&uid=1eb5db61-b344-4a33-a07a-7a34f51a00d0)\n# 1 梯度结构纯铝的形貌\n## 1.1 成形效果\n```col\n![](https://s1.vika.cn/space/2022/06/02/bca77150b3084c549a77bf090cb2ce2e)\n挤出长度跟出口厚度成反比\n\n![](https://s1.vika.cn/space/2022/06/02/6b18b35cc90944fcb6872a47dc51dec5)\n\n```\n \n## 1.2 原始纯铝与梯度纯铝的微观组织\n![|600](https://s1.vika.cn/space/2022/06/02/e1b9812b60f64c419b2299c54afa3da3)\n![|600](https://s1.vika.cn/space/2022/06/02/a666e2c8fa314ef4b4be704418324067)\nB侧细化 A侧基本没变，成梯度材料\n\n\n## 1.3 微观组织演变机制\n![|600](https://s1.vika.cn/space/2022/06/02/bdf90acd645c4bd490a1c54d6111f285)\n\n# 2 梯度结构纯铝的力学性能\n\n## 2.1 梯度结构纯铝的硬度梯度\n\n原材料32HV，梯度材料44HV\nB测最高，到A测减少，因为晶粒细化，但靠近A侧硬度平稳且有所提升，是产生了材料硬化\n金属材料的硬度与其晶粒大小成反比,即**晶粒越细,材料的硬度越高**\n![|600](https://s1.vika.cn/space/2022/06/02/d74d109525504da5b0b60ac6c71974c2)\n## 2.2 梯度结构纯铝的拉伸性能\n\n\n梯度材料拉伸强度达到了160MPa，是原件的一倍多\n![|600](https://s1.vika.cn/space/2022/06/02/6591bb51508e4f82bf050a2253d22844)\n随着厚度的增加, 梯度样品的抗拉强度逐渐下降,而延展性逐渐增强\n```col\n\n```\n```col\n\n```\n```col\n![|600](https://s1.vika.cn/space/2022/06/02/9d767470c48f4318941bd9b40ca940a4)\n\n![](https://s1.vika.cn/space/2022/06/02/f98676a6b6414cb4bb655c06d5ecbcb3)\n\n```\n\n\n## 2.3 拉伸断口分析\n\n人们希望韧性断裂，而不是脆性断裂。通过观察端口来进行分析\n\n怎么分析端口是韧性断裂还是塑性断裂\n?\n韧窝的尺寸越大,材料的塑性越好，韧窝的尺寸大小也不均匀,既有 10 μm 左右的大韧窝,也有 2 μm 左右的小韧窝,这是由于在拉伸变形过程中,小韧窝不断拉长、聚合成大韧窝,同时也有小韧窝不断萌生\n\n纯铝原材料的拉伸断口呈现出典型的韧性断裂特征是**韧性断裂**\n\n![|600](https://s1.vika.cn/space/2022/06/02/9434e67a2f554ef2a718b05c74d585b1)\n梯度材料纯铝也是**韧性断裂**，韧窝也主要分布在纤维区和剪切唇的部分区域\n![|600](https://s1.vika.cn/space/2022/06/02/a99078324c754506acf4df4755369ad6)\n","source":"_posts/👨🏻‍🎓科研/纯铝的性能指标.md","raw":"---\nid: 1eb5db61-b344-4a33-a07a-7a34f51a00d0\ntitle: 纯铝的性能指标\ntoc: true\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F393科研\"\ntags:\n  - 材料性能\n  - 塑性流动挤出\nabbrlink: 25410\ndate: 2022-06-02 21:47:52\n---\n\n\n[margin](marginnote3app://note/3AE993AE-E623-4E05-BDD8-A7A400FEE1A2)\n[ob](obsidian://advanced-uri?vault=Documents&uid=1eb5db61-b344-4a33-a07a-7a34f51a00d0)\n# 1 梯度结构纯铝的形貌\n## 1.1 成形效果\n```col\n![](https://s1.vika.cn/space/2022/06/02/bca77150b3084c549a77bf090cb2ce2e)\n挤出长度跟出口厚度成反比\n\n![](https://s1.vika.cn/space/2022/06/02/6b18b35cc90944fcb6872a47dc51dec5)\n\n```\n \n## 1.2 原始纯铝与梯度纯铝的微观组织\n![|600](https://s1.vika.cn/space/2022/06/02/e1b9812b60f64c419b2299c54afa3da3)\n![|600](https://s1.vika.cn/space/2022/06/02/a666e2c8fa314ef4b4be704418324067)\nB侧细化 A侧基本没变，成梯度材料\n\n\n## 1.3 微观组织演变机制\n![|600](https://s1.vika.cn/space/2022/06/02/bdf90acd645c4bd490a1c54d6111f285)\n\n# 2 梯度结构纯铝的力学性能\n\n## 2.1 梯度结构纯铝的硬度梯度\n\n原材料32HV，梯度材料44HV\nB测最高，到A测减少，因为晶粒细化，但靠近A侧硬度平稳且有所提升，是产生了材料硬化\n金属材料的硬度与其晶粒大小成反比,即**晶粒越细,材料的硬度越高**\n![|600](https://s1.vika.cn/space/2022/06/02/d74d109525504da5b0b60ac6c71974c2)\n## 2.2 梯度结构纯铝的拉伸性能\n\n\n梯度材料拉伸强度达到了160MPa，是原件的一倍多\n![|600](https://s1.vika.cn/space/2022/06/02/6591bb51508e4f82bf050a2253d22844)\n随着厚度的增加, 梯度样品的抗拉强度逐渐下降,而延展性逐渐增强\n```col\n\n```\n```col\n\n```\n```col\n![|600](https://s1.vika.cn/space/2022/06/02/9d767470c48f4318941bd9b40ca940a4)\n\n![](https://s1.vika.cn/space/2022/06/02/f98676a6b6414cb4bb655c06d5ecbcb3)\n\n```\n\n\n## 2.3 拉伸断口分析\n\n人们希望韧性断裂，而不是脆性断裂。通过观察端口来进行分析\n\n怎么分析端口是韧性断裂还是塑性断裂\n?\n韧窝的尺寸越大,材料的塑性越好，韧窝的尺寸大小也不均匀,既有 10 μm 左右的大韧窝,也有 2 μm 左右的小韧窝,这是由于在拉伸变形过程中,小韧窝不断拉长、聚合成大韧窝,同时也有小韧窝不断萌生\n\n纯铝原材料的拉伸断口呈现出典型的韧性断裂特征是**韧性断裂**\n\n![|600](https://s1.vika.cn/space/2022/06/02/9434e67a2f554ef2a718b05c74d585b1)\n梯度材料纯铝也是**韧性断裂**，韧窝也主要分布在纤维区和剪切唇的部分区域\n![|600](https://s1.vika.cn/space/2022/06/02/a99078324c754506acf4df4755369ad6)\n","slug":"👨🏻‍🎓科研/纯铝的性能指标","published":1,"updated":"2022-07-12T09:02:14.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fiw000ie0mggzwv3sne","content":"<p><a href=\"marginnote3app://note/3AE993AE-E623-4E05-BDD8-A7A400FEE1A2\">margin</a><br>\n<a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=1eb5db61-b344-4a33-a07a-7a34f51a00d0\">ob</a></p>\n<h1 id=\"1-梯度结构纯铝的形貌\"><a class=\"markdownIt-Anchor\" href=\"#1-梯度结构纯铝的形貌\"></a> 1 梯度结构纯铝的形貌</h1>\n<h2 id=\"11-成形效果\"><a class=\"markdownIt-Anchor\" href=\"#11-成形效果\"></a> 1.1 成形效果</h2>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs col\">![](https://s1.vika.cn/space/2022/06/02/bca77150b3084c549a77bf090cb2ce2e)<br>挤出长度跟出口厚度成反比<br><br>![](https://s1.vika.cn/space/2022/06/02/6b18b35cc90944fcb6872a47dc51dec5)<br><br></code></pre></td></tr></tbody></table></figure>\n<h2 id=\"12-原始纯铝与梯度纯铝的微观组织\"><a class=\"markdownIt-Anchor\" href=\"#12-原始纯铝与梯度纯铝的微观组织\"></a> 1.2 原始纯铝与梯度纯铝的微观组织</h2>\n<p><img src=\"https://s1.vika.cn/space/2022/06/02/e1b9812b60f64c419b2299c54afa3da3\" alt=\"|600\"><br>\n<img src=\"https://s1.vika.cn/space/2022/06/02/a666e2c8fa314ef4b4be704418324067\" alt=\"|600\"><br>\nB侧细化 A侧基本没变，成梯度材料</p>\n<h2 id=\"13-微观组织演变机制\"><a class=\"markdownIt-Anchor\" href=\"#13-微观组织演变机制\"></a> 1.3 微观组织演变机制</h2>\n<p><img src=\"https://s1.vika.cn/space/2022/06/02/bdf90acd645c4bd490a1c54d6111f285\" alt=\"|600\"></p>\n<h1 id=\"2-梯度结构纯铝的力学性能\"><a class=\"markdownIt-Anchor\" href=\"#2-梯度结构纯铝的力学性能\"></a> 2 梯度结构纯铝的力学性能</h1>\n<h2 id=\"21-梯度结构纯铝的硬度梯度\"><a class=\"markdownIt-Anchor\" href=\"#21-梯度结构纯铝的硬度梯度\"></a> 2.1 梯度结构纯铝的硬度梯度</h2>\n<p>原材料32HV，梯度材料44HV<br>\nB测最高，到A测减少，因为晶粒细化，但靠近A侧硬度平稳且有所提升，是产生了材料硬化<br>\n金属材料的硬度与其晶粒大小成反比,即<strong>晶粒越细,材料的硬度越高</strong><br>\n<img src=\"https://s1.vika.cn/space/2022/06/02/d74d109525504da5b0b60ac6c71974c2\" alt=\"|600\"></p>\n<h2 id=\"22-梯度结构纯铝的拉伸性能\"><a class=\"markdownIt-Anchor\" href=\"#22-梯度结构纯铝的拉伸性能\"></a> 2.2 梯度结构纯铝的拉伸性能</h2>\n<p>梯度材料拉伸强度达到了160MPa，是原件的一倍多<br>\n<img src=\"https://s1.vika.cn/space/2022/06/02/6591bb51508e4f82bf050a2253d22844\" alt=\"|600\"><br>\n随着厚度的增加, 梯度样品的抗拉强度逐渐下降,而延展性逐渐增强</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs col\"><br></code></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs col\"><br></code></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs col\">![|600](https://s1.vika.cn/space/2022/06/02/9d767470c48f4318941bd9b40ca940a4)<br><br>![](https://s1.vika.cn/space/2022/06/02/f98676a6b6414cb4bb655c06d5ecbcb3)<br><br></code></pre></td></tr></tbody></table></figure>\n<h2 id=\"23-拉伸断口分析\"><a class=\"markdownIt-Anchor\" href=\"#23-拉伸断口分析\"></a> 2.3 拉伸断口分析</h2>\n<p>人们希望韧性断裂，而不是脆性断裂。通过观察端口来进行分析</p>\n<p>怎么分析端口是韧性断裂还是塑性断裂<br>\n?<br>\n韧窝的尺寸越大,材料的塑性越好，韧窝的尺寸大小也不均匀,既有 10 μm 左右的大韧窝,也有 2 μm 左右的小韧窝,这是由于在拉伸变形过程中,小韧窝不断拉长、聚合成大韧窝,同时也有小韧窝不断萌生</p>\n<p>纯铝原材料的拉伸断口呈现出典型的韧性断裂特征是<strong>韧性断裂</strong></p>\n<p><img src=\"https://s1.vika.cn/space/2022/06/02/9434e67a2f554ef2a718b05c74d585b1\" alt=\"|600\"><br>\n梯度材料纯铝也是<strong>韧性断裂</strong>，韧窝也主要分布在纤维区和剪切唇的部分区域<br>\n<img src=\"https://s1.vika.cn/space/2022/06/02/a99078324c754506acf4df4755369ad6\" alt=\"|600\"></p>\n","site":{"data":{}},"wordcount":777,"excerpt":"","more":"<p><a href=\"marginnote3app://note/3AE993AE-E623-4E05-BDD8-A7A400FEE1A2\">margin</a><br />\n<a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=1eb5db61-b344-4a33-a07a-7a34f51a00d0\">ob</a></p>\n<h1 id=\"1-梯度结构纯铝的形貌\"><a class=\"markdownIt-Anchor\" href=\"#1-梯度结构纯铝的形貌\"></a> 1 梯度结构纯铝的形貌</h1>\n<h2 id=\"11-成形效果\"><a class=\"markdownIt-Anchor\" href=\"#11-成形效果\"></a> 1.1 成形效果</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs col\">![](https://s1.vika.cn/space/2022/06/02/bca77150b3084c549a77bf090cb2ce2e)<br>挤出长度跟出口厚度成反比<br><br>![](https://s1.vika.cn/space/2022/06/02/6b18b35cc90944fcb6872a47dc51dec5)<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"12-原始纯铝与梯度纯铝的微观组织\"><a class=\"markdownIt-Anchor\" href=\"#12-原始纯铝与梯度纯铝的微观组织\"></a> 1.2 原始纯铝与梯度纯铝的微观组织</h2>\n<p><img src=\"https://s1.vika.cn/space/2022/06/02/e1b9812b60f64c419b2299c54afa3da3\" alt=\"|600\" /><br />\n<img src=\"https://s1.vika.cn/space/2022/06/02/a666e2c8fa314ef4b4be704418324067\" alt=\"|600\" /><br />\nB侧细化 A侧基本没变，成梯度材料</p>\n<h2 id=\"13-微观组织演变机制\"><a class=\"markdownIt-Anchor\" href=\"#13-微观组织演变机制\"></a> 1.3 微观组织演变机制</h2>\n<p><img src=\"https://s1.vika.cn/space/2022/06/02/bdf90acd645c4bd490a1c54d6111f285\" alt=\"|600\" /></p>\n<h1 id=\"2-梯度结构纯铝的力学性能\"><a class=\"markdownIt-Anchor\" href=\"#2-梯度结构纯铝的力学性能\"></a> 2 梯度结构纯铝的力学性能</h1>\n<h2 id=\"21-梯度结构纯铝的硬度梯度\"><a class=\"markdownIt-Anchor\" href=\"#21-梯度结构纯铝的硬度梯度\"></a> 2.1 梯度结构纯铝的硬度梯度</h2>\n<p>原材料32HV，梯度材料44HV<br />\nB测最高，到A测减少，因为晶粒细化，但靠近A侧硬度平稳且有所提升，是产生了材料硬化<br />\n金属材料的硬度与其晶粒大小成反比,即<strong>晶粒越细,材料的硬度越高</strong><br />\n<img src=\"https://s1.vika.cn/space/2022/06/02/d74d109525504da5b0b60ac6c71974c2\" alt=\"|600\" /></p>\n<h2 id=\"22-梯度结构纯铝的拉伸性能\"><a class=\"markdownIt-Anchor\" href=\"#22-梯度结构纯铝的拉伸性能\"></a> 2.2 梯度结构纯铝的拉伸性能</h2>\n<p>梯度材料拉伸强度达到了160MPa，是原件的一倍多<br />\n<img src=\"https://s1.vika.cn/space/2022/06/02/6591bb51508e4f82bf050a2253d22844\" alt=\"|600\" /><br />\n随着厚度的增加, 梯度样品的抗拉强度逐渐下降,而延展性逐渐增强</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs col\"><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs col\"><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs col\">![|600](https://s1.vika.cn/space/2022/06/02/9d767470c48f4318941bd9b40ca940a4)<br><br>![](https://s1.vika.cn/space/2022/06/02/f98676a6b6414cb4bb655c06d5ecbcb3)<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"23-拉伸断口分析\"><a class=\"markdownIt-Anchor\" href=\"#23-拉伸断口分析\"></a> 2.3 拉伸断口分析</h2>\n<p>人们希望韧性断裂，而不是脆性断裂。通过观察端口来进行分析</p>\n<p>怎么分析端口是韧性断裂还是塑性断裂<br />\n?<br />\n韧窝的尺寸越大,材料的塑性越好，韧窝的尺寸大小也不均匀,既有 10 μm 左右的大韧窝,也有 2 μm 左右的小韧窝,这是由于在拉伸变形过程中,小韧窝不断拉长、聚合成大韧窝,同时也有小韧窝不断萌生</p>\n<p>纯铝原材料的拉伸断口呈现出典型的韧性断裂特征是<strong>韧性断裂</strong></p>\n<p><img src=\"https://s1.vika.cn/space/2022/06/02/9434e67a2f554ef2a718b05c74d585b1\" alt=\"|600\" /><br />\n梯度材料纯铝也是<strong>韧性断裂</strong>，韧窝也主要分布在纤维区和剪切唇的部分区域<br />\n<img src=\"https://s1.vika.cn/space/2022/06/02/a99078324c754506acf4df4755369ad6\" alt=\"|600\" /></p>\n"},{"title":"LaTex公式","date":"2022-08-02T02:06:00.000Z","cards-deck":"source/_posts/🚀技能/LaTex公式.md","abbrlink":4371,"_content":"文章简介：如题\n<!-- more -->\n\n\n​ [LaTeX](https://so.csdn.net/so/search?q=LaTeX&spm=1001.2101.3001.7020)是一种基于ΤΕΧ的排版系统，而TeX是由著名的计算机科学家[Donald E. Knuth](https://baike.baidu.com/item/%E5%94%90%E7%BA%B3%E5%BE%B7%C2%B7%E5%85%8B%E5%8A%AA%E7%89%B9?fromtitle=Donald+E.+Knuth&fromid=2509519)发明的排版系统,可以了解一下他，LaTeX能够优美地生成数学公式且质量极高，本文简要记录其常用公式，以备自查。\n\n\n# 行内公式与行间公式及编号\n\n```latex\n$f(x) = a+b$\n\n$$\nf(x)=a+b+c\\tag{1.1}\n$$\n```\n$f(x) = a+b$\n\n$$\nf(x)=a+b+c\\tag{1.1}\n$$\n效果显然，使用`\\tag{}` 对公式进行标号\n\n# 多项式（上下标）、根号、分式、对数\n\n上下标分别用 _{ }和 ^{ } 来标记，{}内为值，可以是公式等等\n\n```latex\n$f(x)=a_{1}^{1-x}+a^{2-x}_{2}+a^{3-x}_{3}$\n```\n$f(x)=a_{1}^{1-x}+a^{2-x}_{2}+a^{3-x}_{3}$\n\n\n**\\sqrt{ }** 表示平方根，**\\sqrt[n]{ }** 表示n次方根，**\\frac{ }{ }** 表示分式，两个{}先分子，后分母，对数用 **\\log_{2}{343}** 表示\n\n```latex\n$\\sqrt{x}+\\sqrt[3]{2-x}-\\sqrt[x]{\\frac{a^x}{b^x}}+\\frac{1}{x}+\\log_{2}{x}$\n```\n\n$\\sqrt{x}+\\sqrt[3]{2-x}-\\sqrt[x]{\\frac{a^x}{b^x}}+\\frac{1}{x}+\\log_{2}{x}$\n\n\n### 常用符号\n\n**+ - * /** 等可以直接打出\n\n乘号用\\times,点乘用\\cdot，除号用\\div，不等号用\\ne，恒等或同余号用\\equiv，整除用\\mid,取模用\\mod，上取整用\\lfloor x \\rfloor，下取整用\\lceil x \\rceil\n\n```latex\n\\\\  \\times乘号 \\cdot点乘  \\div除号  \\ne不等号\t\\equiv恒等或同余号 \n\\\\  \\mid\t整除 \\mod 取模   \\lfloor x \\rfloor 和 \\lceil x \\rceil\n```\n\n\\times乘号 \\cdot点乘  \\div除号  \\ne不等号\t\\equiv恒等或同余号 \n \\mid\t整除 \\mod 取模   \\lfloor x \\rfloor 和 \\lceil x \\rceil\n\n**ps**: \\ \\ 是分行\n\n小于号用\\lt，大于号用\\gt，小于等于号用\\le，大于等于号用\\ge\n\n```latex\n\\lt小于号     \\gt大于号    \\le小于等于号    \\ge大于等于号\n```\n\n< 小 于 号 > 大 于 号 ≤ 小 于 等 于 号 ≥ 大 于 等 于 号 \\lt小于号 \\gt大于号 \\le小于等于号 \\ge大于等于号 <小于号>大于号≤小于等于号≥大于等于号\n\n集合运算符号\n\n```latex\n\\\\ \\cup并运算 \\quad  \\cap交运算 \\qquad  \\subset 和 \\supset  \n\\\\ \\subseteq 和 \\supseteq \\qquad  \\in 和 \\notin \\qquad \\emptyset 空集\n```\n\n∪ 并 运 算 ∩ 交 运 算 ⊂ 和 ⊃ ⊆ 和 ⊇ ∈ 和 ∉ ∅ 空 集 \\\\ \\cup并运算 \\quad \\cap交运算 \\qquad \\subset 和 \\supset \\\\ \\subseteq 和 \\supseteq \\qquad \\in 和 \\notin \\qquad \\emptyset 空集 ∪并运算∩交运算⊂和⊃⊆和⊇∈和∈/​∅空集\n\n**ps**: \\qquad是空格\n\n三角符号用\\bigtriangleup，三角符号类似\\sin,度数用上标^{\\cric}表示，角用\\angle\n\n```latex\n\\\\ \\bigtriangleup三角 \\qquad \\angle 角\n\\\\ \\tan90^{\\circ}和\\sin x和\\cos x三角函数及度数表示 \n```\n\n\n```latex\n\\\\\t\\rightarrow和\\Rightarrow\n\\\\  \\leftrightarrow和\\Leftrightarrow\n\\\\\t\\vee和\\wedge\n\\\\\t\\because和\\therefore\n\\\\\t因为所以\n```\n\n→ 和 ⇒ ↔ 和 ⇔ ∨ 和 ∧ ∵ 和 ∴ 因 为 所 以 \\\\ \\rightarrow和\\Rightarrow \\\\ \\leftrightarrow和\\Leftrightarrow \\\\ \\vee和\\wedge \\\\ \\because和\\therefore \\\\ 因为所以 →和⇒↔和⇔∨和∧∵和∴因为所以\n\n特殊符号\n\n```latex\n\\\\ \\otimes和\\oplus \\qquad \\nearrow和\\searrow \\qquad\t\n\\\\ \\sim和\\approx  \\qquad\t\\ldots和\\cdots 不同对齐的省略号\n```\n\n⊗ 和 ⊕ ↗ 和 ↘ ∼ 和 ≈ … 和 ⋯ 不 同 对 齐 的 省 略 号 \\\\ \\otimes和\\oplus \\qquad \\nearrow和\\searrow \\qquad \\\\ \\sim和\\approx \\qquad \\ldots和\\cdots 不同对齐的省略号 ⊗和⊕↗和↘∼和≈…和⋯不同对齐的省略号\n\n### 积分、极限、求和、乘积、求导\n\n\\int表示积分，\\lim表示极限， \\sum表示求和，\\prod表示乘积，_’_ 表示求导，微分中的dx用\\mathrm{d}x表示，\\to表示箭头，\\infty表示无穷\n\n```latex\n\\\\ \\int_{0}^{x}{x^2}\\mathrm{d}x +\\lim_{x \\to \\infty}{\\frac{\\sin x}{x}}\n\\\\  \\sum_{i=1}^{n}{a_ib_i}+\\prod_{i=1}^{n}{(a_i+b_i)}+f(x)''\n```\n\n∫ 0 x x 2 d x + lim ⁡ x → ∞ sin ⁡ x x ∑ i = 1 n a i b i + ∏ i = 1 n ( a i + b i ) + f ( x ) ′ ′ \\\\ \\int_{0}^{x}{x^2}\\mathrm{d}x +\\lim_{x \\to \\infty}{\\frac{\\sin x}{x}} \\\\ \\sum_{i=1}^{n}{a_ib_i}+\\prod_{i=1}^{n}{(a_i+b_i)}+f(x)'' ∫0x​x2dx+x→∞lim​xsinx​i=1∑n​ai​bi​+i=1∏n​(ai​+bi​)+f(x)′′\n\n### 向量、组合数、矩阵\n\n向量用 **\\overrightarrow{ }** 表示，组合数用 **\\binom{ }{ }** ，其类似于分式\n\n```latex\n\\overrightarrow{AB} \\qquad \\binom{1}{2}\n```\n\nA B → ( 1 2 ) \\overrightarrow{AB} \\qquad \\binom{1}{2} AB\n\n(21​)\n\n矩阵以起始来规定，内部以&分列，以\\\\分行，括号里可填matrix，bmatrix，pmatrix，vmatrix，分别对应示例(1)(2)(3)(4)\n\n```latex\n$ \\begin{matrix}\n0 & 1 \\\\\n1 & 0 \n\\end{matrix} $   \n```\n\n0 1 1 0\n\n01​10​ [ 0 1 1 0 ]\n\n[01​10​] ( 0 1 1 0 )\n\n(01​10​) ∣ 0 1 1 0 ∣\n\n∣∣∣∣​01​10​∣∣∣∣​\n\n( 1 ) ( 2 ) ( 3 ) ( 4 ) (1)\\qquad(2)\\qquad(3)\\qquad(4) (1)(2)(3)(4)\n\n### 方框加粗、上下标记、空格、更大更小的字符\n\n\\boxed命令给公式加一个方框，\\mathbf将字体加粗，\\overline, \\underline 分别在表达式上、下方画出水平线，\\quad和\\qquad是空格，\\large 或 \\small能使字符变大变小\n\n```latex\n\\\\ \\boxed{\\large{\\mathbf{E=mc^2}}}\n\\\\ \\overline{a+\\underline{b+\\small{N}}}\n```\n\nE = m c 2 a + b + N ‾ ‾ \\\\ \\boxed{\\large{\\mathbf{E=mc^2}}} \\\\ \\overline{a+\\underline{b+\\small{N}}} E=mc2​a+b+N​​\n\n### 希腊字母\n\n```latex\n\\\\ \\alpha \\qquad \\beta  \\qquad \\Delta \\qquad \\zeta \\qquad \\varepsilon \n\\\\ \\eta \\qquad \\theta \\qquad \\lambda \\qquad \\mu \\qquad \\xi \\qquad \\pi  \n\\\\ \\rho \\qquad \\sigma  \\qquad  \\upsilon \\qquad \\Phi \\qquad \\phi \n\\\\ \\Psi  \\qquad \\psi \\qquad \\omega \\qquad \\Omega \\qquad O\n```\n\nα β Δ ζ ε η θ λ μ ξ π ρ σ υ Φ ϕ Ψ ψ ω Ω O \\\\ \\alpha \\qquad \\beta \\qquad \\Delta \\qquad \\zeta \\qquad \\varepsilon \\\\ \\eta \\qquad \\theta \\qquad \\lambda \\qquad \\mu \\qquad \\xi \\qquad \\pi \\\\ \\rho \\qquad \\sigma \\qquad \\upsilon \\qquad \\Phi \\qquad \\phi \\\\ \\Psi \\qquad \\psi \\qquad \\omega \\qquad \\Omega \\qquad O αβΔζεηθλμξπρσυΦϕΨψωΩO\n\n## 结论\n\n​ LaTeX是非常有用的，是非常严谨优美的， 在此对[Donald E. Knuth](https://baike.baidu.com/item/%E5%94%90%E7%BA%B3%E5%BE%B7%C2%B7%E5%85%8B%E5%8A%AA%E7%89%B9?fromtitle=Donald+E.+Knuth&fromid=2509519)表示敬意。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n参考资料\n---\n[LaTeX常用公式_ywlcode的博客-CSDN博客_latex 整除](https://blog.csdn.net/weixin_42755533/article/details/113132619?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165940495016781683972226%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165940495016781683972226&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-113132619-null-null.142^v37^pc_search_v2&utm_term=latex%20%E5%85%AC%E5%BC%8F&spm=1018.2226.3001.4187)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/🚀技能/LaTex公式.md","raw":"---\ntitle: LaTex公式\ndate: '2022-08-02 10:06'\ncategories:\n  - \"\\U0001F680技能\"\ncards-deck: \"source/_posts/\\U0001F680技能/LaTex公式.md\"\nabbrlink: 4371\ntags: \n- 技能\n- 已迁移\n---\n文章简介：如题\n<!-- more -->\n\n\n​ [LaTeX](https://so.csdn.net/so/search?q=LaTeX&spm=1001.2101.3001.7020)是一种基于ΤΕΧ的排版系统，而TeX是由著名的计算机科学家[Donald E. Knuth](https://baike.baidu.com/item/%E5%94%90%E7%BA%B3%E5%BE%B7%C2%B7%E5%85%8B%E5%8A%AA%E7%89%B9?fromtitle=Donald+E.+Knuth&fromid=2509519)发明的排版系统,可以了解一下他，LaTeX能够优美地生成数学公式且质量极高，本文简要记录其常用公式，以备自查。\n\n\n# 行内公式与行间公式及编号\n\n```latex\n$f(x) = a+b$\n\n$$\nf(x)=a+b+c\\tag{1.1}\n$$\n```\n$f(x) = a+b$\n\n$$\nf(x)=a+b+c\\tag{1.1}\n$$\n效果显然，使用`\\tag{}` 对公式进行标号\n\n# 多项式（上下标）、根号、分式、对数\n\n上下标分别用 _{ }和 ^{ } 来标记，{}内为值，可以是公式等等\n\n```latex\n$f(x)=a_{1}^{1-x}+a^{2-x}_{2}+a^{3-x}_{3}$\n```\n$f(x)=a_{1}^{1-x}+a^{2-x}_{2}+a^{3-x}_{3}$\n\n\n**\\sqrt{ }** 表示平方根，**\\sqrt[n]{ }** 表示n次方根，**\\frac{ }{ }** 表示分式，两个{}先分子，后分母，对数用 **\\log_{2}{343}** 表示\n\n```latex\n$\\sqrt{x}+\\sqrt[3]{2-x}-\\sqrt[x]{\\frac{a^x}{b^x}}+\\frac{1}{x}+\\log_{2}{x}$\n```\n\n$\\sqrt{x}+\\sqrt[3]{2-x}-\\sqrt[x]{\\frac{a^x}{b^x}}+\\frac{1}{x}+\\log_{2}{x}$\n\n\n### 常用符号\n\n**+ - * /** 等可以直接打出\n\n乘号用\\times,点乘用\\cdot，除号用\\div，不等号用\\ne，恒等或同余号用\\equiv，整除用\\mid,取模用\\mod，上取整用\\lfloor x \\rfloor，下取整用\\lceil x \\rceil\n\n```latex\n\\\\  \\times乘号 \\cdot点乘  \\div除号  \\ne不等号\t\\equiv恒等或同余号 \n\\\\  \\mid\t整除 \\mod 取模   \\lfloor x \\rfloor 和 \\lceil x \\rceil\n```\n\n\\times乘号 \\cdot点乘  \\div除号  \\ne不等号\t\\equiv恒等或同余号 \n \\mid\t整除 \\mod 取模   \\lfloor x \\rfloor 和 \\lceil x \\rceil\n\n**ps**: \\ \\ 是分行\n\n小于号用\\lt，大于号用\\gt，小于等于号用\\le，大于等于号用\\ge\n\n```latex\n\\lt小于号     \\gt大于号    \\le小于等于号    \\ge大于等于号\n```\n\n< 小 于 号 > 大 于 号 ≤ 小 于 等 于 号 ≥ 大 于 等 于 号 \\lt小于号 \\gt大于号 \\le小于等于号 \\ge大于等于号 <小于号>大于号≤小于等于号≥大于等于号\n\n集合运算符号\n\n```latex\n\\\\ \\cup并运算 \\quad  \\cap交运算 \\qquad  \\subset 和 \\supset  \n\\\\ \\subseteq 和 \\supseteq \\qquad  \\in 和 \\notin \\qquad \\emptyset 空集\n```\n\n∪ 并 运 算 ∩ 交 运 算 ⊂ 和 ⊃ ⊆ 和 ⊇ ∈ 和 ∉ ∅ 空 集 \\\\ \\cup并运算 \\quad \\cap交运算 \\qquad \\subset 和 \\supset \\\\ \\subseteq 和 \\supseteq \\qquad \\in 和 \\notin \\qquad \\emptyset 空集 ∪并运算∩交运算⊂和⊃⊆和⊇∈和∈/​∅空集\n\n**ps**: \\qquad是空格\n\n三角符号用\\bigtriangleup，三角符号类似\\sin,度数用上标^{\\cric}表示，角用\\angle\n\n```latex\n\\\\ \\bigtriangleup三角 \\qquad \\angle 角\n\\\\ \\tan90^{\\circ}和\\sin x和\\cos x三角函数及度数表示 \n```\n\n\n```latex\n\\\\\t\\rightarrow和\\Rightarrow\n\\\\  \\leftrightarrow和\\Leftrightarrow\n\\\\\t\\vee和\\wedge\n\\\\\t\\because和\\therefore\n\\\\\t因为所以\n```\n\n→ 和 ⇒ ↔ 和 ⇔ ∨ 和 ∧ ∵ 和 ∴ 因 为 所 以 \\\\ \\rightarrow和\\Rightarrow \\\\ \\leftrightarrow和\\Leftrightarrow \\\\ \\vee和\\wedge \\\\ \\because和\\therefore \\\\ 因为所以 →和⇒↔和⇔∨和∧∵和∴因为所以\n\n特殊符号\n\n```latex\n\\\\ \\otimes和\\oplus \\qquad \\nearrow和\\searrow \\qquad\t\n\\\\ \\sim和\\approx  \\qquad\t\\ldots和\\cdots 不同对齐的省略号\n```\n\n⊗ 和 ⊕ ↗ 和 ↘ ∼ 和 ≈ … 和 ⋯ 不 同 对 齐 的 省 略 号 \\\\ \\otimes和\\oplus \\qquad \\nearrow和\\searrow \\qquad \\\\ \\sim和\\approx \\qquad \\ldots和\\cdots 不同对齐的省略号 ⊗和⊕↗和↘∼和≈…和⋯不同对齐的省略号\n\n### 积分、极限、求和、乘积、求导\n\n\\int表示积分，\\lim表示极限， \\sum表示求和，\\prod表示乘积，_’_ 表示求导，微分中的dx用\\mathrm{d}x表示，\\to表示箭头，\\infty表示无穷\n\n```latex\n\\\\ \\int_{0}^{x}{x^2}\\mathrm{d}x +\\lim_{x \\to \\infty}{\\frac{\\sin x}{x}}\n\\\\  \\sum_{i=1}^{n}{a_ib_i}+\\prod_{i=1}^{n}{(a_i+b_i)}+f(x)''\n```\n\n∫ 0 x x 2 d x + lim ⁡ x → ∞ sin ⁡ x x ∑ i = 1 n a i b i + ∏ i = 1 n ( a i + b i ) + f ( x ) ′ ′ \\\\ \\int_{0}^{x}{x^2}\\mathrm{d}x +\\lim_{x \\to \\infty}{\\frac{\\sin x}{x}} \\\\ \\sum_{i=1}^{n}{a_ib_i}+\\prod_{i=1}^{n}{(a_i+b_i)}+f(x)'' ∫0x​x2dx+x→∞lim​xsinx​i=1∑n​ai​bi​+i=1∏n​(ai​+bi​)+f(x)′′\n\n### 向量、组合数、矩阵\n\n向量用 **\\overrightarrow{ }** 表示，组合数用 **\\binom{ }{ }** ，其类似于分式\n\n```latex\n\\overrightarrow{AB} \\qquad \\binom{1}{2}\n```\n\nA B → ( 1 2 ) \\overrightarrow{AB} \\qquad \\binom{1}{2} AB\n\n(21​)\n\n矩阵以起始来规定，内部以&分列，以\\\\分行，括号里可填matrix，bmatrix，pmatrix，vmatrix，分别对应示例(1)(2)(3)(4)\n\n```latex\n$ \\begin{matrix}\n0 & 1 \\\\\n1 & 0 \n\\end{matrix} $   \n```\n\n0 1 1 0\n\n01​10​ [ 0 1 1 0 ]\n\n[01​10​] ( 0 1 1 0 )\n\n(01​10​) ∣ 0 1 1 0 ∣\n\n∣∣∣∣​01​10​∣∣∣∣​\n\n( 1 ) ( 2 ) ( 3 ) ( 4 ) (1)\\qquad(2)\\qquad(3)\\qquad(4) (1)(2)(3)(4)\n\n### 方框加粗、上下标记、空格、更大更小的字符\n\n\\boxed命令给公式加一个方框，\\mathbf将字体加粗，\\overline, \\underline 分别在表达式上、下方画出水平线，\\quad和\\qquad是空格，\\large 或 \\small能使字符变大变小\n\n```latex\n\\\\ \\boxed{\\large{\\mathbf{E=mc^2}}}\n\\\\ \\overline{a+\\underline{b+\\small{N}}}\n```\n\nE = m c 2 a + b + N ‾ ‾ \\\\ \\boxed{\\large{\\mathbf{E=mc^2}}} \\\\ \\overline{a+\\underline{b+\\small{N}}} E=mc2​a+b+N​​\n\n### 希腊字母\n\n```latex\n\\\\ \\alpha \\qquad \\beta  \\qquad \\Delta \\qquad \\zeta \\qquad \\varepsilon \n\\\\ \\eta \\qquad \\theta \\qquad \\lambda \\qquad \\mu \\qquad \\xi \\qquad \\pi  \n\\\\ \\rho \\qquad \\sigma  \\qquad  \\upsilon \\qquad \\Phi \\qquad \\phi \n\\\\ \\Psi  \\qquad \\psi \\qquad \\omega \\qquad \\Omega \\qquad O\n```\n\nα β Δ ζ ε η θ λ μ ξ π ρ σ υ Φ ϕ Ψ ψ ω Ω O \\\\ \\alpha \\qquad \\beta \\qquad \\Delta \\qquad \\zeta \\qquad \\varepsilon \\\\ \\eta \\qquad \\theta \\qquad \\lambda \\qquad \\mu \\qquad \\xi \\qquad \\pi \\\\ \\rho \\qquad \\sigma \\qquad \\upsilon \\qquad \\Phi \\qquad \\phi \\\\ \\Psi \\qquad \\psi \\qquad \\omega \\qquad \\Omega \\qquad O αβΔζεηθλμξπρσυΦϕΨψωΩO\n\n## 结论\n\n​ LaTeX是非常有用的，是非常严谨优美的， 在此对[Donald E. Knuth](https://baike.baidu.com/item/%E5%94%90%E7%BA%B3%E5%BE%B7%C2%B7%E5%85%8B%E5%8A%AA%E7%89%B9?fromtitle=Donald+E.+Knuth&fromid=2509519)表示敬意。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n参考资料\n---\n[LaTeX常用公式_ywlcode的博客-CSDN博客_latex 整除](https://blog.csdn.net/weixin_42755533/article/details/113132619?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165940495016781683972226%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165940495016781683972226&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-113132619-null-null.142^v37^pc_search_v2&utm_term=latex%20%E5%85%AC%E5%BC%8F&spm=1018.2226.3001.4187)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"🚀技能/LaTex公式","published":1,"updated":"2022-08-04T05:50:26.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fiw000ke0mg79w1fa5d","content":"<p>文章简介：如题</p>\n<span id=\"more\"></span>\n<p>​ <a href=\"https://so.csdn.net/so/search?q=LaTeX&amp;spm=1001.2101.3001.7020\">LaTeX</a>是一种基于ΤΕΧ的排版系统，而TeX是由著名的计算机科学家<a href=\"https://baike.baidu.com/item/%E5%94%90%E7%BA%B3%E5%BE%B7%C2%B7%E5%85%8B%E5%8A%AA%E7%89%B9?fromtitle=Donald+E.+Knuth&amp;fromid=2509519\">Donald E. Knuth</a>发明的排版系统,可以了解一下他，LaTeX能够优美地生成数学公式且质量极高，本文简要记录其常用公式，以备自查。</p>\n<h1 id=\"行内公式与行间公式及编号\"><a class=\"markdownIt-Anchor\" href=\"#行内公式与行间公式及编号\"></a> 行内公式与行间公式及编号</h1>\n<figure class=\"highlight latex\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-built_in\">$</span>f(x) = a+b<span class=\"hljs-built_in\">$</span><br><br><span class=\"hljs-built_in\">$</span><span class=\"hljs-built_in\">$</span><br>f(x)=a+b+c<span class=\"hljs-keyword\">\\tag</span>{1.1}<br><span class=\"hljs-built_in\">$</span><span class=\"hljs-built_in\">$</span><br></code></pre></td></tr></tbody></table></figure>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>a</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">f(x) = a+b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mtable width=\"100%\"><mtr><mtd width=\"50%\"></mtd><mtd><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi></mrow></mtd><mtd width=\"50%\"></mtd><mtd><mtext>(1.1)</mtext></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">f(x)=a+b+c\\tag{1.1}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span></span><span class=\"tag\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">(</span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">1</span></span><span class=\"mord\">)</span></span></span></span></span></span></p>\n<p>效果显然，使用<code>\\tag{}</code> 对公式进行标号</p>\n<h1 id=\"多项式上下标-根号-分式-对数\"><a class=\"markdownIt-Anchor\" href=\"#多项式上下标-根号-分式-对数\"></a> 多项式（上下标）、根号、分式、对数</h1>\n<p>上下标分别用 _{ }和 ^{ } 来标记，{}内为值，可以是公式等等</p>\n<figure class=\"highlight latex\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-built_in\">$</span>f(x)=a<span class=\"hljs-built_in\">_</span>{1}<span class=\"hljs-built_in\">^</span>{1-x}+a<span class=\"hljs-built_in\">^</span>{2-x}<span class=\"hljs-built_in\">_</span>{2}+a<span class=\"hljs-built_in\">^</span>{3-x}<span class=\"hljs-built_in\">_</span>{3}<span class=\"hljs-built_in\">$</span><br></code></pre></td></tr></tbody></table></figure>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mi>a</mi><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>x</mi></mrow></msubsup><mo>+</mo><msubsup><mi>a</mi><mn>2</mn><mrow><mn>2</mn><mo>−</mo><mi>x</mi></mrow></msubsup><mo>+</mo><msubsup><mi>a</mi><mn>3</mn><mrow><mn>3</mn><mo>−</mo><mi>x</mi></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">f(x)=a_{1}^{1-x}+a^{2-x}_{2}+a^{3-x}_{3}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.120547em;vertical-align:-0.266308em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.854239em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.266308em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.120547em;vertical-align:-0.266308em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.854239em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.266308em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.120547em;vertical-align:-0.266308em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.854239em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.266308em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p><strong>\\sqrt{ }</strong> 表示平方根，<strong>\\sqrt[n]{ }</strong> 表示n次方根，<strong>\\frac{ }{ }</strong> 表示分式，两个{}先分子，后分母，对数用 <strong>\\log_{2}{343}</strong> 表示</p>\n<figure class=\"highlight latex\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-built_in\">$</span><span class=\"hljs-keyword\">\\sqrt</span>{x}+<span class=\"hljs-keyword\">\\sqrt</span>[3]{2-x}-<span class=\"hljs-keyword\">\\sqrt</span>[x]{<span class=\"hljs-keyword\">\\frac</span>{a<span class=\"hljs-built_in\">^</span>x}{b<span class=\"hljs-built_in\">^</span>x}}+<span class=\"hljs-keyword\">\\frac</span>{1}{x}+<span class=\"hljs-keyword\">\\log</span><span class=\"hljs-built_in\">_</span>{2}{x}<span class=\"hljs-built_in\">$</span><br></code></pre></td></tr></tbody></table></figure>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msqrt><mi>x</mi></msqrt><mo>+</mo><mroot><mrow><mn>2</mn><mo>−</mo><mi>x</mi></mrow><mn>3</mn></mroot><mo>−</mo><mroot><mfrac><msup><mi>a</mi><mi>x</mi></msup><msup><mi>b</mi><mi>x</mi></msup></mfrac><mi>x</mi></mroot><mo>+</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mo>+</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\sqrt{x}+\\sqrt[3]{2-x}-\\sqrt[x]{\\frac{a^x}{b^x}}+\\frac{1}{x}+\\log_{2}{x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.23972em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathdefault\">x</span></span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,\n-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,\n-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,\n35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,\n-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467\ns-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422\ns-65,47,-65,47z M834 80H400000v40H845z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.17444499999999996em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.736886em;\"><span style=\"top:-2.914666em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8655550000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathdefault\">x</span></span></span><span style=\"top:-2.825555em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,\n-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,\n-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,\n35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,\n-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467\ns-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422\ns-65,47,-65,47z M834 80H400000v40H845z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17444499999999996em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.84em;vertical-align:-0.62276em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.571968em;\"><span style=\"top:-2.856688em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.21724em;\"><span class=\"svg-align\" style=\"top:-3.8em;\"><span class=\"pstrut\" style=\"height:3.8em;\"></span><span class=\"mord\" style=\"padding-left:1em;\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.80948em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935428571428571em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935428571428571em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-3.17724em;\"><span class=\"pstrut\" style=\"height:3.8em;\"></span><span class=\"hide-tail\" style=\"min-width:1.02em;height:1.8800000000000001em;\"><svg width=\"400em\" height=\"1.8800000000000001em\" viewBox=\"0 0 400000 1944\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M1001,80H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,\n572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,\n-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39\nc-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60\ns208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,\n-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5c4,-6.7,10,-10,18,-10z\nM1001 80H400000v40H1013z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.62276em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.93858em;vertical-align:-0.24414em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span></span></span></span></span></p>\n<h3 id=\"常用符号\"><a class=\"markdownIt-Anchor\" href=\"#常用符号\"></a> 常用符号</h3>\n<p><strong>+ - * /</strong> 等可以直接打出</p>\n<p>乘号用\\times,点乘用\\cdot，除号用\\div，不等号用\\ne，恒等或同余号用\\equiv，整除用\\mid,取模用\\mod，上取整用\\lfloor x \\rfloor，下取整用\\lceil x \\rceil</p>\n<figure class=\"highlight latex\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-keyword\">\\\\</span>  <span class=\"hljs-keyword\">\\times</span>乘号 <span class=\"hljs-keyword\">\\cdot</span>点乘  <span class=\"hljs-keyword\">\\div</span>除号  <span class=\"hljs-keyword\">\\ne</span>不等号\t<span class=\"hljs-keyword\">\\equiv</span>恒等或同余号 <br><span class=\"hljs-keyword\">\\\\</span>  <span class=\"hljs-keyword\">\\mid</span>\t整除 <span class=\"hljs-keyword\">\\mod</span> 取模   <span class=\"hljs-keyword\">\\lfloor</span> x <span class=\"hljs-keyword\">\\rfloor</span> 和 <span class=\"hljs-keyword\">\\lceil</span> x <span class=\"hljs-keyword\">\\rceil</span><br></code></pre></td></tr></tbody></table></figure>\n<p>\\times乘号 \\cdot点乘  \\div除号  \\ne不等号\t\\equiv恒等或同余号<br>\n\\mid\t整除 \\mod 取模   \\lfloor x \\rfloor 和 \\lceil x \\rceil</p>\n<p><strong>ps</strong>: \\ \\ 是分行</p>\n<p>小于号用\\lt，大于号用\\gt，小于等于号用\\le，大于等于号用\\ge</p>\n<figure class=\"highlight latex\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-keyword\">\\lt</span>小于号     <span class=\"hljs-keyword\">\\gt</span>大于号    <span class=\"hljs-keyword\">\\le</span>小于等于号    <span class=\"hljs-keyword\">\\ge</span>大于等于号<br></code></pre></td></tr></tbody></table></figure>\n<p>&lt; 小 于 号 &gt; 大 于 号 ≤ 小 于 等 于 号 ≥ 大 于 等 于 号 \\lt小于号 \\gt大于号 \\le小于等于号 \\ge大于等于号 &lt;小于号&gt;大于号≤小于等于号≥大于等于号</p>\n<p>集合运算符号</p>\n<figure class=\"highlight latex\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\cup</span>并运算 <span class=\"hljs-keyword\">\\quad</span>  <span class=\"hljs-keyword\">\\cap</span>交运算 <span class=\"hljs-keyword\">\\qquad</span>  <span class=\"hljs-keyword\">\\subset</span> 和 <span class=\"hljs-keyword\">\\supset</span>  <br><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\subseteq</span> 和 <span class=\"hljs-keyword\">\\supseteq</span> <span class=\"hljs-keyword\">\\qquad</span>  <span class=\"hljs-keyword\">\\in</span> 和 <span class=\"hljs-keyword\">\\notin</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\emptyset</span> 空集<br></code></pre></td></tr></tbody></table></figure>\n<p>∪ 并 运 算 ∩ 交 运 算 ⊂ 和 ⊃ ⊆ 和 ⊇ ∈ 和 ∉ ∅ 空 集 \\ \\cup并运算 \\quad \\cap交运算 \\qquad \\subset 和 \\supset \\ \\subseteq 和 \\supseteq \\qquad \\in 和 \\notin \\qquad \\emptyset 空集 ∪并运算∩交运算⊂和⊃⊆和⊇∈和∈/​∅空集</p>\n<p><strong>ps</strong>: \\qquad是空格</p>\n<p>三角符号用\\bigtriangleup，三角符号类似\\sin,度数用上标^{\\cric}表示，角用\\angle</p>\n<figure class=\"highlight latex\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\bigtriangleup</span>三角 <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\angle</span> 角<br><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\tan</span>90<span class=\"hljs-built_in\">^</span>{<span class=\"hljs-keyword\">\\circ</span>}和<span class=\"hljs-keyword\">\\sin</span> x和<span class=\"hljs-keyword\">\\cos</span> x三角函数及度数表示 <br></code></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight latex\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-keyword\">\\\\</span>\t<span class=\"hljs-keyword\">\\rightarrow</span>和<span class=\"hljs-keyword\">\\Rightarrow</span><br><span class=\"hljs-keyword\">\\\\</span>  <span class=\"hljs-keyword\">\\leftrightarrow</span>和<span class=\"hljs-keyword\">\\Leftrightarrow</span><br><span class=\"hljs-keyword\">\\\\</span>\t<span class=\"hljs-keyword\">\\vee</span>和<span class=\"hljs-keyword\">\\wedge</span><br><span class=\"hljs-keyword\">\\\\</span>\t<span class=\"hljs-keyword\">\\because</span>和<span class=\"hljs-keyword\">\\therefore</span><br><span class=\"hljs-keyword\">\\\\</span>\t因为所以<br></code></pre></td></tr></tbody></table></figure>\n<p>→ 和 ⇒ ↔ 和 ⇔ ∨ 和 ∧ ∵ 和 ∴ 因 为 所 以 \\ \\rightarrow和\\Rightarrow \\ \\leftrightarrow和\\Leftrightarrow \\ \\vee和\\wedge \\ \\because和\\therefore \\ 因为所以 →和⇒↔和⇔∨和∧∵和∴因为所以</p>\n<p>特殊符号</p>\n<figure class=\"highlight latex\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\otimes</span>和<span class=\"hljs-keyword\">\\oplus</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\nearrow</span>和<span class=\"hljs-keyword\">\\searrow</span> <span class=\"hljs-keyword\">\\qquad</span>\t<br><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\sim</span>和<span class=\"hljs-keyword\">\\approx</span>  <span class=\"hljs-keyword\">\\qquad</span>\t<span class=\"hljs-keyword\">\\ldots</span>和<span class=\"hljs-keyword\">\\cdots</span> 不同对齐的省略号<br></code></pre></td></tr></tbody></table></figure>\n<p>⊗ 和 ⊕ ↗ 和 ↘ ∼ 和 ≈ … 和 ⋯ 不 同 对 齐 的 省 略 号 \\ \\otimes和\\oplus \\qquad \\nearrow和\\searrow \\qquad \\ \\sim和\\approx \\qquad \\ldots和\\cdots 不同对齐的省略号 ⊗和⊕↗和↘∼和≈…和⋯不同对齐的省略号</p>\n<h3 id=\"积分-极限-求和-乘积-求导\"><a class=\"markdownIt-Anchor\" href=\"#积分-极限-求和-乘积-求导\"></a> 积分、极限、求和、乘积、求导</h3>\n<p>\\int表示积分，\\lim表示极限， \\sum表示求和，\\prod表示乘积，<em>’</em> 表示求导，微分中的dx用\\mathrm{d}x表示，\\to表示箭头，\\infty表示无穷</p>\n<figure class=\"highlight latex\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\int</span><span class=\"hljs-built_in\">_</span>{0}<span class=\"hljs-built_in\">^</span>{x}{x<span class=\"hljs-built_in\">^</span>2}<span class=\"hljs-keyword\">\\mathrm</span>{d}x +<span class=\"hljs-keyword\">\\lim</span><span class=\"hljs-built_in\">_</span>{x <span class=\"hljs-keyword\">\\to</span> <span class=\"hljs-keyword\">\\infty</span>}{<span class=\"hljs-keyword\">\\frac</span>{<span class=\"hljs-keyword\">\\sin</span> x}{x}}<br><span class=\"hljs-keyword\">\\\\</span>  <span class=\"hljs-keyword\">\\sum</span><span class=\"hljs-built_in\">_</span>{i=1}<span class=\"hljs-built_in\">^</span>{n}{a<span class=\"hljs-built_in\">_</span>ib<span class=\"hljs-built_in\">_</span>i}+<span class=\"hljs-keyword\">\\prod</span><span class=\"hljs-built_in\">_</span>{i=1}<span class=\"hljs-built_in\">^</span>{n}{(a<span class=\"hljs-built_in\">_</span>i+b<span class=\"hljs-built_in\">_</span>i)}+f(x)''<br></code></pre></td></tr></tbody></table></figure>\n<p>∫ 0 x x 2 d x + lim ⁡ x → ∞ sin ⁡ x x ∑ i = 1 n a i b i + ∏ i = 1 n ( a i + b i ) + f ( x ) ′ ′ \\ \\int_{0}<sup>{x}{x</sup>2}\\mathrm{d}x +\\lim_{x \\to \\infty}{\\frac{\\sin x}{x}} \\ \\sum_{i=1}<sup>{n}{a_ib_i}+\\prod_{i=1}</sup>{n}{(a_i+b_i)}+f(x)’’ ∫0x​x2dx+x→∞lim​xsinx​i=1∑n​ai​bi​+i=1∏n​(ai​+bi​)+f(x)′′</p>\n<h3 id=\"向量-组合数-矩阵\"><a class=\"markdownIt-Anchor\" href=\"#向量-组合数-矩阵\"></a> 向量、组合数、矩阵</h3>\n<p>向量用 <strong>\\overrightarrow{ }</strong> 表示，组合数用 <strong>\\binom{ }{ }</strong> ，其类似于分式</p>\n<figure class=\"highlight latex\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-keyword\">\\overrightarrow</span>{AB} <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\binom</span>{1}{2}<br></code></pre></td></tr></tbody></table></figure>\n<p>A B → ( 1 2 ) \\overrightarrow{AB} \\qquad \\binom{1}{2} AB</p>\n<p>(21​)</p>\n<p>矩阵以起始来规定，内部以&amp;分列，以\\分行，括号里可填matrix，bmatrix，pmatrix，vmatrix，分别对应示例(1)(2)(3)(4)</p>\n<figure class=\"highlight latex\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-built_in\">$</span> <span class=\"hljs-keyword\">\\begin</span>{matrix}<br>0 <span class=\"hljs-built_in\">&amp;</span> 1 <span class=\"hljs-keyword\">\\\\</span><br>1 <span class=\"hljs-built_in\">&amp;</span> 0 <br><span class=\"hljs-keyword\">\\end</span>{matrix} <span class=\"hljs-built_in\">$</span>   <br></code></pre></td></tr></tbody></table></figure>\n<p>0 1 1 0</p>\n<p>01​10​ [ 0 1 1 0 ]</p>\n<p>[01​10​] ( 0 1 1 0 )</p>\n<p>(01​10​) ∣ 0 1 1 0 ∣</p>\n<p>∣∣∣∣​01​10​∣∣∣∣​</p>\n<p>( 1 ) ( 2 ) ( 3 ) ( 4 ) (1)\\qquad(2)\\qquad(3)\\qquad(4) (1)(2)(3)(4)</p>\n<h3 id=\"方框加粗-上下标记-空格-更大更小的字符\"><a class=\"markdownIt-Anchor\" href=\"#方框加粗-上下标记-空格-更大更小的字符\"></a> 方框加粗、上下标记、空格、更大更小的字符</h3>\n<p>\\boxed命令给公式加一个方框，\\mathbf将字体加粗，\\overline, \\underline 分别在表达式上、下方画出水平线，\\quad和\\qquad是空格，\\large 或 \\small能使字符变大变小</p>\n<figure class=\"highlight latex\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\boxed</span>{<span class=\"hljs-keyword\">\\large</span>{<span class=\"hljs-keyword\">\\mathbf</span>{E=mc<span class=\"hljs-built_in\">^</span>2}}}<br><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\overline</span>{a+<span class=\"hljs-keyword\">\\underline</span>{b+<span class=\"hljs-keyword\">\\small</span>{N}}}<br></code></pre></td></tr></tbody></table></figure>\n<p>E = m c 2 a + b + N ‾ ‾ \\ \\boxed{\\large{\\mathbf{E=mc^2}}} \\ \\overline{a+\\underline{b+\\small{N}}} E=mc2​a+b+N​​</p>\n<h3 id=\"希腊字母\"><a class=\"markdownIt-Anchor\" href=\"#希腊字母\"></a> 希腊字母</h3>\n<figure class=\"highlight latex\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\alpha</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\beta</span>  <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\Delta</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\zeta</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\varepsilon</span> <br><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\eta</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\theta</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\lambda</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\mu</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\xi</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\pi</span>  <br><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\rho</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\sigma</span>  <span class=\"hljs-keyword\">\\qquad</span>  <span class=\"hljs-keyword\">\\upsilon</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\Phi</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\phi</span> <br><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\Psi</span>  <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\psi</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\omega</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\Omega</span> <span class=\"hljs-keyword\">\\qquad</span> O<br></code></pre></td></tr></tbody></table></figure>\n<p>α β Δ ζ ε η θ λ μ ξ π ρ σ υ Φ ϕ Ψ ψ ω Ω O \\ \\alpha \\qquad \\beta \\qquad \\Delta \\qquad \\zeta \\qquad \\varepsilon \\ \\eta \\qquad \\theta \\qquad \\lambda \\qquad \\mu \\qquad \\xi \\qquad \\pi \\ \\rho \\qquad \\sigma \\qquad \\upsilon \\qquad \\Phi \\qquad \\phi \\ \\Psi \\qquad \\psi \\qquad \\omega \\qquad \\Omega \\qquad O αβΔζεηθλμξπρσυΦϕΨψωΩO</p>\n<h2 id=\"结论\"><a class=\"markdownIt-Anchor\" href=\"#结论\"></a> 结论</h2>\n<p>​ LaTeX是非常有用的，是非常严谨优美的， 在此对<a href=\"https://baike.baidu.com/item/%E5%94%90%E7%BA%B3%E5%BE%B7%C2%B7%E5%85%8B%E5%8A%AA%E7%89%B9?fromtitle=Donald+E.+Knuth&amp;fromid=2509519\">Donald E. Knuth</a>表示敬意。</p>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h2>\n<p><a href=\"https://blog.csdn.net/weixin_42755533/article/details/113132619?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165940495016781683972226%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165940495016781683972226&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-113132619-null-null.142%5Ev37%5Epc_search_v2&amp;utm_term=latex%20%E5%85%AC%E5%BC%8F&amp;spm=1018.2226.3001.4187\">LaTeX常用公式_ywlcode的博客-CSDN博客_latex 整除</a></p>\n","site":{"data":{}},"wordcount":4076,"excerpt":"<p>文章简介：如题</p>","more":"<p>​ <a href=\"https://so.csdn.net/so/search?q=LaTeX&amp;spm=1001.2101.3001.7020\">LaTeX</a>是一种基于ΤΕΧ的排版系统，而TeX是由著名的计算机科学家<a href=\"https://baike.baidu.com/item/%E5%94%90%E7%BA%B3%E5%BE%B7%C2%B7%E5%85%8B%E5%8A%AA%E7%89%B9?fromtitle=Donald+E.+Knuth&amp;fromid=2509519\">Donald E. Knuth</a>发明的排版系统,可以了解一下他，LaTeX能够优美地生成数学公式且质量极高，本文简要记录其常用公式，以备自查。</p>\n<h1 id=\"行内公式与行间公式及编号\"><a class=\"markdownIt-Anchor\" href=\"#行内公式与行间公式及编号\"></a> 行内公式与行间公式及编号</h1>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-built_in\">$</span>f(x) = a+b<span class=\"hljs-built_in\">$</span><br><br><span class=\"hljs-built_in\">$</span><span class=\"hljs-built_in\">$</span><br>f(x)=a+b+c<span class=\"hljs-keyword\">\\tag</span>&#123;1.1&#125;<br><span class=\"hljs-built_in\">$</span><span class=\"hljs-built_in\">$</span><br></code></pre></td></tr></table></figure>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>a</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">f(x) = a+b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mtable width=\"100%\"><mtr><mtd width=\"50%\"></mtd><mtd><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi></mrow></mtd><mtd width=\"50%\"></mtd><mtd><mtext>(1.1)</mtext></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">f(x)=a+b+c\\tag{1.1}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span></span><span class=\"tag\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">(</span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">1</span></span><span class=\"mord\">)</span></span></span></span></span></span></p>\n<p>效果显然，使用<code>\\tag&#123;&#125;</code> 对公式进行标号</p>\n<h1 id=\"多项式上下标-根号-分式-对数\"><a class=\"markdownIt-Anchor\" href=\"#多项式上下标-根号-分式-对数\"></a> 多项式（上下标）、根号、分式、对数</h1>\n<p>上下标分别用 _{ }和 ^{ } 来标记，{}内为值，可以是公式等等</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-built_in\">$</span>f(x)=a<span class=\"hljs-built_in\">_</span>&#123;1&#125;<span class=\"hljs-built_in\">^</span>&#123;1-x&#125;+a<span class=\"hljs-built_in\">^</span>&#123;2-x&#125;<span class=\"hljs-built_in\">_</span>&#123;2&#125;+a<span class=\"hljs-built_in\">^</span>&#123;3-x&#125;<span class=\"hljs-built_in\">_</span>&#123;3&#125;<span class=\"hljs-built_in\">$</span><br></code></pre></td></tr></table></figure>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mi>a</mi><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>x</mi></mrow></msubsup><mo>+</mo><msubsup><mi>a</mi><mn>2</mn><mrow><mn>2</mn><mo>−</mo><mi>x</mi></mrow></msubsup><mo>+</mo><msubsup><mi>a</mi><mn>3</mn><mrow><mn>3</mn><mo>−</mo><mi>x</mi></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">f(x)=a_{1}^{1-x}+a^{2-x}_{2}+a^{3-x}_{3}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.120547em;vertical-align:-0.266308em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.854239em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.266308em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.120547em;vertical-align:-0.266308em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.854239em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.266308em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.120547em;vertical-align:-0.266308em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.854239em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.266308em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p><strong>\\sqrt{ }</strong> 表示平方根，<strong>\\sqrt[n]{ }</strong> 表示n次方根，<strong>\\frac{ }{ }</strong> 表示分式，两个{}先分子，后分母，对数用 <strong>\\log_{2}{343}</strong> 表示</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-built_in\">$</span><span class=\"hljs-keyword\">\\sqrt</span>&#123;x&#125;+<span class=\"hljs-keyword\">\\sqrt</span>[3]&#123;2-x&#125;-<span class=\"hljs-keyword\">\\sqrt</span>[x]&#123;<span class=\"hljs-keyword\">\\frac</span>&#123;a<span class=\"hljs-built_in\">^</span>x&#125;&#123;b<span class=\"hljs-built_in\">^</span>x&#125;&#125;+<span class=\"hljs-keyword\">\\frac</span>&#123;1&#125;&#123;x&#125;+<span class=\"hljs-keyword\">\\log</span><span class=\"hljs-built_in\">_</span>&#123;2&#125;&#123;x&#125;<span class=\"hljs-built_in\">$</span><br></code></pre></td></tr></table></figure>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msqrt><mi>x</mi></msqrt><mo>+</mo><mroot><mrow><mn>2</mn><mo>−</mo><mi>x</mi></mrow><mn>3</mn></mroot><mo>−</mo><mroot><mfrac><msup><mi>a</mi><mi>x</mi></msup><msup><mi>b</mi><mi>x</mi></msup></mfrac><mi>x</mi></mroot><mo>+</mo><mfrac><mn>1</mn><mi>x</mi></mfrac><mo>+</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\sqrt{x}+\\sqrt[3]{2-x}-\\sqrt[x]{\\frac{a^x}{b^x}}+\\frac{1}{x}+\\log_{2}{x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.23972em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathdefault\">x</span></span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,\n-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,\n-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,\n35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,\n-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467\ns-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422\ns-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.17444499999999996em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.736886em;\"><span style=\"top:-2.914666em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8655550000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathdefault\">x</span></span></span><span style=\"top:-2.825555em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,\n-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,\n-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,\n35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,\n-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467\ns-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422\ns-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17444499999999996em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.84em;vertical-align:-0.62276em;\"></span><span class=\"mord sqrt\"><span class=\"root\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.571968em;\"><span style=\"top:-2.856688em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size6 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span></span></span></span></span><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.21724em;\"><span class=\"svg-align\" style=\"top:-3.8em;\"><span class=\"pstrut\" style=\"height:3.8em;\"></span><span class=\"mord\" style=\"padding-left:1em;\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.80948em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935428571428571em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935428571428571em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-3.17724em;\"><span class=\"pstrut\" style=\"height:3.8em;\"></span><span class=\"hide-tail\" style=\"min-width:1.02em;height:1.8800000000000001em;\"><svg width='400em' height='1.8800000000000001em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M1001,80H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,\n572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,\n-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39\nc-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60\ns208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,\n-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5c4,-6.7,10,-10,18,-10z\nM1001 80H400000v40H1013z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.62276em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.93858em;vertical-align:-0.24414em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span></span></span></span></span></p>\n<h3 id=\"常用符号\"><a class=\"markdownIt-Anchor\" href=\"#常用符号\"></a> 常用符号</h3>\n<p><strong>+ - * /</strong> 等可以直接打出</p>\n<p>乘号用\\times,点乘用\\cdot，除号用\\div，不等号用\\ne，恒等或同余号用\\equiv，整除用\\mid,取模用\\mod，上取整用\\lfloor x \\rfloor，下取整用\\lceil x \\rceil</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-keyword\">\\\\</span>  <span class=\"hljs-keyword\">\\times</span>乘号 <span class=\"hljs-keyword\">\\cdot</span>点乘  <span class=\"hljs-keyword\">\\div</span>除号  <span class=\"hljs-keyword\">\\ne</span>不等号\t<span class=\"hljs-keyword\">\\equiv</span>恒等或同余号 <br><span class=\"hljs-keyword\">\\\\</span>  <span class=\"hljs-keyword\">\\mid</span>\t整除 <span class=\"hljs-keyword\">\\mod</span> 取模   <span class=\"hljs-keyword\">\\lfloor</span> x <span class=\"hljs-keyword\">\\rfloor</span> 和 <span class=\"hljs-keyword\">\\lceil</span> x <span class=\"hljs-keyword\">\\rceil</span><br></code></pre></td></tr></table></figure>\n<p>\\times乘号 \\cdot点乘  \\div除号  \\ne不等号\t\\equiv恒等或同余号<br />\n\\mid\t整除 \\mod 取模   \\lfloor x \\rfloor 和 \\lceil x \\rceil</p>\n<p><strong>ps</strong>: \\ \\ 是分行</p>\n<p>小于号用\\lt，大于号用\\gt，小于等于号用\\le，大于等于号用\\ge</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-keyword\">\\lt</span>小于号     <span class=\"hljs-keyword\">\\gt</span>大于号    <span class=\"hljs-keyword\">\\le</span>小于等于号    <span class=\"hljs-keyword\">\\ge</span>大于等于号<br></code></pre></td></tr></table></figure>\n<p>&lt; 小 于 号 &gt; 大 于 号 ≤ 小 于 等 于 号 ≥ 大 于 等 于 号 \\lt小于号 \\gt大于号 \\le小于等于号 \\ge大于等于号 &lt;小于号&gt;大于号≤小于等于号≥大于等于号</p>\n<p>集合运算符号</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\cup</span>并运算 <span class=\"hljs-keyword\">\\quad</span>  <span class=\"hljs-keyword\">\\cap</span>交运算 <span class=\"hljs-keyword\">\\qquad</span>  <span class=\"hljs-keyword\">\\subset</span> 和 <span class=\"hljs-keyword\">\\supset</span>  <br><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\subseteq</span> 和 <span class=\"hljs-keyword\">\\supseteq</span> <span class=\"hljs-keyword\">\\qquad</span>  <span class=\"hljs-keyword\">\\in</span> 和 <span class=\"hljs-keyword\">\\notin</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\emptyset</span> 空集<br></code></pre></td></tr></table></figure>\n<p>∪ 并 运 算 ∩ 交 运 算 ⊂ 和 ⊃ ⊆ 和 ⊇ ∈ 和 ∉ ∅ 空 集 \\ \\cup并运算 \\quad \\cap交运算 \\qquad \\subset 和 \\supset \\ \\subseteq 和 \\supseteq \\qquad \\in 和 \\notin \\qquad \\emptyset 空集 ∪并运算∩交运算⊂和⊃⊆和⊇∈和∈/​∅空集</p>\n<p><strong>ps</strong>: \\qquad是空格</p>\n<p>三角符号用\\bigtriangleup，三角符号类似\\sin,度数用上标^{\\cric}表示，角用\\angle</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\bigtriangleup</span>三角 <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\angle</span> 角<br><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\tan</span>90<span class=\"hljs-built_in\">^</span>&#123;<span class=\"hljs-keyword\">\\circ</span>&#125;和<span class=\"hljs-keyword\">\\sin</span> x和<span class=\"hljs-keyword\">\\cos</span> x三角函数及度数表示 <br></code></pre></td></tr></table></figure>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-keyword\">\\\\</span>\t<span class=\"hljs-keyword\">\\rightarrow</span>和<span class=\"hljs-keyword\">\\Rightarrow</span><br><span class=\"hljs-keyword\">\\\\</span>  <span class=\"hljs-keyword\">\\leftrightarrow</span>和<span class=\"hljs-keyword\">\\Leftrightarrow</span><br><span class=\"hljs-keyword\">\\\\</span>\t<span class=\"hljs-keyword\">\\vee</span>和<span class=\"hljs-keyword\">\\wedge</span><br><span class=\"hljs-keyword\">\\\\</span>\t<span class=\"hljs-keyword\">\\because</span>和<span class=\"hljs-keyword\">\\therefore</span><br><span class=\"hljs-keyword\">\\\\</span>\t因为所以<br></code></pre></td></tr></table></figure>\n<p>→ 和 ⇒ ↔ 和 ⇔ ∨ 和 ∧ ∵ 和 ∴ 因 为 所 以 \\ \\rightarrow和\\Rightarrow \\ \\leftrightarrow和\\Leftrightarrow \\ \\vee和\\wedge \\ \\because和\\therefore \\ 因为所以 →和⇒↔和⇔∨和∧∵和∴因为所以</p>\n<p>特殊符号</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\otimes</span>和<span class=\"hljs-keyword\">\\oplus</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\nearrow</span>和<span class=\"hljs-keyword\">\\searrow</span> <span class=\"hljs-keyword\">\\qquad</span>\t<br><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\sim</span>和<span class=\"hljs-keyword\">\\approx</span>  <span class=\"hljs-keyword\">\\qquad</span>\t<span class=\"hljs-keyword\">\\ldots</span>和<span class=\"hljs-keyword\">\\cdots</span> 不同对齐的省略号<br></code></pre></td></tr></table></figure>\n<p>⊗ 和 ⊕ ↗ 和 ↘ ∼ 和 ≈ … 和 ⋯ 不 同 对 齐 的 省 略 号 \\ \\otimes和\\oplus \\qquad \\nearrow和\\searrow \\qquad \\ \\sim和\\approx \\qquad \\ldots和\\cdots 不同对齐的省略号 ⊗和⊕↗和↘∼和≈…和⋯不同对齐的省略号</p>\n<h3 id=\"积分-极限-求和-乘积-求导\"><a class=\"markdownIt-Anchor\" href=\"#积分-极限-求和-乘积-求导\"></a> 积分、极限、求和、乘积、求导</h3>\n<p>\\int表示积分，\\lim表示极限， \\sum表示求和，\\prod表示乘积，<em>’</em> 表示求导，微分中的dx用\\mathrm{d}x表示，\\to表示箭头，\\infty表示无穷</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\int</span><span class=\"hljs-built_in\">_</span>&#123;0&#125;<span class=\"hljs-built_in\">^</span>&#123;x&#125;&#123;x<span class=\"hljs-built_in\">^</span>2&#125;<span class=\"hljs-keyword\">\\mathrm</span>&#123;d&#125;x +<span class=\"hljs-keyword\">\\lim</span><span class=\"hljs-built_in\">_</span>&#123;x <span class=\"hljs-keyword\">\\to</span> <span class=\"hljs-keyword\">\\infty</span>&#125;&#123;<span class=\"hljs-keyword\">\\frac</span>&#123;<span class=\"hljs-keyword\">\\sin</span> x&#125;&#123;x&#125;&#125;<br><span class=\"hljs-keyword\">\\\\</span>  <span class=\"hljs-keyword\">\\sum</span><span class=\"hljs-built_in\">_</span>&#123;i=1&#125;<span class=\"hljs-built_in\">^</span>&#123;n&#125;&#123;a<span class=\"hljs-built_in\">_</span>ib<span class=\"hljs-built_in\">_</span>i&#125;+<span class=\"hljs-keyword\">\\prod</span><span class=\"hljs-built_in\">_</span>&#123;i=1&#125;<span class=\"hljs-built_in\">^</span>&#123;n&#125;&#123;(a<span class=\"hljs-built_in\">_</span>i+b<span class=\"hljs-built_in\">_</span>i)&#125;+f(x)&#x27;&#x27;<br></code></pre></td></tr></table></figure>\n<p>∫ 0 x x 2 d x + lim ⁡ x → ∞ sin ⁡ x x ∑ i = 1 n a i b i + ∏ i = 1 n ( a i + b i ) + f ( x ) ′ ′ \\ \\int_{0}<sup>{x}{x</sup>2}\\mathrm{d}x +\\lim_{x \\to \\infty}{\\frac{\\sin x}{x}} \\ \\sum_{i=1}<sup>{n}{a_ib_i}+\\prod_{i=1}</sup>{n}{(a_i+b_i)}+f(x)’’ ∫0x​x2dx+x→∞lim​xsinx​i=1∑n​ai​bi​+i=1∏n​(ai​+bi​)+f(x)′′</p>\n<h3 id=\"向量-组合数-矩阵\"><a class=\"markdownIt-Anchor\" href=\"#向量-组合数-矩阵\"></a> 向量、组合数、矩阵</h3>\n<p>向量用 <strong>\\overrightarrow{ }</strong> 表示，组合数用 <strong>\\binom{ }{ }</strong> ，其类似于分式</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-keyword\">\\overrightarrow</span>&#123;AB&#125; <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\binom</span>&#123;1&#125;&#123;2&#125;<br></code></pre></td></tr></table></figure>\n<p>A B → ( 1 2 ) \\overrightarrow{AB} \\qquad \\binom{1}{2} AB</p>\n<p>(21​)</p>\n<p>矩阵以起始来规定，内部以&amp;分列，以\\分行，括号里可填matrix，bmatrix，pmatrix，vmatrix，分别对应示例(1)(2)(3)(4)</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-built_in\">$</span> <span class=\"hljs-keyword\">\\begin</span>&#123;matrix&#125;<br>0 <span class=\"hljs-built_in\">&amp;</span> 1 <span class=\"hljs-keyword\">\\\\</span><br>1 <span class=\"hljs-built_in\">&amp;</span> 0 <br><span class=\"hljs-keyword\">\\end</span>&#123;matrix&#125; <span class=\"hljs-built_in\">$</span>   <br></code></pre></td></tr></table></figure>\n<p>0 1 1 0</p>\n<p>01​10​ [ 0 1 1 0 ]</p>\n<p>[01​10​] ( 0 1 1 0 )</p>\n<p>(01​10​) ∣ 0 1 1 0 ∣</p>\n<p>∣∣∣∣​01​10​∣∣∣∣​</p>\n<p>( 1 ) ( 2 ) ( 3 ) ( 4 ) (1)\\qquad(2)\\qquad(3)\\qquad(4) (1)(2)(3)(4)</p>\n<h3 id=\"方框加粗-上下标记-空格-更大更小的字符\"><a class=\"markdownIt-Anchor\" href=\"#方框加粗-上下标记-空格-更大更小的字符\"></a> 方框加粗、上下标记、空格、更大更小的字符</h3>\n<p>\\boxed命令给公式加一个方框，\\mathbf将字体加粗，\\overline, \\underline 分别在表达式上、下方画出水平线，\\quad和\\qquad是空格，\\large 或 \\small能使字符变大变小</p>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\boxed</span>&#123;<span class=\"hljs-keyword\">\\large</span>&#123;<span class=\"hljs-keyword\">\\mathbf</span>&#123;E=mc<span class=\"hljs-built_in\">^</span>2&#125;&#125;&#125;<br><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\overline</span>&#123;a+<span class=\"hljs-keyword\">\\underline</span>&#123;b+<span class=\"hljs-keyword\">\\small</span>&#123;N&#125;&#125;&#125;<br></code></pre></td></tr></table></figure>\n<p>E = m c 2 a + b + N ‾ ‾ \\ \\boxed{\\large{\\mathbf{E=mc^2}}} \\ \\overline{a+\\underline{b+\\small{N}}} E=mc2​a+b+N​​</p>\n<h3 id=\"希腊字母\"><a class=\"markdownIt-Anchor\" href=\"#希腊字母\"></a> 希腊字母</h3>\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs latex\"><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\alpha</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\beta</span>  <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\Delta</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\zeta</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\varepsilon</span> <br><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\eta</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\theta</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\lambda</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\mu</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\xi</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\pi</span>  <br><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\rho</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\sigma</span>  <span class=\"hljs-keyword\">\\qquad</span>  <span class=\"hljs-keyword\">\\upsilon</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\Phi</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\phi</span> <br><span class=\"hljs-keyword\">\\\\</span> <span class=\"hljs-keyword\">\\Psi</span>  <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\psi</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\omega</span> <span class=\"hljs-keyword\">\\qquad</span> <span class=\"hljs-keyword\">\\Omega</span> <span class=\"hljs-keyword\">\\qquad</span> O<br></code></pre></td></tr></table></figure>\n<p>α β Δ ζ ε η θ λ μ ξ π ρ σ υ Φ ϕ Ψ ψ ω Ω O \\ \\alpha \\qquad \\beta \\qquad \\Delta \\qquad \\zeta \\qquad \\varepsilon \\ \\eta \\qquad \\theta \\qquad \\lambda \\qquad \\mu \\qquad \\xi \\qquad \\pi \\ \\rho \\qquad \\sigma \\qquad \\upsilon \\qquad \\Phi \\qquad \\phi \\ \\Psi \\qquad \\psi \\qquad \\omega \\qquad \\Omega \\qquad O αβΔζεηθλμξπρσυΦϕΨψωΩO</p>\n<h2 id=\"结论\"><a class=\"markdownIt-Anchor\" href=\"#结论\"></a> 结论</h2>\n<p>​ LaTeX是非常有用的，是非常严谨优美的， 在此对<a href=\"https://baike.baidu.com/item/%E5%94%90%E7%BA%B3%E5%BE%B7%C2%B7%E5%85%8B%E5%8A%AA%E7%89%B9?fromtitle=Donald+E.+Knuth&amp;fromid=2509519\">Donald E. Knuth</a>表示敬意。</p>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h2>\n<p><a href=\"https://blog.csdn.net/weixin_42755533/article/details/113132619?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165940495016781683972226%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165940495016781683972226&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-113132619-null-null.142%5Ev37%5Epc_search_v2&amp;utm_term=latex%20%E5%85%AC%E5%BC%8F&amp;spm=1018.2226.3001.4187\">LaTeX常用公式_ywlcode的博客-CSDN博客_latex 整除</a></p>"},{"id":"2254a3a7-a5e7-412b-88d2-f1a712755b28","title":"BAB","date":"2022-06-09T09:21:00.000Z","abbrlink":29968,"_content":"\n\n\nBetterAndBetter手势操作助记\n右键按压手势\n![[BAB手势 2022-06-09 17.21.49.excalidraw]]\n\n\n# 1 参考资料\n自用跳转链接：[ob](obsidian://advanced-uri?vault=Documents&uid=2254a3a7-a5e7-412b-88d2-f1a712755b28)，[blog](http://localhost:4000/2022/06/09/bab/)\n\n","source":"_posts/🚀技能/BAB.md","raw":"---\nid: 2254a3a7-a5e7-412b-88d2-f1a712755b28\ntitle: BAB\ndate: '2022-06-09 17:21'\ncategories:\n  - \"\\U0001F680技能\"\ntags:\n  - null\nabbrlink: 29968\n---\n\n\n\nBetterAndBetter手势操作助记\n右键按压手势\n![[BAB手势 2022-06-09 17.21.49.excalidraw]]\n\n\n# 1 参考资料\n自用跳转链接：[ob](obsidian://advanced-uri?vault=Documents&uid=2254a3a7-a5e7-412b-88d2-f1a712755b28)，[blog](http://localhost:4000/2022/06/09/bab/)\n\n","slug":"🚀技能/BAB","published":1,"updated":"2022-08-05T16:56:49.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fix000me0mg27x75f3p","content":"<p>BetterAndBetter手势操作助记<br>\n右键按压手势<br>\n![[BAB手势 2022-06-09 17.21.49.excalidraw]]</p>\n<h1 id=\"1-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#1-参考资料\"></a> 1 参考资料</h1>\n<p>自用跳转链接：<a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=2254a3a7-a5e7-412b-88d2-f1a712755b28\">ob</a>，<a href=\"http://localhost:4000/2022/06/09/bab/\">blog</a></p>\n","site":{"data":{}},"wordcount":85,"excerpt":"","more":"<p>BetterAndBetter手势操作助记<br />\n右键按压手势<br />\n![[BAB手势 2022-06-09 17.21.49.excalidraw]]</p>\n<h1 id=\"1-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#1-参考资料\"></a> 1 参考资料</h1>\n<p>自用跳转链接：<a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=2254a3a7-a5e7-412b-88d2-f1a712755b28\">ob</a>，<a href=\"http://localhost:4000/2022/06/09/bab/\">blog</a></p>\n"},{"title":"PPT技巧-文字高亮","date":"2022-06-14T06:52:00.000Z","abbrlink":36733,"_content":"\n注意事项：\n\n按住Shift 用来垂直或水平移动\n如果上下两个文字没有在同一位置，无法实现文字滚动效果\n\n---\n参考资料：\n[keynote 教程 有手就行系列 024 苹果发布会分解教学_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1pv4y1G7Qp/?spm_id_from=333.788&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n\n---\n下一篇：[[切割材料+制样]]\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/🚀技能/PPT技巧-文字高亮.md","raw":"---\ntitle: PPT技巧-文字高亮\ndate: '2022-06-14 14:52'\ncategories:\n  - \"\\U0001F680技能\"\nabbrlink: 36733\ntags:\n---\n\n注意事项：\n\n按住Shift 用来垂直或水平移动\n如果上下两个文字没有在同一位置，无法实现文字滚动效果\n\n---\n参考资料：\n[keynote 教程 有手就行系列 024 苹果发布会分解教学_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1pv4y1G7Qp/?spm_id_from=333.788&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n\n---\n下一篇：[[切割材料+制样]]\n\n\n\n\n\n\n\n\n\n\n\n","slug":"🚀技能/PPT技巧-文字高亮","published":1,"updated":"2022-07-12T09:02:14.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fix000re0mgemhgf1ou","content":"<p>注意事项：</p>\n<p>按住Shift 用来垂直或水平移动<br>\n如果上下两个文字没有在同一位置，无法实现文字滚动效果</p>\n<hr>\n<p>参考资料：<br>\n<a href=\"https://www.bilibili.com/video/BV1pv4y1G7Qp/?spm_id_from=333.788&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">keynote 教程 有手就行系列 024 苹果发布会分解教学_哔哩哔哩_bilibili</a></p>\n<hr>\n<p>下一篇：[[切割材料+制样]]</p>\n","site":{"data":{}},"wordcount":108,"excerpt":"","more":"<p>注意事项：</p>\n<p>按住Shift 用来垂直或水平移动<br />\n如果上下两个文字没有在同一位置，无法实现文字滚动效果</p>\n<hr />\n<p>参考资料：<br />\n<a href=\"https://www.bilibili.com/video/BV1pv4y1G7Qp/?spm_id_from=333.788&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">keynote 教程 有手就行系列 024 苹果发布会分解教学_哔哩哔哩_bilibili</a></p>\n<hr />\n<p>下一篇：[[切割材料+制样]]</p>\n"},{"title":"网易云本地音乐怎么添加歌词","date":"2022-07-21T14:50:00.000Z","abbrlink":27260,"_content":"\n准备本地的.mp3文件\n和.mp3文件同名的.lrc文件\n两者放在一个文件夹中，然后用网抑云云盘上传\n\n\n\n如何制作lrc文件\n\n1. 将MP3文件导入剪映，智能制作srt文件并导出\n2. 将srt转成lrc文件。转换网站：[歌词字幕在线转换器 - 支持LRC SRT UTF KSC SSA ASS SMI SNC TXT格式在线转换](http://www.lrccon.com/convert.php)\n\n问题\n在手机端看不到歌词，在电脑端可以\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/🚀技能/网易云本地音乐怎么添加歌词.md","raw":"---\ntitle: 网易云本地音乐怎么添加歌词\ndate: '2022-07-21 22:50'\ncategories:\n  - \"\\U0001F680技能\"\nabbrlink: 27260\ntags:\n---\n\n准备本地的.mp3文件\n和.mp3文件同名的.lrc文件\n两者放在一个文件夹中，然后用网抑云云盘上传\n\n\n\n如何制作lrc文件\n\n1. 将MP3文件导入剪映，智能制作srt文件并导出\n2. 将srt转成lrc文件。转换网站：[歌词字幕在线转换器 - 支持LRC SRT UTF KSC SSA ASS SMI SNC TXT格式在线转换](http://www.lrccon.com/convert.php)\n\n问题\n在手机端看不到歌词，在电脑端可以\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"🚀技能/网易云本地音乐怎么添加歌词","published":1,"updated":"2022-07-28T02:26:50.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fiy000te0mg9cxa60gg","content":"<p>准备本地的.mp3文件<br>\n和.mp3文件同名的.lrc文件<br>\n两者放在一个文件夹中，然后用网抑云云盘上传</p>\n<p>如何制作lrc文件</p>\n<ol>\n<li>将MP3文件导入剪映，智能制作srt文件并导出</li>\n<li>将srt转成lrc文件。转换网站：<a href=\"http://www.lrccon.com/convert.php\">歌词字幕在线转换器 - 支持LRC SRT UTF KSC SSA ASS SMI SNC TXT格式在线转换</a></li>\n</ol>\n<p>问题<br>\n在手机端看不到歌词，在电脑端可以</p>\n","site":{"data":{}},"wordcount":160,"excerpt":"","more":"<p>准备本地的.mp3文件<br />\n和.mp3文件同名的.lrc文件<br />\n两者放在一个文件夹中，然后用网抑云云盘上传</p>\n<p>如何制作lrc文件</p>\n<ol>\n<li>将MP3文件导入剪映，智能制作srt文件并导出</li>\n<li>将srt转成lrc文件。转换网站：<a href=\"http://www.lrccon.com/convert.php\">歌词字幕在线转换器 - 支持LRC SRT UTF KSC SSA ASS SMI SNC TXT格式在线转换</a></li>\n</ol>\n<p>问题<br />\n在手机端看不到歌词，在电脑端可以</p>\n"},{"title":"M1 macbook 罗技G502鼠标 g hub显示停用的解决办法","date":"2022-08-03T10:47:00.000Z","abbrlink":32256,"_content":"\n\n\n==与karabiner原有冲突：就是这个原因！！！==\n\n将karabiner中禁用掉G502即可\n\n\n\n\n\n```text\n// 其他的错误尝试\n解决办法\n1. 卸载原有的g hub 应用\n2. 在google 里搜索 g hub(最新版)下载。不在火狐里下载是因为中文的可能滞后\n\n\n1. 本质原因是罗技驱动(g hub)没有做好苹果电脑的适配\n比如苹果更新系统后，看似给了 g hub 辅助功能的权限实际没给\n\n\n```\n\n\n\n\n\n\n\n\n\n\n参考资料\n---\n\n[M1 Mac 装罗技 Logitech G Hub 有问题? Mac OS 中罗技G502和G815在 G Hub中可以显示但不能设置？MacBook_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1ri4y1V7cf?spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/🚀技能/罗技G502 显示停用的解决办法.md","raw":"---\ntitle: M1 macbook 罗技G502鼠标 g hub显示停用的解决办法\ndate: '2022-08-03 18:47'\ncategories:\n  - \"\\U0001F680技能\"\nabbrlink: 32256\ntags: 已迁移\n---\n\n\n\n==与karabiner原有冲突：就是这个原因！！！==\n\n将karabiner中禁用掉G502即可\n\n\n\n\n\n```text\n// 其他的错误尝试\n解决办法\n1. 卸载原有的g hub 应用\n2. 在google 里搜索 g hub(最新版)下载。不在火狐里下载是因为中文的可能滞后\n\n\n1. 本质原因是罗技驱动(g hub)没有做好苹果电脑的适配\n比如苹果更新系统后，看似给了 g hub 辅助功能的权限实际没给\n\n\n```\n\n\n\n\n\n\n\n\n\n\n参考资料\n---\n\n[M1 Mac 装罗技 Logitech G Hub 有问题? Mac OS 中罗技G502和G815在 G Hub中可以显示但不能设置？MacBook_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1ri4y1V7cf?spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"🚀技能/罗技G502 显示停用的解决办法","published":1,"updated":"2022-08-04T05:35:10.332Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fiy000we0mg0h4i61tt","content":"<p><mark>与karabiner原有冲突：就是这个原因！！！</mark></p>\n<p>将karabiner中禁用掉G502即可</p>\n<figure class=\"highlight text\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">// 其他的错误尝试<br>解决办法<br>1. 卸载原有的g hub 应用<br>2. 在google 里搜索 g hub(最新版)下载。不在火狐里下载是因为中文的可能滞后<br><br><br>1. 本质原因是罗技驱动(g hub)没有做好苹果电脑的适配<br>比如苹果更新系统后，看似给了 g hub 辅助功能的权限实际没给<br><br><br></code></pre></td></tr></tbody></table></figure>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h2>\n<p><a href=\"https://www.bilibili.com/video/BV1ri4y1V7cf?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">M1 Mac 装罗技 Logitech G Hub 有问题? Mac OS 中罗技G502和G815在 G Hub中可以显示但不能设置？MacBook_哔哩哔哩_bilibili</a></p>\n","site":{"data":{}},"wordcount":261,"excerpt":"","more":"<p><mark>与karabiner原有冲突：就是这个原因！！！</mark></p>\n<p>将karabiner中禁用掉G502即可</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">// 其他的错误尝试<br>解决办法<br>1. 卸载原有的g hub 应用<br>2. 在google 里搜索 g hub(最新版)下载。不在火狐里下载是因为中文的可能滞后<br><br><br>1. 本质原因是罗技驱动(g hub)没有做好苹果电脑的适配<br>比如苹果更新系统后，看似给了 g hub 辅助功能的权限实际没给<br><br><br></code></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h2>\n<p><a href=\"https://www.bilibili.com/video/BV1ri4y1V7cf?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">M1 Mac 装罗技 Logitech G Hub 有问题? Mac OS 中罗技G502和G815在 G Hub中可以显示但不能设置？MacBook_哔哩哔哩_bilibili</a></p>\n"},{"title":"自然辩证法考试重点","date":"2022-06-13T02:04:00.000Z","abbrlink":60394,"_content":"[自然辩证法重点-notion.](https://skinny-girl-067.notion.site/832c73b10a1849e49262e0d8eb1b505b)\n\n\n[考前速记+考后整理.](https://skinny-girl-067.notion.site/de438994556a4d8fb3c7aa7cbdec36d9)\n\n\n\n\n","source":"_posts/🏫学校/研究生考试/自然辩证法考试重点.md","raw":"---\ntitle: 自然辩证法考试重点\ndate: '2022-06-13 10:04'\ncategories:\n  - \"\\U0001F3EB学校\"\n  - 研究生考试\ntags:\n  - null\nabbrlink: 60394\n---\n[自然辩证法重点-notion.](https://skinny-girl-067.notion.site/832c73b10a1849e49262e0d8eb1b505b)\n\n\n[考前速记+考后整理.](https://skinny-girl-067.notion.site/de438994556a4d8fb3c7aa7cbdec36d9)\n\n\n\n\n","slug":"🏫学校/研究生考试/自然辩证法考试重点","published":1,"updated":"2022-07-12T09:02:14.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fiy000ze0mgf91y0y0s","content":"<p><a href=\"https://skinny-girl-067.notion.site/832c73b10a1849e49262e0d8eb1b505b\">自然辩证法重点-notion.</a></p>\n<p><a href=\"https://skinny-girl-067.notion.site/de438994556a4d8fb3c7aa7cbdec36d9\">考前速记+考后整理.</a></p>\n","site":{"data":{}},"wordcount":25,"excerpt":"","more":"<p><a href=\"https://skinny-girl-067.notion.site/832c73b10a1849e49262e0d8eb1b505b\">自然辩证法重点-notion.</a></p>\n<p><a href=\"https://skinny-girl-067.notion.site/de438994556a4d8fb3c7aa7cbdec36d9\">考前速记+考后整理.</a></p>\n"},{"id":"a70cadd5-066a-4186-a092-69cf233c1b6e","title":"最优化","date":"2022-06-17T07:02:00.000Z","index_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206240956178.jpg","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206200907025.jpg","abbrlink":37878,"_content":"\n\n>红色为重点\n\n\n考试范围：\n第二章的单纯形法不考\n\n{% gi 4 2-2 %}\n  ![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206171507551.png)\n  ![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206171507026.png)\n  ![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206171507616.png)\n  ![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206171506250.png)\n{% endgi %}\n\n\n\n\n动态规划求解：[最优化理论与方法-动态规划2_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1DL4y1G7mp?spm_id_from=333.337.search-card.all.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n\n```col\n![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206222221137.png)\n\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206222227555.png)\n\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206222227315.png)\n\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206222228222.png)\n\n```\n总复习：[最优化计算方法计算题复习_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1AF411z7hg/?spm_id_from=333.788.recommend_more_video.0&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n\n---\n2022-06-24(后记)：\n1. 实际问题求标准型的问题：把目标函数写出来，约束条件写出来就行\n2. 黄金分割法：但是略微有点不一样，函数值算出来是负的。没关系仍然采用，谁的函数值就删其区间的策略\n3. K-T条件：常规题\n4. 内点罚函数：注意一下把约束条件化为标准型：<=0\n5.  哈密顿法：书上13-3原题，初始条件变了一点，加粗的看不懂(x(0) = 0，**t<sub>f</sub> = 2，x1(0) + x2(0) = 5** )\n6. 共轭梯度法：共有三种方法可以解(牛顿法，最速下降法，共轭梯度法)，但是题目要求共轭梯度法 \n7. 遗传算法：要求精确到0.01，简单是初始只有两个变量x1，x2。\n\t1. 注意一点：适度函数中的常数要取f(x1)，f(x2)的最大值。本题中x1，x2取负数才是最大值，我写错了\n8. 动态规化求线性规化：要求**顺序法**解，逆序法不给分，老师专门在考前1分钟强调。(<font color=#C32E94>15分</font>)\n9. A* 算法：画格子，只有<font color=#C32E94>5分</font>\n10. 神经网络：先由m求W，给了初始的V<sup>T</sup>。求更新状态，求对应的E\n\t1. 求W，W12=m1的第一行 * 第二行 + m2的第一行 * 第二行。w13同理......\n\t2. 求V<sup>T</sup>，更新几，V乘上对应的W列 - θ<sub>i</sub>，没有θ就当成0。如果结果 >= 0 取1，< 0 取0。更新几号只写那个数。其他的初始V<sup>T</sup>照抄\n\t\t1. 如果是二分图的，更新完的话，如果正数和负数的个数不相等的话，还要在随机找一个数变一下。然后使正负的个数相等\n\n\n>未标注的只有10分\n\n\n# 1 参考资料\n自用跳转链接：[blog](http://localhost:4000/2022/06/17/zui-you-hua/)，[ob](obsidian://advanced-uri?vault=Documents&uid=a70cadd5-066a-4186-a092-69cf233c1b6e)\n\n\n\n\n\n\n\n","source":"_posts/🏫学校/研究生考试/最优化.md","raw":"---\nid: a70cadd5-066a-4186-a092-69cf233c1b6e\ntitle: 最优化\ndate: '2022-06-17 15:02'\ncategories:\n  - \"\\U0001F3EB学校\"\n  - 研究生考试\nindex_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206240956178.jpg'\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206200907025.jpg'\nabbrlink: 37878\ntags:\n---\n\n\n>红色为重点\n\n\n考试范围：\n第二章的单纯形法不考\n\n{% gi 4 2-2 %}\n  ![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206171507551.png)\n  ![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206171507026.png)\n  ![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206171507616.png)\n  ![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206171506250.png)\n{% endgi %}\n\n\n\n\n动态规划求解：[最优化理论与方法-动态规划2_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1DL4y1G7mp?spm_id_from=333.337.search-card.all.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n\n```col\n![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206222221137.png)\n\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206222227555.png)\n\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206222227315.png)\n\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206222228222.png)\n\n```\n总复习：[最优化计算方法计算题复习_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1AF411z7hg/?spm_id_from=333.788.recommend_more_video.0&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n\n---\n2022-06-24(后记)：\n1. 实际问题求标准型的问题：把目标函数写出来，约束条件写出来就行\n2. 黄金分割法：但是略微有点不一样，函数值算出来是负的。没关系仍然采用，谁的函数值就删其区间的策略\n3. K-T条件：常规题\n4. 内点罚函数：注意一下把约束条件化为标准型：<=0\n5.  哈密顿法：书上13-3原题，初始条件变了一点，加粗的看不懂(x(0) = 0，**t<sub>f</sub> = 2，x1(0) + x2(0) = 5** )\n6. 共轭梯度法：共有三种方法可以解(牛顿法，最速下降法，共轭梯度法)，但是题目要求共轭梯度法 \n7. 遗传算法：要求精确到0.01，简单是初始只有两个变量x1，x2。\n\t1. 注意一点：适度函数中的常数要取f(x1)，f(x2)的最大值。本题中x1，x2取负数才是最大值，我写错了\n8. 动态规化求线性规化：要求**顺序法**解，逆序法不给分，老师专门在考前1分钟强调。(<font color=#C32E94>15分</font>)\n9. A* 算法：画格子，只有<font color=#C32E94>5分</font>\n10. 神经网络：先由m求W，给了初始的V<sup>T</sup>。求更新状态，求对应的E\n\t1. 求W，W12=m1的第一行 * 第二行 + m2的第一行 * 第二行。w13同理......\n\t2. 求V<sup>T</sup>，更新几，V乘上对应的W列 - θ<sub>i</sub>，没有θ就当成0。如果结果 >= 0 取1，< 0 取0。更新几号只写那个数。其他的初始V<sup>T</sup>照抄\n\t\t1. 如果是二分图的，更新完的话，如果正数和负数的个数不相等的话，还要在随机找一个数变一下。然后使正负的个数相等\n\n\n>未标注的只有10分\n\n\n# 1 参考资料\n自用跳转链接：[blog](http://localhost:4000/2022/06/17/zui-you-hua/)，[ob](obsidian://advanced-uri?vault=Documents&uid=a70cadd5-066a-4186-a092-69cf233c1b6e)\n\n\n\n\n\n\n\n","slug":"🏫学校/研究生考试/最优化","published":1,"updated":"2022-07-12T09:02:14.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fiz0011e0mgd0eec34z","content":"<blockquote>\n<p>红色为重点</p>\n</blockquote>\n<p>考试范围：<br>\n第二章的单纯形法不考</p>\n<div class=\"group-image-container\"><div class=\"group-image-row\"><div class=\"group-image-wrap\"><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206171507551.png\" alt=\"|600\"></div><div class=\"group-image-wrap\"><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206171507026.png\" alt=\"|600\"></div></div><div class=\"group-image-row\"><div class=\"group-image-wrap\"><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206171507616.png\" alt=\"|600\"></div><div class=\"group-image-wrap\"><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206171506250.png\" alt=\"|600\"></div></div></div>\n<p>动态规划求解：<a href=\"https://www.bilibili.com/video/BV1DL4y1G7mp?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">最优化理论与方法-动态规划2_哔哩哔哩_bilibili</a></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs col\">![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206222221137.png)<br><br>![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206222227555.png)<br><br>![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206222227315.png)<br><br>![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206222228222.png)<br><br></code></pre></td></tr></tbody></table></figure>\n<p>总复习：<a href=\"https://www.bilibili.com/video/BV1AF411z7hg/?spm_id_from=333.788.recommend_more_video.0&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">最优化计算方法计算题复习_哔哩哔哩_bilibili</a></p>\n<hr>\n<p>2022-06-24(后记)：</p>\n<ol>\n<li>实际问题求标准型的问题：把目标函数写出来，约束条件写出来就行</li>\n<li>黄金分割法：但是略微有点不一样，函数值算出来是负的。没关系仍然采用，谁的函数值就删其区间的策略</li>\n<li>K-T条件：常规题</li>\n<li>内点罚函数：注意一下把约束条件化为标准型：&lt;=0</li>\n<li>哈密顿法：书上13-3原题，初始条件变了一点，加粗的看不懂(x(0) = 0，<strong>t<sub>f</sub> = 2，x1(0) + x2(0) =&nbsp;5</strong> )</li>\n<li>共轭梯度法：共有三种方法可以解(牛顿法，最速下降法，共轭梯度法)，但是题目要求共轭梯度法</li>\n<li>遗传算法：要求精确到0.01，简单是初始只有两个变量x1，x2。\n<ol>\n<li>注意一点：适度函数中的常数要取f(x1)，f(x2)的最大值。本题中x1，x2取负数才是最大值，我写错了</li>\n</ol>\n</li>\n<li>动态规化求线性规化：要求<strong>顺序法</strong>解，逆序法不给分，老师专门在考前1分钟强调。(<font color=\"#C32E94\">15分</font>)</li>\n<li>A* 算法：画格子，只有<font color=\"#C32E94\">5分</font></li>\n<li>神经网络：先由m求W，给了初始的V<sup>T</sup>。求更新状态，求对应的E\n<ol>\n<li>求W，W12=m1的第一行 * 第二行 + m2的第一行 * 第二行。w13同理…</li>\n<li>求V<sup>T</sup>，更新几，V乘上对应的W列 - θ<sub>i</sub>，没有θ就当成0。如果结果 &gt;= 0 取1，&lt; 0 取0。更新几号只写那个数。其他的初始V<sup>T</sup>照抄\n<ol>\n<li>如果是二分图的，更新完的话，如果正数和负数的个数不相等的话，还要在随机找一个数变一下。然后使正负的个数相等</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p>未标注的只有10分</p>\n</blockquote>\n<h1 id=\"1-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#1-参考资料\"></a> 1 参考资料</h1>\n<p>自用跳转链接：<a href=\"http://localhost:4000/2022/06/17/zui-you-hua/\">blog</a>，<a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=a70cadd5-066a-4186-a092-69cf233c1b6e\">ob</a></p>\n","site":{"data":{}},"wordcount":1002,"excerpt":"","more":"<blockquote>\n<p>红色为重点</p>\n</blockquote>\n<p>考试范围：<br />\n第二章的单纯形法不考</p>\n<div class=\"group-image-container\"><div class=\"group-image-row\"><div class=\"group-image-wrap\"><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206171507551.png\" alt=\"|600\" /></div><div class=\"group-image-wrap\"><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206171507026.png\" alt=\"|600\" /></div></div><div class=\"group-image-row\"><div class=\"group-image-wrap\"><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206171507616.png\" alt=\"|600\" /></div><div class=\"group-image-wrap\"><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206171506250.png\" alt=\"|600\" /></div></div></div>\n<p>动态规划求解：<a href=\"https://www.bilibili.com/video/BV1DL4y1G7mp?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">最优化理论与方法-动态规划2_哔哩哔哩_bilibili</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs col\">![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206222221137.png)<br><br>![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206222227555.png)<br><br>![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206222227315.png)<br><br>![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206222228222.png)<br><br></code></pre></td></tr></table></figure>\n<p>总复习：<a href=\"https://www.bilibili.com/video/BV1AF411z7hg/?spm_id_from=333.788.recommend_more_video.0&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">最优化计算方法计算题复习_哔哩哔哩_bilibili</a></p>\n<hr />\n<p>2022-06-24(后记)：</p>\n<ol>\n<li>实际问题求标准型的问题：把目标函数写出来，约束条件写出来就行</li>\n<li>黄金分割法：但是略微有点不一样，函数值算出来是负的。没关系仍然采用，谁的函数值就删其区间的策略</li>\n<li>K-T条件：常规题</li>\n<li>内点罚函数：注意一下把约束条件化为标准型：&lt;=0</li>\n<li>哈密顿法：书上13-3原题，初始条件变了一点，加粗的看不懂(x(0) = 0，<strong>t<sub>f</sub> = 2，x1(0) + x2(0) = 5</strong> )</li>\n<li>共轭梯度法：共有三种方法可以解(牛顿法，最速下降法，共轭梯度法)，但是题目要求共轭梯度法</li>\n<li>遗传算法：要求精确到0.01，简单是初始只有两个变量x1，x2。\n<ol>\n<li>注意一点：适度函数中的常数要取f(x1)，f(x2)的最大值。本题中x1，x2取负数才是最大值，我写错了</li>\n</ol>\n</li>\n<li>动态规化求线性规化：要求<strong>顺序法</strong>解，逆序法不给分，老师专门在考前1分钟强调。(<font color=#C32E94>15分</font>)</li>\n<li>A* 算法：画格子，只有<font color=#C32E94>5分</font></li>\n<li>神经网络：先由m求W，给了初始的V<sup>T</sup>。求更新状态，求对应的E\n<ol>\n<li>求W，W12=m1的第一行 * 第二行 + m2的第一行 * 第二行。w13同理…</li>\n<li>求V<sup>T</sup>，更新几，V乘上对应的W列 - θ<sub>i</sub>，没有θ就当成0。如果结果 &gt;= 0 取1，&lt; 0 取0。更新几号只写那个数。其他的初始V<sup>T</sup>照抄\n<ol>\n<li>如果是二分图的，更新完的话，如果正数和负数的个数不相等的话，还要在随机找一个数变一下。然后使正负的个数相等</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p>未标注的只有10分</p>\n</blockquote>\n<h1 id=\"1-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#1-参考资料\"></a> 1 参考资料</h1>\n<p>自用跳转链接：<a href=\"http://localhost:4000/2022/06/17/zui-you-hua/\">blog</a>，<a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=a70cadd5-066a-4186-a092-69cf233c1b6e\">ob</a></p>\n"},{"id":"d3049095-bb89-43d6-872f-f36158106173","title":"英语口语","date":"2022-06-20T14:28:00.000Z","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206200917436.jpg","abbrlink":13436,"_content":"\n\n[英语口语考试周主题](https://skinny-girl-067.notion.site/899591b0dea9484cb76d44a26c1c4c61)\n\n# 1 参考资料\n自用跳转连接：[ob](obsidian://advanced-uri?vault=Documents&uid=d3049095-bb89-43d6-872f-f36158106173)， [blog]()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n**参考资料：**\n\n","source":"_posts/🏫学校/研究生考试/英语口语.md","raw":"---\nid: d3049095-bb89-43d6-872f-f36158106173\ntitle: 英语口语\ndate: '2022-06-20 22:28'\ncategories:\n  - \"\\U0001F3EB学校\"\n  - 研究生考试\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206200917436.jpg'\nabbrlink: 13436\ntags:\n---\n\n\n[英语口语考试周主题](https://skinny-girl-067.notion.site/899591b0dea9484cb76d44a26c1c4c61)\n\n# 1 参考资料\n自用跳转连接：[ob](obsidian://advanced-uri?vault=Documents&uid=d3049095-bb89-43d6-872f-f36158106173)， [blog]()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n**参考资料：**\n\n","slug":"🏫学校/研究生考试/英语口语","published":1,"updated":"2022-07-12T09:02:14.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fiz0015e0mg1eudcq1b","content":"<p><a href=\"https://skinny-girl-067.notion.site/899591b0dea9484cb76d44a26c1c4c61\">英语口语考试周主题</a></p>\n<h1 id=\"1-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#1-参考资料\"></a> 1 参考资料</h1>\n<p>自用跳转连接：<a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=d3049095-bb89-43d6-872f-f36158106173\">ob</a>， <a href=\"\">blog</a></p>\n<hr>\n<p><strong>参考资料：</strong></p>\n","site":{"data":{}},"wordcount":33,"excerpt":"","more":"<p><a href=\"https://skinny-girl-067.notion.site/899591b0dea9484cb76d44a26c1c4c61\">英语口语考试周主题</a></p>\n<h1 id=\"1-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#1-参考资料\"></a> 1 参考资料</h1>\n<p>自用跳转连接：<a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=d3049095-bb89-43d6-872f-f36158106173\">ob</a>， <a href=\"\">blog</a></p>\n<hr />\n<p><strong>参考资料：</strong></p>\n"},{"title":"现代制造工程","date":"2022-06-25T08:34:00.000Z","index_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206240956178.jpg","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206200917436.jpg","abbrlink":64386,"_content":"\n\n\n\n[[现代制造工程--周驰]]\n\n\n\n**2022-06-29(后记)：**\n\n**简答题**：5 * 5  =25\n1. 电火花的原理是什么，不可缺少什么，适用于什么材料。\n\t1. ![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206291624610.png)\n\n1. 化学沉积和物理沉积的定义与区别\n\t1. ![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206291626815.png)\n\n1. 画个六点定位原理图\n2. 坐标变换(周驰作业题)\n3. 金属材料加热发生的变化(答5点)\n\n**辨析题**：15+15 = 30\n1. 从“生产规模，资源配置，生产技术”三方面来说现代制造工程的发展\n\t1. ![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206291622155.png)\n\n2. 金属塑性成形的两种方式，冷塑性对金属材料内部和性能的影响\n\t1. ![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206291623008.png)\n\n\n其余的都是选择(20个 1.5分)和判断(15个 15分)\n\n\n\n\n# 1 参考资料\n自用跳转连接：[ob]()， [blog]()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n**参考资料：**\n\n","source":"_posts/🏫学校/研究生考试/现代制造工程.md","raw":"---\ntitle: 现代制造工程\ndate: '2022-06-25 16:34'\ncategories:\n  - \"\\U0001F3EB学校\"\n  - 研究生考试\nindex_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206240956178.jpg'\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206200917436.jpg'\nabbrlink: 64386\ntags:\n---\n\n\n\n\n[[现代制造工程--周驰]]\n\n\n\n**2022-06-29(后记)：**\n\n**简答题**：5 * 5  =25\n1. 电火花的原理是什么，不可缺少什么，适用于什么材料。\n\t1. ![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206291624610.png)\n\n1. 化学沉积和物理沉积的定义与区别\n\t1. ![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206291626815.png)\n\n1. 画个六点定位原理图\n2. 坐标变换(周驰作业题)\n3. 金属材料加热发生的变化(答5点)\n\n**辨析题**：15+15 = 30\n1. 从“生产规模，资源配置，生产技术”三方面来说现代制造工程的发展\n\t1. ![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206291622155.png)\n\n2. 金属塑性成形的两种方式，冷塑性对金属材料内部和性能的影响\n\t1. ![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206291623008.png)\n\n\n其余的都是选择(20个 1.5分)和判断(15个 15分)\n\n\n\n\n# 1 参考资料\n自用跳转连接：[ob]()， [blog]()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n**参考资料：**\n\n","slug":"🏫学校/研究生考试/现代制造工程","published":1,"updated":"2022-07-12T09:02:14.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fiz0019e0mg2icgbcsg","content":"<p>[[现代制造工程–周驰]]</p>\n<p><strong>2022-06-29(后记)：</strong></p>\n<p><strong>简答题</strong>：5 * 5  =25</p>\n<ol>\n<li>\n<p>电火花的原理是什么，不可缺少什么，适用于什么材料。</p>\n<ol>\n<li><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206291624610.png\" alt=\"|600\"></li>\n</ol>\n</li>\n<li>\n<p>化学沉积和物理沉积的定义与区别</p>\n<ol>\n<li><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206291626815.png\" alt=\"|600\"></li>\n</ol>\n</li>\n<li>\n<p>画个六点定位原理图</p>\n</li>\n<li>\n<p>坐标变换(周驰作业题)</p>\n</li>\n<li>\n<p>金属材料加热发生的变化(答5点)</p>\n</li>\n</ol>\n<p><strong>辨析题</strong>：15+15 = 30</p>\n<ol>\n<li>\n<p>从“生产规模，资源配置，生产技术”三方面来说现代制造工程的发展</p>\n<ol>\n<li><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206291622155.png\" alt=\"|600\"></li>\n</ol>\n</li>\n<li>\n<p>金属塑性成形的两种方式，冷塑性对金属材料内部和性能的影响</p>\n<ol>\n<li><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206291623008.png\" alt=\"|600\"></li>\n</ol>\n</li>\n</ol>\n<p>其余的都是选择(20个 1.5分)和判断(15个 15分)</p>\n<h1 id=\"1-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#1-参考资料\"></a> 1 参考资料</h1>\n<p>自用跳转连接：<a href=\"\">ob</a>， <a href=\"\">blog</a></p>\n<hr>\n<p><strong>参考资料：</strong></p>\n","site":{"data":{}},"wordcount":236,"excerpt":"","more":"<p>[[现代制造工程–周驰]]</p>\n<p><strong>2022-06-29(后记)：</strong></p>\n<p><strong>简答题</strong>：5 * 5  =25</p>\n<ol>\n<li>\n<p>电火花的原理是什么，不可缺少什么，适用于什么材料。</p>\n<ol>\n<li><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206291624610.png\" alt=\"|600\" /></li>\n</ol>\n</li>\n<li>\n<p>化学沉积和物理沉积的定义与区别</p>\n<ol>\n<li><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206291626815.png\" alt=\"|600\" /></li>\n</ol>\n</li>\n<li>\n<p>画个六点定位原理图</p>\n</li>\n<li>\n<p>坐标变换(周驰作业题)</p>\n</li>\n<li>\n<p>金属材料加热发生的变化(答5点)</p>\n</li>\n</ol>\n<p><strong>辨析题</strong>：15+15 = 30</p>\n<ol>\n<li>\n<p>从“生产规模，资源配置，生产技术”三方面来说现代制造工程的发展</p>\n<ol>\n<li><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206291622155.png\" alt=\"|600\" /></li>\n</ol>\n</li>\n<li>\n<p>金属塑性成形的两种方式，冷塑性对金属材料内部和性能的影响</p>\n<ol>\n<li><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206291623008.png\" alt=\"|600\" /></li>\n</ol>\n</li>\n</ol>\n<p>其余的都是选择(20个 1.5分)和判断(15个 15分)</p>\n<h1 id=\"1-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#1-参考资料\"></a> 1 参考资料</h1>\n<p>自用跳转连接：<a href=\"\">ob</a>， <a href=\"\">blog</a></p>\n<hr />\n<p><strong>参考资料：</strong></p>\n"},{"title":"六级考试时间安排","date":"2022-06-11T09:42:00.000Z","abbrlink":35757,"password":null,"_content":"正式时间：15.00-17.25\n报道时间：14.20\n\n15.00前：发答题卡\n\n15.00-15.10：开始发卷子\n\n15.10-15.40：开始让动笔写作文👉 30分钟\n\n15.40-16.10：听力👉 30分钟\n\n16.10-16.15：暂停5分钟收答题卡1(作文和听力)\n\n16.15-17.25：余下时间写卷至结束\n\n\n下一篇：[[自然辩证法考试重点]]\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/🏫学校/研究生考试/六级考试时间安排.md","raw":"---\ntitle: 六级考试时间安排\ndate: '2022-06-11 17:42'\ncategories:\n  - \"\\U0001F3EB学校\"\n  - 研究生考试\ntags:\n  - 六级\nabbrlink: 35757\npassword:\n---\n正式时间：15.00-17.25\n报道时间：14.20\n\n15.00前：发答题卡\n\n15.00-15.10：开始发卷子\n\n15.10-15.40：开始让动笔写作文👉 30分钟\n\n15.40-16.10：听力👉 30分钟\n\n16.10-16.15：暂停5分钟收答题卡1(作文和听力)\n\n16.15-17.25：余下时间写卷至结束\n\n\n下一篇：[[自然辩证法考试重点]]\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"🏫学校/研究生考试/六级考试时间安排","published":1,"updated":"2022-07-12T09:02:14.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fj1001ce0mgaurhhsp2","content":"<p>正式时间：15.00-17.25<br>\n报道时间：14.20</p>\n<p>15.00前：发答题卡</p>\n<p>15.00-15.10：开始发卷子</p>\n<p>15.10-15.40：开始让动笔写作文👉 30分钟</p>\n<p>15.40-16.10：听力👉 30分钟</p>\n<p>16.10-16.15：暂停5分钟收答题卡1(作文和听力)</p>\n<p>16.15-17.25：余下时间写卷至结束</p>\n<p>下一篇：[[自然辩证法考试重点]]</p>\n","site":{"data":{}},"wordcount":167,"excerpt":"","more":"<p>正式时间：15.00-17.25<br />\n报道时间：14.20</p>\n<p>15.00前：发答题卡</p>\n<p>15.00-15.10：开始发卷子</p>\n<p>15.10-15.40：开始让动笔写作文👉 30分钟</p>\n<p>15.40-16.10：听力👉 30分钟</p>\n<p>16.10-16.15：暂停5分钟收答题卡1(作文和听力)</p>\n<p>16.15-17.25：余下时间写卷至结束</p>\n<p>下一篇：[[自然辩证法考试重点]]</p>\n"},{"title":"obsidian flashcard 插件","date":"2022-07-20T03:31:00.000Z","abbrlink":11266,"_content":"\n插件：flashcard的使用方法：[Home · reuseman/flashcards-obsidian Wiki · GitHub](https://github.com/reuseman/flashcards-obsidian/wiki)\n\n# 1 简单配置\nanki connect 添加\n```\n{\n    \"apiKey\": null,\n    \"apiLogPath\": null,\n    \"webBindAddress\": \"127.0.0.1\",\n    \"webBindPort\": 8765,\n    \"webCorsOrigin\": \"http://localhost\",\n    \"webCorsOriginList\": [\n        \"http://localhost\",\n        \"app://obsidian.md\"   ## 添加这一个\n    ] \n}\n```\n\n\n\n# 2 无法添加的解决方法\n1. anki 不能在浏览页面\n2. 删除id后，anki牌组不能有之前文件\n3. 问题前面加一个标题，添加后，然后在删掉就行\n4. yaml字段自动生成的card-deck 字段，相对(valut)的路径不应太长，否则就只能添加Default\n\n\n小问题\n根据文件夹创建目录，如果文件夹的层级太多就会失效\n\n\n# 3 使用\n## 3.1 分隔符\n1. :: \n<center> \n<img src = \"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220721165055.png\" > \n\n<img src = \"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220721165345.png\" > \n</center>\n\n\n\n<center> \n<img src = \"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220721164811.png\" > \n<img src = \"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220721164922.png\" > \n</center>\n\n2. :::\n![]()\n","source":"_posts/🚀技能/obsidian/obsidian flashcard 插件.md","raw":"---\ntitle: obsidian flashcard 插件\ndate: '2022-07-20 11:31'\ncategories:\n  - \"\\U0001F680技能\"\n  - obsidian\ntags: \n- obsidian\n- 已迁移\nabbrlink: 11266\n---\n\n插件：flashcard的使用方法：[Home · reuseman/flashcards-obsidian Wiki · GitHub](https://github.com/reuseman/flashcards-obsidian/wiki)\n\n# 1 简单配置\nanki connect 添加\n```\n{\n    \"apiKey\": null,\n    \"apiLogPath\": null,\n    \"webBindAddress\": \"127.0.0.1\",\n    \"webBindPort\": 8765,\n    \"webCorsOrigin\": \"http://localhost\",\n    \"webCorsOriginList\": [\n        \"http://localhost\",\n        \"app://obsidian.md\"   ## 添加这一个\n    ] \n}\n```\n\n\n\n# 2 无法添加的解决方法\n1. anki 不能在浏览页面\n2. 删除id后，anki牌组不能有之前文件\n3. 问题前面加一个标题，添加后，然后在删掉就行\n4. yaml字段自动生成的card-deck 字段，相对(valut)的路径不应太长，否则就只能添加Default\n\n\n小问题\n根据文件夹创建目录，如果文件夹的层级太多就会失效\n\n\n# 3 使用\n## 3.1 分隔符\n1. :: \n<center> \n<img src = \"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220721165055.png\" > \n\n<img src = \"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220721165345.png\" > \n</center>\n\n\n\n<center> \n<img src = \"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220721164811.png\" > \n<img src = \"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220721164922.png\" > \n</center>\n\n2. :::\n![]()\n","slug":"🚀技能/obsidian/obsidian flashcard 插件","published":1,"updated":"2022-08-04T05:41:31.974Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fj1001ee0mg57aigmjy","content":"<p>插件：flashcard的使用方法：<a href=\"https://github.com/reuseman/flashcards-obsidian/wiki\">Home · reuseman/flashcards-obsidian Wiki · GitHub</a></p>\n<h1 id=\"1-简单配置\"><a class=\"markdownIt-Anchor\" href=\"#1-简单配置\"></a> 1 简单配置</h1>\n<p>anki connect 添加</p>\n<figure class=\"highlight 1c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 1c\">{<br>    <span class=\"hljs-string\">\"apiKey\"</span>: <span class=\"hljs-literal\">null</span>,<br>    <span class=\"hljs-string\">\"apiLogPath\"</span>: <span class=\"hljs-literal\">null</span>,<br>    <span class=\"hljs-string\">\"webBindAddress\"</span>: <span class=\"hljs-string\">\"127.0.0.1\"</span>,<br>    <span class=\"hljs-string\">\"webBindPort\"</span>: <span class=\"hljs-number\">8765</span>,<br>    <span class=\"hljs-string\">\"webCorsOrigin\"</span>: <span class=\"hljs-string\">\"http://localhost\"</span>,<br>    <span class=\"hljs-string\">\"webCorsOriginList\"</span>: [<br>        <span class=\"hljs-string\">\"http://localhost\"</span>,<br>        <span class=\"hljs-string\">\"app://obsidian.md\"</span>   <span class=\"hljs-meta\">## 添加这一个</span><br>    ] <br>}<br></code></pre></td></tr></tbody></table></figure>\n<h1 id=\"2-无法添加的解决方法\"><a class=\"markdownIt-Anchor\" href=\"#2-无法添加的解决方法\"></a> 2 无法添加的解决方法</h1>\n<ol>\n<li>anki 不能在浏览页面</li>\n<li>删除id后，anki牌组不能有之前文件</li>\n<li>问题前面加一个标题，添加后，然后在删掉就行</li>\n<li>yaml字段自动生成的card-deck 字段，相对(valut)的路径不应太长，否则就只能添加Default</li>\n</ol>\n<p>小问题<br>\n根据文件夹创建目录，如果文件夹的层级太多就会失效</p>\n<h1 id=\"3-使用\"><a class=\"markdownIt-Anchor\" href=\"#3-使用\"></a> 3 使用</h1>\n<h2 id=\"31-分隔符\"><a class=\"markdownIt-Anchor\" href=\"#31-分隔符\"></a> 3.1 分隔符</h2>\n<ol>\n<li>::</li>\n</ol>\n<center> \n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220721165055.png\"> \n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220721165345.png\"> \n</center>\n<center> \n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220721164811.png\"> \n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220721164922.png\"> \n</center>\n<ol start=\"2\">\n<li>:::<br>\n<img src=\"\" alt=\"\"></li>\n</ol>\n","site":{"data":{}},"wordcount":543,"excerpt":"","more":"<p>插件：flashcard的使用方法：<a href=\"https://github.com/reuseman/flashcards-obsidian/wiki\">Home · reuseman/flashcards-obsidian Wiki · GitHub</a></p>\n<h1 id=\"1-简单配置\"><a class=\"markdownIt-Anchor\" href=\"#1-简单配置\"></a> 1 简单配置</h1>\n<p>anki connect 添加</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 1c\">&#123;<br>    <span class=\"hljs-string\">&quot;apiKey&quot;</span>: <span class=\"hljs-literal\">null</span>,<br>    <span class=\"hljs-string\">&quot;apiLogPath&quot;</span>: <span class=\"hljs-literal\">null</span>,<br>    <span class=\"hljs-string\">&quot;webBindAddress&quot;</span>: <span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>,<br>    <span class=\"hljs-string\">&quot;webBindPort&quot;</span>: <span class=\"hljs-number\">8765</span>,<br>    <span class=\"hljs-string\">&quot;webCorsOrigin&quot;</span>: <span class=\"hljs-string\">&quot;http://localhost&quot;</span>,<br>    <span class=\"hljs-string\">&quot;webCorsOriginList&quot;</span>: [<br>        <span class=\"hljs-string\">&quot;http://localhost&quot;</span>,<br>        <span class=\"hljs-string\">&quot;app://obsidian.md&quot;</span>   <span class=\"hljs-meta\">## 添加这一个</span><br>    ] <br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"2-无法添加的解决方法\"><a class=\"markdownIt-Anchor\" href=\"#2-无法添加的解决方法\"></a> 2 无法添加的解决方法</h1>\n<ol>\n<li>anki 不能在浏览页面</li>\n<li>删除id后，anki牌组不能有之前文件</li>\n<li>问题前面加一个标题，添加后，然后在删掉就行</li>\n<li>yaml字段自动生成的card-deck 字段，相对(valut)的路径不应太长，否则就只能添加Default</li>\n</ol>\n<p>小问题<br />\n根据文件夹创建目录，如果文件夹的层级太多就会失效</p>\n<h1 id=\"3-使用\"><a class=\"markdownIt-Anchor\" href=\"#3-使用\"></a> 3 使用</h1>\n<h2 id=\"31-分隔符\"><a class=\"markdownIt-Anchor\" href=\"#31-分隔符\"></a> 3.1 分隔符</h2>\n<ol>\n<li>::</li>\n</ol>\n<center> \n<img src = \"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220721165055.png\" > \n<img src = \"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220721165345.png\" > \n</center>\n<center> \n<img src = \"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220721164811.png\" > \n<img src = \"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220721164922.png\" > \n</center>\n<ol start=\"2\">\n<li>:::<br />\n<img src=\"\" alt=\"\" /></li>\n</ol>\n"},{"title":"obsidian media 插件","date":"2022-06-22T05:15:00.000Z","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206200917436.jpg","abbrlink":42381,"_content":"\n\n# 1 media 插件\n本地视频打时间戳：\n前边+file:// ，第三个\"/\"是users的,然后在阅读视图中打开，之后可以自动打时间戳\n![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206221318976.png)\n\n不在阅读视图中打开会自动跳转到默认应用打开，这样无法加时间戳\n![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206221319732.png)\n\n# 2 参考资料\n自用跳转连接：[ob]()， [blog]()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n**参考资料：**\n\n","source":"_posts/🚀技能/obsidian/obsidian media 插件.md","raw":"---\ntitle: obsidian media 插件\ndate: '2022-06-22 13:15'\ncategories:\n  - \"\\U0001F680技能\"\n  - obsidian\ntags:\n  - obsidian\n  - 已迁移\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206200917436.jpg'\nabbrlink: 42381\n---\n\n\n# 1 media 插件\n本地视频打时间戳：\n前边+file:// ，第三个\"/\"是users的,然后在阅读视图中打开，之后可以自动打时间戳\n![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206221318976.png)\n\n不在阅读视图中打开会自动跳转到默认应用打开，这样无法加时间戳\n![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206221319732.png)\n\n# 2 参考资料\n自用跳转连接：[ob]()， [blog]()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n**参考资料：**\n\n","slug":"🚀技能/obsidian/obsidian media 插件","published":1,"updated":"2022-08-04T05:45:42.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fj2001je0mg840u2f6f","content":"<h1 id=\"1-media-插件\"><a class=\"markdownIt-Anchor\" href=\"#1-media-插件\"></a> 1 media 插件</h1>\n<p>本地视频打时间戳：<br>\n前边+file:// ，第三个\"/\"是users的,然后在阅读视图中打开，之后可以自动打时间戳<br>\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206221318976.png\" alt=\"|600\"></p>\n<p>不在阅读视图中打开会自动跳转到默认应用打开，这样无法加时间戳<br>\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206221319732.png\" alt=\"|600\"></p>\n<h1 id=\"2-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#2-参考资料\"></a> 2 参考资料</h1>\n<p>自用跳转连接：<a href=\"\">ob</a>， <a href=\"\">blog</a></p>\n<hr>\n<p><strong>参考资料：</strong></p>\n","site":{"data":{}},"wordcount":127,"excerpt":"","more":"<h1 id=\"1-media-插件\"><a class=\"markdownIt-Anchor\" href=\"#1-media-插件\"></a> 1 media 插件</h1>\n<p>本地视频打时间戳：<br />\n前边+file:// ，第三个&quot;/&quot;是users的,然后在阅读视图中打开，之后可以自动打时间戳<br />\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206221318976.png\" alt=\"|600\" /></p>\n<p>不在阅读视图中打开会自动跳转到默认应用打开，这样无法加时间戳<br />\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206221319732.png\" alt=\"|600\" /></p>\n<h1 id=\"2-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#2-参考资料\"></a> 2 参考资料</h1>\n<p>自用跳转连接：<a href=\"\">ob</a>， <a href=\"\">blog</a></p>\n<hr />\n<p><strong>参考资料：</strong></p>\n"},{"title":"obsidian templater 插件","date":"2022-06-07T04:17:00.000Z","excerpt":"文章简介：如题","abbrlink":36637,"_content":"\n\n\n# 1 文件类\n\n## 1.1 获取文件的相对路径\neg: card-deck: <% tp.file.path(true) %>\n[`tp.file.path(relative: boolean = false)`](https://silentvoid13.github.io/Templater/internal-functions/internal-modules/file-module.html#tpfilepathrelative-boolean--false)\n检索文件在系统上的绝对路径\n`relative`：如果设置为 true，则仅检索 Vault 的相对路径。\n\n\n\n\n\n\n参考资料\n---\n\n[tp.file - Templater](https://silentvoid13.github.io/Templater/internal-functions/internal-modules/file-module.html#arguments-9)","source":"_posts/🚀技能/obsidian/obsidian templater 插件.md","raw":"---\ntitle: obsidian templater 插件\ndate: '2022-06-07 12:17'\ncategories:\n  - \"\\U0001F680技能\"\n  - obsidian\nexcerpt: 文章简介：如题\ntags:\n  - 动态规划\n  - 已迁移\nabbrlink: 36637\n---\n\n\n\n# 1 文件类\n\n## 1.1 获取文件的相对路径\neg: card-deck: <% tp.file.path(true) %>\n[`tp.file.path(relative: boolean = false)`](https://silentvoid13.github.io/Templater/internal-functions/internal-modules/file-module.html#tpfilepathrelative-boolean--false)\n检索文件在系统上的绝对路径\n`relative`：如果设置为 true，则仅检索 Vault 的相对路径。\n\n\n\n\n\n\n参考资料\n---\n\n[tp.file - Templater](https://silentvoid13.github.io/Templater/internal-functions/internal-modules/file-module.html#arguments-9)","slug":"🚀技能/obsidian/obsidian templater 插件","published":1,"updated":"2022-08-04T05:45:23.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fj2001le0mgdyyu8jgx","content":"<h1 id=\"1-文件类\"><a class=\"markdownIt-Anchor\" href=\"#1-文件类\"></a> 1 文件类</h1>\n<h2 id=\"11-获取文件的相对路径\"><a class=\"markdownIt-Anchor\" href=\"#11-获取文件的相对路径\"></a> 1.1 获取文件的相对路径</h2>\n<p>eg: card-deck: &lt;% tp.file.path(true) %&gt;<br>\n<a href=\"https://silentvoid13.github.io/Templater/internal-functions/internal-modules/file-module.html#tpfilepathrelative-boolean--false\"><code>tp.file.path(relative: boolean = false)</code></a><br>\n检索文件在系统上的绝对路径<br>\n<code>relative</code>：如果设置为 true，则仅检索 Vault 的相对路径。</p>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h2>\n<p><a href=\"https://silentvoid13.github.io/Templater/internal-functions/internal-modules/file-module.html#arguments-9\">tp.file - Templater</a></p>\n","site":{"data":{}},"wordcount":161,"more":"<h1 id=\"1-文件类\"><a class=\"markdownIt-Anchor\" href=\"#1-文件类\"></a> 1 文件类</h1>\n<h2 id=\"11-获取文件的相对路径\"><a class=\"markdownIt-Anchor\" href=\"#11-获取文件的相对路径\"></a> 1.1 获取文件的相对路径</h2>\n<p>eg: card-deck: &lt;% tp.file.path(true) %&gt;<br />\n<a href=\"https://silentvoid13.github.io/Templater/internal-functions/internal-modules/file-module.html#tpfilepathrelative-boolean--false\"><code>tp.file.path(relative: boolean = false)</code></a><br />\n检索文件在系统上的绝对路径<br />\n<code>relative</code>：如果设置为 true，则仅检索 Vault 的相对路径。</p>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h2>\n<p><a href=\"https://silentvoid13.github.io/Templater/internal-functions/internal-modules/file-module.html#arguments-9\">tp.file - Templater</a></p>\n"},{"title":"notion函数公式","date":"2022-06-15T05:26:00.000Z","abbrlink":11772,"_content":"\n\n\nnotion函数公式\n\n# 1 时间公式\n```cpp\n开始的后两位：toNumber(slice(prop(\"开始\"),3))\n结束的后两位：toNumber(slice(prop(\"结束\"),3))\n\n开始的前两位：toNumber(slice(prop(\"开始\"),0,2))\n结束的前两位：toNumber(slice(prop(\"结束\"),0,2))\n\n\n相减的分钟数：(toNumber(slice(prop(\"结束\"),3))-toNumber(slice(prop(\"开始\"),3)))\n相减的小时数：(toNumber(slice(prop(\"结束\"),0,2))-toNumber(slice(prop(\"开始\"),0,2)))\n\n小时+分钟：\nfloor((toNumber(slice(prop(\"结束\"), 0, 2)) - toNumber(slice(prop(\"开始\"), 0, 2)) + (toNumber(slice(prop(\"结束\"), 3)) - toNumber(slice(prop(\"开始\"), 3))) / 60) * 100) /100 \n\n\n//不借位\nif(toNumber(slice(prop(\"结束\"), 3)) >= toNumber(slice(prop(\"开始\"), 3)), floor((toNumber(slice(prop(\"结束\"), 0, 2)) - toNumber(slice(prop(\"开始\"), 0, 2)) + (toNumber(slice(prop(\"结束\"), 3)) - toNumber(slice(prop(\"开始\"), 3))) / 60) * 100) / 100, 0)\n\n//借位\nfloor((toNumber(slice(prop(\"结束\"), 0, 2))-1 - toNumber(slice(prop(\"开始\"), 0, 2)) + (toNumber(slice(prop(\"结束\"), 3))+60 - toNumber(slice(prop(\"开始\"), 3))) / 60) * 100) /100\n\n\n//时间计算总函数：已通过\nif(toNumber(slice(prop(\"结束\"), 3)) >= toNumber(slice(prop(\"开始\"), 3)), floor((toNumber(slice(prop(\"结束\"), 0, 2)) - toNumber(slice(prop(\"开始\"), 0, 2)) + (toNumber(slice(prop(\"结束\"), 3)) - toNumber(slice(prop(\"开始\"), 3))) / 60) * 100) / 100, floor((toNumber(slice(prop(\"结束\"), 0, 2)) - 1 - toNumber(slice(prop(\"开始\"), 0, 2)) + (toNumber(slice(prop(\"结束\"), 3)) + 60 - toNumber(slice(prop(\"开始\"), 3))) / 60) * 100) / 100)\n\n//时间范围改造函数\nif(toNumber(slice(prop(\"结束\"), 3)) >= toNumber(slice(prop(\"开始\"), 3)), format((toNumber(slice(prop(\"结束\"), 0, 2)) - toNumber(slice(prop(\"开始\"), 0, 2)))+ \"h\" + format((toNumber(slice(prop(\"结束\"),3))-toNumber(slice(prop(\"开始\"),3)))) +\"m\" , \"0\")\n```\n\n时间范围\n```cpp\nformat(toNumber(slice(prop(\"结束\"), 3)) - toNumber(slice(prop(\"开始\"), 3))) + \"m\"\n//不借位\nformat(toNumber(slice(prop(\"结束\"), 0, 2)) - toNumber(slice(prop(\"开始\"), 0, 2))) + \"h\" + format(toNumber(slice(prop(\"结束\"), 3)) - toNumber(slice(prop(\"开始\"), 3))) + \"m\"\n\n//借位\nformat(toNumber(slice(prop(\"结束\"), 0, 2))-1 - toNumber(slice(prop(\"开始\"), 0, 2))) + \"h\" + format(toNumber(slice(prop(\"结束\"), 3))+60 - toNumber(slice(prop(\"开始\"), 3))) + \"m\"\n```\n\n\n\n写notion公式的心得：把零件找出来，在组装","source":"_posts/🚀技能/notion/notion函数公式.md","raw":"---\ntitle: notion函数公式\ndate: '2022-06-15 13:26'\ncategories:\n  - \"\\U0001F680技能\"\n  - notion\ntags:\n  - notion\nabbrlink: 11772\n---\n\n\n\nnotion函数公式\n\n# 1 时间公式\n```cpp\n开始的后两位：toNumber(slice(prop(\"开始\"),3))\n结束的后两位：toNumber(slice(prop(\"结束\"),3))\n\n开始的前两位：toNumber(slice(prop(\"开始\"),0,2))\n结束的前两位：toNumber(slice(prop(\"结束\"),0,2))\n\n\n相减的分钟数：(toNumber(slice(prop(\"结束\"),3))-toNumber(slice(prop(\"开始\"),3)))\n相减的小时数：(toNumber(slice(prop(\"结束\"),0,2))-toNumber(slice(prop(\"开始\"),0,2)))\n\n小时+分钟：\nfloor((toNumber(slice(prop(\"结束\"), 0, 2)) - toNumber(slice(prop(\"开始\"), 0, 2)) + (toNumber(slice(prop(\"结束\"), 3)) - toNumber(slice(prop(\"开始\"), 3))) / 60) * 100) /100 \n\n\n//不借位\nif(toNumber(slice(prop(\"结束\"), 3)) >= toNumber(slice(prop(\"开始\"), 3)), floor((toNumber(slice(prop(\"结束\"), 0, 2)) - toNumber(slice(prop(\"开始\"), 0, 2)) + (toNumber(slice(prop(\"结束\"), 3)) - toNumber(slice(prop(\"开始\"), 3))) / 60) * 100) / 100, 0)\n\n//借位\nfloor((toNumber(slice(prop(\"结束\"), 0, 2))-1 - toNumber(slice(prop(\"开始\"), 0, 2)) + (toNumber(slice(prop(\"结束\"), 3))+60 - toNumber(slice(prop(\"开始\"), 3))) / 60) * 100) /100\n\n\n//时间计算总函数：已通过\nif(toNumber(slice(prop(\"结束\"), 3)) >= toNumber(slice(prop(\"开始\"), 3)), floor((toNumber(slice(prop(\"结束\"), 0, 2)) - toNumber(slice(prop(\"开始\"), 0, 2)) + (toNumber(slice(prop(\"结束\"), 3)) - toNumber(slice(prop(\"开始\"), 3))) / 60) * 100) / 100, floor((toNumber(slice(prop(\"结束\"), 0, 2)) - 1 - toNumber(slice(prop(\"开始\"), 0, 2)) + (toNumber(slice(prop(\"结束\"), 3)) + 60 - toNumber(slice(prop(\"开始\"), 3))) / 60) * 100) / 100)\n\n//时间范围改造函数\nif(toNumber(slice(prop(\"结束\"), 3)) >= toNumber(slice(prop(\"开始\"), 3)), format((toNumber(slice(prop(\"结束\"), 0, 2)) - toNumber(slice(prop(\"开始\"), 0, 2)))+ \"h\" + format((toNumber(slice(prop(\"结束\"),3))-toNumber(slice(prop(\"开始\"),3)))) +\"m\" , \"0\")\n```\n\n时间范围\n```cpp\nformat(toNumber(slice(prop(\"结束\"), 3)) - toNumber(slice(prop(\"开始\"), 3))) + \"m\"\n//不借位\nformat(toNumber(slice(prop(\"结束\"), 0, 2)) - toNumber(slice(prop(\"开始\"), 0, 2))) + \"h\" + format(toNumber(slice(prop(\"结束\"), 3)) - toNumber(slice(prop(\"开始\"), 3))) + \"m\"\n\n//借位\nformat(toNumber(slice(prop(\"结束\"), 0, 2))-1 - toNumber(slice(prop(\"开始\"), 0, 2))) + \"h\" + format(toNumber(slice(prop(\"结束\"), 3))+60 - toNumber(slice(prop(\"开始\"), 3))) + \"m\"\n```\n\n\n\n写notion公式的心得：把零件找出来，在组装","slug":"🚀技能/notion/notion函数公式","published":1,"updated":"2022-07-12T09:02:14.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fj2001pe0mg50z7gxcy","content":"<p>notion函数公式</p>\n<h1 id=\"1-时间公式\"><a class=\"markdownIt-Anchor\" href=\"#1-时间公式\"></a> 1 时间公式</h1>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">开始的后两位：<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"开始\"</span>),<span class=\"hljs-number\">3</span>))<br>结束的后两位：<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"结束\"</span>),<span class=\"hljs-number\">3</span>))<br><br>开始的前两位：<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"开始\"</span>),<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>))<br>结束的前两位：<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"结束\"</span>),<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>))<br><br><br>相减的分钟数：(<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"结束\"</span>),<span class=\"hljs-number\">3</span>))-<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"开始\"</span>),<span class=\"hljs-number\">3</span>)))<br>相减的小时数：(<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"结束\"</span>),<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>))-<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"开始\"</span>),<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>)))<br><br>小时+分钟：<br><span class=\"hljs-built_in\">floor</span>((<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"结束\"</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)) - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"开始\"</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)) + (<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"结束\"</span>), <span class=\"hljs-number\">3</span>)) - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"开始\"</span>), <span class=\"hljs-number\">3</span>))) / <span class=\"hljs-number\">60</span>) * <span class=\"hljs-number\">100</span>) /<span class=\"hljs-number\">100</span> <br><br><br><span class=\"hljs-comment\">//不借位</span><br><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"结束\"</span>), <span class=\"hljs-number\">3</span>)) &gt;= <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"开始\"</span>), <span class=\"hljs-number\">3</span>)), <span class=\"hljs-built_in\">floor</span>((<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"结束\"</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)) - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"开始\"</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)) + (<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"结束\"</span>), <span class=\"hljs-number\">3</span>)) - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"开始\"</span>), <span class=\"hljs-number\">3</span>))) / <span class=\"hljs-number\">60</span>) * <span class=\"hljs-number\">100</span>) / <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">0</span>)<br><br><span class=\"hljs-comment\">//借位</span><br><span class=\"hljs-built_in\">floor</span>((<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"结束\"</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>))<span class=\"hljs-number\">-1</span> - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"开始\"</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)) + (<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"结束\"</span>), <span class=\"hljs-number\">3</span>))+<span class=\"hljs-number\">60</span> - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"开始\"</span>), <span class=\"hljs-number\">3</span>))) / <span class=\"hljs-number\">60</span>) * <span class=\"hljs-number\">100</span>) /<span class=\"hljs-number\">100</span><br><br><br><span class=\"hljs-comment\">//时间计算总函数：已通过</span><br><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"结束\"</span>), <span class=\"hljs-number\">3</span>)) &gt;= <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"开始\"</span>), <span class=\"hljs-number\">3</span>)), <span class=\"hljs-built_in\">floor</span>((<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"结束\"</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)) - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"开始\"</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)) + (<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"结束\"</span>), <span class=\"hljs-number\">3</span>)) - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"开始\"</span>), <span class=\"hljs-number\">3</span>))) / <span class=\"hljs-number\">60</span>) * <span class=\"hljs-number\">100</span>) / <span class=\"hljs-number\">100</span>, <span class=\"hljs-built_in\">floor</span>((<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"结束\"</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)) - <span class=\"hljs-number\">1</span> - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"开始\"</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)) + (<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"结束\"</span>), <span class=\"hljs-number\">3</span>)) + <span class=\"hljs-number\">60</span> - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"开始\"</span>), <span class=\"hljs-number\">3</span>))) / <span class=\"hljs-number\">60</span>) * <span class=\"hljs-number\">100</span>) / <span class=\"hljs-number\">100</span>)<br><br><span class=\"hljs-comment\">//时间范围改造函数</span><br><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"结束\"</span>), <span class=\"hljs-number\">3</span>)) &gt;= <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"开始\"</span>), <span class=\"hljs-number\">3</span>)), format((<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"结束\"</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)) - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"开始\"</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)))+ <span class=\"hljs-string\">\"h\"</span> + format((<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"结束\"</span>),<span class=\"hljs-number\">3</span>))-<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"开始\"</span>),<span class=\"hljs-number\">3</span>)))) +<span class=\"hljs-string\">\"m\"</span> , <span class=\"hljs-string\">\"0\"</span>)<br></code></pre></td></tr></tbody></table></figure>\n<p>时间范围</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">format(<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"结束\"</span>), <span class=\"hljs-number\">3</span>)) - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"开始\"</span>), <span class=\"hljs-number\">3</span>))) + <span class=\"hljs-string\">\"m\"</span><br><span class=\"hljs-comment\">//不借位</span><br>format(<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"结束\"</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)) - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"开始\"</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>))) + <span class=\"hljs-string\">\"h\"</span> + format(<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"结束\"</span>), <span class=\"hljs-number\">3</span>)) - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"开始\"</span>), <span class=\"hljs-number\">3</span>))) + <span class=\"hljs-string\">\"m\"</span><br><br><span class=\"hljs-comment\">//借位</span><br>format(<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"结束\"</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>))<span class=\"hljs-number\">-1</span> - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"开始\"</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>))) + <span class=\"hljs-string\">\"h\"</span> + format(<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"结束\"</span>), <span class=\"hljs-number\">3</span>))+<span class=\"hljs-number\">60</span> - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">\"开始\"</span>), <span class=\"hljs-number\">3</span>))) + <span class=\"hljs-string\">\"m\"</span><br></code></pre></td></tr></tbody></table></figure>\n<p>写notion公式的心得：把零件找出来，在组装</p>\n","site":{"data":{}},"wordcount":2452,"excerpt":"","more":"<p>notion函数公式</p>\n<h1 id=\"1-时间公式\"><a class=\"markdownIt-Anchor\" href=\"#1-时间公式\"></a> 1 时间公式</h1>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">开始的后两位：<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;开始&quot;</span>),<span class=\"hljs-number\">3</span>))<br>结束的后两位：<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;结束&quot;</span>),<span class=\"hljs-number\">3</span>))<br><br>开始的前两位：<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;开始&quot;</span>),<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>))<br>结束的前两位：<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;结束&quot;</span>),<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>))<br><br><br>相减的分钟数：(<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;结束&quot;</span>),<span class=\"hljs-number\">3</span>))-<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;开始&quot;</span>),<span class=\"hljs-number\">3</span>)))<br>相减的小时数：(<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;结束&quot;</span>),<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>))-<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;开始&quot;</span>),<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>)))<br><br>小时+分钟：<br><span class=\"hljs-built_in\">floor</span>((<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;结束&quot;</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)) - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;开始&quot;</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)) + (<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;结束&quot;</span>), <span class=\"hljs-number\">3</span>)) - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;开始&quot;</span>), <span class=\"hljs-number\">3</span>))) / <span class=\"hljs-number\">60</span>) * <span class=\"hljs-number\">100</span>) /<span class=\"hljs-number\">100</span> <br><br><br><span class=\"hljs-comment\">//不借位</span><br><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;结束&quot;</span>), <span class=\"hljs-number\">3</span>)) &gt;= <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;开始&quot;</span>), <span class=\"hljs-number\">3</span>)), <span class=\"hljs-built_in\">floor</span>((<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;结束&quot;</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)) - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;开始&quot;</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)) + (<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;结束&quot;</span>), <span class=\"hljs-number\">3</span>)) - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;开始&quot;</span>), <span class=\"hljs-number\">3</span>))) / <span class=\"hljs-number\">60</span>) * <span class=\"hljs-number\">100</span>) / <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">0</span>)<br><br><span class=\"hljs-comment\">//借位</span><br><span class=\"hljs-built_in\">floor</span>((<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;结束&quot;</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>))<span class=\"hljs-number\">-1</span> - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;开始&quot;</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)) + (<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;结束&quot;</span>), <span class=\"hljs-number\">3</span>))+<span class=\"hljs-number\">60</span> - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;开始&quot;</span>), <span class=\"hljs-number\">3</span>))) / <span class=\"hljs-number\">60</span>) * <span class=\"hljs-number\">100</span>) /<span class=\"hljs-number\">100</span><br><br><br><span class=\"hljs-comment\">//时间计算总函数：已通过</span><br><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;结束&quot;</span>), <span class=\"hljs-number\">3</span>)) &gt;= <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;开始&quot;</span>), <span class=\"hljs-number\">3</span>)), <span class=\"hljs-built_in\">floor</span>((<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;结束&quot;</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)) - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;开始&quot;</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)) + (<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;结束&quot;</span>), <span class=\"hljs-number\">3</span>)) - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;开始&quot;</span>), <span class=\"hljs-number\">3</span>))) / <span class=\"hljs-number\">60</span>) * <span class=\"hljs-number\">100</span>) / <span class=\"hljs-number\">100</span>, <span class=\"hljs-built_in\">floor</span>((<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;结束&quot;</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)) - <span class=\"hljs-number\">1</span> - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;开始&quot;</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)) + (<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;结束&quot;</span>), <span class=\"hljs-number\">3</span>)) + <span class=\"hljs-number\">60</span> - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;开始&quot;</span>), <span class=\"hljs-number\">3</span>))) / <span class=\"hljs-number\">60</span>) * <span class=\"hljs-number\">100</span>) / <span class=\"hljs-number\">100</span>)<br><br><span class=\"hljs-comment\">//时间范围改造函数</span><br><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;结束&quot;</span>), <span class=\"hljs-number\">3</span>)) &gt;= <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;开始&quot;</span>), <span class=\"hljs-number\">3</span>)), format((<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;结束&quot;</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)) - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;开始&quot;</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)))+ <span class=\"hljs-string\">&quot;h&quot;</span> + format((<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;结束&quot;</span>),<span class=\"hljs-number\">3</span>))-<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;开始&quot;</span>),<span class=\"hljs-number\">3</span>)))) +<span class=\"hljs-string\">&quot;m&quot;</span> , <span class=\"hljs-string\">&quot;0&quot;</span>)<br></code></pre></td></tr></table></figure>\n<p>时间范围</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">format(<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;结束&quot;</span>), <span class=\"hljs-number\">3</span>)) - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;开始&quot;</span>), <span class=\"hljs-number\">3</span>))) + <span class=\"hljs-string\">&quot;m&quot;</span><br><span class=\"hljs-comment\">//不借位</span><br>format(<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;结束&quot;</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)) - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;开始&quot;</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>))) + <span class=\"hljs-string\">&quot;h&quot;</span> + format(<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;结束&quot;</span>), <span class=\"hljs-number\">3</span>)) - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;开始&quot;</span>), <span class=\"hljs-number\">3</span>))) + <span class=\"hljs-string\">&quot;m&quot;</span><br><br><span class=\"hljs-comment\">//借位</span><br>format(<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;结束&quot;</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>))<span class=\"hljs-number\">-1</span> - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;开始&quot;</span>), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>))) + <span class=\"hljs-string\">&quot;h&quot;</span> + format(<span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;结束&quot;</span>), <span class=\"hljs-number\">3</span>))+<span class=\"hljs-number\">60</span> - <span class=\"hljs-built_in\">toNumber</span>(<span class=\"hljs-built_in\">slice</span>(<span class=\"hljs-built_in\">prop</span>(<span class=\"hljs-string\">&quot;开始&quot;</span>), <span class=\"hljs-number\">3</span>))) + <span class=\"hljs-string\">&quot;m&quot;</span><br></code></pre></td></tr></table></figure>\n<p>写notion公式的心得：把零件找出来，在组装</p>\n"},{"title":"由hexo clean 问题引发的一些学习感想","date":"2022-06-11T04:26:00.000Z","abbrlink":19528,"_content":"\nhexo 上传文章的固定流程：\n\n`hexo clean` → `hexo  g` → `hexo  s` → `hexo  d`\n\n其实网上看了很多人这样写，但我一直把`hexo clean` 写成 `hexo c`。其实系统也一直都有在报错，但我从来都没有关注。因为终端窗口小，没能显示出来上边的错误信息，下面一堆英文的也不想看。每次都当成了顺利执行了。自己还沾沾自喜的觉得`hexo c` 写也可以，网上没人说自己发现了新大陆了。\n![|600](https://s1.vika.cn/space/2022/06/11/9106c9ae345a4543a36819fd0351132c)\n后来在用hexo写文章的时候，换主主题总是有些问题(见下图)，自己困扰了很多天，每天拿出来很多时间来尝试解决问题，但都无果。其实就是因为没有用hexo clean 清除缓存导致的\n![|800](https://s1.vika.cn/space/2022/06/11/d2d6e3f8df354e7cad5a8cfa1b5d2983)\n\n \n\n\n我为什么一直固执写 `hexo c` 呢，\n我认为有以下方面原因：\n1. **自以为是**。觉得很多都可以简写，那这个命令应该也可以。自己试了试看到终端输出信息了。就觉得可以了，但其实根本没认真看出来的信息\n2. **嫌麻烦**。觉得是英文的，根本静不下来心去看。\n\n希望以后在这两方面加强自己\n\n\n\n下一篇：[[六级考试时间安排]]\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/👨🏻‍💻code/学习感悟/由hexo clean 问题引发的一些学习感想.md","raw":"---\ntitle: 由hexo clean 问题引发的一些学习感想\ndate: '2022-06-11 12:26'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 学习感悟\ntags:\n  - hexo 问题\nabbrlink: 19528\n---\n\nhexo 上传文章的固定流程：\n\n`hexo clean` → `hexo  g` → `hexo  s` → `hexo  d`\n\n其实网上看了很多人这样写，但我一直把`hexo clean` 写成 `hexo c`。其实系统也一直都有在报错，但我从来都没有关注。因为终端窗口小，没能显示出来上边的错误信息，下面一堆英文的也不想看。每次都当成了顺利执行了。自己还沾沾自喜的觉得`hexo c` 写也可以，网上没人说自己发现了新大陆了。\n![|600](https://s1.vika.cn/space/2022/06/11/9106c9ae345a4543a36819fd0351132c)\n后来在用hexo写文章的时候，换主主题总是有些问题(见下图)，自己困扰了很多天，每天拿出来很多时间来尝试解决问题，但都无果。其实就是因为没有用hexo clean 清除缓存导致的\n![|800](https://s1.vika.cn/space/2022/06/11/d2d6e3f8df354e7cad5a8cfa1b5d2983)\n\n \n\n\n我为什么一直固执写 `hexo c` 呢，\n我认为有以下方面原因：\n1. **自以为是**。觉得很多都可以简写，那这个命令应该也可以。自己试了试看到终端输出信息了。就觉得可以了，但其实根本没认真看出来的信息\n2. **嫌麻烦**。觉得是英文的，根本静不下来心去看。\n\n希望以后在这两方面加强自己\n\n\n\n下一篇：[[六级考试时间安排]]\n\n\n\n\n\n\n\n\n\n\n","slug":"👨🏻‍💻code/学习感悟/由hexo clean 问题引发的一些学习感想","published":1,"updated":"2022-07-12T09:02:14.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fj3001qe0mg97950214","content":"<p>hexo 上传文章的固定流程：</p>\n<p><code>hexo clean</code> → <code>hexo g</code> → <code>hexo s</code> → <code>hexo d</code></p>\n<p>其实网上看了很多人这样写，但我一直把<code>hexo clean</code> 写成 <code>hexo c</code>。其实系统也一直都有在报错，但我从来都没有关注。因为终端窗口小，没能显示出来上边的错误信息，下面一堆英文的也不想看。每次都当成了顺利执行了。自己还沾沾自喜的觉得<code>hexo c</code> 写也可以，网上没人说自己发现了新大陆了。<br>\n<img src=\"https://s1.vika.cn/space/2022/06/11/9106c9ae345a4543a36819fd0351132c\" alt=\"|600\"><br>\n后来在用hexo写文章的时候，换主主题总是有些问题(见下图)，自己困扰了很多天，每天拿出来很多时间来尝试解决问题，但都无果。其实就是因为没有用hexo clean 清除缓存导致的<br>\n<img src=\"https://s1.vika.cn/space/2022/06/11/d2d6e3f8df354e7cad5a8cfa1b5d2983\" alt=\"|800\"></p>\n<p>我为什么一直固执写 <code>hexo c</code> 呢，<br>\n我认为有以下方面原因：</p>\n<ol>\n<li><strong>自以为是</strong>。觉得很多都可以简写，那这个命令应该也可以。自己试了试看到终端输出信息了。就觉得可以了，但其实根本没认真看出来的信息</li>\n<li><strong>嫌麻烦</strong>。觉得是英文的，根本静不下来心去看。</li>\n</ol>\n<p>希望以后在这两方面加强自己</p>\n<p>下一篇：[[六级考试时间安排]]</p>\n","site":{"data":{}},"wordcount":406,"excerpt":"","more":"<p>hexo 上传文章的固定流程：</p>\n<p><code>hexo clean</code> → <code>hexo g</code> → <code>hexo s</code> → <code>hexo d</code></p>\n<p>其实网上看了很多人这样写，但我一直把<code>hexo clean</code> 写成 <code>hexo c</code>。其实系统也一直都有在报错，但我从来都没有关注。因为终端窗口小，没能显示出来上边的错误信息，下面一堆英文的也不想看。每次都当成了顺利执行了。自己还沾沾自喜的觉得<code>hexo c</code> 写也可以，网上没人说自己发现了新大陆了。<br />\n<img src=\"https://s1.vika.cn/space/2022/06/11/9106c9ae345a4543a36819fd0351132c\" alt=\"|600\" /><br />\n后来在用hexo写文章的时候，换主主题总是有些问题(见下图)，自己困扰了很多天，每天拿出来很多时间来尝试解决问题，但都无果。其实就是因为没有用hexo clean 清除缓存导致的<br />\n<img src=\"https://s1.vika.cn/space/2022/06/11/d2d6e3f8df354e7cad5a8cfa1b5d2983\" alt=\"|800\" /></p>\n<p>我为什么一直固执写 <code>hexo c</code> 呢，<br />\n我认为有以下方面原因：</p>\n<ol>\n<li><strong>自以为是</strong>。觉得很多都可以简写，那这个命令应该也可以。自己试了试看到终端输出信息了。就觉得可以了，但其实根本没认真看出来的信息</li>\n<li><strong>嫌麻烦</strong>。觉得是英文的，根本静不下来心去看。</li>\n</ol>\n<p>希望以后在这两方面加强自己</p>\n<p>下一篇：[[六级考试时间安排]]</p>\n"},{"title":"notion函数详解","date":"2022-06-23T12:53:00.000Z","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206200917436.jpg","abbrlink":49277,"_content":"\n\n[notion多条件formula - CSDN](https://www.csdn.net/tags/NtzaggysMDE2OTctYmxvZwO0O0OO0O0O.html)\n\n\n# 1 一、属性（列名-properties）\n\n1.  prop(“属性”) 返回每个条目的“属性值”，点击即可用对应的格式插入到公式中。\n    \n2.  公式中的四种方式\n    \n    四 种 格 式 { 数 字 日 期 字 符 串 复 选 框 四种格式\\begin{cases} 数字 & \\\\ 日期 & \\\\字符串 &\\\\复选框 & \\end{cases} 四种格式⎩⎪⎪⎪⎨⎪⎪⎪⎧​数字日期字符串复选框​​\n    \nfloor((prop(\"小时\") + prop(\"分钟\") / 60) * 100) / 100\n\n# 2 二、常量（constants）\n\n常 量 { e 自 然 对 数 的 底 数 p i 圆 周 率 t r u e 真 f l a s e 假 常量\\begin{cases} e &自然对数的底数 \\\\ pi &圆周率 \\\\true &真\\\\flase &假 \\end{cases} 常量⎩⎪⎪⎪⎨⎪⎪⎪⎧​epitrueflase​自然对数的底数圆周率真假​\n\n# 3 三、基本运算\n\n1.  if语法（“`if`”）：进行条件判断，在两个选项（要为同一格式）中选择一个。\n    \n    语法：\n    \n    -   `boolean?value:value`\n    -   `if(boolean,value,value)`\n    \n    补充：在\"boolean\"不能填写0或者1；value中，true（真）为1，false（假）为0；\n    \n2.  加法（\"`+`“或\"`add`\"）：把两个数字或字符串相加，并返回它们的值\n    \n    语法：\n    \n    -   `value+value`\n    -   `add(value,value)`\n    \n    说明：value可以是数字或字符串，为字符串时要加上双引号\n    \n3.  减法（”`-`“或“`subtract`”）：将两个数字相减，并返回它们的值\n    \n    语法：\n    \n    -   `number-number`\n    -   `subtract(number,number)`\n4.  乘法（”`*`“或“`multiply`”）：将两个数字相乘，并返回它们的值\n    \n    语法：\n    \n    -   `number*number`\n    -   `multiply(number,number)`\n5.  除法（”`/` “或\"`divide`\"）：将两个数字相乘，并返回他们的值\n    \n    语法：\n    \n    -   `number/number`\n    -   `divide(number,number)`\n6.  绝对值（\"`abs`\"）：返回数的绝对值\n    \n    语法：`abs(number)`\n    \n7.  求余运算（”`%`“或\"`mod`\"）：把两个数进行求余运算，并返回它们的值\n    \n    语法：\n    \n    -   `number%number`\n    -   `mod(number,number)`\n8.  ”四舍五入“（”`round`“）：对数字进行”四舍五入“\n    \n    语法：`round(number)`\n    \n    说明：默认情况下只保留整数。要保留n位小数时，应使用\n    \n    r o u n d ( n u m b e r ∗ 1 0 n ) / 1 0 n round(number*10^n)/10^n round(number∗10n)/10n\n    \n9.  一元负数（”`unaryminus`“或“`-`”）：对一个数进行取它的负数\n    \n    语法：\n    \n    `-number`\n    \n    `unaryminus(number)`\n    \n    如：-3==unaryminus(3)\n    \n10.  一元加号（“`+`”或“`unaryPlus`”）：将参数转化为数字。\n    \n    语法：\n    \n    `+value`\n    \n    `unaryPlus(value)`\n    \n    补充：可以将true转化为1，false转化为0\n    \n\n# 4 四、关系逻辑判断\n\n1.  关系判断\n    -   大于 >\n    -   小于 <\n    -   等于 ==\n    -   大于等于 >=\n    -   小于等于 <=\n    -   不等于 !=\n2.  逻辑判断\n    -   逻辑“`非`”：对逻辑参数进行否定\n        \n        语法：\n        \n        `not boolean`\n        \n        `not (boolean)`\n        \n    -   逻辑“`与`”：对逻辑参数进行“与”运算，`“一假全假”`\n        \n        语法：\n        \n        `boolean and boolean`\n        \n        `and(boolean,boolean)`\n        \n    -   逻辑“或”：对逻辑参数进行“或”运算，`“一真全真”`\n        \n        语法：\n        \n        `boolean or boolean`\n        \n        `or(boolean,boolean)`\n        \n\n# 5 五、字符串函数\n\n1.  连接函数（“`concat`”）：将字符串进行连接\n    \n    语法：\n    \n    `concat(text...)`\n    \n    `text+text+...`\n    \n2.  插符函数（“`join`”）：插入字符函数，在其余叁数之间插入第一个参数并返回它们的连接字符串\n    \n    语法：`join(text...)`\n    \n    例如：join(\"-\",“a”,“b”,“c”)==“a-b-c”\n    \n3.  切片函数（”`slice`“）：从字符串中提取子字符串（包括开头索引，不包括结尾索引[start,end)）\n    \n    语法：\n    \n    -   `slice(text,number)`\n    -   `slice(text,number1,number2)`\n    \n    说明:只有一个数字时，就是从这个索引数字开始到结束；当有两个数字时（第二个数要大于第一个数，不然不会显示），从字符串中提取子字符串，包含开头索引，不包含结束索引。\n    \n    注意：字符串的索引值是从0开始的\n    \n4.  长度函数（”`length`“）：返回字符串的长度，返回值是一个数值。\n    \n    语法：`length(text)`\n    \n5.  转化函数（”`format`“）：将其他格式的参数转化为字符串。\n    \n    语法：`format(value)`\n    \n6.  转化函数（”`toNumber`“）：将其他格式的参数转化数字\n    \n    语法：`toNumber(value)`\n    \n    说明：\n    \n    -   可以把字符串类型转化为数字，如：\"123\"到数字123\n    -   可以把日期类型转化时间戳，Jan 18, 2021 7:28 PM→1610969340000\n    -   可以把复选框类型转化为数字，true为1，false为0\n    -   也可以把数字类型转化为数字\n7.  包含判断函数（”`contains`“）：包含判断函数，返回一个boolean值，\n    \n    语法：`contains(text1,text2)`\n    \n    说明：如果text1中包含text2，则返回true；反之，返回false\n    \n8.  替代函数：\n    \n    -   “`replace`”：用新值替换正则表达式的第一个匹配项\n        \n        语法：`replace(number/text/boolean,text1,text2)`\n        \n        说明：text表示字符串类型，text1表示要代替的值，text2表示新的值\n        \n    -   \"`replaceAll`”：用新值代替正则表达式的所有匹配项\n        \n        语法：`replaceAll(number/text/boolean,text1,text2)`\n        \n        说明：text表示字符串类型，text1表示要代替的值，text2表示新的值\n        \n9.  检验函数（“`test`”）：判断一个字符串是否与正则表达式匹配，返回一个boolean值\n    \n    语法：`test(number/text/boolean,text)`\n    \n10.  “验空”函数（”`empty`“）：判断一个值是否为空\n    \n    语法：`empty(number/text/boolean/date)`\n    \n    说明：默认情况下，数字为0表示空，字符串以\"\"表示空值，boolean值以false表示空值\n    \n\n# 6 六、数学函数\n\n1.  绝对值函数（“`abs`”)：返回一个数的绝对值\n    \n    语法：`abs(number)`\n    \n2.  开算术平方根运算（”`sqrt`“）：返回一个数的算术平方根\n    \n    语法：`sqrt(number)`\n    \n    说明：number要为非负数\n    \n3.  开立方根（”`cbrt`“)：返回一个数的立方根\n    \n    语法：`cbrt(number)`\n    \n4.  幂次运算（”`^`“或\"`pow`\"）：将两个数字进行指数运算，并返回它们的值\n    \n    语法：\n    \n    -   `number^number`\n    -   `pow(number,number)`\n    \n    补充:\n    \n    自然指数运算（”`exp`“）：返回e^x的值，其中x为参数，e为常数\n    \n    语法：`exp(number)`\n    \n5.  对数运算：notion目前只支持三种对数运算\n    \n    三 种 对 数 运 算 { l n ( n u m b e r ) 返 回 一 个 数 的 自 然 对 数 l o g 10 ( n u m b e r ) 返 回 这 个 数 以 10 为 底 对 数 的 值 l o g 2 ( n u m b e r ) 返 回 这 个 数 以 2 为 底 对 数 的 值 三种对数运算\\begin{cases}ln(number) &返回一个数的自然对数\\\\log_{10}(number)&返回这个数以10为底对数的值\\\\log_2(number) &返回这个数以2为底对数的值\\end{cases} 三种对数运算⎩⎪⎨⎪⎧​ln(number)log10​(number)log2​(number)​返回一个数的自然对数返回这个数以10为底对数的值返回这个数以2为底对数的值​\n    \n6.  向上取整函数（“`ceil`”）：返回大于或等于这个数字的最小整数\n    \n    语法：`ceil(number)`\n    \n7.  向下取整函数（“`floor`”）：返回小于或等于这个数字的最大整数\n    \n    语法：`floor(number)`\n    \n8.  最大/小值函数\n    \n    -   最大值函数（“`max`”）：返回数的最大值\n        \n        语法：`max(number1,number2,...)`\n        \n    -   最小值函数（“`min`”）：返回数的最小值\n        \n        语法：`min(number1,number2,...)`\n        \n9.  符号函数（“`sign`”）：返回数的符号，指明数的符号是为正、负或零\n    \n    语法：`sign(number)`\n    \n    说明：数字为正时，返回1；数字为负时，返回-1；数字为0时，返回0\n    \n\n# 7 七、日期函数\n\n1.  返回时间差函数（`dateBetween`）：返回两个日期之间的时间差，返回值是一个数字。\n    \n    语法：`dateBetween(date,date,text)`\n    \n    说明：`date`表示日期；`text`表示”时间差“的基本单位，类型为字符串，取值有：年、季度、月、周、天、小时、分钟、秒、或毫秒。\n    \n    t e x t 的 取 值 类 型 { \" y e a r s \" 表 示 以 “ 年 ” 为 基 本 单 位 \" q u a r t e r s \" 表 示 以 “ 季 ” 为 基 本 单 位 \" m o n t h s \" 表 示 以 “ 月 \" 为 基 本 单 位 \" w e e k s \" 表 示 以 “ 周 ” 为 基 本 单 位 \" d a y s \" 表 示 以 “ 天 ” 为 基 本 单 位 \" h o u r s \" 表 示 以 “ 小 时 ” 为 基 本 单 位 \" m i n u t e s \" 表 示 以 “ 分 钟 ” 为 基 本 单 位 \" s e c o n d s \" 表 示 以 “ 秒 ” 为 基 本 单 位 \" m i l l i s e c o n d \" 表 示 以 “ 毫 秒 ” 为 基 本 单 位 text的取值类型\\begin{cases}\"years\" & 表示以“年”为基本单位\\\\\"quarters\"&表示以“季”为基本单位\\\\\"months\" &表示以“月\"为基本单位\\\\\"weeks\"& 表示以“周”为基本单位\\\\\"days\"&表示以“天”为基本单位\\\\\"hours\"&表示以“小时”为基本单位\\\\\"minutes\"&表示以“分钟”为基本单位\\\\\"seconds\"&表示以“秒”为基本单位\\\\\"millisecond\"&表示以“毫秒”为基本单位\\end{cases} text的取值类型⎩⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎧​\"years\"\"quarters\"\"months\"\"weeks\"\"days\"\"hours\"\"minutes\"\"seconds\"\"millisecond\"​表示以“年”为基本单位表示以“季”为基本单位表示以“月\"为基本单位表示以“周”为基本单位表示以“天”为基本单位表示以“小时”为基本单位表示以“分钟”为基本单位表示以“秒”为基本单位表示以“毫秒”为基本单位​\n    \n2.  获取当前日期函数（`now`):返回当前的日期和时间\n    \n    语法：`now()`\n    \n3.  日期范围开始函数（“`start`”）：返回一个日期范围的开始\n    \n    语法：`start(date)`\n    \n4.  日期范围结束函数（“`end`”）：返回一个日期范围的结束\n    \n    语法：`end(date)`\n    \n5.  日期到时间戳函数（“`timestamp`”）：返回来自Unix毫秒时间戳的整数，对应于自1970年1月1日起的毫秒数，返回值是`数值`\n    \n    语法：`timestamp(date)`\n    \n    说明：把日期格式的`日期转化`为数值类型的`时间戳`\n    \n6.  时间戳到日期函数（“`fromTimestamp`”）：返回由Unix毫秒时间戳构建的日期，对应于自1970年1月1日起的毫秒数，返回值是`日期`\n    \n    语法：`fromTimestamp(number)`\n    \n    说明：把数值类型的`时间戳转化为日期`类型的日期\n    \n7.  增加日期判据（argument）函数（“`dateAdd`”）：增加到日期，最后一个是单位判据\n    \n    语法：`dateAdd(date,number,text)`\n    \n    说明：`date`表示日期；number表示日期差；`text`表示”时间差“的基本单位，类型为字符串，取值有：年、季度、月、周、天、小时、分钟、秒、或毫秒。\n    \n    t e x t 的 取 值 类 型 { \" y e a r s \" 表 示 以 “ 年 ” 为 基 本 单 位 \" q u a r t e r s \" 表 示 以 “ 季 ” 为 基 本 单 位 \" m o n t h s \" 表 示 以 “ 月 \" 为 基 本 单 位 \" w e e k s \" 表 示 以 “ 周 ” 为 基 本 单 位 \" d a y s \" 表 示 以 “ 天 ” 为 基 本 单 位 \" h o u r s \" 表 示 以 “ 小 时 ” 为 基 本 单 位 \" m i n u t e s \" 表 示 以 “ 分 钟 ” 为 基 本 单 位 \" s e c o n d s \" 表 示 以 “ 秒 ” 为 基 本 单 位 \" m i l l i s e c o n d \" 表 示 以 “ 毫 秒 ” 为 基 本 单 位 text的取值类型\\begin{cases}\"years\" & 表示以“年”为基本单位\\\\\"quarters\"&表示以“季”为基本单位\\\\\"months\" &表示以“月\"为基本单位\\\\\"weeks\"& 表示以“周”为基本单位\\\\\"days\"&表示以“天”为基本单位\\\\\"hours\"&表示以“小时”为基本单位\\\\\"minutes\"&表示以“分钟”为基本单位\\\\\"seconds\"&表示以“秒”为基本单位\\\\\"millisecond\"&表示以“毫秒”为基本单位\\end{cases} text的取值类型⎩⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎧​\"years\"\"quarters\"\"months\"\"weeks\"\"days\"\"hours\"\"minutes\"\"seconds\"\"millisecond\"​表示以“年”为基本单位表示以“季”为基本单位表示以“月\"为基本单位表示以“周”为基本单位表示以“天”为基本单位表示以“小时”为基本单位表示以“分钟”为基本单位表示以“秒”为基本单位表示以“毫秒”为基本单位​\n    \n8.  减少日期的日期函数（`“dateSubtract`”）：减少日期的日期，最后一个是判据\n    \n    语法：`dateSubtract(date,number,text)`\n    \n    说明：类似上面的dateAdd函数。\n    \n9.  设置日期格式函数（“`formatDate`”）：使用“时刻”标准时间格式字符串，设置日期格式，返回的是一个`字符串`\n    \n    语法：`formatDate(date,text)`\n    \n    例子：\n    \n    ```cpp\n    formatDate(now(), \"MMMM D YYYY, HH:mm\") == March 30 2010, 12:00\n    formatDate(now(), \"YYYY/MM/DD, HH:mm\") == 2010/03/30, 12:00\n    formatDate(now(), \"MM/DD/YYYY, HH:mm\") == 03/30/2010, 12:00\n    formatDate(now(), \"HH:mm A\") == 12:00 PM\n    formatDate(now(), \"M/D/YY\") == 3/30/10\n    ```\n    \n10.  返回”给定日期“所用单位函数下的数字\n    所 用 的 单 位 函 数 { 分 钟 函 数 （ m i n u t e ） { 返 回 一 个 0 到 59 之 间 的 整 数 ， 对 应 于 给 定 日 期 的 分 钟 数 语 法 ： m i n u t e ( d a t e ) 小 时 函 数 （ h o u r ） { 返 回 一 个 0 到 23 之 间 的 整 数 ， 对 应 于 给 定 日 期 的 小 时 数 语 法 ： h o u r ( d a t e ) 星 期 函 数 （ d a y ） { 返 回 一 个 0 到 6 之 间 的 整 数 ， 对 应 于 给 定 的 日 期 。 0 代 表 星 期 日 ， 1 代 表 星 期 一 等 等 语 法 ： d a y ( d a t e ) 日 期 函 数 （ d a t e ） { 返 回 一 个 1 到 31 之 间 的 整 数 , 对 应 于 给 定 日 期 语 法 ： d a t e ( d a t e ) 月 函 数 （ m o n t h ） { 返 回 一 个 0 到 11 之 间 的 整 数 ， 0 对 应 于 1 月 ， 1 对 应 于 2 月 等 等 语 法 ： m o n t h ( d a t e ) 年 份 函 数 （ y e a r ） { 返 回 给 定 日 期 的 年 份 语 法 ： y e a r ( d a t e ) 所用的单位函数\\begin{cases} 分钟函数（minute）\\begin{cases}返回一个0到59之间的整数，对应于给定日期的分钟数\\\\语法：minute(date)\\end{cases}\\\\ 小时函数（hour）\\begin{cases}返回一个0到23之间的整数，对应于给定日期的小时数\\\\语法：hour(date)\\end{cases}\\\\ 星期函数（day）\\begin{cases}返回一个0到6之间的整数，对应于给定的日期。0代表星期日，1代表星期一等等\\\\语法：day(date)\\end{cases}\\\\ 日期函数（date）\\begin{cases}返回一个1到31之间的整数,对应于给定日期\\\\语法：date(date)\\end{cases}\\\\ 月函数（month）\\begin{cases}返回一个0到11之间的整数，0对应于1月，1对应于2月等等\\\\语法：month(date)\\end{cases}\\\\ 年份函数（year）\\begin{cases}返回给定日期的年份\\\\语法：year(date)\\\\\\end{cases} \\end{cases} 所用的单位函数⎩⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎧​分钟函数（minute）{返回一个0到59之间的整数，对应于给定日期的分钟数语法：minute(date)​小时函数（hour）{返回一个0到23之间的整数，对应于给定日期的小时数语法：hour(date)​星期函数（day）{返回一个0到6之间的整数，对应于给定的日期。0代表星期日，1代表星期一等等语法：day(date)​日期函数（date）{返回一个1到31之间的整数,对应于给定日期语法：date(date)​月函数（month）{返回一个0到11之间的整数，0对应于1月，1对应于2月等等语法：month(date)​年份函数（year）{返回给定日期的年份语法：year(date)\n\n\n# 8 参考资料\n自用跳转连接：[ob]()， [blog]()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/🚀技能/notion/notion函数详解.md","raw":"---\ntitle: notion函数详解\ndate: '2022-06-23 20:53'\ncategories:\n  - \"\\U0001F680技能\"\n  - notion\ntags:\n  - notion\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206200917436.jpg'\nabbrlink: 49277\n---\n\n\n[notion多条件formula - CSDN](https://www.csdn.net/tags/NtzaggysMDE2OTctYmxvZwO0O0OO0O0O.html)\n\n\n# 1 一、属性（列名-properties）\n\n1.  prop(“属性”) 返回每个条目的“属性值”，点击即可用对应的格式插入到公式中。\n    \n2.  公式中的四种方式\n    \n    四 种 格 式 { 数 字 日 期 字 符 串 复 选 框 四种格式\\begin{cases} 数字 & \\\\ 日期 & \\\\字符串 &\\\\复选框 & \\end{cases} 四种格式⎩⎪⎪⎪⎨⎪⎪⎪⎧​数字日期字符串复选框​​\n    \nfloor((prop(\"小时\") + prop(\"分钟\") / 60) * 100) / 100\n\n# 2 二、常量（constants）\n\n常 量 { e 自 然 对 数 的 底 数 p i 圆 周 率 t r u e 真 f l a s e 假 常量\\begin{cases} e &自然对数的底数 \\\\ pi &圆周率 \\\\true &真\\\\flase &假 \\end{cases} 常量⎩⎪⎪⎪⎨⎪⎪⎪⎧​epitrueflase​自然对数的底数圆周率真假​\n\n# 3 三、基本运算\n\n1.  if语法（“`if`”）：进行条件判断，在两个选项（要为同一格式）中选择一个。\n    \n    语法：\n    \n    -   `boolean?value:value`\n    -   `if(boolean,value,value)`\n    \n    补充：在\"boolean\"不能填写0或者1；value中，true（真）为1，false（假）为0；\n    \n2.  加法（\"`+`“或\"`add`\"）：把两个数字或字符串相加，并返回它们的值\n    \n    语法：\n    \n    -   `value+value`\n    -   `add(value,value)`\n    \n    说明：value可以是数字或字符串，为字符串时要加上双引号\n    \n3.  减法（”`-`“或“`subtract`”）：将两个数字相减，并返回它们的值\n    \n    语法：\n    \n    -   `number-number`\n    -   `subtract(number,number)`\n4.  乘法（”`*`“或“`multiply`”）：将两个数字相乘，并返回它们的值\n    \n    语法：\n    \n    -   `number*number`\n    -   `multiply(number,number)`\n5.  除法（”`/` “或\"`divide`\"）：将两个数字相乘，并返回他们的值\n    \n    语法：\n    \n    -   `number/number`\n    -   `divide(number,number)`\n6.  绝对值（\"`abs`\"）：返回数的绝对值\n    \n    语法：`abs(number)`\n    \n7.  求余运算（”`%`“或\"`mod`\"）：把两个数进行求余运算，并返回它们的值\n    \n    语法：\n    \n    -   `number%number`\n    -   `mod(number,number)`\n8.  ”四舍五入“（”`round`“）：对数字进行”四舍五入“\n    \n    语法：`round(number)`\n    \n    说明：默认情况下只保留整数。要保留n位小数时，应使用\n    \n    r o u n d ( n u m b e r ∗ 1 0 n ) / 1 0 n round(number*10^n)/10^n round(number∗10n)/10n\n    \n9.  一元负数（”`unaryminus`“或“`-`”）：对一个数进行取它的负数\n    \n    语法：\n    \n    `-number`\n    \n    `unaryminus(number)`\n    \n    如：-3==unaryminus(3)\n    \n10.  一元加号（“`+`”或“`unaryPlus`”）：将参数转化为数字。\n    \n    语法：\n    \n    `+value`\n    \n    `unaryPlus(value)`\n    \n    补充：可以将true转化为1，false转化为0\n    \n\n# 4 四、关系逻辑判断\n\n1.  关系判断\n    -   大于 >\n    -   小于 <\n    -   等于 ==\n    -   大于等于 >=\n    -   小于等于 <=\n    -   不等于 !=\n2.  逻辑判断\n    -   逻辑“`非`”：对逻辑参数进行否定\n        \n        语法：\n        \n        `not boolean`\n        \n        `not (boolean)`\n        \n    -   逻辑“`与`”：对逻辑参数进行“与”运算，`“一假全假”`\n        \n        语法：\n        \n        `boolean and boolean`\n        \n        `and(boolean,boolean)`\n        \n    -   逻辑“或”：对逻辑参数进行“或”运算，`“一真全真”`\n        \n        语法：\n        \n        `boolean or boolean`\n        \n        `or(boolean,boolean)`\n        \n\n# 5 五、字符串函数\n\n1.  连接函数（“`concat`”）：将字符串进行连接\n    \n    语法：\n    \n    `concat(text...)`\n    \n    `text+text+...`\n    \n2.  插符函数（“`join`”）：插入字符函数，在其余叁数之间插入第一个参数并返回它们的连接字符串\n    \n    语法：`join(text...)`\n    \n    例如：join(\"-\",“a”,“b”,“c”)==“a-b-c”\n    \n3.  切片函数（”`slice`“）：从字符串中提取子字符串（包括开头索引，不包括结尾索引[start,end)）\n    \n    语法：\n    \n    -   `slice(text,number)`\n    -   `slice(text,number1,number2)`\n    \n    说明:只有一个数字时，就是从这个索引数字开始到结束；当有两个数字时（第二个数要大于第一个数，不然不会显示），从字符串中提取子字符串，包含开头索引，不包含结束索引。\n    \n    注意：字符串的索引值是从0开始的\n    \n4.  长度函数（”`length`“）：返回字符串的长度，返回值是一个数值。\n    \n    语法：`length(text)`\n    \n5.  转化函数（”`format`“）：将其他格式的参数转化为字符串。\n    \n    语法：`format(value)`\n    \n6.  转化函数（”`toNumber`“）：将其他格式的参数转化数字\n    \n    语法：`toNumber(value)`\n    \n    说明：\n    \n    -   可以把字符串类型转化为数字，如：\"123\"到数字123\n    -   可以把日期类型转化时间戳，Jan 18, 2021 7:28 PM→1610969340000\n    -   可以把复选框类型转化为数字，true为1，false为0\n    -   也可以把数字类型转化为数字\n7.  包含判断函数（”`contains`“）：包含判断函数，返回一个boolean值，\n    \n    语法：`contains(text1,text2)`\n    \n    说明：如果text1中包含text2，则返回true；反之，返回false\n    \n8.  替代函数：\n    \n    -   “`replace`”：用新值替换正则表达式的第一个匹配项\n        \n        语法：`replace(number/text/boolean,text1,text2)`\n        \n        说明：text表示字符串类型，text1表示要代替的值，text2表示新的值\n        \n    -   \"`replaceAll`”：用新值代替正则表达式的所有匹配项\n        \n        语法：`replaceAll(number/text/boolean,text1,text2)`\n        \n        说明：text表示字符串类型，text1表示要代替的值，text2表示新的值\n        \n9.  检验函数（“`test`”）：判断一个字符串是否与正则表达式匹配，返回一个boolean值\n    \n    语法：`test(number/text/boolean,text)`\n    \n10.  “验空”函数（”`empty`“）：判断一个值是否为空\n    \n    语法：`empty(number/text/boolean/date)`\n    \n    说明：默认情况下，数字为0表示空，字符串以\"\"表示空值，boolean值以false表示空值\n    \n\n# 6 六、数学函数\n\n1.  绝对值函数（“`abs`”)：返回一个数的绝对值\n    \n    语法：`abs(number)`\n    \n2.  开算术平方根运算（”`sqrt`“）：返回一个数的算术平方根\n    \n    语法：`sqrt(number)`\n    \n    说明：number要为非负数\n    \n3.  开立方根（”`cbrt`“)：返回一个数的立方根\n    \n    语法：`cbrt(number)`\n    \n4.  幂次运算（”`^`“或\"`pow`\"）：将两个数字进行指数运算，并返回它们的值\n    \n    语法：\n    \n    -   `number^number`\n    -   `pow(number,number)`\n    \n    补充:\n    \n    自然指数运算（”`exp`“）：返回e^x的值，其中x为参数，e为常数\n    \n    语法：`exp(number)`\n    \n5.  对数运算：notion目前只支持三种对数运算\n    \n    三 种 对 数 运 算 { l n ( n u m b e r ) 返 回 一 个 数 的 自 然 对 数 l o g 10 ( n u m b e r ) 返 回 这 个 数 以 10 为 底 对 数 的 值 l o g 2 ( n u m b e r ) 返 回 这 个 数 以 2 为 底 对 数 的 值 三种对数运算\\begin{cases}ln(number) &返回一个数的自然对数\\\\log_{10}(number)&返回这个数以10为底对数的值\\\\log_2(number) &返回这个数以2为底对数的值\\end{cases} 三种对数运算⎩⎪⎨⎪⎧​ln(number)log10​(number)log2​(number)​返回一个数的自然对数返回这个数以10为底对数的值返回这个数以2为底对数的值​\n    \n6.  向上取整函数（“`ceil`”）：返回大于或等于这个数字的最小整数\n    \n    语法：`ceil(number)`\n    \n7.  向下取整函数（“`floor`”）：返回小于或等于这个数字的最大整数\n    \n    语法：`floor(number)`\n    \n8.  最大/小值函数\n    \n    -   最大值函数（“`max`”）：返回数的最大值\n        \n        语法：`max(number1,number2,...)`\n        \n    -   最小值函数（“`min`”）：返回数的最小值\n        \n        语法：`min(number1,number2,...)`\n        \n9.  符号函数（“`sign`”）：返回数的符号，指明数的符号是为正、负或零\n    \n    语法：`sign(number)`\n    \n    说明：数字为正时，返回1；数字为负时，返回-1；数字为0时，返回0\n    \n\n# 7 七、日期函数\n\n1.  返回时间差函数（`dateBetween`）：返回两个日期之间的时间差，返回值是一个数字。\n    \n    语法：`dateBetween(date,date,text)`\n    \n    说明：`date`表示日期；`text`表示”时间差“的基本单位，类型为字符串，取值有：年、季度、月、周、天、小时、分钟、秒、或毫秒。\n    \n    t e x t 的 取 值 类 型 { \" y e a r s \" 表 示 以 “ 年 ” 为 基 本 单 位 \" q u a r t e r s \" 表 示 以 “ 季 ” 为 基 本 单 位 \" m o n t h s \" 表 示 以 “ 月 \" 为 基 本 单 位 \" w e e k s \" 表 示 以 “ 周 ” 为 基 本 单 位 \" d a y s \" 表 示 以 “ 天 ” 为 基 本 单 位 \" h o u r s \" 表 示 以 “ 小 时 ” 为 基 本 单 位 \" m i n u t e s \" 表 示 以 “ 分 钟 ” 为 基 本 单 位 \" s e c o n d s \" 表 示 以 “ 秒 ” 为 基 本 单 位 \" m i l l i s e c o n d \" 表 示 以 “ 毫 秒 ” 为 基 本 单 位 text的取值类型\\begin{cases}\"years\" & 表示以“年”为基本单位\\\\\"quarters\"&表示以“季”为基本单位\\\\\"months\" &表示以“月\"为基本单位\\\\\"weeks\"& 表示以“周”为基本单位\\\\\"days\"&表示以“天”为基本单位\\\\\"hours\"&表示以“小时”为基本单位\\\\\"minutes\"&表示以“分钟”为基本单位\\\\\"seconds\"&表示以“秒”为基本单位\\\\\"millisecond\"&表示以“毫秒”为基本单位\\end{cases} text的取值类型⎩⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎧​\"years\"\"quarters\"\"months\"\"weeks\"\"days\"\"hours\"\"minutes\"\"seconds\"\"millisecond\"​表示以“年”为基本单位表示以“季”为基本单位表示以“月\"为基本单位表示以“周”为基本单位表示以“天”为基本单位表示以“小时”为基本单位表示以“分钟”为基本单位表示以“秒”为基本单位表示以“毫秒”为基本单位​\n    \n2.  获取当前日期函数（`now`):返回当前的日期和时间\n    \n    语法：`now()`\n    \n3.  日期范围开始函数（“`start`”）：返回一个日期范围的开始\n    \n    语法：`start(date)`\n    \n4.  日期范围结束函数（“`end`”）：返回一个日期范围的结束\n    \n    语法：`end(date)`\n    \n5.  日期到时间戳函数（“`timestamp`”）：返回来自Unix毫秒时间戳的整数，对应于自1970年1月1日起的毫秒数，返回值是`数值`\n    \n    语法：`timestamp(date)`\n    \n    说明：把日期格式的`日期转化`为数值类型的`时间戳`\n    \n6.  时间戳到日期函数（“`fromTimestamp`”）：返回由Unix毫秒时间戳构建的日期，对应于自1970年1月1日起的毫秒数，返回值是`日期`\n    \n    语法：`fromTimestamp(number)`\n    \n    说明：把数值类型的`时间戳转化为日期`类型的日期\n    \n7.  增加日期判据（argument）函数（“`dateAdd`”）：增加到日期，最后一个是单位判据\n    \n    语法：`dateAdd(date,number,text)`\n    \n    说明：`date`表示日期；number表示日期差；`text`表示”时间差“的基本单位，类型为字符串，取值有：年、季度、月、周、天、小时、分钟、秒、或毫秒。\n    \n    t e x t 的 取 值 类 型 { \" y e a r s \" 表 示 以 “ 年 ” 为 基 本 单 位 \" q u a r t e r s \" 表 示 以 “ 季 ” 为 基 本 单 位 \" m o n t h s \" 表 示 以 “ 月 \" 为 基 本 单 位 \" w e e k s \" 表 示 以 “ 周 ” 为 基 本 单 位 \" d a y s \" 表 示 以 “ 天 ” 为 基 本 单 位 \" h o u r s \" 表 示 以 “ 小 时 ” 为 基 本 单 位 \" m i n u t e s \" 表 示 以 “ 分 钟 ” 为 基 本 单 位 \" s e c o n d s \" 表 示 以 “ 秒 ” 为 基 本 单 位 \" m i l l i s e c o n d \" 表 示 以 “ 毫 秒 ” 为 基 本 单 位 text的取值类型\\begin{cases}\"years\" & 表示以“年”为基本单位\\\\\"quarters\"&表示以“季”为基本单位\\\\\"months\" &表示以“月\"为基本单位\\\\\"weeks\"& 表示以“周”为基本单位\\\\\"days\"&表示以“天”为基本单位\\\\\"hours\"&表示以“小时”为基本单位\\\\\"minutes\"&表示以“分钟”为基本单位\\\\\"seconds\"&表示以“秒”为基本单位\\\\\"millisecond\"&表示以“毫秒”为基本单位\\end{cases} text的取值类型⎩⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎧​\"years\"\"quarters\"\"months\"\"weeks\"\"days\"\"hours\"\"minutes\"\"seconds\"\"millisecond\"​表示以“年”为基本单位表示以“季”为基本单位表示以“月\"为基本单位表示以“周”为基本单位表示以“天”为基本单位表示以“小时”为基本单位表示以“分钟”为基本单位表示以“秒”为基本单位表示以“毫秒”为基本单位​\n    \n8.  减少日期的日期函数（`“dateSubtract`”）：减少日期的日期，最后一个是判据\n    \n    语法：`dateSubtract(date,number,text)`\n    \n    说明：类似上面的dateAdd函数。\n    \n9.  设置日期格式函数（“`formatDate`”）：使用“时刻”标准时间格式字符串，设置日期格式，返回的是一个`字符串`\n    \n    语法：`formatDate(date,text)`\n    \n    例子：\n    \n    ```cpp\n    formatDate(now(), \"MMMM D YYYY, HH:mm\") == March 30 2010, 12:00\n    formatDate(now(), \"YYYY/MM/DD, HH:mm\") == 2010/03/30, 12:00\n    formatDate(now(), \"MM/DD/YYYY, HH:mm\") == 03/30/2010, 12:00\n    formatDate(now(), \"HH:mm A\") == 12:00 PM\n    formatDate(now(), \"M/D/YY\") == 3/30/10\n    ```\n    \n10.  返回”给定日期“所用单位函数下的数字\n    所 用 的 单 位 函 数 { 分 钟 函 数 （ m i n u t e ） { 返 回 一 个 0 到 59 之 间 的 整 数 ， 对 应 于 给 定 日 期 的 分 钟 数 语 法 ： m i n u t e ( d a t e ) 小 时 函 数 （ h o u r ） { 返 回 一 个 0 到 23 之 间 的 整 数 ， 对 应 于 给 定 日 期 的 小 时 数 语 法 ： h o u r ( d a t e ) 星 期 函 数 （ d a y ） { 返 回 一 个 0 到 6 之 间 的 整 数 ， 对 应 于 给 定 的 日 期 。 0 代 表 星 期 日 ， 1 代 表 星 期 一 等 等 语 法 ： d a y ( d a t e ) 日 期 函 数 （ d a t e ） { 返 回 一 个 1 到 31 之 间 的 整 数 , 对 应 于 给 定 日 期 语 法 ： d a t e ( d a t e ) 月 函 数 （ m o n t h ） { 返 回 一 个 0 到 11 之 间 的 整 数 ， 0 对 应 于 1 月 ， 1 对 应 于 2 月 等 等 语 法 ： m o n t h ( d a t e ) 年 份 函 数 （ y e a r ） { 返 回 给 定 日 期 的 年 份 语 法 ： y e a r ( d a t e ) 所用的单位函数\\begin{cases} 分钟函数（minute）\\begin{cases}返回一个0到59之间的整数，对应于给定日期的分钟数\\\\语法：minute(date)\\end{cases}\\\\ 小时函数（hour）\\begin{cases}返回一个0到23之间的整数，对应于给定日期的小时数\\\\语法：hour(date)\\end{cases}\\\\ 星期函数（day）\\begin{cases}返回一个0到6之间的整数，对应于给定的日期。0代表星期日，1代表星期一等等\\\\语法：day(date)\\end{cases}\\\\ 日期函数（date）\\begin{cases}返回一个1到31之间的整数,对应于给定日期\\\\语法：date(date)\\end{cases}\\\\ 月函数（month）\\begin{cases}返回一个0到11之间的整数，0对应于1月，1对应于2月等等\\\\语法：month(date)\\end{cases}\\\\ 年份函数（year）\\begin{cases}返回给定日期的年份\\\\语法：year(date)\\\\\\end{cases} \\end{cases} 所用的单位函数⎩⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎧​分钟函数（minute）{返回一个0到59之间的整数，对应于给定日期的分钟数语法：minute(date)​小时函数（hour）{返回一个0到23之间的整数，对应于给定日期的小时数语法：hour(date)​星期函数（day）{返回一个0到6之间的整数，对应于给定的日期。0代表星期日，1代表星期一等等语法：day(date)​日期函数（date）{返回一个1到31之间的整数,对应于给定日期语法：date(date)​月函数（month）{返回一个0到11之间的整数，0对应于1月，1对应于2月等等语法：month(date)​年份函数（year）{返回给定日期的年份语法：year(date)\n\n\n# 8 参考资料\n自用跳转连接：[ob]()， [blog]()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"🚀技能/notion/notion函数详解","published":1,"updated":"2022-07-12T09:02:14.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fj3001te0mg7lwehnbv","content":"<p><a href=\"https://www.csdn.net/tags/NtzaggysMDE2OTctYmxvZwO0O0OO0O0O.html\">notion多条件formula - CSDN</a></p>\n<h1 id=\"1-一-属性列名-properties\"><a class=\"markdownIt-Anchor\" href=\"#1-一-属性列名-properties\"></a> 1 一、属性（列名-properties）</h1>\n<ol>\n<li>\n<p>prop(“属性”) 返回每个条目的“属性值”，点击即可用对应的格式插入到公式中。</p>\n</li>\n<li>\n<p>公式中的四种方式</p>\n<p>四 种 格 式 { 数 字 日 期 字 符 串 复 选 框 四种格式\\begin{cases} 数字 &amp; \\ 日期 &amp; \\字符串 &amp;\\复选框 &amp; \\end{cases} 四种格式⎩⎪⎪⎪⎨⎪⎪⎪⎧​数字日期字符串复选框​​</p>\n</li>\n</ol>\n<p>floor((prop(“小时”) + prop(“分钟”) / 60) * 100) / 100</p>\n<h1 id=\"2-二-常量constants\"><a class=\"markdownIt-Anchor\" href=\"#2-二-常量constants\"></a> 2 二、常量（constants）</h1>\n<p>常 量 { e 自 然 对 数 的 底 数 p i 圆 周 率 t r u e 真 f l a s e 假 常量\\begin{cases} e &amp;自然对数的底数 \\ pi &amp;圆周率 \\true &amp;真\\flase &amp;假 \\end{cases} 常量⎩⎪⎪⎪⎨⎪⎪⎪⎧​epitrueflase​自然对数的底数圆周率真假​</p>\n<h1 id=\"3-三-基本运算\"><a class=\"markdownIt-Anchor\" href=\"#3-三-基本运算\"></a> 3 三、基本运算</h1>\n<ol>\n<li>\n<p>if语法（“<code>if</code>”）：进行条件判断，在两个选项（要为同一格式）中选择一个。</p>\n<p>语法：</p>\n<ul>\n<li><code>boolean?value:value</code></li>\n<li><code>if(boolean,value,value)</code></li>\n</ul>\n<p>补充：在\"boolean\"不能填写0或者1；value中，true（真）为1，false（假）为0；</p>\n</li>\n<li>\n<p>加法（\"<code>+</code>“或\"<code>add</code>\"）：把两个数字或字符串相加，并返回它们的值</p>\n<p>语法：</p>\n<ul>\n<li><code>value+value</code></li>\n<li><code>add(value,value)</code></li>\n</ul>\n<p>说明：value可以是数字或字符串，为字符串时要加上双引号</p>\n</li>\n<li>\n<p>减法（”<code>-</code>“或“<code>subtract</code>”）：将两个数字相减，并返回它们的值</p>\n<p>语法：</p>\n<ul>\n<li><code>number-number</code></li>\n<li><code>subtract(number,number)</code></li>\n</ul>\n</li>\n<li>\n<p>乘法（”<code>*</code>“或“<code>multiply</code>”）：将两个数字相乘，并返回它们的值</p>\n<p>语法：</p>\n<ul>\n<li><code>number*number</code></li>\n<li><code>multiply(number,number)</code></li>\n</ul>\n</li>\n<li>\n<p>除法（”<code>/</code> “或\"<code>divide</code>\"）：将两个数字相乘，并返回他们的值</p>\n<p>语法：</p>\n<ul>\n<li><code>number/number</code></li>\n<li><code>divide(number,number)</code></li>\n</ul>\n</li>\n<li>\n<p>绝对值（\"<code>abs</code>\"）：返回数的绝对值</p>\n<p>语法：<code>abs(number)</code></p>\n</li>\n<li>\n<p>求余运算（”<code>%</code>“或\"<code>mod</code>\"）：把两个数进行求余运算，并返回它们的值</p>\n<p>语法：</p>\n<ul>\n<li><code>number%number</code></li>\n<li><code>mod(number,number)</code></li>\n</ul>\n</li>\n<li>\n<p>”四舍五入“（”<code>round</code>“）：对数字进行”四舍五入“</p>\n<p>语法：<code>round(number)</code></p>\n<p>说明：默认情况下只保留整数。要保留n位小数时，应使用</p>\n<p>r o u n d ( n u m b e r ∗ 1 0 n ) / 1 0 n round(number*10<sup>n)/10</sup>n round(number∗10n)/10n</p>\n</li>\n<li>\n<p>一元负数（”<code>unaryminus</code>“或“<code>-</code>”）：对一个数进行取它的负数</p>\n<p>语法：</p>\n<p><code>-number</code></p>\n<p><code>unaryminus(number)</code></p>\n<p>如：-3==unaryminus(3)</p>\n</li>\n<li>\n<p>一元加号（“<code>+</code>”或“<code>unaryPlus</code>”）：将参数转化为数字。</p>\n</li>\n</ol>\n<pre><code class=\"hljs\">语法：\n\n`+value`\n\n`unaryPlus(value)`\n\n补充：可以将true转化为1，false转化为0\n</code></pre>\n<h1 id=\"4-四-关系逻辑判断\"><a class=\"markdownIt-Anchor\" href=\"#4-四-关系逻辑判断\"></a> 4 四、关系逻辑判断</h1>\n<ol>\n<li>关系判断\n<ul>\n<li>大于 &gt;</li>\n<li>小于 &lt;</li>\n<li>等于 ==</li>\n<li>大于等于 &gt;=</li>\n<li>小于等于 &lt;=</li>\n<li>不等于 !=</li>\n</ul>\n</li>\n<li>逻辑判断\n<ul>\n<li>\n<p>逻辑“<code>非</code>”：对逻辑参数进行否定</p>\n<p>语法：</p>\n<p><code>not boolean</code></p>\n<p><code>not (boolean)</code></p>\n</li>\n<li>\n<p>逻辑“<code>与</code>”：对逻辑参数进行“与”运算，<code>“一假全假”</code></p>\n<p>语法：</p>\n<p><code>boolean and boolean</code></p>\n<p><code>and(boolean,boolean)</code></p>\n</li>\n<li>\n<p>逻辑“或”：对逻辑参数进行“或”运算，<code>“一真全真”</code></p>\n<p>语法：</p>\n<p><code>boolean or boolean</code></p>\n<p><code>or(boolean,boolean)</code></p>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"5-五-字符串函数\"><a class=\"markdownIt-Anchor\" href=\"#5-五-字符串函数\"></a> 5 五、字符串函数</h1>\n<ol>\n<li>\n<p>连接函数（“<code>concat</code>”）：将字符串进行连接</p>\n<p>语法：</p>\n<p><code>concat(text...)</code></p>\n<p><code>text+text+...</code></p>\n</li>\n<li>\n<p>插符函数（“<code>join</code>”）：插入字符函数，在其余叁数之间插入第一个参数并返回它们的连接字符串</p>\n<p>语法：<code>join(text...)</code></p>\n<p>例如：join(\"-\",“a”,“b”,“c”)==“a-b-c”</p>\n</li>\n<li>\n<p>切片函数（”<code>slice</code>“）：从字符串中提取子字符串（包括开头索引，不包括结尾索引[start,end)）</p>\n<p>语法：</p>\n<ul>\n<li><code>slice(text,number)</code></li>\n<li><code>slice(text,number1,number2)</code></li>\n</ul>\n<p>说明:只有一个数字时，就是从这个索引数字开始到结束；当有两个数字时（第二个数要大于第一个数，不然不会显示），从字符串中提取子字符串，包含开头索引，不包含结束索引。</p>\n<p>注意：字符串的索引值是从0开始的</p>\n</li>\n<li>\n<p>长度函数（”<code>length</code>“）：返回字符串的长度，返回值是一个数值。</p>\n<p>语法：<code>length(text)</code></p>\n</li>\n<li>\n<p>转化函数（”<code>format</code>“）：将其他格式的参数转化为字符串。</p>\n<p>语法：<code>format(value)</code></p>\n</li>\n<li>\n<p>转化函数（”<code>toNumber</code>“）：将其他格式的参数转化数字</p>\n<p>语法：<code>toNumber(value)</code></p>\n<p>说明：</p>\n<ul>\n<li>可以把字符串类型转化为数字，如：\"123\"到数字123</li>\n<li>可以把日期类型转化时间戳，Jan 18, 2021 7:28 PM→1610969340000</li>\n<li>可以把复选框类型转化为数字，true为1，false为0</li>\n<li>也可以把数字类型转化为数字</li>\n</ul>\n</li>\n<li>\n<p>包含判断函数（”<code>contains</code>“）：包含判断函数，返回一个boolean值，</p>\n<p>语法：<code>contains(text1,text2)</code></p>\n<p>说明：如果text1中包含text2，则返回true；反之，返回false</p>\n</li>\n<li>\n<p>替代函数：</p>\n<ul>\n<li>\n<p>“<code>replace</code>”：用新值替换正则表达式的第一个匹配项</p>\n<p>语法：<code>replace(number/text/boolean,text1,text2)</code></p>\n<p>说明：text表示字符串类型，text1表示要代替的值，text2表示新的值</p>\n</li>\n<li>\n<p>\"<code>replaceAll</code>”：用新值代替正则表达式的所有匹配项</p>\n<p>语法：<code>replaceAll(number/text/boolean,text1,text2)</code></p>\n<p>说明：text表示字符串类型，text1表示要代替的值，text2表示新的值</p>\n</li>\n</ul>\n</li>\n<li>\n<p>检验函数（“<code>test</code>”）：判断一个字符串是否与正则表达式匹配，返回一个boolean值</p>\n<p>语法：<code>test(number/text/boolean,text)</code></p>\n</li>\n<li>\n<p>“验空”函数（”<code>empty</code>“）：判断一个值是否为空</p>\n</li>\n</ol>\n<pre><code class=\"hljs\">语法：`empty(number/text/boolean/date)`\n\n说明：默认情况下，数字为0表示空，字符串以\"\"表示空值，boolean值以false表示空值\n</code></pre>\n<h1 id=\"6-六-数学函数\"><a class=\"markdownIt-Anchor\" href=\"#6-六-数学函数\"></a> 6 六、数学函数</h1>\n<ol>\n<li>\n<p>绝对值函数（“<code>abs</code>”)：返回一个数的绝对值</p>\n<p>语法：<code>abs(number)</code></p>\n</li>\n<li>\n<p>开算术平方根运算（”<code>sqrt</code>“）：返回一个数的算术平方根</p>\n<p>语法：<code>sqrt(number)</code></p>\n<p>说明：number要为非负数</p>\n</li>\n<li>\n<p>开立方根（”<code>cbrt</code>“)：返回一个数的立方根</p>\n<p>语法：<code>cbrt(number)</code></p>\n</li>\n<li>\n<p>幂次运算（”<code>^</code>“或\"<code>pow</code>\"）：将两个数字进行指数运算，并返回它们的值</p>\n<p>语法：</p>\n<ul>\n<li><code>number^number</code></li>\n<li><code>pow(number,number)</code></li>\n</ul>\n<p>补充:</p>\n<p>自然指数运算（”<code>exp</code>“）：返回e^x的值，其中x为参数，e为常数</p>\n<p>语法：<code>exp(number)</code></p>\n</li>\n<li>\n<p>对数运算：notion目前只支持三种对数运算</p>\n<p>三 种 对 数 运 算 { l n ( n u m b e r ) 返 回 一 个 数 的 自 然 对 数 l o g 10 ( n u m b e r ) 返 回 这 个 数 以 10 为 底 对 数 的 值 l o g 2 ( n u m b e r ) 返 回 这 个 数 以 2 为 底 对 数 的 值 三种对数运算\\begin{cases}ln(number) &amp;返回一个数的自然对数\\log_{10}(number)&amp;返回这个数以10为底对数的值\\log_2(number) &amp;返回这个数以2为底对数的值\\end{cases} 三种对数运算⎩⎪⎨⎪⎧​ln(number)log10​(number)log2​(number)​返回一个数的自然对数返回这个数以10为底对数的值返回这个数以2为底对数的值​</p>\n</li>\n<li>\n<p>向上取整函数（“<code>ceil</code>”）：返回大于或等于这个数字的最小整数</p>\n<p>语法：<code>ceil(number)</code></p>\n</li>\n<li>\n<p>向下取整函数（“<code>floor</code>”）：返回小于或等于这个数字的最大整数</p>\n<p>语法：<code>floor(number)</code></p>\n</li>\n<li>\n<p>最大/小值函数</p>\n<ul>\n<li>\n<p>最大值函数（“<code>max</code>”）：返回数的最大值</p>\n<p>语法：<code>max(number1,number2,...)</code></p>\n</li>\n<li>\n<p>最小值函数（“<code>min</code>”）：返回数的最小值</p>\n<p>语法：<code>min(number1,number2,...)</code></p>\n</li>\n</ul>\n</li>\n<li>\n<p>符号函数（“<code>sign</code>”）：返回数的符号，指明数的符号是为正、负或零</p>\n<p>语法：<code>sign(number)</code></p>\n<p>说明：数字为正时，返回1；数字为负时，返回-1；数字为0时，返回0</p>\n</li>\n</ol>\n<h1 id=\"7-七-日期函数\"><a class=\"markdownIt-Anchor\" href=\"#7-七-日期函数\"></a> 7 七、日期函数</h1>\n<ol>\n<li>\n<p>返回时间差函数（<code>dateBetween</code>）：返回两个日期之间的时间差，返回值是一个数字。</p>\n<p>语法：<code>dateBetween(date,date,text)</code></p>\n<p>说明：<code>date</code>表示日期；<code>text</code>表示”时间差“的基本单位，类型为字符串，取值有：年、季度、月、周、天、小时、分钟、秒、或毫秒。</p>\n<p>t e x t 的 取 值 类 型 { \" y e a r s \" 表 示 以 “ 年 ” 为 基 本 单 位 \" q u a r t e r s \" 表 示 以 “ 季 ” 为 基 本 单 位 \" m o n t h s \" 表 示 以 “ 月 \" 为 基 本 单 位 \" w e e k s \" 表 示 以 “ 周 ” 为 基 本 单 位 \" d a y s \" 表 示 以 “ 天 ” 为 基 本 单 位 \" h o u r s \" 表 示 以 “ 小 时 ” 为 基 本 单 位 \" m i n u t e s \" 表 示 以 “ 分 钟 ” 为 基 本 单 位 \" s e c o n d s \" 表 示 以 “ 秒 ” 为 基 本 单 位 \" m i l l i s e c o n d \" 表 示 以 “ 毫 秒 ” 为 基 本 单 位 text的取值类型\\begin{cases}“years” &amp; 表示以“年”为基本单位\\“quarters”&amp;表示以“季”为基本单位\\“months” &amp;表示以“月\"为基本单位\\“weeks”&amp; 表示以“周”为基本单位\\“days”&amp;表示以“天”为基本单位\\“hours”&amp;表示以“小时”为基本单位\\“minutes”&amp;表示以“分钟”为基本单位\\“seconds”&amp;表示以“秒”为基本单位\\“millisecond”&amp;表示以“毫秒”为基本单位\\end{cases} text的取值类型⎩⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎧​\"years\"“quarters”“months”“weeks”“days”“hours”“minutes”“seconds”\"millisecond\"​表示以“年”为基本单位表示以“季”为基本单位表示以“月\"为基本单位表示以“周”为基本单位表示以“天”为基本单位表示以“小时”为基本单位表示以“分钟”为基本单位表示以“秒”为基本单位表示以“毫秒”为基本单位​</p>\n</li>\n<li>\n<p>获取当前日期函数（<code>now</code>):返回当前的日期和时间</p>\n<p>语法：<code>now()</code></p>\n</li>\n<li>\n<p>日期范围开始函数（“<code>start</code>”）：返回一个日期范围的开始</p>\n<p>语法：<code>start(date)</code></p>\n</li>\n<li>\n<p>日期范围结束函数（“<code>end</code>”）：返回一个日期范围的结束</p>\n<p>语法：<code>end(date)</code></p>\n</li>\n<li>\n<p>日期到时间戳函数（“<code>timestamp</code>”）：返回来自Unix毫秒时间戳的整数，对应于自1970年1月1日起的毫秒数，返回值是<code>数值</code></p>\n<p>语法：<code>timestamp(date)</code></p>\n<p>说明：把日期格式的<code>日期转化</code>为数值类型的<code>时间戳</code></p>\n</li>\n<li>\n<p>时间戳到日期函数（“<code>fromTimestamp</code>”）：返回由Unix毫秒时间戳构建的日期，对应于自1970年1月1日起的毫秒数，返回值是<code>日期</code></p>\n<p>语法：<code>fromTimestamp(number)</code></p>\n<p>说明：把数值类型的<code>时间戳转化为日期</code>类型的日期</p>\n</li>\n<li>\n<p>增加日期判据（argument）函数（“<code>dateAdd</code>”）：增加到日期，最后一个是单位判据</p>\n<p>语法：<code>dateAdd(date,number,text)</code></p>\n<p>说明：<code>date</code>表示日期；number表示日期差；<code>text</code>表示”时间差“的基本单位，类型为字符串，取值有：年、季度、月、周、天、小时、分钟、秒、或毫秒。</p>\n<p>t e x t 的 取 值 类 型 { \" y e a r s \" 表 示 以 “ 年 ” 为 基 本 单 位 \" q u a r t e r s \" 表 示 以 “ 季 ” 为 基 本 单 位 \" m o n t h s \" 表 示 以 “ 月 \" 为 基 本 单 位 \" w e e k s \" 表 示 以 “ 周 ” 为 基 本 单 位 \" d a y s \" 表 示 以 “ 天 ” 为 基 本 单 位 \" h o u r s \" 表 示 以 “ 小 时 ” 为 基 本 单 位 \" m i n u t e s \" 表 示 以 “ 分 钟 ” 为 基 本 单 位 \" s e c o n d s \" 表 示 以 “ 秒 ” 为 基 本 单 位 \" m i l l i s e c o n d \" 表 示 以 “ 毫 秒 ” 为 基 本 单 位 text的取值类型\\begin{cases}“years” &amp; 表示以“年”为基本单位\\“quarters”&amp;表示以“季”为基本单位\\“months” &amp;表示以“月\"为基本单位\\“weeks”&amp; 表示以“周”为基本单位\\“days”&amp;表示以“天”为基本单位\\“hours”&amp;表示以“小时”为基本单位\\“minutes”&amp;表示以“分钟”为基本单位\\“seconds”&amp;表示以“秒”为基本单位\\“millisecond”&amp;表示以“毫秒”为基本单位\\end{cases} text的取值类型⎩⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎧​\"years\"“quarters”“months”“weeks”“days”“hours”“minutes”“seconds”\"millisecond\"​表示以“年”为基本单位表示以“季”为基本单位表示以“月\"为基本单位表示以“周”为基本单位表示以“天”为基本单位表示以“小时”为基本单位表示以“分钟”为基本单位表示以“秒”为基本单位表示以“毫秒”为基本单位​</p>\n</li>\n<li>\n<p>减少日期的日期函数（<code>“dateSubtract</code>”）：减少日期的日期，最后一个是判据</p>\n<p>语法：<code>dateSubtract(date,number,text)</code></p>\n<p>说明：类似上面的dateAdd函数。</p>\n</li>\n<li>\n<p>设置日期格式函数（“<code>formatDate</code>”）：使用“时刻”标准时间格式字符串，设置日期格式，返回的是一个<code>字符串</code></p>\n<p>语法：<code>formatDate(date,text)</code></p>\n<p>例子：</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">formatDate(<span class=\"hljs-built_in\">now</span>(), <span class=\"hljs-string\">\"MMMM D YYYY, HH:mm\"</span>) == March <span class=\"hljs-number\">30</span> <span class=\"hljs-number\">2010</span>, <span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">00</span><br>formatDate(<span class=\"hljs-built_in\">now</span>(), <span class=\"hljs-string\">\"YYYY/MM/DD, HH:mm\"</span>) == <span class=\"hljs-number\">2010</span>/<span class=\"hljs-number\">03</span>/<span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">00</span><br>formatDate(<span class=\"hljs-built_in\">now</span>(), <span class=\"hljs-string\">\"MM/DD/YYYY, HH:mm\"</span>) == <span class=\"hljs-number\">03</span>/<span class=\"hljs-number\">30</span>/<span class=\"hljs-number\">2010</span>, <span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">00</span><br>formatDate(<span class=\"hljs-built_in\">now</span>(), <span class=\"hljs-string\">\"HH:mm A\"</span>) == <span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">00</span> PM<br>formatDate(<span class=\"hljs-built_in\">now</span>(), <span class=\"hljs-string\">\"M/D/YY\"</span>) == <span class=\"hljs-number\">3</span>/<span class=\"hljs-number\">30</span>/<span class=\"hljs-number\">10</span><br></code></pre></td></tr></tbody></table></figure>\n</li>\n<li>\n<p>返回”给定日期“所用单位函数下的数字<br>\n所 用 的 单 位 函 数 { 分 钟 函 数 （ m i n u t e ） { 返 回 一 个 0 到 59 之 间 的 整 数 ， 对 应 于 给 定 日 期 的 分 钟 数 语 法 ： m i n u t e ( d a t e ) 小 时 函 数 （ h o u r ） { 返 回 一 个 0 到 23 之 间 的 整 数 ， 对 应 于 给 定 日 期 的 小 时 数 语 法 ： h o u r ( d a t e ) 星 期 函 数 （ d a y ） { 返 回 一 个 0 到 6 之 间 的 整 数 ， 对 应 于 给 定 的 日 期 。 0 代 表 星 期 日 ， 1 代 表 星 期 一 等 等 语 法 ： d a y ( d a t e ) 日 期 函 数 （ d a t e ） { 返 回 一 个 1 到 31 之 间 的 整 数 , 对 应 于 给 定 日 期 语 法 ： d a t e ( d a t e ) 月 函 数 （ m o n t h ） { 返 回 一 个 0 到 11 之 间 的 整 数 ， 0 对 应 于 1 月 ， 1 对 应 于 2 月 等 等 语 法 ： m o n t h ( d a t e ) 年 份 函 数 （ y e a r ） { 返 回 给 定 日 期 的 年 份 语 法 ： y e a r ( d a t e ) 所用的单位函数\\begin{cases} 分钟函数（minute）\\begin{cases}返回一个0到59之间的整数，对应于给定日期的分钟数\\语法：minute(date)\\end{cases}\\ 小时函数（hour）\\begin{cases}返回一个0到23之间的整数，对应于给定日期的小时数\\语法：hour(date)\\end{cases}\\ 星期函数（day）\\begin{cases}返回一个0到6之间的整数，对应于给定的日期。0代表星期日，1代表星期一等等\\语法：day(date)\\end{cases}\\ 日期函数（date）\\begin{cases}返回一个1到31之间的整数,对应于给定日期\\语法：date(date)\\end{cases}\\ 月函数（month）\\begin{cases}返回一个0到11之间的整数，0对应于1月，1对应于2月等等\\语法：month(date)\\end{cases}\\ 年份函数（year）\\begin{cases}返回给定日期的年份\\语法：year(date)\\\\end{cases} \\end{cases} 所用的单位函数⎩⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎧​分钟函数（minute）{返回一个0到59之间的整数，对应于给定日期的分钟数语法：minute(date)​小时函数（hour）{返回一个0到23之间的整数，对应于给定日期的小时数语法：hour(date)​星期函数（day）{返回一个0到6之间的整数，对应于给定的日期。0代表星期日，1代表星期一等等语法：day(date)​日期函数（date）{返回一个1到31之间的整数,对应于给定日期语法：date(date)​月函数（month）{返回一个0到11之间的整数，0对应于1月，1对应于2月等等语法：month(date)​年份函数（year）{返回给定日期的年份语法：year(date)</p>\n</li>\n</ol>\n<h1 id=\"8-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#8-参考资料\"></a> 8 参考资料</h1>\n<p>自用跳转连接：<a href=\"\">ob</a>， <a href=\"\">blog</a></p>\n","site":{"data":{}},"wordcount":7368,"excerpt":"","more":"<p><a href=\"https://www.csdn.net/tags/NtzaggysMDE2OTctYmxvZwO0O0OO0O0O.html\">notion多条件formula - CSDN</a></p>\n<h1 id=\"1-一-属性列名-properties\"><a class=\"markdownIt-Anchor\" href=\"#1-一-属性列名-properties\"></a> 1 一、属性（列名-properties）</h1>\n<ol>\n<li>\n<p>prop(“属性”) 返回每个条目的“属性值”，点击即可用对应的格式插入到公式中。</p>\n</li>\n<li>\n<p>公式中的四种方式</p>\n<p>四 种 格 式 { 数 字 日 期 字 符 串 复 选 框 四种格式\\begin{cases} 数字 &amp; \\ 日期 &amp; \\字符串 &amp;\\复选框 &amp; \\end{cases} 四种格式⎩⎪⎪⎪⎨⎪⎪⎪⎧​数字日期字符串复选框​​</p>\n</li>\n</ol>\n<p>floor((prop(“小时”) + prop(“分钟”) / 60) * 100) / 100</p>\n<h1 id=\"2-二-常量constants\"><a class=\"markdownIt-Anchor\" href=\"#2-二-常量constants\"></a> 2 二、常量（constants）</h1>\n<p>常 量 { e 自 然 对 数 的 底 数 p i 圆 周 率 t r u e 真 f l a s e 假 常量\\begin{cases} e &amp;自然对数的底数 \\ pi &amp;圆周率 \\true &amp;真\\flase &amp;假 \\end{cases} 常量⎩⎪⎪⎪⎨⎪⎪⎪⎧​epitrueflase​自然对数的底数圆周率真假​</p>\n<h1 id=\"3-三-基本运算\"><a class=\"markdownIt-Anchor\" href=\"#3-三-基本运算\"></a> 3 三、基本运算</h1>\n<ol>\n<li>\n<p>if语法（“<code>if</code>”）：进行条件判断，在两个选项（要为同一格式）中选择一个。</p>\n<p>语法：</p>\n<ul>\n<li><code>boolean?value:value</code></li>\n<li><code>if(boolean,value,value)</code></li>\n</ul>\n<p>补充：在&quot;boolean&quot;不能填写0或者1；value中，true（真）为1，false（假）为0；</p>\n</li>\n<li>\n<p>加法（&quot;<code>+</code>“或&quot;<code>add</code>&quot;）：把两个数字或字符串相加，并返回它们的值</p>\n<p>语法：</p>\n<ul>\n<li><code>value+value</code></li>\n<li><code>add(value,value)</code></li>\n</ul>\n<p>说明：value可以是数字或字符串，为字符串时要加上双引号</p>\n</li>\n<li>\n<p>减法（”<code>-</code>“或“<code>subtract</code>”）：将两个数字相减，并返回它们的值</p>\n<p>语法：</p>\n<ul>\n<li><code>number-number</code></li>\n<li><code>subtract(number,number)</code></li>\n</ul>\n</li>\n<li>\n<p>乘法（”<code>*</code>“或“<code>multiply</code>”）：将两个数字相乘，并返回它们的值</p>\n<p>语法：</p>\n<ul>\n<li><code>number*number</code></li>\n<li><code>multiply(number,number)</code></li>\n</ul>\n</li>\n<li>\n<p>除法（”<code>/</code> “或&quot;<code>divide</code>&quot;）：将两个数字相乘，并返回他们的值</p>\n<p>语法：</p>\n<ul>\n<li><code>number/number</code></li>\n<li><code>divide(number,number)</code></li>\n</ul>\n</li>\n<li>\n<p>绝对值（&quot;<code>abs</code>&quot;）：返回数的绝对值</p>\n<p>语法：<code>abs(number)</code></p>\n</li>\n<li>\n<p>求余运算（”<code>%</code>“或&quot;<code>mod</code>&quot;）：把两个数进行求余运算，并返回它们的值</p>\n<p>语法：</p>\n<ul>\n<li><code>number%number</code></li>\n<li><code>mod(number,number)</code></li>\n</ul>\n</li>\n<li>\n<p>”四舍五入“（”<code>round</code>“）：对数字进行”四舍五入“</p>\n<p>语法：<code>round(number)</code></p>\n<p>说明：默认情况下只保留整数。要保留n位小数时，应使用</p>\n<p>r o u n d ( n u m b e r ∗ 1 0 n ) / 1 0 n round(number*10<sup>n)/10</sup>n round(number∗10n)/10n</p>\n</li>\n<li>\n<p>一元负数（”<code>unaryminus</code>“或“<code>-</code>”）：对一个数进行取它的负数</p>\n<p>语法：</p>\n<p><code>-number</code></p>\n<p><code>unaryminus(number)</code></p>\n<p>如：-3==unaryminus(3)</p>\n</li>\n<li>\n<p>一元加号（“<code>+</code>”或“<code>unaryPlus</code>”）：将参数转化为数字。</p>\n</li>\n</ol>\n<pre><code>语法：\n\n`+value`\n\n`unaryPlus(value)`\n\n补充：可以将true转化为1，false转化为0\n</code></pre>\n<h1 id=\"4-四-关系逻辑判断\"><a class=\"markdownIt-Anchor\" href=\"#4-四-关系逻辑判断\"></a> 4 四、关系逻辑判断</h1>\n<ol>\n<li>关系判断\n<ul>\n<li>大于 &gt;</li>\n<li>小于 &lt;</li>\n<li>等于 ==</li>\n<li>大于等于 &gt;=</li>\n<li>小于等于 &lt;=</li>\n<li>不等于 !=</li>\n</ul>\n</li>\n<li>逻辑判断\n<ul>\n<li>\n<p>逻辑“<code>非</code>”：对逻辑参数进行否定</p>\n<p>语法：</p>\n<p><code>not boolean</code></p>\n<p><code>not (boolean)</code></p>\n</li>\n<li>\n<p>逻辑“<code>与</code>”：对逻辑参数进行“与”运算，<code>“一假全假”</code></p>\n<p>语法：</p>\n<p><code>boolean and boolean</code></p>\n<p><code>and(boolean,boolean)</code></p>\n</li>\n<li>\n<p>逻辑“或”：对逻辑参数进行“或”运算，<code>“一真全真”</code></p>\n<p>语法：</p>\n<p><code>boolean or boolean</code></p>\n<p><code>or(boolean,boolean)</code></p>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"5-五-字符串函数\"><a class=\"markdownIt-Anchor\" href=\"#5-五-字符串函数\"></a> 5 五、字符串函数</h1>\n<ol>\n<li>\n<p>连接函数（“<code>concat</code>”）：将字符串进行连接</p>\n<p>语法：</p>\n<p><code>concat(text...)</code></p>\n<p><code>text+text+...</code></p>\n</li>\n<li>\n<p>插符函数（“<code>join</code>”）：插入字符函数，在其余叁数之间插入第一个参数并返回它们的连接字符串</p>\n<p>语法：<code>join(text...)</code></p>\n<p>例如：join(&quot;-&quot;,“a”,“b”,“c”)==“a-b-c”</p>\n</li>\n<li>\n<p>切片函数（”<code>slice</code>“）：从字符串中提取子字符串（包括开头索引，不包括结尾索引[start,end)）</p>\n<p>语法：</p>\n<ul>\n<li><code>slice(text,number)</code></li>\n<li><code>slice(text,number1,number2)</code></li>\n</ul>\n<p>说明:只有一个数字时，就是从这个索引数字开始到结束；当有两个数字时（第二个数要大于第一个数，不然不会显示），从字符串中提取子字符串，包含开头索引，不包含结束索引。</p>\n<p>注意：字符串的索引值是从0开始的</p>\n</li>\n<li>\n<p>长度函数（”<code>length</code>“）：返回字符串的长度，返回值是一个数值。</p>\n<p>语法：<code>length(text)</code></p>\n</li>\n<li>\n<p>转化函数（”<code>format</code>“）：将其他格式的参数转化为字符串。</p>\n<p>语法：<code>format(value)</code></p>\n</li>\n<li>\n<p>转化函数（”<code>toNumber</code>“）：将其他格式的参数转化数字</p>\n<p>语法：<code>toNumber(value)</code></p>\n<p>说明：</p>\n<ul>\n<li>可以把字符串类型转化为数字，如：&quot;123&quot;到数字123</li>\n<li>可以把日期类型转化时间戳，Jan 18, 2021 7:28 PM→1610969340000</li>\n<li>可以把复选框类型转化为数字，true为1，false为0</li>\n<li>也可以把数字类型转化为数字</li>\n</ul>\n</li>\n<li>\n<p>包含判断函数（”<code>contains</code>“）：包含判断函数，返回一个boolean值，</p>\n<p>语法：<code>contains(text1,text2)</code></p>\n<p>说明：如果text1中包含text2，则返回true；反之，返回false</p>\n</li>\n<li>\n<p>替代函数：</p>\n<ul>\n<li>\n<p>“<code>replace</code>”：用新值替换正则表达式的第一个匹配项</p>\n<p>语法：<code>replace(number/text/boolean,text1,text2)</code></p>\n<p>说明：text表示字符串类型，text1表示要代替的值，text2表示新的值</p>\n</li>\n<li>\n<p>&quot;<code>replaceAll</code>”：用新值代替正则表达式的所有匹配项</p>\n<p>语法：<code>replaceAll(number/text/boolean,text1,text2)</code></p>\n<p>说明：text表示字符串类型，text1表示要代替的值，text2表示新的值</p>\n</li>\n</ul>\n</li>\n<li>\n<p>检验函数（“<code>test</code>”）：判断一个字符串是否与正则表达式匹配，返回一个boolean值</p>\n<p>语法：<code>test(number/text/boolean,text)</code></p>\n</li>\n<li>\n<p>“验空”函数（”<code>empty</code>“）：判断一个值是否为空</p>\n</li>\n</ol>\n<pre><code>语法：`empty(number/text/boolean/date)`\n\n说明：默认情况下，数字为0表示空，字符串以&quot;&quot;表示空值，boolean值以false表示空值\n</code></pre>\n<h1 id=\"6-六-数学函数\"><a class=\"markdownIt-Anchor\" href=\"#6-六-数学函数\"></a> 6 六、数学函数</h1>\n<ol>\n<li>\n<p>绝对值函数（“<code>abs</code>”)：返回一个数的绝对值</p>\n<p>语法：<code>abs(number)</code></p>\n</li>\n<li>\n<p>开算术平方根运算（”<code>sqrt</code>“）：返回一个数的算术平方根</p>\n<p>语法：<code>sqrt(number)</code></p>\n<p>说明：number要为非负数</p>\n</li>\n<li>\n<p>开立方根（”<code>cbrt</code>“)：返回一个数的立方根</p>\n<p>语法：<code>cbrt(number)</code></p>\n</li>\n<li>\n<p>幂次运算（”<code>^</code>“或&quot;<code>pow</code>&quot;）：将两个数字进行指数运算，并返回它们的值</p>\n<p>语法：</p>\n<ul>\n<li><code>number^number</code></li>\n<li><code>pow(number,number)</code></li>\n</ul>\n<p>补充:</p>\n<p>自然指数运算（”<code>exp</code>“）：返回e^x的值，其中x为参数，e为常数</p>\n<p>语法：<code>exp(number)</code></p>\n</li>\n<li>\n<p>对数运算：notion目前只支持三种对数运算</p>\n<p>三 种 对 数 运 算 { l n ( n u m b e r ) 返 回 一 个 数 的 自 然 对 数 l o g 10 ( n u m b e r ) 返 回 这 个 数 以 10 为 底 对 数 的 值 l o g 2 ( n u m b e r ) 返 回 这 个 数 以 2 为 底 对 数 的 值 三种对数运算\\begin{cases}ln(number) &amp;返回一个数的自然对数\\log_{10}(number)&amp;返回这个数以10为底对数的值\\log_2(number) &amp;返回这个数以2为底对数的值\\end{cases} 三种对数运算⎩⎪⎨⎪⎧​ln(number)log10​(number)log2​(number)​返回一个数的自然对数返回这个数以10为底对数的值返回这个数以2为底对数的值​</p>\n</li>\n<li>\n<p>向上取整函数（“<code>ceil</code>”）：返回大于或等于这个数字的最小整数</p>\n<p>语法：<code>ceil(number)</code></p>\n</li>\n<li>\n<p>向下取整函数（“<code>floor</code>”）：返回小于或等于这个数字的最大整数</p>\n<p>语法：<code>floor(number)</code></p>\n</li>\n<li>\n<p>最大/小值函数</p>\n<ul>\n<li>\n<p>最大值函数（“<code>max</code>”）：返回数的最大值</p>\n<p>语法：<code>max(number1,number2,...)</code></p>\n</li>\n<li>\n<p>最小值函数（“<code>min</code>”）：返回数的最小值</p>\n<p>语法：<code>min(number1,number2,...)</code></p>\n</li>\n</ul>\n</li>\n<li>\n<p>符号函数（“<code>sign</code>”）：返回数的符号，指明数的符号是为正、负或零</p>\n<p>语法：<code>sign(number)</code></p>\n<p>说明：数字为正时，返回1；数字为负时，返回-1；数字为0时，返回0</p>\n</li>\n</ol>\n<h1 id=\"7-七-日期函数\"><a class=\"markdownIt-Anchor\" href=\"#7-七-日期函数\"></a> 7 七、日期函数</h1>\n<ol>\n<li>\n<p>返回时间差函数（<code>dateBetween</code>）：返回两个日期之间的时间差，返回值是一个数字。</p>\n<p>语法：<code>dateBetween(date,date,text)</code></p>\n<p>说明：<code>date</code>表示日期；<code>text</code>表示”时间差“的基本单位，类型为字符串，取值有：年、季度、月、周、天、小时、分钟、秒、或毫秒。</p>\n<p>t e x t 的 取 值 类 型 { &quot; y e a r s &quot; 表 示 以 “ 年 ” 为 基 本 单 位 &quot; q u a r t e r s &quot; 表 示 以 “ 季 ” 为 基 本 单 位 &quot; m o n t h s &quot; 表 示 以 “ 月 &quot; 为 基 本 单 位 &quot; w e e k s &quot; 表 示 以 “ 周 ” 为 基 本 单 位 &quot; d a y s &quot; 表 示 以 “ 天 ” 为 基 本 单 位 &quot; h o u r s &quot; 表 示 以 “ 小 时 ” 为 基 本 单 位 &quot; m i n u t e s &quot; 表 示 以 “ 分 钟 ” 为 基 本 单 位 &quot; s e c o n d s &quot; 表 示 以 “ 秒 ” 为 基 本 单 位 &quot; m i l l i s e c o n d &quot; 表 示 以 “ 毫 秒 ” 为 基 本 单 位 text的取值类型\\begin{cases}“years” &amp; 表示以“年”为基本单位\\“quarters”&amp;表示以“季”为基本单位\\“months” &amp;表示以“月&quot;为基本单位\\“weeks”&amp; 表示以“周”为基本单位\\“days”&amp;表示以“天”为基本单位\\“hours”&amp;表示以“小时”为基本单位\\“minutes”&amp;表示以“分钟”为基本单位\\“seconds”&amp;表示以“秒”为基本单位\\“millisecond”&amp;表示以“毫秒”为基本单位\\end{cases} text的取值类型⎩⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎧​&quot;years&quot;“quarters”“months”“weeks”“days”“hours”“minutes”“seconds”&quot;millisecond&quot;​表示以“年”为基本单位表示以“季”为基本单位表示以“月&quot;为基本单位表示以“周”为基本单位表示以“天”为基本单位表示以“小时”为基本单位表示以“分钟”为基本单位表示以“秒”为基本单位表示以“毫秒”为基本单位​</p>\n</li>\n<li>\n<p>获取当前日期函数（<code>now</code>):返回当前的日期和时间</p>\n<p>语法：<code>now()</code></p>\n</li>\n<li>\n<p>日期范围开始函数（“<code>start</code>”）：返回一个日期范围的开始</p>\n<p>语法：<code>start(date)</code></p>\n</li>\n<li>\n<p>日期范围结束函数（“<code>end</code>”）：返回一个日期范围的结束</p>\n<p>语法：<code>end(date)</code></p>\n</li>\n<li>\n<p>日期到时间戳函数（“<code>timestamp</code>”）：返回来自Unix毫秒时间戳的整数，对应于自1970年1月1日起的毫秒数，返回值是<code>数值</code></p>\n<p>语法：<code>timestamp(date)</code></p>\n<p>说明：把日期格式的<code>日期转化</code>为数值类型的<code>时间戳</code></p>\n</li>\n<li>\n<p>时间戳到日期函数（“<code>fromTimestamp</code>”）：返回由Unix毫秒时间戳构建的日期，对应于自1970年1月1日起的毫秒数，返回值是<code>日期</code></p>\n<p>语法：<code>fromTimestamp(number)</code></p>\n<p>说明：把数值类型的<code>时间戳转化为日期</code>类型的日期</p>\n</li>\n<li>\n<p>增加日期判据（argument）函数（“<code>dateAdd</code>”）：增加到日期，最后一个是单位判据</p>\n<p>语法：<code>dateAdd(date,number,text)</code></p>\n<p>说明：<code>date</code>表示日期；number表示日期差；<code>text</code>表示”时间差“的基本单位，类型为字符串，取值有：年、季度、月、周、天、小时、分钟、秒、或毫秒。</p>\n<p>t e x t 的 取 值 类 型 { &quot; y e a r s &quot; 表 示 以 “ 年 ” 为 基 本 单 位 &quot; q u a r t e r s &quot; 表 示 以 “ 季 ” 为 基 本 单 位 &quot; m o n t h s &quot; 表 示 以 “ 月 &quot; 为 基 本 单 位 &quot; w e e k s &quot; 表 示 以 “ 周 ” 为 基 本 单 位 &quot; d a y s &quot; 表 示 以 “ 天 ” 为 基 本 单 位 &quot; h o u r s &quot; 表 示 以 “ 小 时 ” 为 基 本 单 位 &quot; m i n u t e s &quot; 表 示 以 “ 分 钟 ” 为 基 本 单 位 &quot; s e c o n d s &quot; 表 示 以 “ 秒 ” 为 基 本 单 位 &quot; m i l l i s e c o n d &quot; 表 示 以 “ 毫 秒 ” 为 基 本 单 位 text的取值类型\\begin{cases}“years” &amp; 表示以“年”为基本单位\\“quarters”&amp;表示以“季”为基本单位\\“months” &amp;表示以“月&quot;为基本单位\\“weeks”&amp; 表示以“周”为基本单位\\“days”&amp;表示以“天”为基本单位\\“hours”&amp;表示以“小时”为基本单位\\“minutes”&amp;表示以“分钟”为基本单位\\“seconds”&amp;表示以“秒”为基本单位\\“millisecond”&amp;表示以“毫秒”为基本单位\\end{cases} text的取值类型⎩⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎧​&quot;years&quot;“quarters”“months”“weeks”“days”“hours”“minutes”“seconds”&quot;millisecond&quot;​表示以“年”为基本单位表示以“季”为基本单位表示以“月&quot;为基本单位表示以“周”为基本单位表示以“天”为基本单位表示以“小时”为基本单位表示以“分钟”为基本单位表示以“秒”为基本单位表示以“毫秒”为基本单位​</p>\n</li>\n<li>\n<p>减少日期的日期函数（<code>“dateSubtract</code>”）：减少日期的日期，最后一个是判据</p>\n<p>语法：<code>dateSubtract(date,number,text)</code></p>\n<p>说明：类似上面的dateAdd函数。</p>\n</li>\n<li>\n<p>设置日期格式函数（“<code>formatDate</code>”）：使用“时刻”标准时间格式字符串，设置日期格式，返回的是一个<code>字符串</code></p>\n<p>语法：<code>formatDate(date,text)</code></p>\n<p>例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">formatDate(<span class=\"hljs-built_in\">now</span>(), <span class=\"hljs-string\">&quot;MMMM D YYYY, HH:mm&quot;</span>) == March <span class=\"hljs-number\">30</span> <span class=\"hljs-number\">2010</span>, <span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">00</span><br>formatDate(<span class=\"hljs-built_in\">now</span>(), <span class=\"hljs-string\">&quot;YYYY/MM/DD, HH:mm&quot;</span>) == <span class=\"hljs-number\">2010</span>/<span class=\"hljs-number\">03</span>/<span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">00</span><br>formatDate(<span class=\"hljs-built_in\">now</span>(), <span class=\"hljs-string\">&quot;MM/DD/YYYY, HH:mm&quot;</span>) == <span class=\"hljs-number\">03</span>/<span class=\"hljs-number\">30</span>/<span class=\"hljs-number\">2010</span>, <span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">00</span><br>formatDate(<span class=\"hljs-built_in\">now</span>(), <span class=\"hljs-string\">&quot;HH:mm A&quot;</span>) == <span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">00</span> PM<br>formatDate(<span class=\"hljs-built_in\">now</span>(), <span class=\"hljs-string\">&quot;M/D/YY&quot;</span>) == <span class=\"hljs-number\">3</span>/<span class=\"hljs-number\">30</span>/<span class=\"hljs-number\">10</span><br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>返回”给定日期“所用单位函数下的数字<br />\n所 用 的 单 位 函 数 { 分 钟 函 数 （ m i n u t e ） { 返 回 一 个 0 到 59 之 间 的 整 数 ， 对 应 于 给 定 日 期 的 分 钟 数 语 法 ： m i n u t e ( d a t e ) 小 时 函 数 （ h o u r ） { 返 回 一 个 0 到 23 之 间 的 整 数 ， 对 应 于 给 定 日 期 的 小 时 数 语 法 ： h o u r ( d a t e ) 星 期 函 数 （ d a y ） { 返 回 一 个 0 到 6 之 间 的 整 数 ， 对 应 于 给 定 的 日 期 。 0 代 表 星 期 日 ， 1 代 表 星 期 一 等 等 语 法 ： d a y ( d a t e ) 日 期 函 数 （ d a t e ） { 返 回 一 个 1 到 31 之 间 的 整 数 , 对 应 于 给 定 日 期 语 法 ： d a t e ( d a t e ) 月 函 数 （ m o n t h ） { 返 回 一 个 0 到 11 之 间 的 整 数 ， 0 对 应 于 1 月 ， 1 对 应 于 2 月 等 等 语 法 ： m o n t h ( d a t e ) 年 份 函 数 （ y e a r ） { 返 回 给 定 日 期 的 年 份 语 法 ： y e a r ( d a t e ) 所用的单位函数\\begin{cases} 分钟函数（minute）\\begin{cases}返回一个0到59之间的整数，对应于给定日期的分钟数\\语法：minute(date)\\end{cases}\\ 小时函数（hour）\\begin{cases}返回一个0到23之间的整数，对应于给定日期的小时数\\语法：hour(date)\\end{cases}\\ 星期函数（day）\\begin{cases}返回一个0到6之间的整数，对应于给定的日期。0代表星期日，1代表星期一等等\\语法：day(date)\\end{cases}\\ 日期函数（date）\\begin{cases}返回一个1到31之间的整数,对应于给定日期\\语法：date(date)\\end{cases}\\ 月函数（month）\\begin{cases}返回一个0到11之间的整数，0对应于1月，1对应于2月等等\\语法：month(date)\\end{cases}\\ 年份函数（year）\\begin{cases}返回给定日期的年份\\语法：year(date)\\\\end{cases} \\end{cases} 所用的单位函数⎩⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎧​分钟函数（minute）{返回一个0到59之间的整数，对应于给定日期的分钟数语法：minute(date)​小时函数（hour）{返回一个0到23之间的整数，对应于给定日期的小时数语法：hour(date)​星期函数（day）{返回一个0到6之间的整数，对应于给定的日期。0代表星期日，1代表星期一等等语法：day(date)​日期函数（date）{返回一个1到31之间的整数,对应于给定日期语法：date(date)​月函数（month）{返回一个0到11之间的整数，0对应于1月，1对应于2月等等语法：month(date)​年份函数（year）{返回给定日期的年份语法：year(date)</p>\n</li>\n</ol>\n<h1 id=\"8-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#8-参考资料\"></a> 8 参考资料</h1>\n<p>自用跳转连接：<a href=\"\">ob</a>， <a href=\"\">blog</a></p>\n"},{"title":"linux 生成ssh密钥","published":1,"hideInList":false,"isTop":false,"abbrlink":18965,"date":"2022-05-27T08:29:02.000Z","feature":null,"_content":"\n\nlinux命令\n查看密钥是否生成：ls -l ~/.ssh\n\n生成密钥：ssh-keygen -t rsa (一路回车)\n\n密钥所在目录：\ncd ~/.ssh\n\n\n私钥：id_rsa\n公钥：id_rsa.pub \n","source":"_posts/👨🏻‍💻code/mac/linux 生成ssh密钥.md","raw":"---\ntitle: linux 生成ssh密钥\ntags:\n  - linux命令\npublished: true\nhideInList: false\nisTop: false\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - mac\nabbrlink: 18965\ndate: 2022-05-27 16:29:02\nfeature:\n---\n\n\nlinux命令\n查看密钥是否生成：ls -l ~/.ssh\n\n生成密钥：ssh-keygen -t rsa (一路回车)\n\n密钥所在目录：\ncd ~/.ssh\n\n\n私钥：id_rsa\n公钥：id_rsa.pub \n","slug":"👨🏻‍💻code/mac/linux 生成ssh密钥","updated":"2022-07-12T09:02:14.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fj3001ve0mga9g194q9","content":"<p>linux命令<br>\n查看密钥是否生成：ls -l ~/.ssh</p>\n<p>生成密钥：ssh-keygen&nbsp;-t&nbsp;rsa (一路回车)</p>\n<p>密钥所在目录：<br>\ncd ~/.ssh</p>\n<p>私钥：id_rsa<br>\n公钥：id_rsa.pub</p>\n","site":{"data":{}},"wordcount":89,"excerpt":"","more":"<p>linux命令<br />\n查看密钥是否生成：ls -l ~/.ssh</p>\n<p>生成密钥：ssh-keygen -t rsa (一路回车)</p>\n<p>密钥所在目录：<br />\ncd ~/.ssh</p>\n<p>私钥：id_rsa<br />\n公钥：id_rsa.pub</p>\n"},{"title":"三次握手","published":1,"hideInList":false,"isTop":false,"abbrlink":61990,"date":"2022-05-26T08:17:08.000Z","feature":null,"_content":"\n三次握手的目的是保证双方互相之间建立了连接\n三次握手发生在客户端连接的时候，当调用connect()函数时，底层会通过TCP协议进行三次握手。\n\nseq：序号\nACK：标志位\n\tack(AcK)：确认序号，只有当 ACK=1 时确认序号才有用\nTCP是用字节流传输，会为每个字节分配一个序号 \n# 1 三次握手\n时序图\n![](https://s1.vika.cn/space/2022/05/26/9e8848db48ec40d2a865d364ed1dfe16)\n\n牛客总结\n\t第一次握手：\n\t1.客户端将SYN标志位置为1，向服务端请求建立连接，\n\t2.生成一个随机(<font color=#F36208>其实是有固定算法的</font>)的32位的序号seq=J，这个序号后边是可以携带数据（数据的大小）\n\t第二次握手：\n\t1.服务端将<font color=#F36208>标志位</font><font color=#F36208>ACK</font>置为1，接收客户端的连接。\n\t\t并且回发一个确认序号：ack=客户端的序号 +  数据长度+ SYN/FIN（按一个字节算）\n\t2.服务器端会向客户端发起连接请求：SYN=1\n\t3.服务器会生成一个随机序号(<font color=#F36208>其实是有固定算法的</font>)：seq = K\n\t第三次握手：\n\t1.客户单应答服务器的连接请求：ACK=1\n\t2.客户端回复收到了服务器端的数据：ack=服务端的序号 +数据长度 + SYN/FIN（按一个字节算）\n自己总结\n\t<font color=#F36208>\t第一次握手：客户端发起连接</font>\n\t\t1.客户端将标志位SYN置位1，表示向服务端请求连接。2.并且根据算法生成一个客户端序号cseq：J\n\t<font color=#F36208>\t第二次握手：服务端回复请求，发起连接</font>\n\t\t1.服务端将ACK置为1，表示接受连接。2.发送一个确认序号ack = 客户端的序号(J) + 数据字节个数 + SYN/FIN(算一个字节)  \n\t\t3.服务端将标志位SYN置位1，表示向客户端请求连接。4.并且根据算法生成一个服务端序号sseq：K\n\t<font color=#F36208>\t第三次握手：客户端回复请求</font>\n\t\t1.客户端将ACK置为1，表示接受连接。2.发送一个确认序号ack = 服务端的序号(K) + 数据字节个数 + SYN/FIN(算一个字节)  \n\n\n第一次握手(客户端→服务端)：客户端请求连接\n\t客户端与服务端还没有建立连接，不能发数据\n第二次握手(客户端←服务端)：服务端同意连接+请求与客户端连接\n第三次握手(客户端→服务端)：客户端同意连接\n\t此时客户端已经和服务端已经建立了连接，这次客户端的握手已经可以携带数据了\n之后服务端与客户端都互相建立了连接，可以互相自由通信\n## 1.1 三次握手实例\n![](https://s1.vika.cn/space/2022/05/26/e1cbc619a8b445c5a3cb9282c0d21c21)\n\n\n## 1.2 为什么不能两次握手\n因为要确保客户端能<font color=#C32E94>收发</font>消息，服务端能<font color=#C32E94>收发</font>消息，3次握手正好少一次都不行\n![](https://s1.vika.cn/space/2022/05/26/7f7c22713cf345368d2778005723b9b1)\n\n四次握手也是可以的，服务端的ACK和SYN连在一起发了，拆开发就是四次握手\n保证可靠连接的最小次数是三次握手\n\n\n\n\n\n","source":"_posts/👨🏻‍💻code/计算机网络/三次握手.md","raw":"---\ntitle: 三次握手\ntags:\n  - 计算机网络\npublished: true\nhideInList: false\nisTop: false\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 计算机网络\nabbrlink: 61990\ndate: 2022-05-26 16:17:08\nfeature:\n---\n\n三次握手的目的是保证双方互相之间建立了连接\n三次握手发生在客户端连接的时候，当调用connect()函数时，底层会通过TCP协议进行三次握手。\n\nseq：序号\nACK：标志位\n\tack(AcK)：确认序号，只有当 ACK=1 时确认序号才有用\nTCP是用字节流传输，会为每个字节分配一个序号 \n# 1 三次握手\n时序图\n![](https://s1.vika.cn/space/2022/05/26/9e8848db48ec40d2a865d364ed1dfe16)\n\n牛客总结\n\t第一次握手：\n\t1.客户端将SYN标志位置为1，向服务端请求建立连接，\n\t2.生成一个随机(<font color=#F36208>其实是有固定算法的</font>)的32位的序号seq=J，这个序号后边是可以携带数据（数据的大小）\n\t第二次握手：\n\t1.服务端将<font color=#F36208>标志位</font><font color=#F36208>ACK</font>置为1，接收客户端的连接。\n\t\t并且回发一个确认序号：ack=客户端的序号 +  数据长度+ SYN/FIN（按一个字节算）\n\t2.服务器端会向客户端发起连接请求：SYN=1\n\t3.服务器会生成一个随机序号(<font color=#F36208>其实是有固定算法的</font>)：seq = K\n\t第三次握手：\n\t1.客户单应答服务器的连接请求：ACK=1\n\t2.客户端回复收到了服务器端的数据：ack=服务端的序号 +数据长度 + SYN/FIN（按一个字节算）\n自己总结\n\t<font color=#F36208>\t第一次握手：客户端发起连接</font>\n\t\t1.客户端将标志位SYN置位1，表示向服务端请求连接。2.并且根据算法生成一个客户端序号cseq：J\n\t<font color=#F36208>\t第二次握手：服务端回复请求，发起连接</font>\n\t\t1.服务端将ACK置为1，表示接受连接。2.发送一个确认序号ack = 客户端的序号(J) + 数据字节个数 + SYN/FIN(算一个字节)  \n\t\t3.服务端将标志位SYN置位1，表示向客户端请求连接。4.并且根据算法生成一个服务端序号sseq：K\n\t<font color=#F36208>\t第三次握手：客户端回复请求</font>\n\t\t1.客户端将ACK置为1，表示接受连接。2.发送一个确认序号ack = 服务端的序号(K) + 数据字节个数 + SYN/FIN(算一个字节)  \n\n\n第一次握手(客户端→服务端)：客户端请求连接\n\t客户端与服务端还没有建立连接，不能发数据\n第二次握手(客户端←服务端)：服务端同意连接+请求与客户端连接\n第三次握手(客户端→服务端)：客户端同意连接\n\t此时客户端已经和服务端已经建立了连接，这次客户端的握手已经可以携带数据了\n之后服务端与客户端都互相建立了连接，可以互相自由通信\n## 1.1 三次握手实例\n![](https://s1.vika.cn/space/2022/05/26/e1cbc619a8b445c5a3cb9282c0d21c21)\n\n\n## 1.2 为什么不能两次握手\n因为要确保客户端能<font color=#C32E94>收发</font>消息，服务端能<font color=#C32E94>收发</font>消息，3次握手正好少一次都不行\n![](https://s1.vika.cn/space/2022/05/26/7f7c22713cf345368d2778005723b9b1)\n\n四次握手也是可以的，服务端的ACK和SYN连在一起发了，拆开发就是四次握手\n保证可靠连接的最小次数是三次握手\n\n\n\n\n\n","slug":"👨🏻‍💻code/计算机网络/三次握手","updated":"2022-07-12T09:02:14.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fj4001ye0mgbgzpe4zx","content":"<p>三次握手的目的是保证双方互相之间建立了连接<br>\n三次握手发生在客户端连接的时候，当调用connect()函数时，底层会通过TCP协议进行三次握手。</p>\n<p>seq：序号<br>\nACK：标志位<br>\nack(AcK)：确认序号，只有当 ACK=1 时确认序号才有用<br>\nTCP是用字节流传输，会为每个字节分配一个序号</p>\n<h1 id=\"1-三次握手\"><a class=\"markdownIt-Anchor\" href=\"#1-三次握手\"></a> 1 三次握手</h1>\n<p>时序图<br>\n<img src=\"https://s1.vika.cn/space/2022/05/26/9e8848db48ec40d2a865d364ed1dfe16\" alt=\"\"></p>\n<p>牛客总结<br>\n第一次握手：<br>\n1.客户端将SYN标志位置为1，向服务端请求建立连接，<br>\n2.生成一个随机(<font color=\"#F36208\">其实是有固定算法的</font>)的32位的序号seq=J，这个序号后边是可以携带数据（数据的大小）<br>\n第二次握手：<br>\n1.服务端将<font color=\"#F36208\">标志位</font><font color=\"#F36208\">ACK</font>置为1，接收客户端的连接。<br>\n并且回发一个确认序号：ack=客户端的序号 +  数据长度+ SYN/FIN（按一个字节算）<br>\n2.服务器端会向客户端发起连接请求：SYN=1<br>\n3.服务器会生成一个随机序号(<font color=\"#F36208\">其实是有固定算法的</font>)：seq = K<br>\n第三次握手：<br>\n1.客户单应答服务器的连接请求：ACK=1<br>\n2.客户端回复收到了服务器端的数据：ack=服务端的序号 +数据长度 + SYN/FIN（按一个字节算）<br>\n自己总结<br>\n<font color=\"#F36208\">\t第一次握手：客户端发起连接</font><br>\n1.客户端将标志位SYN置位1，表示向服务端请求连接。2.并且根据算法生成一个客户端序号cseq：J<br>\n<font color=\"#F36208\">\t第二次握手：服务端回复请求，发起连接</font><br>\n1.服务端将ACK置为1，表示接受连接。2.发送一个确认序号ack = 客户端的序号(J) + 数据字节个数 + SYN/FIN(算一个字节)<br>\n3.服务端将标志位SYN置位1，表示向客户端请求连接。4.并且根据算法生成一个服务端序号sseq：K<br>\n<font color=\"#F36208\">\t第三次握手：客户端回复请求</font><br>\n1.客户端将ACK置为1，表示接受连接。2.发送一个确认序号ack = 服务端的序号(K) + 数据字节个数 + SYN/FIN(算一个字节)</p>\n<p>第一次握手(客户端→服务端)：客户端请求连接<br>\n客户端与服务端还没有建立连接，不能发数据<br>\n第二次握手(客户端←服务端)：服务端同意连接+请求与客户端连接<br>\n第三次握手(客户端→服务端)：客户端同意连接<br>\n此时客户端已经和服务端已经建立了连接，这次客户端的握手已经可以携带数据了<br>\n之后服务端与客户端都互相建立了连接，可以互相自由通信</p>\n<h2 id=\"11-三次握手实例\"><a class=\"markdownIt-Anchor\" href=\"#11-三次握手实例\"></a> 1.1 三次握手实例</h2>\n<p><img src=\"https://s1.vika.cn/space/2022/05/26/e1cbc619a8b445c5a3cb9282c0d21c21\" alt=\"\"></p>\n<h2 id=\"12-为什么不能两次握手\"><a class=\"markdownIt-Anchor\" href=\"#12-为什么不能两次握手\"></a> 1.2 为什么不能两次握手</h2>\n<p>因为要确保客户端能<font color=\"#C32E94\">收发</font>消息，服务端能<font color=\"#C32E94\">收发</font>消息，3次握手正好少一次都不行<br>\n<img src=\"https://s1.vika.cn/space/2022/05/26/7f7c22713cf345368d2778005723b9b1\" alt=\"\"></p>\n<p>四次握手也是可以的，服务端的ACK和SYN连在一起发了，拆开发就是四次握手<br>\n保证可靠连接的最小次数是三次握手</p>\n","site":{"data":{}},"wordcount":980,"excerpt":"","more":"<p>三次握手的目的是保证双方互相之间建立了连接<br />\n三次握手发生在客户端连接的时候，当调用connect()函数时，底层会通过TCP协议进行三次握手。</p>\n<p>seq：序号<br />\nACK：标志位<br />\nack(AcK)：确认序号，只有当 ACK=1 时确认序号才有用<br />\nTCP是用字节流传输，会为每个字节分配一个序号</p>\n<h1 id=\"1-三次握手\"><a class=\"markdownIt-Anchor\" href=\"#1-三次握手\"></a> 1 三次握手</h1>\n<p>时序图<br />\n<img src=\"https://s1.vika.cn/space/2022/05/26/9e8848db48ec40d2a865d364ed1dfe16\" alt=\"\" /></p>\n<p>牛客总结<br />\n第一次握手：<br />\n1.客户端将SYN标志位置为1，向服务端请求建立连接，<br />\n2.生成一个随机(<font color=#F36208>其实是有固定算法的</font>)的32位的序号seq=J，这个序号后边是可以携带数据（数据的大小）<br />\n第二次握手：<br />\n1.服务端将<font color=#F36208>标志位</font><font color=#F36208>ACK</font>置为1，接收客户端的连接。<br />\n并且回发一个确认序号：ack=客户端的序号 +  数据长度+ SYN/FIN（按一个字节算）<br />\n2.服务器端会向客户端发起连接请求：SYN=1<br />\n3.服务器会生成一个随机序号(<font color=#F36208>其实是有固定算法的</font>)：seq = K<br />\n第三次握手：<br />\n1.客户单应答服务器的连接请求：ACK=1<br />\n2.客户端回复收到了服务器端的数据：ack=服务端的序号 +数据长度 + SYN/FIN（按一个字节算）<br />\n自己总结<br />\n<font color=#F36208>\t第一次握手：客户端发起连接</font><br />\n1.客户端将标志位SYN置位1，表示向服务端请求连接。2.并且根据算法生成一个客户端序号cseq：J<br />\n<font color=#F36208>\t第二次握手：服务端回复请求，发起连接</font><br />\n1.服务端将ACK置为1，表示接受连接。2.发送一个确认序号ack = 客户端的序号(J) + 数据字节个数 + SYN/FIN(算一个字节)<br />\n3.服务端将标志位SYN置位1，表示向客户端请求连接。4.并且根据算法生成一个服务端序号sseq：K<br />\n<font color=#F36208>\t第三次握手：客户端回复请求</font><br />\n1.客户端将ACK置为1，表示接受连接。2.发送一个确认序号ack = 服务端的序号(K) + 数据字节个数 + SYN/FIN(算一个字节)</p>\n<p>第一次握手(客户端→服务端)：客户端请求连接<br />\n客户端与服务端还没有建立连接，不能发数据<br />\n第二次握手(客户端←服务端)：服务端同意连接+请求与客户端连接<br />\n第三次握手(客户端→服务端)：客户端同意连接<br />\n此时客户端已经和服务端已经建立了连接，这次客户端的握手已经可以携带数据了<br />\n之后服务端与客户端都互相建立了连接，可以互相自由通信</p>\n<h2 id=\"11-三次握手实例\"><a class=\"markdownIt-Anchor\" href=\"#11-三次握手实例\"></a> 1.1 三次握手实例</h2>\n<p><img src=\"https://s1.vika.cn/space/2022/05/26/e1cbc619a8b445c5a3cb9282c0d21c21\" alt=\"\" /></p>\n<h2 id=\"12-为什么不能两次握手\"><a class=\"markdownIt-Anchor\" href=\"#12-为什么不能两次握手\"></a> 1.2 为什么不能两次握手</h2>\n<p>因为要确保客户端能<font color=#C32E94>收发</font>消息，服务端能<font color=#C32E94>收发</font>消息，3次握手正好少一次都不行<br />\n<img src=\"https://s1.vika.cn/space/2022/05/26/7f7c22713cf345368d2778005723b9b1\" alt=\"\" /></p>\n<p>四次握手也是可以的，服务端的ACK和SYN连在一起发了，拆开发就是四次握手<br />\n保证可靠连接的最小次数是三次握手</p>\n"},{"cards-deck":"source::_posts::👨🏻‍💻code::C++::C++ primer plus::C++ new的用法.md","title":"C++ new的用法","date":"2022-08-02T10:46:00.000Z","abbrlink":36172,"_content":"\n\n\nC++ new的用法 #card\nnew返回的都是指针(指向第一个元素)\neg：\n```c\nnew int;    //开辟一个存放整数的存储空间，返回一个指向该存储空间的地址(即**指针**）\new int(100);//开辟一个存放整数的空间，并指定该整数的初值为100，返回一个**指向该存储空间的地址**\new char[10];//开辟一个存放字符数组(包括10个元素)的空间，返回首元素的地址\new int[5][4);//开辟一个存放二维整型数组(大小为5*4)的空间，返回首元素的地址\nfloat *p=new float (3.14159);/开辟一个存放单精度数的空间，并指定该实数的初值为/3.14159，将返回的该空间的地址赋给指针变量p\n// 例子\n1.new int[] 是创建一个int型数组，数组大小是在[]中指定\n  int *p = new int[3]; //申请一个整型数组，数组的长度为[]中的值\n2.new int()是创建一个int型数，并且用()括号中的数据进行初始化,例如：\n  int *p = new int(10); // p指向一个值为10的int数。\n```\n\n\n\n\n\n参考资料\n---","source":"_posts/👨🏻‍💻code/C++/C++ primer plus/C++ new的用法.md","raw":"---\ncards-deck: source::_posts::👨🏻‍💻code::C++::C++ primer plus::C++ new的用法.md\ntitle: C++ new的用法 \ndate: '2022-08-02 18:46'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - C++\n  - C++ primer plus\nabbrlink: 36172\ntags: 函数\n---\n\n\n\nC++ new的用法 #card\nnew返回的都是指针(指向第一个元素)\neg：\n```c\nnew int;    //开辟一个存放整数的存储空间，返回一个指向该存储空间的地址(即**指针**）\new int(100);//开辟一个存放整数的空间，并指定该整数的初值为100，返回一个**指向该存储空间的地址**\new char[10];//开辟一个存放字符数组(包括10个元素)的空间，返回首元素的地址\new int[5][4);//开辟一个存放二维整型数组(大小为5*4)的空间，返回首元素的地址\nfloat *p=new float (3.14159);/开辟一个存放单精度数的空间，并指定该实数的初值为/3.14159，将返回的该空间的地址赋给指针变量p\n// 例子\n1.new int[] 是创建一个int型数组，数组大小是在[]中指定\n  int *p = new int[3]; //申请一个整型数组，数组的长度为[]中的值\n2.new int()是创建一个int型数，并且用()括号中的数据进行初始化,例如：\n  int *p = new int(10); // p指向一个值为10的int数。\n```\n\n\n\n\n\n参考资料\n---","slug":"👨🏻‍💻code/C++/C++ primer plus/C++ new的用法","published":1,"updated":"2022-08-08T14:49:40.292Z","_id":"cl6ku8fj40020e0mghjmb3zjx","comments":1,"layout":"post","photos":[],"link":"","content":"<p>C++ new的用法 #card<br>\nnew返回的都是指针(指向第一个元素)<br>\neg：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">new <span class=\"hljs-type\">int</span>;    <span class=\"hljs-comment\">//开辟一个存放整数的存储空间，返回一个指向该存储空间的地址(即**指针**）</span><br>ew <span class=\"hljs-title function_\">int</span><span class=\"hljs-params\">(<span class=\"hljs-number\">100</span>)</span>;<span class=\"hljs-comment\">//开辟一个存放整数的空间，并指定该整数的初值为100，返回一个**指向该存储空间的地址**</span><br>ew <span class=\"hljs-type\">char</span>[<span class=\"hljs-number\">10</span>];<span class=\"hljs-comment\">//开辟一个存放字符数组(包括10个元素)的空间，返回首元素的地址</span><br>ew <span class=\"hljs-type\">int</span>[<span class=\"hljs-number\">5</span>][<span class=\"hljs-number\">4</span>);<span class=\"hljs-comment\">//开辟一个存放二维整型数组(大小为5*4)的空间，返回首元素的地址</span><br><span class=\"hljs-type\">float</span> *p=new <span class=\"hljs-type\">float</span> (<span class=\"hljs-number\">3.14159</span>);/开辟一个存放单精度数的空间，并指定该实数的初值为/<span class=\"hljs-number\">3.14159</span>，将返回的该空间的地址赋给指针变量p<br><span class=\"hljs-comment\">// 例子</span><br><span class=\"hljs-number\">1.</span>new <span class=\"hljs-type\">int</span>[] 是创建一个<span class=\"hljs-type\">int</span>型数组，数组大小是在[]中指定<br>  <span class=\"hljs-type\">int</span> *p = new <span class=\"hljs-type\">int</span>[<span class=\"hljs-number\">3</span>]; <span class=\"hljs-comment\">//申请一个整型数组，数组的长度为[]中的值</span><br><span class=\"hljs-number\">2.</span>new <span class=\"hljs-title function_\">int</span><span class=\"hljs-params\">()</span>是创建一个<span class=\"hljs-type\">int</span>型数，并且用<span class=\"hljs-params\">()</span>括号中的数据进行初始化,例如：<br>  <span class=\"hljs-type\">int</span> *p = new <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// p指向一个值为10的int数。</span><br></code></pre></td></tr></tbody></table></figure>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h2>\n","site":{"data":{}},"wordcount":471,"excerpt":"","more":"<p>C++ new的用法 #card<br />\nnew返回的都是指针(指向第一个元素)<br />\neg：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">new <span class=\"hljs-type\">int</span>;    <span class=\"hljs-comment\">//开辟一个存放整数的存储空间，返回一个指向该存储空间的地址(即**指针**）</span><br>ew <span class=\"hljs-title function_\">int</span><span class=\"hljs-params\">(<span class=\"hljs-number\">100</span>)</span>;<span class=\"hljs-comment\">//开辟一个存放整数的空间，并指定该整数的初值为100，返回一个**指向该存储空间的地址**</span><br>ew <span class=\"hljs-type\">char</span>[<span class=\"hljs-number\">10</span>];<span class=\"hljs-comment\">//开辟一个存放字符数组(包括10个元素)的空间，返回首元素的地址</span><br>ew <span class=\"hljs-type\">int</span>[<span class=\"hljs-number\">5</span>][<span class=\"hljs-number\">4</span>);<span class=\"hljs-comment\">//开辟一个存放二维整型数组(大小为5*4)的空间，返回首元素的地址</span><br><span class=\"hljs-type\">float</span> *p=new <span class=\"hljs-type\">float</span> (<span class=\"hljs-number\">3.14159</span>);/开辟一个存放单精度数的空间，并指定该实数的初值为/<span class=\"hljs-number\">3.14159</span>，将返回的该空间的地址赋给指针变量p<br><span class=\"hljs-comment\">// 例子</span><br><span class=\"hljs-number\">1.</span>new <span class=\"hljs-type\">int</span>[] 是创建一个<span class=\"hljs-type\">int</span>型数组，数组大小是在[]中指定<br>  <span class=\"hljs-type\">int</span> *p = new <span class=\"hljs-type\">int</span>[<span class=\"hljs-number\">3</span>]; <span class=\"hljs-comment\">//申请一个整型数组，数组的长度为[]中的值</span><br><span class=\"hljs-number\">2.</span>new <span class=\"hljs-title function_\">int</span><span class=\"hljs-params\">()</span>是创建一个<span class=\"hljs-type\">int</span>型数，并且用<span class=\"hljs-params\">()</span>括号中的数据进行初始化,例如：<br>  <span class=\"hljs-type\">int</span> *p = new <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// p指向一个值为10的int数。</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h2>\n"},{"title":"c++中 - ‘0’ 以及 -'a' 的相减操作解释","date":"2022-06-15T03:10:00.000Z","abbrlink":12294,"_content":"\n\n#flashcards/代码随想录/知识点 \nc++中 - ‘0’ 以及 -'a' 的相减操作解释\n?\n# 1 将数字字符转为整形变量\n```cpp\n// 将str 字符串\"1234\"里的各个数字字符转成整型，存入整型数组x：\nchar str[]=\"1234\";\nint x[4] = 0;\nfor (int i=0; i<4; i++) x[i] = str[i] - '0'; \n```\n>数字字符减去‘0’就得到了该数字。减去字符0，也就是减去0的ASCII码值48。\n# 2 将字母由小写转为大写\n字母字符- 'a'得到 该字母下的下标\n```cpp\n// 把字符串中字母，小写变大写\nchar str[]=\"aBcxYz\";\nfor (int i=0; i<strlen(str); i++)\nif (str[i] >='a' && str[i] <='z') str[i] = str[i] -'a' + 'A';\n```\n## 2.1 取到字母字符对应的数字：a→0，b→1....\n原理：a - 'a' = 0, b - 'a' = 1 .....\n```cpp\nint hash[27] = {0};\nS = \"ababcbacadefegdehijhklij\"// S[0] - 'a'= 0\nfor (int i = 0; i < S.size(); i++) { \n            hash[S[i] - 'a'] = i; //\n        }\n```\n[[19.划分字母区间#^dhg2oc]]\n[01:03](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/19.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4(carl).mp4#t=63.222835) \n\tS = \"**a**babcbac**a**defegdehijhklij\"\n\t将每一个字母的所对应的下标值放到了hash数组里了，相同字母的是更新的，因为 S[1] - 'a'= S[6] - 'a' = 0 \n\n\n\n","source":"_posts/👨🏻‍💻code/C++/C++ primer plus/c++中 - ‘0’ 以及 -'a' 的相减操作解释.md","raw":"---\ntitle: c++中 - ‘0’ 以及 -'a' 的相减操作解释\ndate: '2022-06-15 11:10'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - C++\n  - C++ primer plus\ntags:\n  - null\nabbrlink: 12294\n---\n\n\n#flashcards/代码随想录/知识点 \nc++中 - ‘0’ 以及 -'a' 的相减操作解释\n?\n# 1 将数字字符转为整形变量\n```cpp\n// 将str 字符串\"1234\"里的各个数字字符转成整型，存入整型数组x：\nchar str[]=\"1234\";\nint x[4] = 0;\nfor (int i=0; i<4; i++) x[i] = str[i] - '0'; \n```\n>数字字符减去‘0’就得到了该数字。减去字符0，也就是减去0的ASCII码值48。\n# 2 将字母由小写转为大写\n字母字符- 'a'得到 该字母下的下标\n```cpp\n// 把字符串中字母，小写变大写\nchar str[]=\"aBcxYz\";\nfor (int i=0; i<strlen(str); i++)\nif (str[i] >='a' && str[i] <='z') str[i] = str[i] -'a' + 'A';\n```\n## 2.1 取到字母字符对应的数字：a→0，b→1....\n原理：a - 'a' = 0, b - 'a' = 1 .....\n```cpp\nint hash[27] = {0};\nS = \"ababcbacadefegdehijhklij\"// S[0] - 'a'= 0\nfor (int i = 0; i < S.size(); i++) { \n            hash[S[i] - 'a'] = i; //\n        }\n```\n[[19.划分字母区间#^dhg2oc]]\n[01:03](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/19.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4(carl).mp4#t=63.222835) \n\tS = \"**a**babcbac**a**defegdehijhklij\"\n\t将每一个字母的所对应的下标值放到了hash数组里了，相同字母的是更新的，因为 S[1] - 'a'= S[6] - 'a' = 0 \n\n\n\n","slug":"👨🏻‍💻code/C++/C++ primer plus/c++中 - ‘0’ 以及 -'a' 的相减操作解释","published":1,"updated":"2022-08-04T15:27:06.809Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fj60024e0mg0xjr02hb","content":"<p>#flashcards/代码随想录/知识点<br>\nc++中 - ‘0’ 以及 -‘a’ 的相减操作解释<br>\n?</p>\n<h1 id=\"1-将数字字符转为整形变量\"><a class=\"markdownIt-Anchor\" href=\"#1-将数字字符转为整形变量\"></a> 1 将数字字符转为整形变量</h1>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 将str 字符串\"1234\"里的各个数字字符转成整型，存入整型数组x：</span><br><span class=\"hljs-type\">char</span> str[]=<span class=\"hljs-string\">\"1234\"</span>;<br><span class=\"hljs-type\">int</span> x[<span class=\"hljs-number\">4</span>] = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">4</span>; i++) x[i] = str[i] - <span class=\"hljs-string\">'0'</span>; <br></code></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>数字字符减去‘0’就得到了该数字。减去字符0，也就是减去0的ASCII码值48。</p>\n</blockquote>\n<h1 id=\"2-将字母由小写转为大写\"><a class=\"markdownIt-Anchor\" href=\"#2-将字母由小写转为大写\"></a> 2 将字母由小写转为大写</h1>\n<p>字母字符- 'a’得到 该字母下的下标</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 把字符串中字母，小写变大写</span><br><span class=\"hljs-type\">char</span> str[]=<span class=\"hljs-string\">\"aBcxYz\"</span>;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-built_in\">strlen</span>(str); i++)<br><span class=\"hljs-keyword\">if</span> (str[i] &gt;=<span class=\"hljs-string\">'a'</span> &amp;&amp; str[i] &lt;=<span class=\"hljs-string\">'z'</span>) str[i] = str[i] -<span class=\"hljs-string\">'a'</span> + <span class=\"hljs-string\">'A'</span>;<br></code></pre></td></tr></tbody></table></figure>\n<h2 id=\"21-取到字母字符对应的数字a0b1\"><a class=\"markdownIt-Anchor\" href=\"#21-取到字母字符对应的数字a0b1\"></a> 2.1 取到字母字符对应的数字：a→0，b→1…</h2>\n<p>原理：a - ‘a’ = 0, b - ‘a’ = 1 …</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">int</span> hash[<span class=\"hljs-number\">27</span>] = {<span class=\"hljs-number\">0</span>};<br>S = <span class=\"hljs-string\">\"ababcbacadefegdehijhklij\"</span><span class=\"hljs-comment\">// S[0] - 'a'= 0</span><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; S.<span class=\"hljs-built_in\">size</span>(); i++) { <br>            hash[S[i] - <span class=\"hljs-string\">'a'</span>] = i; <span class=\"hljs-comment\">//</span><br>        }<br></code></pre></td></tr></tbody></table></figure>\n<p>[[19.划分字母区间#^dhg2oc]]<br>\n[01:03](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/19.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4(carl).mp4#t=63.222835)<br>\nS = “<strong>a</strong>babcbac<strong>a</strong>defegdehijhklij”<br>\n将每一个字母的所对应的下标值放到了hash数组里了，相同字母的是更新的，因为 S[1] - ‘a’=&nbsp;S[6] - ‘a’ = 0</p>\n","site":{"data":{}},"wordcount":935,"excerpt":"","more":"<p>#flashcards/代码随想录/知识点<br />\nc++中 - ‘0’ 以及 -‘a’ 的相减操作解释<br />\n?</p>\n<h1 id=\"1-将数字字符转为整形变量\"><a class=\"markdownIt-Anchor\" href=\"#1-将数字字符转为整形变量\"></a> 1 将数字字符转为整形变量</h1>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 将str 字符串&quot;1234&quot;里的各个数字字符转成整型，存入整型数组x：</span><br><span class=\"hljs-type\">char</span> str[]=<span class=\"hljs-string\">&quot;1234&quot;</span>;<br><span class=\"hljs-type\">int</span> x[<span class=\"hljs-number\">4</span>] = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">4</span>; i++) x[i] = str[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>; <br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>数字字符减去‘0’就得到了该数字。减去字符0，也就是减去0的ASCII码值48。</p>\n</blockquote>\n<h1 id=\"2-将字母由小写转为大写\"><a class=\"markdownIt-Anchor\" href=\"#2-将字母由小写转为大写\"></a> 2 将字母由小写转为大写</h1>\n<p>字母字符- 'a’得到 该字母下的下标</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 把字符串中字母，小写变大写</span><br><span class=\"hljs-type\">char</span> str[]=<span class=\"hljs-string\">&quot;aBcxYz&quot;</span>;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-built_in\">strlen</span>(str); i++)<br><span class=\"hljs-keyword\">if</span> (str[i] &gt;=<span class=\"hljs-string\">&#x27;a&#x27;</span> &amp;&amp; str[i] &lt;=<span class=\"hljs-string\">&#x27;z&#x27;</span>) str[i] = str[i] -<span class=\"hljs-string\">&#x27;a&#x27;</span> + <span class=\"hljs-string\">&#x27;A&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<h2 id=\"21-取到字母字符对应的数字a0b1\"><a class=\"markdownIt-Anchor\" href=\"#21-取到字母字符对应的数字a0b1\"></a> 2.1 取到字母字符对应的数字：a→0，b→1…</h2>\n<p>原理：a - ‘a’ = 0, b - ‘a’ = 1 …</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">int</span> hash[<span class=\"hljs-number\">27</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>S = <span class=\"hljs-string\">&quot;ababcbacadefegdehijhklij&quot;</span><span class=\"hljs-comment\">// S[0] - &#x27;a&#x27;= 0</span><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; S.<span class=\"hljs-built_in\">size</span>(); i++) &#123; <br>            hash[S[i] - <span class=\"hljs-string\">&#x27;a&#x27;</span>] = i; <span class=\"hljs-comment\">//</span><br>        &#125;<br></code></pre></td></tr></table></figure>\n<p>[[19.划分字母区间#^dhg2oc]]<br />\n[01:03](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/19.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4(carl).mp4#t=63.222835)<br />\nS = “<strong>a</strong>babcbac<strong>a</strong>defegdehijhklij”<br />\n将每一个字母的所对应的下标值放到了hash数组里了，相同字母的是更新的，因为 S[1] - ‘a’= S[6] - ‘a’ = 0</p>\n"},{"title":"begin,end","abbrlink":18356,"date":"2022-06-07T03:20:13.000Z","_content":"```cpp\n    int ia[] = {0,1,2,3,4,5,6,7,8,9};\n    int *beg = begin(ia);\n    int *last = end(ia);\n```\n\nbegin函数返回指向数组的**首元素的指针**，end函数返回指向数组**尾元素的下一个位置的指针**，\n这两个函数都被定义在iterator的头文件中。使用begin和end函数就可以很好地处理数组中的元素","source":"_posts/👨🏻‍💻code/C++/C++ primer plus/begin,end.md","raw":"---\ntitle: 'begin,end'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - C++\n  - C++ primer plus\ntags: 函数\nabbrlink: 18356\ndate: 2022-06-07 11:20:13\n---\n```cpp\n    int ia[] = {0,1,2,3,4,5,6,7,8,9};\n    int *beg = begin(ia);\n    int *last = end(ia);\n```\n\nbegin函数返回指向数组的**首元素的指针**，end函数返回指向数组**尾元素的下一个位置的指针**，\n这两个函数都被定义在iterator的头文件中。使用begin和end函数就可以很好地处理数组中的元素","slug":"👨🏻‍💻code/C++/C++ primer plus/begin,end","published":1,"updated":"2022-07-12T09:02:14.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fj60026e0mga6rv85xv","content":"<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">int</span> ia[] = {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>};<br><span class=\"hljs-type\">int</span> *beg = <span class=\"hljs-built_in\">begin</span>(ia);<br><span class=\"hljs-type\">int</span> *last = <span class=\"hljs-built_in\">end</span>(ia);<br></code></pre></td></tr></tbody></table></figure>\n<p>begin函数返回指向数组的<strong>首元素的指针</strong>，end函数返回指向数组<strong>尾元素的下一个位置的指针</strong>，<br>\n这两个函数都被定义在iterator的头文件中。使用begin和end函数就可以很好地处理数组中的元素</p>\n","site":{"data":{}},"wordcount":174,"excerpt":"","more":"<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">int</span> ia[] = &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>&#125;;<br><span class=\"hljs-type\">int</span> *beg = <span class=\"hljs-built_in\">begin</span>(ia);<br><span class=\"hljs-type\">int</span> *last = <span class=\"hljs-built_in\">end</span>(ia);<br></code></pre></td></tr></table></figure>\n<p>begin函数返回指向数组的<strong>首元素的指针</strong>，end函数返回指向数组<strong>尾元素的下一个位置的指针</strong>，<br />\n这两个函数都被定义在iterator的头文件中。使用begin和end函数就可以很好地处理数组中的元素</p>\n"},{"title":"insert函数","abbrlink":44424,"date":"2022-06-07T03:17:41.000Z","_content":"\n\n# 1 在字符串中插入\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n \nint main()\n{\n    string str(\"All that exists is what's ahead.\");\n    string a, b;\n    a = str.insert(4,\"sky\");\n    //在下标为4的位置，插入字符串sky\n    cout << a << endl; //输出All skythat exists is what's ahead.\n \n    str = \"All that exists is what's ahead.\";\n    b = str.insert(4,5,'x');\n    //在下标为4的位置，插入字符串5个字符x\n    cout << b << endl; //输出 All xxxxxthat exists is what's ahead.\n    return 0;\n}\n```\n\n# 2 在数组下标处插入\n```cpp\nvector<vector<int>> que;\nque.insert(que.begin() + position, people[i]);// 在下标position处插入people[i]\n```\n\n[[begin,end]]\n","source":"_posts/👨🏻‍💻code/C++/C++ primer plus/insert函数.md","raw":"---\ntitle: insert函数\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - C++\n  - C++ primer plus\ntags:\n  - 函数\nabbrlink: 44424\ndate: 2022-06-07 11:17:41\n---\n\n\n# 1 在字符串中插入\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n \nint main()\n{\n    string str(\"All that exists is what's ahead.\");\n    string a, b;\n    a = str.insert(4,\"sky\");\n    //在下标为4的位置，插入字符串sky\n    cout << a << endl; //输出All skythat exists is what's ahead.\n \n    str = \"All that exists is what's ahead.\";\n    b = str.insert(4,5,'x');\n    //在下标为4的位置，插入字符串5个字符x\n    cout << b << endl; //输出 All xxxxxthat exists is what's ahead.\n    return 0;\n}\n```\n\n# 2 在数组下标处插入\n```cpp\nvector<vector<int>> que;\nque.insert(que.begin() + position, people[i]);// 在下标position处插入people[i]\n```\n\n[[begin,end]]\n","slug":"👨🏻‍💻code/C++/C++ primer plus/insert函数","published":1,"updated":"2022-07-12T09:02:14.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fj7002be0mg1c034j8r","content":"<h1 id=\"1-在字符串中插入\"><a class=\"markdownIt-Anchor\" href=\"#1-在字符串中插入\"></a> 1 在字符串中插入</h1>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br> <br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>{<br>    <span class=\"hljs-function\">string <span class=\"hljs-title\">str</span><span class=\"hljs-params\">(<span class=\"hljs-string\">\"All that exists is what's ahead.\"</span>)</span></span>;<br>    string a, b;<br>    a = str.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">4</span>,<span class=\"hljs-string\">\"sky\"</span>);<br>    <span class=\"hljs-comment\">//在下标为4的位置，插入字符串sky</span><br>    cout &lt;&lt; a &lt;&lt; endl; <span class=\"hljs-comment\">//输出All skythat exists is what's ahead.</span><br> <br>    str = <span class=\"hljs-string\">\"All that exists is what's ahead.\"</span>;<br>    b = str.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-string\">'x'</span>);<br>    <span class=\"hljs-comment\">//在下标为4的位置，插入字符串5个字符x</span><br>    cout &lt;&lt; b &lt;&lt; endl; <span class=\"hljs-comment\">//输出 All xxxxxthat exists is what's ahead.</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure>\n<h1 id=\"2-在数组下标处插入\"><a class=\"markdownIt-Anchor\" href=\"#2-在数组下标处插入\"></a> 2 在数组下标处插入</h1>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; que;<br>que.<span class=\"hljs-built_in\">insert</span>(que.<span class=\"hljs-built_in\">begin</span>() + position, people[i]);<span class=\"hljs-comment\">// 在下标position处插入people[i]</span><br></code></pre></td></tr></tbody></table></figure>\n<p>[[begin,end]]</p>\n","site":{"data":{}},"wordcount":587,"excerpt":"","more":"<h1 id=\"1-在字符串中插入\"><a class=\"markdownIt-Anchor\" href=\"#1-在字符串中插入\"></a> 1 在字符串中插入</h1>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br> <br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-function\">string <span class=\"hljs-title\">str</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;All that exists is what&#x27;s ahead.&quot;</span>)</span></span>;<br>    string a, b;<br>    a = str.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">4</span>,<span class=\"hljs-string\">&quot;sky&quot;</span>);<br>    <span class=\"hljs-comment\">//在下标为4的位置，插入字符串sky</span><br>    cout &lt;&lt; a &lt;&lt; endl; <span class=\"hljs-comment\">//输出All skythat exists is what&#x27;s ahead.</span><br> <br>    str = <span class=\"hljs-string\">&quot;All that exists is what&#x27;s ahead.&quot;</span>;<br>    b = str.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-string\">&#x27;x&#x27;</span>);<br>    <span class=\"hljs-comment\">//在下标为4的位置，插入字符串5个字符x</span><br>    cout &lt;&lt; b &lt;&lt; endl; <span class=\"hljs-comment\">//输出 All xxxxxthat exists is what&#x27;s ahead.</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"2-在数组下标处插入\"><a class=\"markdownIt-Anchor\" href=\"#2-在数组下标处插入\"></a> 2 在数组下标处插入</h1>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; que;<br>que.<span class=\"hljs-built_in\">insert</span>(que.<span class=\"hljs-built_in\">begin</span>() + position, people[i]);<span class=\"hljs-comment\">// 在下标position处插入people[i]</span><br></code></pre></td></tr></table></figure>\n<p>[[begin,end]]</p>\n"},{"cards-deck":"source::_posts::👨🏻‍💻code::C++::C++ primer plus::for 循环.md","id":"e21b2a82-20a3-4f7e-981e-d83e6df620a5","title":"for 循环","abbrlink":28967,"date":"2022-06-06T06:08:12.000Z","_content":"\n\n# 1 基本概念\nfor(变量i; 判断条件; 变化变量i)\nfor循环中第二条件是判断条件，破坏了该条件则会退出for循环\n\n# 2 遍历函数\n操作到最后一个元素时不会取到最后一个下标的后一位(也就是长度)\n```cpp\n   for (int i = 0; i < prices.size(); i++){\n            result += max(prices[i+1] - prices[i],0);// 用!=更好\n        }\n```\n\n\n从后往前遍历：`for (int i = num.size () - 1; i > 0; i--)` 这个操作不了第一个元素(下标0)\n\n从前往后遍历：`for(int i = 0 ; i < num.size(); i++)`，\n\n# 3 数组求和\n## 3.1 第一种写法\nfor (循环变量类型 循环变量名称 : 要被遍历的对象) 循环体\n应用：对数组求和，a会从第一个元素开始遍历到最后一个元素\n```cpp\n//A是数组，for循环对数组求和\nint result = 0;\nfor (int a : A)  result += a; // int a 类似于int i:后只需数组名即可\n```\n\n## 3.2 第二种写法\n```c\nint sum = 0\nfor (int i = 0; i < nums.size(); i++) sum += nums[i];\n```\n\n\n\n\nn%2 == 1什么意思 #card \nn%2就是对n求：n除以2后的余数，这里余数只有两种情况就是0或者是1\neg：5%2=1\n\n\n\n\n[ob](obsidian://advanced-uri?vault=Documents&uid=e21b2a82-20a3-4f7e-981e-d83e6df620a5)\n\n","source":"_posts/👨🏻‍💻code/C++/C++ primer plus/for 循环.md","raw":"---\ncards-deck: source::_posts::👨🏻‍💻code::C++::C++ primer plus::for 循环.md\nid: e21b2a82-20a3-4f7e-981e-d83e6df620a5\ntitle: for 循环\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - C++\n  - C++ primer plus\ntags: 函数\nabbrlink: 28967\ndate: 2022-06-06 14:08:12\n---\n\n\n# 1 基本概念\nfor(变量i; 判断条件; 变化变量i)\nfor循环中第二条件是判断条件，破坏了该条件则会退出for循环\n\n# 2 遍历函数\n操作到最后一个元素时不会取到最后一个下标的后一位(也就是长度)\n```cpp\n   for (int i = 0; i < prices.size(); i++){\n            result += max(prices[i+1] - prices[i],0);// 用!=更好\n        }\n```\n\n\n从后往前遍历：`for (int i = num.size () - 1; i > 0; i--)` 这个操作不了第一个元素(下标0)\n\n从前往后遍历：`for(int i = 0 ; i < num.size(); i++)`，\n\n# 3 数组求和\n## 3.1 第一种写法\nfor (循环变量类型 循环变量名称 : 要被遍历的对象) 循环体\n应用：对数组求和，a会从第一个元素开始遍历到最后一个元素\n```cpp\n//A是数组，for循环对数组求和\nint result = 0;\nfor (int a : A)  result += a; // int a 类似于int i:后只需数组名即可\n```\n\n## 3.2 第二种写法\n```c\nint sum = 0\nfor (int i = 0; i < nums.size(); i++) sum += nums[i];\n```\n\n\n\n\nn%2 == 1什么意思 #card \nn%2就是对n求：n除以2后的余数，这里余数只有两种情况就是0或者是1\neg：5%2=1\n\n\n\n\n[ob](obsidian://advanced-uri?vault=Documents&uid=e21b2a82-20a3-4f7e-981e-d83e6df620a5)\n\n","slug":"👨🏻‍💻code/C++/C++ primer plus/for 循环","published":1,"updated":"2022-08-08T14:51:18.834Z","_id":"cl6ku8fj7002ee0mg0ca442d6","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-基本概念\"><a class=\"markdownIt-Anchor\" href=\"#1-基本概念\"></a> 1 基本概念</h1>\n<p>for(变量i; 判断条件; 变化变量i)<br>\nfor循环中第二条件是判断条件，破坏了该条件则会退出for循环</p>\n<h1 id=\"2-遍历函数\"><a class=\"markdownIt-Anchor\" href=\"#2-遍历函数\"></a> 2 遍历函数</h1>\n<p>操作到最后一个元素时不会取到最后一个下标的后一位(也就是长度)</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; prices.<span class=\"hljs-built_in\">size</span>(); i++){<br>         result += <span class=\"hljs-built_in\">max</span>(prices[i+<span class=\"hljs-number\">1</span>] - prices[i],<span class=\"hljs-number\">0</span>);<span class=\"hljs-comment\">// 用!=更好</span><br>     }<br></code></pre></td></tr></tbody></table></figure>\n<p>从后往前遍历：<code>for (int i = num.size () - 1; i &gt; 0; i--)</code> 这个操作不了第一个元素(下标0)</p>\n<p>从前往后遍历：<code>for(int i = 0 ; i &lt; num.size(); i++)</code>，</p>\n<h1 id=\"3-数组求和\"><a class=\"markdownIt-Anchor\" href=\"#3-数组求和\"></a> 3 数组求和</h1>\n<h2 id=\"31-第一种写法\"><a class=\"markdownIt-Anchor\" href=\"#31-第一种写法\"></a> 3.1 第一种写法</h2>\n<p>for (循环变量类型 循环变量名称 : 要被遍历的对象) 循环体<br>\n应用：对数组求和，a会从第一个元素开始遍历到最后一个元素</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//A是数组，for循环对数组求和</span><br><span class=\"hljs-type\">int</span> result = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> a : A)  result += a; <span class=\"hljs-comment\">// int a 类似于int i:后只需数组名即可</span><br></code></pre></td></tr></tbody></table></figure>\n<h2 id=\"32-第二种写法\"><a class=\"markdownIt-Anchor\" href=\"#32-第二种写法\"></a> 3.2 第二种写法</h2>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.size(); i++) sum += nums[i];<br></code></pre></td></tr></tbody></table></figure>\n<p>n%2 == 1什么意思 #card<br>\nn%2就是对n求：n除以2后的余数，这里余数只有两种情况就是0或者是1<br>\neg：5%2=1</p>\n<p><a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=e21b2a82-20a3-4f7e-981e-d83e6df620a5\">ob</a></p>\n","site":{"data":{}},"wordcount":546,"excerpt":"","more":"<h1 id=\"1-基本概念\"><a class=\"markdownIt-Anchor\" href=\"#1-基本概念\"></a> 1 基本概念</h1>\n<p>for(变量i; 判断条件; 变化变量i)<br />\nfor循环中第二条件是判断条件，破坏了该条件则会退出for循环</p>\n<h1 id=\"2-遍历函数\"><a class=\"markdownIt-Anchor\" href=\"#2-遍历函数\"></a> 2 遍历函数</h1>\n<p>操作到最后一个元素时不会取到最后一个下标的后一位(也就是长度)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; prices.<span class=\"hljs-built_in\">size</span>(); i++)&#123;<br>         result += <span class=\"hljs-built_in\">max</span>(prices[i+<span class=\"hljs-number\">1</span>] - prices[i],<span class=\"hljs-number\">0</span>);<span class=\"hljs-comment\">// 用!=更好</span><br>     &#125;<br></code></pre></td></tr></table></figure>\n<p>从后往前遍历：<code>for (int i = num.size () - 1; i &gt; 0; i--)</code> 这个操作不了第一个元素(下标0)</p>\n<p>从前往后遍历：<code>for(int i = 0 ; i &lt; num.size(); i++)</code>，</p>\n<h1 id=\"3-数组求和\"><a class=\"markdownIt-Anchor\" href=\"#3-数组求和\"></a> 3 数组求和</h1>\n<h2 id=\"31-第一种写法\"><a class=\"markdownIt-Anchor\" href=\"#31-第一种写法\"></a> 3.1 第一种写法</h2>\n<p>for (循环变量类型 循环变量名称 : 要被遍历的对象) 循环体<br />\n应用：对数组求和，a会从第一个元素开始遍历到最后一个元素</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//A是数组，for循环对数组求和</span><br><span class=\"hljs-type\">int</span> result = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> a : A)  result += a; <span class=\"hljs-comment\">// int a 类似于int i:后只需数组名即可</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"32-第二种写法\"><a class=\"markdownIt-Anchor\" href=\"#32-第二种写法\"></a> 3.2 第二种写法</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.size(); i++) sum += nums[i];<br></code></pre></td></tr></table></figure>\n<p>n%2 == 1什么意思 #card<br />\nn%2就是对n求：n除以2后的余数，这里余数只有两种情况就是0或者是1<br />\neg：5%2=1</p>\n<p><a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=e21b2a82-20a3-4f7e-981e-d83e6df620a5\">ob</a></p>\n"},{"title":"sort 函数","abbrlink":4,"_content":"时间复杂度:nlogn\nsort函数默认从小到大排列，如需自定义需要额外写个函数\n```cpp\nstatic bool cmp(int a, int b) {\n    return abs(a) > abs(b); // 返回绝对值大的\n}\n```\n# 1 应用\n## 1.1 按照绝对值从大到小排列，\n```cpp\nstatic bool cmp(int a, int b) {\n    return abs(a) > abs(b);\n```\n## 1.2 从大到小排列：[[14.根据身高重建队列]]\n```cpp\n// 身高从大到小排（身高相同k小的站前面）\nstatic bool cmp(const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) return a[1] < b[1];\n        return a[0] > b[0];\n    }\n```\n\nbool 值好像是规定的 #疑问 \n```cpp\n   sort(A.begin(), A.end(), cmp); // 第三个参数不用出入参数这是规则\n```\n\n[[static 关键字]]\n","source":"_posts/👨🏻‍💻code/C++/C++ primer plus/sort函数.md","raw":"---\ntitle: sort 函数\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - C++\n  - C++ primer plus\nabbrlink: 4\n---\n时间复杂度:nlogn\nsort函数默认从小到大排列，如需自定义需要额外写个函数\n```cpp\nstatic bool cmp(int a, int b) {\n    return abs(a) > abs(b); // 返回绝对值大的\n}\n```\n# 1 应用\n## 1.1 按照绝对值从大到小排列，\n```cpp\nstatic bool cmp(int a, int b) {\n    return abs(a) > abs(b);\n```\n## 1.2 从大到小排列：[[14.根据身高重建队列]]\n```cpp\n// 身高从大到小排（身高相同k小的站前面）\nstatic bool cmp(const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) return a[1] < b[1];\n        return a[0] > b[0];\n    }\n```\n\nbool 值好像是规定的 #疑问 \n```cpp\n   sort(A.begin(), A.end(), cmp); // 第三个参数不用出入参数这是规则\n```\n\n[[static 关键字]]\n","slug":"👨🏻‍💻code/C++/C++ primer plus/sort函数","published":1,"date":"2022-05-30T13:54:51.000Z","updated":"2022-08-08T08:58:03.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fj7002ie0mg9zqfddvh","content":"<p>时间复杂度:nlogn<br>\nsort函数默认从小到大排列，如需自定义需要额外写个函数</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> </span>{<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">abs</span>(a) &gt; <span class=\"hljs-built_in\">abs</span>(b); <span class=\"hljs-comment\">// 返回绝对值大的</span><br>}<br></code></pre></td></tr></tbody></table></figure>\n<h1 id=\"1-应用\"><a class=\"markdownIt-Anchor\" href=\"#1-应用\"></a> 1 应用</h1>\n<h2 id=\"11-按照绝对值从大到小排列\"><a class=\"markdownIt-Anchor\" href=\"#11-按照绝对值从大到小排列\"></a> 1.1 按照绝对值从大到小排列，</h2>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> </span>{<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">abs</span>(a) &gt; <span class=\"hljs-built_in\">abs</span>(b);<br></code></pre></td></tr></tbody></table></figure>\n<h2 id=\"12-从大到小排列14根据身高重建队列\"><a class=\"markdownIt-Anchor\" href=\"#12-从大到小排列14根据身高重建队列\"></a> 1.2 从大到小排列：[[14.根据身高重建队列]]</h2>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 身高从大到小排（身高相同k小的站前面）</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; a, <span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; b)</span> </span>{<br>        <span class=\"hljs-keyword\">if</span> (a[<span class=\"hljs-number\">0</span>] == b[<span class=\"hljs-number\">0</span>]) <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">1</span>] &lt; b[<span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">0</span>] &gt; b[<span class=\"hljs-number\">0</span>];<br>    }<br></code></pre></td></tr></tbody></table></figure>\n<p>bool 值好像是规定的 #疑问</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-built_in\">sort</span>(A.<span class=\"hljs-built_in\">begin</span>(), A.<span class=\"hljs-built_in\">end</span>(), cmp); <span class=\"hljs-comment\">// 第三个参数不用出入参数这是规则</span><br></code></pre></td></tr></tbody></table></figure>\n<p>[[static 关键字]]</p>\n","site":{"data":{}},"wordcount":443,"excerpt":"","more":"<p>时间复杂度:nlogn<br />\nsort函数默认从小到大排列，如需自定义需要额外写个函数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">abs</span>(a) &gt; <span class=\"hljs-built_in\">abs</span>(b); <span class=\"hljs-comment\">// 返回绝对值大的</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"1-应用\"><a class=\"markdownIt-Anchor\" href=\"#1-应用\"></a> 1 应用</h1>\n<h2 id=\"11-按照绝对值从大到小排列\"><a class=\"markdownIt-Anchor\" href=\"#11-按照绝对值从大到小排列\"></a> 1.1 按照绝对值从大到小排列，</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">abs</span>(a) &gt; <span class=\"hljs-built_in\">abs</span>(b);<br></code></pre></td></tr></table></figure>\n<h2 id=\"12-从大到小排列14根据身高重建队列\"><a class=\"markdownIt-Anchor\" href=\"#12-从大到小排列14根据身高重建队列\"></a> 1.2 从大到小排列：[[14.根据身高重建队列]]</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 身高从大到小排（身高相同k小的站前面）</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; a, <span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; b)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (a[<span class=\"hljs-number\">0</span>] == b[<span class=\"hljs-number\">0</span>]) <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">1</span>] &lt; b[<span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">0</span>] &gt; b[<span class=\"hljs-number\">0</span>];<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>bool 值好像是规定的 #疑问</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-built_in\">sort</span>(A.<span class=\"hljs-built_in\">begin</span>(), A.<span class=\"hljs-built_in\">end</span>(), cmp); <span class=\"hljs-comment\">// 第三个参数不用出入参数这是规则</span><br></code></pre></td></tr></table></figure>\n<p>[[static 关键字]]</p>\n"},{"title":"vector","date":"2022-06-07T02:30:00.000Z","abbrlink":54708,"_content":"# 1 用法\n## 1.1 初始化\n**一维数组的初始化** \nvector的长度不能是变量,必须是常量\n 1. `vector<int> a(10)`; 默认是0\n 2. `vector<int> a(10,1)`;(10个变量每个为1)\n 3. `vector<int> a(b)`; //用b向量来创建a向量，整体复制性赋值\n 4. `vector<int> a(b.begin(),b.begin+3)`; //定义了a值为b中第0个到第2个（共3个）元素\n 5.  int b[7]={1,2,3,4,5,9,8}; `vector<int> a(b,b+7);` //从数组中获得初值\n \n**二维数组的初始化**\n初始化为0，0可变其他数\n```c\nvector<vector<int>> vec(row, vector<int> (col,0));\n```\n\n\n返回值和使用时：必须用 dp[ i ]，不能用dp(i)\n\n\n# 2 原理\n普通数组 int a [10]，一旦定义了就不能改变了，这个数组最多只能放10个元素了\n动态数组vector，不用关心初始的大小，可以随意的添加数据\n\n**vector的底层实现也是普通数组**。\n>vector的底层实现是array，严格来讲vector是容器，不是数组。[^1]\n\n\nvector的大小有两个维度一个是size一个是capicity，\nsize就是我们平时用来遍历vector时候用的，例如：`for (int i = 0; i < vec.size(); i++)` \n而capicity是vector底层数组（就是普通数组）的大小，capicity可不一定就是size\n当insert数据的时候，如果已经大于capicity，capicity会成倍扩容，但对外暴露的size其实仅仅是+1而已，剩下的位置还是空闲的\n\n\nC++中vector（可以理解是一个动态数组，底层是普通数组实现的）如果插入元素大于预先普通数组大小，vector底部会有一个扩容的操作，即申请两倍于原先普通数组的大小，然后把数据拷贝到另一个更大的数组上，然后在释放原数组内存。\neg：\n原vector中的size和capicity相同都是3，初始化为1 2 3，此时要push_back一个元素4。\n那么底层其实就要申请一个大小为6的普通数组，并且把原元素拷贝过去，释放原数组内存，\n**注意图中底层数组的内存起始地址已经变了**。\n![vector原理|800](https://img-blog.csdnimg.cn/20201218185902217.png)\n\n所以使用vector（动态数组）来insert，是费时的，插入再拷贝的话，单纯一个插入的操作就是O(n^2)了，甚至可能拷贝好几次，就不止O(n^2)了。\n\n解决办法：可以采用链表来进行插入操作\n\teg：`vector<vector<int>> que：[[7,0],[7,1]]` →`list<vector<int>> que：[7,0]→[7,1]`\n\n\n# 3 参考\n[C++ vector的用法（整理）_一个幽默且帅气的程序员的博客-CSDN博客_c++ vector](https://blog.csdn.net/wkq0825/article/details/82255984?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165701148116781683956725%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165701148116781683956725&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-82255984-null-null.142^v30^control,185^v2^control&utm_term=vector%2Bc%2B%2B%2B%E7%94%A8%E6%B3%95&spm=1018.2226.3001.4187)\n\n[^1]: [[1. 数组理论基础]]","source":"_posts/👨🏻‍💻code/C++/C++ primer plus/vector.md","raw":"---\ntitle: vector\ndate: '2022-06-07 10:30'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - C++\n  - C++ primer plus\ntags:\n  - 函数\nabbrlink: 54708\n---\n# 1 用法\n## 1.1 初始化\n**一维数组的初始化** \nvector的长度不能是变量,必须是常量\n 1. `vector<int> a(10)`; 默认是0\n 2. `vector<int> a(10,1)`;(10个变量每个为1)\n 3. `vector<int> a(b)`; //用b向量来创建a向量，整体复制性赋值\n 4. `vector<int> a(b.begin(),b.begin+3)`; //定义了a值为b中第0个到第2个（共3个）元素\n 5.  int b[7]={1,2,3,4,5,9,8}; `vector<int> a(b,b+7);` //从数组中获得初值\n \n**二维数组的初始化**\n初始化为0，0可变其他数\n```c\nvector<vector<int>> vec(row, vector<int> (col,0));\n```\n\n\n返回值和使用时：必须用 dp[ i ]，不能用dp(i)\n\n\n# 2 原理\n普通数组 int a [10]，一旦定义了就不能改变了，这个数组最多只能放10个元素了\n动态数组vector，不用关心初始的大小，可以随意的添加数据\n\n**vector的底层实现也是普通数组**。\n>vector的底层实现是array，严格来讲vector是容器，不是数组。[^1]\n\n\nvector的大小有两个维度一个是size一个是capicity，\nsize就是我们平时用来遍历vector时候用的，例如：`for (int i = 0; i < vec.size(); i++)` \n而capicity是vector底层数组（就是普通数组）的大小，capicity可不一定就是size\n当insert数据的时候，如果已经大于capicity，capicity会成倍扩容，但对外暴露的size其实仅仅是+1而已，剩下的位置还是空闲的\n\n\nC++中vector（可以理解是一个动态数组，底层是普通数组实现的）如果插入元素大于预先普通数组大小，vector底部会有一个扩容的操作，即申请两倍于原先普通数组的大小，然后把数据拷贝到另一个更大的数组上，然后在释放原数组内存。\neg：\n原vector中的size和capicity相同都是3，初始化为1 2 3，此时要push_back一个元素4。\n那么底层其实就要申请一个大小为6的普通数组，并且把原元素拷贝过去，释放原数组内存，\n**注意图中底层数组的内存起始地址已经变了**。\n![vector原理|800](https://img-blog.csdnimg.cn/20201218185902217.png)\n\n所以使用vector（动态数组）来insert，是费时的，插入再拷贝的话，单纯一个插入的操作就是O(n^2)了，甚至可能拷贝好几次，就不止O(n^2)了。\n\n解决办法：可以采用链表来进行插入操作\n\teg：`vector<vector<int>> que：[[7,0],[7,1]]` →`list<vector<int>> que：[7,0]→[7,1]`\n\n\n# 3 参考\n[C++ vector的用法（整理）_一个幽默且帅气的程序员的博客-CSDN博客_c++ vector](https://blog.csdn.net/wkq0825/article/details/82255984?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165701148116781683956725%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165701148116781683956725&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-82255984-null-null.142^v30^control,185^v2^control&utm_term=vector%2Bc%2B%2B%2B%E7%94%A8%E6%B3%95&spm=1018.2226.3001.4187)\n\n[^1]: [[1. 数组理论基础]]","slug":"👨🏻‍💻code/C++/C++ primer plus/vector","published":1,"updated":"2022-08-08T09:48:14.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fj8002me0mg9rujet2g","content":"<h1 id=\"1-用法\"><a class=\"markdownIt-Anchor\" href=\"#1-用法\"></a> 1 用法</h1>\n<h2 id=\"11-初始化\"><a class=\"markdownIt-Anchor\" href=\"#11-初始化\"></a> 1.1 初始化</h2>\n<p><strong>一维数组的初始化</strong><br>\nvector的长度不能是变量,必须是常量</p>\n<ol>\n<li><code>vector&lt;int&gt; a(10)</code>; 默认是0</li>\n<li><code>vector&lt;int&gt; a(10,1)</code>;(10个变量每个为1)</li>\n<li><code>vector&lt;int&gt; a(b)</code>; //用b向量来创建a向量，整体复制性赋值</li>\n<li><code>vector&lt;int&gt; a(b.begin(),b.begin+3)</code>; //定义了a值为b中第0个到第2个（共3个）元素</li>\n<li>int b[7]={1,2,3,4,5,9,8}; <code>vector&lt;int&gt; a(b,b+7);</code> //从数组中获得初值</li>\n</ol>\n<p><strong>二维数组的初始化</strong><br>\n初始化为0，0可变其他数</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;&gt; vec(row, <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; (col,<span class=\"hljs-number\">0</span>));<br></code></pre></td></tr></tbody></table></figure>\n<p>返回值和使用时：必须用 dp[ i ]，不能用dp(i)</p>\n<h1 id=\"2-原理\"><a class=\"markdownIt-Anchor\" href=\"#2-原理\"></a> 2 原理</h1>\n<p>普通数组 int a [10]，一旦定义了就不能改变了，这个数组最多只能放10个元素了<br>\n动态数组vector，不用关心初始的大小，可以随意的添加数据</p>\n<p><strong>vector的底层实现也是普通数组</strong>。</p>\n<blockquote>\n<p>vector的底层实现是array，严格来讲vector是容器，不是数组。<sup id=\"fnref:1\" class=\"footnote-ref\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"[[1. 数组理论基础]]\n\">[1]</span></a></sup></p>\n</blockquote>\n<p>vector的大小有两个维度一个是size一个是capicity，<br>\nsize就是我们平时用来遍历vector时候用的，例如：<code>for (int i = 0; i &lt; vec.size(); i++)</code><br>\n而capicity是vector底层数组（就是普通数组）的大小，capicity可不一定就是size<br>\n当insert数据的时候，如果已经大于capicity，capicity会成倍扩容，但对外暴露的size其实仅仅是+1而已，剩下的位置还是空闲的</p>\n<p>C++中vector（可以理解是一个动态数组，底层是普通数组实现的）如果插入元素大于预先普通数组大小，vector底部会有一个扩容的操作，即申请两倍于原先普通数组的大小，然后把数据拷贝到另一个更大的数组上，然后在释放原数组内存。<br>\neg：<br>\n原vector中的size和capicity相同都是3，初始化为1 2 3，此时要push_back一个元素4。<br>\n那么底层其实就要申请一个大小为6的普通数组，并且把原元素拷贝过去，释放原数组内存，<br>\n<strong>注意图中底层数组的内存起始地址已经变了</strong>。<br>\n<img src=\"https://img-blog.csdnimg.cn/20201218185902217.png\" alt=\"vector原理|800\"></p>\n<p>所以使用vector（动态数组）来insert，是费时的，插入再拷贝的话，单纯一个插入的操作就是O(n<sup>2)了，甚至可能拷贝好几次，就不止O(n</sup>2)了。</p>\n<p>解决办法：可以采用链表来进行插入操作<br>\neg：<code>vector&lt;vector&lt;int&gt;&gt; que：[[7,0],[7,1]]</code> →<code>list&lt;vector&lt;int&gt;&gt; que：[7,0]→[7,1]</code></p>\n<h1 id=\"3-参考\"><a class=\"markdownIt-Anchor\" href=\"#3-参考\"></a> 3 参考</h1>\n<p><a href=\"https://blog.csdn.net/wkq0825/article/details/82255984?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165701148116781683956725%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165701148116781683956725&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-82255984-null-null.142%5Ev30%5Econtrol,185%5Ev2%5Econtrol&amp;utm_term=vector%2Bc%2B%2B%2B%E7%94%A8%E6%B3%95&amp;spm=1018.2226.3001.4187\">C++ vector的用法（整理）_一个幽默且帅气的程序员的博客-CSDN博客_c++ vector</a></p>\n<section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span>[[1. 数组理论基础]]\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>","site":{"data":{}},"wordcount":1207,"excerpt":"","more":"<h1 id=\"1-用法\"><a class=\"markdownIt-Anchor\" href=\"#1-用法\"></a> 1 用法</h1>\n<h2 id=\"11-初始化\"><a class=\"markdownIt-Anchor\" href=\"#11-初始化\"></a> 1.1 初始化</h2>\n<p><strong>一维数组的初始化</strong><br />\nvector的长度不能是变量,必须是常量</p>\n<ol>\n<li><code>vector&lt;int&gt; a(10)</code>; 默认是0</li>\n<li><code>vector&lt;int&gt; a(10,1)</code>;(10个变量每个为1)</li>\n<li><code>vector&lt;int&gt; a(b)</code>; //用b向量来创建a向量，整体复制性赋值</li>\n<li><code>vector&lt;int&gt; a(b.begin(),b.begin+3)</code>; //定义了a值为b中第0个到第2个（共3个）元素</li>\n<li>int b[7]={1,2,3,4,5,9,8}; <code>vector&lt;int&gt; a(b,b+7);</code> //从数组中获得初值</li>\n</ol>\n<p><strong>二维数组的初始化</strong><br />\n初始化为0，0可变其他数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;&gt; vec(row, <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; (col,<span class=\"hljs-number\">0</span>));<br></code></pre></td></tr></table></figure>\n<p>返回值和使用时：必须用 dp[ i ]，不能用dp(i)</p>\n<h1 id=\"2-原理\"><a class=\"markdownIt-Anchor\" href=\"#2-原理\"></a> 2 原理</h1>\n<p>普通数组 int a [10]，一旦定义了就不能改变了，这个数组最多只能放10个元素了<br />\n动态数组vector，不用关心初始的大小，可以随意的添加数据</p>\n<p><strong>vector的底层实现也是普通数组</strong>。</p>\n<blockquote>\n<p>vector的底层实现是array，严格来讲vector是容器，不是数组。<sup id=\"fnref:1\" class=\"footnote-ref\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"[[1. 数组理论基础]]\n\">[1]</span></a></sup></p>\n</blockquote>\n<p>vector的大小有两个维度一个是size一个是capicity，<br />\nsize就是我们平时用来遍历vector时候用的，例如：<code>for (int i = 0; i &lt; vec.size(); i++)</code><br />\n而capicity是vector底层数组（就是普通数组）的大小，capicity可不一定就是size<br />\n当insert数据的时候，如果已经大于capicity，capicity会成倍扩容，但对外暴露的size其实仅仅是+1而已，剩下的位置还是空闲的</p>\n<p>C++中vector（可以理解是一个动态数组，底层是普通数组实现的）如果插入元素大于预先普通数组大小，vector底部会有一个扩容的操作，即申请两倍于原先普通数组的大小，然后把数据拷贝到另一个更大的数组上，然后在释放原数组内存。<br />\neg：<br />\n原vector中的size和capicity相同都是3，初始化为1 2 3，此时要push_back一个元素4。<br />\n那么底层其实就要申请一个大小为6的普通数组，并且把原元素拷贝过去，释放原数组内存，<br />\n<strong>注意图中底层数组的内存起始地址已经变了</strong>。<br />\n<img src=\"https://img-blog.csdnimg.cn/20201218185902217.png\" alt=\"vector原理|800\" /></p>\n<p>所以使用vector（动态数组）来insert，是费时的，插入再拷贝的话，单纯一个插入的操作就是O(n<sup>2)了，甚至可能拷贝好几次，就不止O(n</sup>2)了。</p>\n<p>解决办法：可以采用链表来进行插入操作<br />\neg：<code>vector&lt;vector&lt;int&gt;&gt; que：[[7,0],[7,1]]</code> →<code>list&lt;vector&lt;int&gt;&gt; que：[7,0]→[7,1]</code></p>\n<h1 id=\"3-参考\"><a class=\"markdownIt-Anchor\" href=\"#3-参考\"></a> 3 参考</h1>\n<p><a href=\"https://blog.csdn.net/wkq0825/article/details/82255984?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165701148116781683956725%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165701148116781683956725&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-82255984-null-null.142%5Ev30%5Econtrol,185%5Ev2%5Econtrol&amp;utm_term=vector%2Bc%2B%2B%2B%E7%94%A8%E6%B3%95&amp;spm=1018.2226.3001.4187\">C++ vector的用法（整理）_一个幽默且帅气的程序员的博客-CSDN博客_c++ vector</a></p>\n<section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span>[[1. 数组理论基础]]\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>"},{"title":"c++中 - ‘0’ 以及 -'a' 的相减操作解释","date":"2022-06-15T03:10:00.000Z","index_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206240956178.jpg","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206200917436.jpg","abbrlink":12295,"_content":"\n执行continue 函数相当于又调到了函数的开头[00:04](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/23.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%E5%90%AB%E6%89%8B%E7%BB%AD%E8%B4%B9.mp4#t=4.619299) \n作用：能够控制for循环中，跳过一些代码段，然后又使i不断前进\n[23.买卖股票的最佳时机含手续费](file:///Users/yibeikongqiu/Desktop/ishot视频/贪心算法/23.买卖股票的最佳时机含手续费.mp4)\n\n# 1 参考资料\n自用跳转连接：[ob]()， [blog]()\n","source":"_posts/👨🏻‍💻code/C++/C++ primer plus/continue.md","raw":"---\ntitle: c++中 - ‘0’ 以及 -'a' 的相减操作解释\ndate: '2022-06-15 11:10'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - C++\n  - C++ primer plus\ntags:\n  - 函数\nindex_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206240956178.jpg'\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206200917436.jpg'\nabbrlink: 12295\n---\n\n执行continue 函数相当于又调到了函数的开头[00:04](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/23.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%E5%90%AB%E6%89%8B%E7%BB%AD%E8%B4%B9.mp4#t=4.619299) \n作用：能够控制for循环中，跳过一些代码段，然后又使i不断前进\n[23.买卖股票的最佳时机含手续费](file:///Users/yibeikongqiu/Desktop/ishot视频/贪心算法/23.买卖股票的最佳时机含手续费.mp4)\n\n# 1 参考资料\n自用跳转连接：[ob]()， [blog]()\n","slug":"👨🏻‍💻code/C++/C++ primer plus/continue","published":1,"updated":"2022-07-12T09:02:14.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fj8002pe0mgg1l309hc","content":"<p>执行continue 函数相当于又调到了函数的开头[00:04](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/23.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%E5%90%AB%E6%89%8B%E7%BB%AD%E8%B4%B9.mp4#t=4.619299)<br>\n作用：能够控制for循环中，跳过一些代码段，然后又使i不断前进<br>\n[23.买卖股票的最佳时机含手续费](file:///Users/yibeikongqiu/Desktop/ishot视频/贪心算法/23.买卖股票的最佳时机含手续费.mp4)</p>\n<h1 id=\"1-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#1-参考资料\"></a> 1 参考资料</h1>\n<p>自用跳转连接：<a href=\"\">ob</a>， <a href=\"\">blog</a></p>\n","site":{"data":{}},"wordcount":402,"excerpt":"","more":"<p>执行continue 函数相当于又调到了函数的开头[00:04](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/23.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%E5%90%AB%E6%89%8B%E7%BB%AD%E8%B4%B9.mp4#t=4.619299)<br />\n作用：能够控制for循环中，跳过一些代码段，然后又使i不断前进<br />\n[23.买卖股票的最佳时机含手续费](file:///Users/yibeikongqiu/Desktop/ishot视频/贪心算法/23.买卖股票的最佳时机含手续费.mp4)</p>\n<h1 id=\"1-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#1-参考资料\"></a> 1 参考资料</h1>\n<p>自用跳转连接：<a href=\"\">ob</a>， <a href=\"\">blog</a></p>\n"},{"cards-deck":"source/_posts/👨🏻‍💻code/C++/C++ primer plus/容器的使用.md","title":"容器的使用","date":"2022-08-08T09:35:00.000Z","abbrlink":21713,"_content":"vector \n![[vector#1 1 初始化]]\n\narray\n\nint arrayName [arraySize] :其中 arraySize **不能是变量**,必须是整型常数(如1 0 )或const值,也可以是常量表达式(如8 * sizeof ( int)\n\neg : int a [10]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n **参考资料**---\n","source":"_posts/👨🏻‍💻code/C++/C++ primer plus/容器的使用.md","raw":"---\ncards-deck: \"source/_posts/\\U0001F468\\U0001F3FB‍\\U0001F4BBcode/C++/C++ primer plus/容器的使用.md\"\ntitle: 容器的使用\ndate: '2022-08-08 17:35'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - C++\n  - C++ primer plus\nabbrlink: 21713\ntags:\n---\nvector \n![[vector#1 1 初始化]]\n\narray\n\nint arrayName [arraySize] :其中 arraySize **不能是变量**,必须是整型常数(如1 0 )或const值,也可以是常量表达式(如8 * sizeof ( int)\n\neg : int a [10]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n **参考资料**---\n","slug":"👨🏻‍💻code/C++/C++ primer plus/容器的使用","published":1,"updated":"2022-08-08T09:44:24.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fj9002se0mgdj1r72vm","content":"<p>vector<br>\n![[vector#1 1 初始化]]</p>\n<p>array</p>\n<p>int arrayName [arraySize] :其中 arraySize <strong>不能是变量</strong>,必须是整型常数(如1 0 )或const值,也可以是常量表达式(如8 * sizeof ( int)</p>\n<p>eg : int a [10]</p>\n<hr>\n<p><strong>参考资料</strong>—</p>\n","site":{"data":{}},"wordcount":129,"excerpt":"","more":"<p>vector<br />\n![[vector#1 1 初始化]]</p>\n<p>array</p>\n<p>int arrayName [arraySize] :其中 arraySize <strong>不能是变量</strong>,必须是整型常数(如1 0 )或const值,也可以是常量表达式(如8 * sizeof ( int)</p>\n<p>eg : int a [10]</p>\n<hr />\n<p><strong>参考资料</strong>—</p>\n"},{"title":"while 循环","date":"2022-06-15T03:10:00.000Z","abbrlink":36387,"_content":"while循环是if 和 for 循环的结合体，\n只要在while循环中增加跳出语句就行\n\nwhile(i){i++}\n\nif(){\nfor()\n}","source":"_posts/👨🏻‍💻code/C++/C++ primer plus/while 循环.md","raw":"---\ntitle: while 循环\ndate: '2022-06-15 11:10'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - C++\n  - C++ primer plus\ntags:\n  - 函数\nabbrlink: 36387\n---\nwhile循环是if 和 for 循环的结合体，\n只要在while循环中增加跳出语句就行\n\nwhile(i){i++}\n\nif(){\nfor()\n}","slug":"👨🏻‍💻code/C++/C++ primer plus/while 循环","published":1,"updated":"2022-07-12T09:02:14.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fj9002we0mg0dyddgso","content":"<p>while循环是if 和 for 循环的结合体，<br>\n只要在while循环中增加跳出语句就行</p>\n<p>while(i){i++}</p>\n<p>if(){<br>\nfor()<br>\n}</p>\n","site":{"data":{}},"wordcount":64,"excerpt":"","more":"<p>while循环是if 和 for 循环的结合体，<br />\n只要在while循环中增加跳出语句就行</p>\n<p>while(i){i++}</p>\n<p>if(){<br />\nfor()<br />\n}</p>\n"},{"title":"static 关键字","published":1,"hideInList":false,"isTop":false,"abbrlink":37179,"date":"2022-05-29T16:00:00.000Z","feature":null,"_content":"static 关键字有三种用法\n\n1. static 修饰局部变量 → 静态局部变量\n\t1. 改变局部变量的生命周期，下次使用该局部变量是上次使用完后的值，而不是初始值\n2. static 修饰全局变量 →静态全局变量\n\t1. 只能在本文件内使用，不能在其他文件中访问，extern外边声明也不行(无static时默认是可以被外部访问的)\n3. static 修饰函数 →静态函数\n\t1. 只能在本文件中**调用**，同2\n","source":"_posts/👨🏻‍💻code/C++/C++ primer plus/static 关键字.md","raw":"---\ntitle: static 关键字\ntags:\n  - C++\npublished: true\nhideInList: false\nisTop: false\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - C++\n  - C++ primer plus\nabbrlink: 37179\ndate: 2022-05-30 00:00:00\nfeature:\n---\nstatic 关键字有三种用法\n\n1. static 修饰局部变量 → 静态局部变量\n\t1. 改变局部变量的生命周期，下次使用该局部变量是上次使用完后的值，而不是初始值\n2. static 修饰全局变量 →静态全局变量\n\t1. 只能在本文件内使用，不能在其他文件中访问，extern外边声明也不行(无static时默认是可以被外部访问的)\n3. static 修饰函数 →静态函数\n\t1. 只能在本文件中**调用**，同2\n","slug":"👨🏻‍💻code/C++/C++ primer plus/static 关键字","updated":"2022-07-12T09:02:14.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fj9002ze0mgaumu7h41","content":"<p>static 关键字有三种用法</p>\n<ol>\n<li>static 修饰局部变量 → 静态局部变量\n<ol>\n<li>改变局部变量的生命周期，下次使用该局部变量是上次使用完后的值，而不是初始值</li>\n</ol>\n</li>\n<li>static 修饰全局变量 →静态全局变量\n<ol>\n<li>只能在本文件内使用，不能在其他文件中访问，extern外边声明也不行(无static时默认是可以被外部访问的)</li>\n</ol>\n</li>\n<li>static 修饰函数 →静态函数\n<ol>\n<li>只能在本文件中<strong>调用</strong>，同2</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"wordcount":171,"excerpt":"","more":"<p>static 关键字有三种用法</p>\n<ol>\n<li>static 修饰局部变量 → 静态局部变量\n<ol>\n<li>改变局部变量的生命周期，下次使用该局部变量是上次使用完后的值，而不是初始值</li>\n</ol>\n</li>\n<li>static 修饰全局变量 →静态全局变量\n<ol>\n<li>只能在本文件内使用，不能在其他文件中访问，extern外边声明也不行(无static时默认是可以被外部访问的)</li>\n</ol>\n</li>\n<li>static 修饰函数 →静态函数\n<ol>\n<li>只能在本文件中<strong>调用</strong>，同2</li>\n</ol>\n</li>\n</ol>\n"},{"title":"《C++零基础99题》","date":"2022-07-28T03:08:00.000Z","abbrlink":57305,"_content":"文章简介：学习资源来自B站UP主：英雄哪里出来\n<!-- more -->\n\n# 开根号\n(int) sqrt(x)：函数前面加(int) 就是强转，注意()\nsqrt平方根函数\n\n# 367.有效的完全平方数\n完全平方数：该数能开根号\n不能用sqrt，从0开始找数一个个遍历，相乘是否等于num，\n两数相乘的强转不能加括号，eg：(long long) (i * i)  最后会编译出错\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202208021728939.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n参考资料\n---\n[01 函数_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1da411M798?p=2&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/👨🏻‍💻code/数据结构与算法/英雄哪里出来/《C++零基础99题》.md","raw":"---\ntitle: 《C++零基础99题》\ndate: '2022-07-28 11:08'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 英雄哪里出来\nabbrlink: 57305\ntags: 算法\n---\n文章简介：学习资源来自B站UP主：英雄哪里出来\n<!-- more -->\n\n# 开根号\n(int) sqrt(x)：函数前面加(int) 就是强转，注意()\nsqrt平方根函数\n\n# 367.有效的完全平方数\n完全平方数：该数能开根号\n不能用sqrt，从0开始找数一个个遍历，相乘是否等于num，\n两数相乘的强转不能加括号，eg：(long long) (i * i)  最后会编译出错\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202208021728939.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n参考资料\n---\n[01 函数_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1da411M798?p=2&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"👨🏻‍💻code/数据结构与算法/英雄哪里出来/《C++零基础99题》","published":1,"updated":"2022-08-02T09:28:46.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fja0033e0mggp4cg5p4","content":"<p>文章简介：学习资源来自B站UP主：英雄哪里出来</p>\n<span id=\"more\"></span>\n<h1 id=\"开根号\"><a class=\"markdownIt-Anchor\" href=\"#开根号\"></a> 开根号</h1>\n<p>(int) sqrt(x)：函数前面加(int) 就是强转，注意()<br>\nsqrt平方根函数</p>\n<h1 id=\"367有效的完全平方数\"><a class=\"markdownIt-Anchor\" href=\"#367有效的完全平方数\"></a> 367.有效的完全平方数</h1>\n<p>完全平方数：该数能开根号<br>\n不能用sqrt，从0开始找数一个个遍历，相乘是否等于num，<br>\n两数相乘的强转不能加括号，eg：(long long) (i * i)  最后会编译出错<br>\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202208021728939.png\" alt=\"\"></p>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h2>\n<p><a href=\"https://www.bilibili.com/video/BV1da411M798?p=2&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">01 函数_哔哩哔哩_bilibili</a></p>\n","site":{"data":{}},"wordcount":181,"excerpt":"<p>文章简介：学习资源来自B站UP主：英雄哪里出来</p>","more":"<h1 id=\"开根号\"><a class=\"markdownIt-Anchor\" href=\"#开根号\"></a> 开根号</h1>\n<p>(int) sqrt(x)：函数前面加(int) 就是强转，注意()<br />\nsqrt平方根函数</p>\n<h1 id=\"367有效的完全平方数\"><a class=\"markdownIt-Anchor\" href=\"#367有效的完全平方数\"></a> 367.有效的完全平方数</h1>\n<p>完全平方数：该数能开根号<br />\n不能用sqrt，从0开始找数一个个遍历，相乘是否等于num，<br />\n两数相乘的强转不能加括号，eg：(long long) (i * i)  最后会编译出错<br />\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202208021728939.png\" alt=\"\" /></p>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h2>\n<p><a href=\"https://www.bilibili.com/video/BV1da411M798?p=2&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">01 函数_哔哩哔哩_bilibili</a></p>"},{"title":"技术蛋老师(git)","date":"2022-07-12T03:32:00.000Z","index_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207041948383.jpg","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207041948383.jpg","abbrlink":29642,"_content":"\n文章简介：git 怎么用\n<!-- more -->\n\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121133310.png)\n\n先用git clone 与文件夹创建联系[14:31](https://www.bilibili.com/video/BV1r3411F7kn?spm_id_from=333.851.b_7265636f6d6d656e64.1&vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=871.798444)\ngit remote add origin https://gitee.com/liuqingzheng/test.git 添加远程仓库\ngit remote -v 查看本地仓库与哪些远程仓库有联系 [15:14](https://www.bilibili.com/video/BV1r3411F7kn?spm_id_from=333.851.b_7265636f6d6d656e64.1&vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=914.211131)\n\n\n\n\n\n# 1 参考资料\n[Git工作流和核心原理 | GitHub基本操作 | VS Code里使用Git和关联GitHub_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1r3411F7kn?spm_id_from=333.851.b_7265636f6d6d656e64.1&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n自用跳转连接：🈚️\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/👨🏻‍💻code/项目/git/技术蛋老师(git).md","raw":"---\ntitle: 技术蛋老师(git)\ndate: '2022-07-12 11:32'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 项目\n  - git\nindex_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207041948383.jpg'\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207041948383.jpg'\ntags: git\nabbrlink: 29642\n---\n\n文章简介：git 怎么用\n<!-- more -->\n\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121133310.png)\n\n先用git clone 与文件夹创建联系[14:31](https://www.bilibili.com/video/BV1r3411F7kn?spm_id_from=333.851.b_7265636f6d6d656e64.1&vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=871.798444)\ngit remote add origin https://gitee.com/liuqingzheng/test.git 添加远程仓库\ngit remote -v 查看本地仓库与哪些远程仓库有联系 [15:14](https://www.bilibili.com/video/BV1r3411F7kn?spm_id_from=333.851.b_7265636f6d6d656e64.1&vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=914.211131)\n\n\n\n\n\n# 1 参考资料\n[Git工作流和核心原理 | GitHub基本操作 | VS Code里使用Git和关联GitHub_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1r3411F7kn?spm_id_from=333.851.b_7265636f6d6d656e64.1&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n自用跳转连接：🈚️\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"👨🏻‍💻code/项目/git/技术蛋老师(git)","published":1,"updated":"2022-07-12T09:02:14.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fja0036e0mg6s7qdgwx","content":"<p>文章简介：git 怎么用</p>\n<span id=\"more\"></span>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121133310.png\" alt=\"\"></p>\n<p>先用git clone 与文件夹创建联系<a href=\"https://www.bilibili.com/video/BV1r3411F7kn?spm_id_from=333.851.b_7265636f6d6d656e64.1&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=871.798444\">14:31</a><br>\ngit remote add origin <a href=\"https://gitee.com/liuqingzheng/test.git\">https://gitee.com/liuqingzheng/test.git</a> 添加远程仓库<br>\ngit remote -v 查看本地仓库与哪些远程仓库有联系 <a href=\"https://www.bilibili.com/video/BV1r3411F7kn?spm_id_from=333.851.b_7265636f6d6d656e64.1&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=914.211131\">15:14</a></p>\n<h1 id=\"1-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#1-参考资料\"></a> 1 参考资料</h1>\n<p><a href=\"https://www.bilibili.com/video/BV1r3411F7kn?spm_id_from=333.851.b_7265636f6d6d656e64.1&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">Git工作流和核心原理 | GitHub基本操作 | VS Code里使用Git和关联GitHub_哔哩哔哩_bilibili</a><br>\n自用跳转连接：🈚️</p>\n","site":{"data":{}},"wordcount":202,"excerpt":"<p>文章简介：git 怎么用</p>","more":"<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121133310.png\" alt=\"\" /></p>\n<p>先用git clone 与文件夹创建联系<a href=\"https://www.bilibili.com/video/BV1r3411F7kn?spm_id_from=333.851.b_7265636f6d6d656e64.1&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=871.798444\">14:31</a><br />\ngit remote add origin <a href=\"https://gitee.com/liuqingzheng/test.git\">https://gitee.com/liuqingzheng/test.git</a> 添加远程仓库<br />\ngit remote -v 查看本地仓库与哪些远程仓库有联系 <a href=\"https://www.bilibili.com/video/BV1r3411F7kn?spm_id_from=333.851.b_7265636f6d6d656e64.1&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=914.211131\">15:14</a></p>\n<h1 id=\"1-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#1-参考资料\"></a> 1 参考资料</h1>\n<p><a href=\"https://www.bilibili.com/video/BV1r3411F7kn?spm_id_from=333.851.b_7265636f6d6d656e64.1&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">Git工作流和核心原理 | GitHub基本操作 | VS Code里使用Git和关联GitHub_哔哩哔哩_bilibili</a><br />\n自用跳转连接：🈚️</p>"},{"title":"LaTex 环境配置","date":"2022-08-02T02:31:00.000Z","abbrlink":1424,"_content":"文章简介：如题\n<!-- more -->\n### LaTeX 数学公式\n\n\nHexo 5.0 以上，可尝试 Hexo 官方的 [hexo-math](https://github.com/hexojs/hexo-math)\n插件，支持更多定制化参数，使用方式参照仓库内的文档，以下介绍的是主题内置的 LaTeX 功能。\n\n当需要使用 [LaTeX](https://www.latex-project.org/help/documentation/)\n语法的数学公式时，可手动开启本功能，需要完成三步操作：\n\n**1. 设置主题配置**\n\n```\npost:\n  math:\n    enable: true\n    specific: false\n    engine: mathjax\n```\n\n`specific`: 建议开启。当为 true 时，只有在文章 [Front-matter](https://hexo.io/zh-cn/docs/front-matter)里指定 `math: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度。\n\n`engine`: 公式引擎，目前支持 `mathjax` 或 `katex`。\n\n**2. 更换 Markdown 渲染器**\n\n由于 Hexo 默认的 Markdown 渲染器不支持复杂公式，所以需要更换渲染器（mathjax 可选择性更换）。\n\n先卸载原有渲染器：\n\n`npm uninstall hexo-renderer-marked --save`\n\n然后根据上方配置不同的 `engine`，推荐更换如下渲染器：\n\nmathjax（可选）:`npm install hexo-renderer-pandoc --save` **并且还需[安装 Pandoc](https://github.com/jgm/pandoc/blob/master/INSTALL.md)**\n\nkatex（必须）: `npm install @upupming/hexo-renderer-markdown-it-plus --save`\n\n**3. 安装完成后执行 `hexo clean`**\n\n书写公式的格式：\n\n```\n$$\nE=mc^2\n$$\n```\n\nWARNING\n\n如果公式没有被正确渲染，请仔细检查是否符合上面三步操作。\n\n不可以同时安装多个渲染插件，包括 `hexo-math` 或者 `hexo-katex` 这类插件，请注意检查 `package.json`。\n\n如果更换公式引擎，对应渲染器也要一并更换。\n\n另外不同的渲染器，可能会导致一些 Markdown 语法不支持。\n\n自定义页面默认不加载渲染，如需使用，需在 Front-matter 中指定 `math: true`\n\n\n不同的公式引擎有不同的优缺点。\n\n**MathJax**\n\n优点\n\n-   对 LaTeX 语法支持全面\n-   右键点击公式有扩展功能\n\n缺点\n\n-   需要加载 JS，页面加载会比较慢\n\n**KaTeX**\n\n优点\n\n-   没有 JS 不会影响页面加载\n\n缺点\n\n-   小部分 LaTeX 不支持\n\n\n参考资料\n---\n[配置指南 | Hexo Fluid 用户手册](https://hexo.fluid-dev.com/docs/guide/#latex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/👨🏻‍💻code/项目/hexo blog/LaTex 环境配置.md","raw":"---\ntitle: LaTex 环境配置\ndate: '2022-08-02 10:31'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 项目\n  - hexo blog\nabbrlink: 1424\ntags: 技能\n---\n文章简介：如题\n<!-- more -->\n### LaTeX 数学公式\n\n\nHexo 5.0 以上，可尝试 Hexo 官方的 [hexo-math](https://github.com/hexojs/hexo-math)\n插件，支持更多定制化参数，使用方式参照仓库内的文档，以下介绍的是主题内置的 LaTeX 功能。\n\n当需要使用 [LaTeX](https://www.latex-project.org/help/documentation/)\n语法的数学公式时，可手动开启本功能，需要完成三步操作：\n\n**1. 设置主题配置**\n\n```\npost:\n  math:\n    enable: true\n    specific: false\n    engine: mathjax\n```\n\n`specific`: 建议开启。当为 true 时，只有在文章 [Front-matter](https://hexo.io/zh-cn/docs/front-matter)里指定 `math: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度。\n\n`engine`: 公式引擎，目前支持 `mathjax` 或 `katex`。\n\n**2. 更换 Markdown 渲染器**\n\n由于 Hexo 默认的 Markdown 渲染器不支持复杂公式，所以需要更换渲染器（mathjax 可选择性更换）。\n\n先卸载原有渲染器：\n\n`npm uninstall hexo-renderer-marked --save`\n\n然后根据上方配置不同的 `engine`，推荐更换如下渲染器：\n\nmathjax（可选）:`npm install hexo-renderer-pandoc --save` **并且还需[安装 Pandoc](https://github.com/jgm/pandoc/blob/master/INSTALL.md)**\n\nkatex（必须）: `npm install @upupming/hexo-renderer-markdown-it-plus --save`\n\n**3. 安装完成后执行 `hexo clean`**\n\n书写公式的格式：\n\n```\n$$\nE=mc^2\n$$\n```\n\nWARNING\n\n如果公式没有被正确渲染，请仔细检查是否符合上面三步操作。\n\n不可以同时安装多个渲染插件，包括 `hexo-math` 或者 `hexo-katex` 这类插件，请注意检查 `package.json`。\n\n如果更换公式引擎，对应渲染器也要一并更换。\n\n另外不同的渲染器，可能会导致一些 Markdown 语法不支持。\n\n自定义页面默认不加载渲染，如需使用，需在 Front-matter 中指定 `math: true`\n\n\n不同的公式引擎有不同的优缺点。\n\n**MathJax**\n\n优点\n\n-   对 LaTeX 语法支持全面\n-   右键点击公式有扩展功能\n\n缺点\n\n-   需要加载 JS，页面加载会比较慢\n\n**KaTeX**\n\n优点\n\n-   没有 JS 不会影响页面加载\n\n缺点\n\n-   小部分 LaTeX 不支持\n\n\n参考资料\n---\n[配置指南 | Hexo Fluid 用户手册](https://hexo.fluid-dev.com/docs/guide/#latex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"👨🏻‍💻code/项目/hexo blog/LaTex 环境配置","published":1,"updated":"2022-08-02T02:44:52.433Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fja0039e0mggvvs3c6n","content":"<p>文章简介：如题</p>\n<span id=\"more\"></span>\n<h3 id=\"latex-数学公式\"><a class=\"markdownIt-Anchor\" href=\"#latex-数学公式\"></a> LaTeX 数学公式</h3>\n<p>Hexo 5.0 以上，可尝试 Hexo 官方的 <a href=\"https://github.com/hexojs/hexo-math\">hexo-math</a><br>\n插件，支持更多定制化参数，使用方式参照仓库内的文档，以下介绍的是主题内置的 LaTeX 功能。</p>\n<p>当需要使用 <a href=\"https://www.latex-project.org/help/documentation/\">LaTeX</a><br>\n语法的数学公式时，可手动开启本功能，需要完成三步操作：</p>\n<p><strong>1. 设置主题配置</strong></p>\n<figure class=\"highlight yaml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">post:</span><br>  <span class=\"hljs-attr\">math:</span><br>    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-attr\">specific:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-attr\">engine:</span> <span class=\"hljs-string\">mathjax</span><br></code></pre></td></tr></tbody></table></figure>\n<p><code>specific</code>: 建议开启。当为 true 时，只有在文章 <a href=\"https://hexo.io/zh-cn/docs/front-matter\">Front-matter</a>里指定 <code>math: true</code> 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度。</p>\n<p><code>engine</code>: 公式引擎，目前支持 <code>mathjax</code> 或 <code>katex</code>。</p>\n<p><strong>2. 更换 Markdown 渲染器</strong></p>\n<p>由于 Hexo 默认的 Markdown 渲染器不支持复杂公式，所以需要更换渲染器（mathjax 可选择性更换）。</p>\n<p>先卸载原有渲染器：</p>\n<p><code>npm uninstall hexo-renderer-marked --save</code></p>\n<p>然后根据上方配置不同的 <code>engine</code>，推荐更换如下渲染器：</p>\n<p>mathjax（可选）:<code>npm install hexo-renderer-pandoc --save</code> <strong>并且还需<a href=\"https://github.com/jgm/pandoc/blob/master/INSTALL.md\">安装 Pandoc</a></strong></p>\n<p>katex（必须）: <code>npm install @upupming/hexo-renderer-markdown-it-plus --save</code></p>\n<p><strong>3. 安装完成后执行 <code>hexo clean</code></strong></p>\n<p>书写公式的格式：</p>\n<figure class=\"highlight gams\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-symbol\">$</span><span class=\"hljs-symbol\">$</span><br>E=mc^<span class=\"hljs-number\">2</span><br><span class=\"hljs-symbol\">$</span><span class=\"hljs-symbol\">$</span><br></code></pre></td></tr></tbody></table></figure>\n<p>WARNING</p>\n<p>如果公式没有被正确渲染，请仔细检查是否符合上面三步操作。</p>\n<p>不可以同时安装多个渲染插件，包括 <code>hexo-math</code> 或者 <code>hexo-katex</code> 这类插件，请注意检查 <code>package.json</code>。</p>\n<p>如果更换公式引擎，对应渲染器也要一并更换。</p>\n<p>另外不同的渲染器，可能会导致一些 Markdown 语法不支持。</p>\n<p>自定义页面默认不加载渲染，如需使用，需在 Front-matter 中指定 <code>math: true</code></p>\n<p>不同的公式引擎有不同的优缺点。</p>\n<p><strong>MathJax</strong></p>\n<p>优点</p>\n<ul>\n<li>对 LaTeX 语法支持全面</li>\n<li>右键点击公式有扩展功能</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>需要加载 JS，页面加载会比较慢</li>\n</ul>\n<p><strong>KaTeX</strong></p>\n<p>优点</p>\n<ul>\n<li>没有 JS 不会影响页面加载</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>小部分 LaTeX 不支持</li>\n</ul>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h2>\n<p><a href=\"https://hexo.fluid-dev.com/docs/guide/#latex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F\">配置指南 | Hexo Fluid 用户手册</a></p>\n","site":{"data":{}},"wordcount":917,"excerpt":"<p>文章简介：如题</p>","more":"<h3 id=\"latex-数学公式\"><a class=\"markdownIt-Anchor\" href=\"#latex-数学公式\"></a> LaTeX 数学公式</h3>\n<p>Hexo 5.0 以上，可尝试 Hexo 官方的 <a href=\"https://github.com/hexojs/hexo-math\">hexo-math</a><br />\n插件，支持更多定制化参数，使用方式参照仓库内的文档，以下介绍的是主题内置的 LaTeX 功能。</p>\n<p>当需要使用 <a href=\"https://www.latex-project.org/help/documentation/\">LaTeX</a><br />\n语法的数学公式时，可手动开启本功能，需要完成三步操作：</p>\n<p><strong>1. 设置主题配置</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">post:</span><br>  <span class=\"hljs-attr\">math:</span><br>    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-attr\">specific:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-attr\">engine:</span> <span class=\"hljs-string\">mathjax</span><br></code></pre></td></tr></table></figure>\n<p><code>specific</code>: 建议开启。当为 true 时，只有在文章 <a href=\"https://hexo.io/zh-cn/docs/front-matter\">Front-matter</a>里指定 <code>math: true</code> 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度。</p>\n<p><code>engine</code>: 公式引擎，目前支持 <code>mathjax</code> 或 <code>katex</code>。</p>\n<p><strong>2. 更换 Markdown 渲染器</strong></p>\n<p>由于 Hexo 默认的 Markdown 渲染器不支持复杂公式，所以需要更换渲染器（mathjax 可选择性更换）。</p>\n<p>先卸载原有渲染器：</p>\n<p><code>npm uninstall hexo-renderer-marked --save</code></p>\n<p>然后根据上方配置不同的 <code>engine</code>，推荐更换如下渲染器：</p>\n<p>mathjax（可选）:<code>npm install hexo-renderer-pandoc --save</code> <strong>并且还需<a href=\"https://github.com/jgm/pandoc/blob/master/INSTALL.md\">安装 Pandoc</a></strong></p>\n<p>katex（必须）: <code>npm install @upupming/hexo-renderer-markdown-it-plus --save</code></p>\n<p><strong>3. 安装完成后执行 <code>hexo clean</code></strong></p>\n<p>书写公式的格式：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-symbol\">$</span><span class=\"hljs-symbol\">$</span><br>E=mc^<span class=\"hljs-number\">2</span><br><span class=\"hljs-symbol\">$</span><span class=\"hljs-symbol\">$</span><br></code></pre></td></tr></table></figure>\n<p>WARNING</p>\n<p>如果公式没有被正确渲染，请仔细检查是否符合上面三步操作。</p>\n<p>不可以同时安装多个渲染插件，包括 <code>hexo-math</code> 或者 <code>hexo-katex</code> 这类插件，请注意检查 <code>package.json</code>。</p>\n<p>如果更换公式引擎，对应渲染器也要一并更换。</p>\n<p>另外不同的渲染器，可能会导致一些 Markdown 语法不支持。</p>\n<p>自定义页面默认不加载渲染，如需使用，需在 Front-matter 中指定 <code>math: true</code></p>\n<p>不同的公式引擎有不同的优缺点。</p>\n<p><strong>MathJax</strong></p>\n<p>优点</p>\n<ul>\n<li>对 LaTeX 语法支持全面</li>\n<li>右键点击公式有扩展功能</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>需要加载 JS，页面加载会比较慢</li>\n</ul>\n<p><strong>KaTeX</strong></p>\n<p>优点</p>\n<ul>\n<li>没有 JS 不会影响页面加载</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>小部分 LaTeX 不支持</li>\n</ul>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h2>\n<p><a href=\"https://hexo.fluid-dev.com/docs/guide/#latex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F\">配置指南 | Hexo Fluid 用户手册</a></p>"},{"title":"GitHub如何取消域名绑定","date":"2022-07-12T09:12:00.000Z","abbrlink":14830,"_content":"\n删除本地source下的CNAME和GitHub上的CNAME文件\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121716990.png)\n\n清楚浏览器缓冲\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121715979.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/👨🏻‍💻code/项目/hexo blog/GitHub如何取消域名绑定.md","raw":"---\ntitle: GitHub如何取消域名绑定\ndate: '2022-07-12 17:12'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 项目\n  - hexo blog\nabbrlink: 14830\ntags: blog\n---\n\n删除本地source下的CNAME和GitHub上的CNAME文件\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121716990.png)\n\n清楚浏览器缓冲\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121715979.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"👨🏻‍💻code/项目/hexo blog/GitHub如何取消域名绑定","published":1,"updated":"2022-07-18T11:23:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjb003de0mg1cet8p9g","content":"<p>删除本地source下的CNAME和GitHub上的CNAME文件<br>\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121716990.png\" alt=\"\"></p>\n<p>清楚浏览器缓冲<br>\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121715979.png\" alt=\"\"></p>\n","site":{"data":{}},"wordcount":40,"excerpt":"","more":"<p>删除本地source下的CNAME和GitHub上的CNAME文件<br />\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121716990.png\" alt=\"\" /></p>\n<p>清楚浏览器缓冲<br />\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121715979.png\" alt=\"\" /></p>\n"},{"title":"brew安装","published":1,"hideInList":false,"isTop":false,"abbrlink":4339,"date":"2022-05-28T07:16:24.000Z","feature":null,"_content":"![](https://s1.vika.cn/space/2022/05/28/0b3ffbfe5ad64d388d02bceff24ab6a0)\n\n\n用官网安装出现以下错误：\n```\ncurl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused\n```\n原因是：**github 的一些域名的 DNS 解析被污染**，导致DNS 解析过程无法通过域名取得正确的IP地址\n\n换成国内下载地址即可\n```\n/bin/zsh -c \"$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\"\n```\n\n根据终端反应输入即可，过程中有中文提示\n","source":"_posts/👨🏻‍💻code/项目/hexo blog/brew安装.md","raw":"---\ntitle: brew安装\ntags:\n  - mac下软件安装\npublished: true\nhideInList: false\nisTop: false\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 项目\n  - hexo blog\nabbrlink: 4339\ndate: 2022-05-28 15:16:24\nfeature:\n---\n![](https://s1.vika.cn/space/2022/05/28/0b3ffbfe5ad64d388d02bceff24ab6a0)\n\n\n用官网安装出现以下错误：\n```\ncurl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused\n```\n原因是：**github 的一些域名的 DNS 解析被污染**，导致DNS 解析过程无法通过域名取得正确的IP地址\n\n换成国内下载地址即可\n```\n/bin/zsh -c \"$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\"\n```\n\n根据终端反应输入即可，过程中有中文提示\n","slug":"👨🏻‍💻code/项目/hexo blog/brew安装","updated":"2022-07-12T09:54:10.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjb003fe0mg0999a892","content":"<p><img src=\"https://s1.vika.cn/space/2022/05/28/0b3ffbfe5ad64d388d02bceff24ab6a0\" alt=\"\"></p>\n<p>用官网安装出现以下错误：</p>\n<figure class=\"highlight pgsql\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">curl: (<span class=\"hljs-number\">7</span>) Failed <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">connect</span> <span class=\"hljs-keyword\">to</span> raw.githubusercontent.com port <span class=\"hljs-number\">443</span>: <span class=\"hljs-keyword\">Connection</span> refused<br></code></pre></td></tr></tbody></table></figure>\n<p>原因是：<strong>github 的一些域名的 DNS 解析被污染</strong>，导致DNS 解析过程无法通过域名取得正确的IP地址</p>\n<p>换成国内下载地址即可</p>\n<figure class=\"highlight awk\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">/bin/</span>zsh -c <span class=\"hljs-string\">\"$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\"</span><br></code></pre></td></tr></tbody></table></figure>\n<p>根据终端反应输入即可，过程中有中文提示</p>\n","site":{"data":{}},"wordcount":259,"excerpt":"","more":"<p><img src=\"https://s1.vika.cn/space/2022/05/28/0b3ffbfe5ad64d388d02bceff24ab6a0\" alt=\"\" /></p>\n<p>用官网安装出现以下错误：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">curl: (<span class=\"hljs-number\">7</span>) Failed <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">connect</span> <span class=\"hljs-keyword\">to</span> raw.githubusercontent.com port <span class=\"hljs-number\">443</span>: <span class=\"hljs-keyword\">Connection</span> refused<br></code></pre></td></tr></table></figure>\n<p>原因是：<strong>github 的一些域名的 DNS 解析被污染</strong>，导致DNS 解析过程无法通过域名取得正确的IP地址</p>\n<p>换成国内下载地址即可</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">/bin/</span>zsh -c <span class=\"hljs-string\">&quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></code></pre></td></tr></table></figure>\n<p>根据终端反应输入即可，过程中有中文提示</p>\n"},{"title":"fluid写文章好用的代码","date":"2022-06-17T09:16:00.000Z","abbrlink":15457,"_content":"\n\n网站嵌套[^1]\n```html\n<iframe src=\"\" width=\"100%\" height=\"1000\" name=\"topFrame\" scrolling=\"yes\"  noresize=\"noresize\" frameborder=\"0\" id=\"topFrame\"></iframe>\n```\n\n\ntag插件\n\n<iframe src=\"https://hexo.fluid-dev.com/docs/guide/#tag-%E6%8F%92%E4%BB%B6\" width=\"100%\" height=\"1000\" name=\"topFrame\" scrolling=\"yes\"  noresize=\"noresize\" frameborder=\"0\" id=\"topFrame\"></iframe>\n\n\n\n\n\n\n\n\n\n\n\n---\n**参考资料**：\n[^1]: [搭配 Fluid 如何优雅的写一篇文章 - Hexo Theme Fluid](https://hexo.fluid-dev.com/posts/fluid-write/#iframe-%E9%A1%B5%E9%9D%A2%E9%95%B6%E5%A5%97)","source":"_posts/👨🏻‍💻code/项目/hexo blog/fluid写文章好用的代码.md","raw":"---\ntitle: fluid写文章好用的代码\ndate: '2022-06-17 17:16'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 项目\n  - hexo blog\ntags:\n  - blog\nabbrlink: 15457\n---\n\n\n网站嵌套[^1]\n```html\n<iframe src=\"\" width=\"100%\" height=\"1000\" name=\"topFrame\" scrolling=\"yes\"  noresize=\"noresize\" frameborder=\"0\" id=\"topFrame\"></iframe>\n```\n\n\ntag插件\n\n<iframe src=\"https://hexo.fluid-dev.com/docs/guide/#tag-%E6%8F%92%E4%BB%B6\" width=\"100%\" height=\"1000\" name=\"topFrame\" scrolling=\"yes\"  noresize=\"noresize\" frameborder=\"0\" id=\"topFrame\"></iframe>\n\n\n\n\n\n\n\n\n\n\n\n---\n**参考资料**：\n[^1]: [搭配 Fluid 如何优雅的写一篇文章 - Hexo Theme Fluid](https://hexo.fluid-dev.com/posts/fluid-write/#iframe-%E9%A1%B5%E9%9D%A2%E9%95%B6%E5%A5%97)","slug":"👨🏻‍💻code/项目/hexo blog/fluid写文章好用的代码","published":1,"updated":"2022-07-12T09:54:10.720Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjb003je0mg8kzaffrh","content":"<p>网站嵌套<sup id=\"fnref:1\" class=\"footnote-ref\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"搭配 Fluid 如何优雅的写一篇文章 - Hexo Theme Fluid\n\">[1]</span></a></sup></p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">iframe</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"\"</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"100%\"</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">\"1000\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"topFrame\"</span> <span class=\"hljs-attr\">scrolling</span>=<span class=\"hljs-string\">\"yes\"</span>  <span class=\"hljs-attr\">noresize</span>=<span class=\"hljs-string\">\"noresize\"</span> <span class=\"hljs-attr\">frameborder</span>=<span class=\"hljs-string\">\"0\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"topFrame\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">iframe</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure>\n<p>tag插件</p>\n<iframe src=\"https://hexo.fluid-dev.com/docs/guide/#tag-%E6%8F%92%E4%BB%B6\" width=\"100%\" height=\"1000\" name=\"topFrame\" scrolling=\"yes\" noresize=\"noresize\" frameborder=\"0\" id=\"topFrame\"></iframe>\n<hr>\n<p><strong>参考资料</strong>：</p>\n<section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span><a href=\"https://hexo.fluid-dev.com/posts/fluid-write/#iframe-%E9%A1%B5%E9%9D%A2%E9%95%B6%E5%A5%97\">搭配 Fluid 如何优雅的写一篇文章 - Hexo Theme Fluid</a>\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>","site":{"data":{}},"wordcount":268,"excerpt":"","more":"<p>网站嵌套<sup id=\"fnref:1\" class=\"footnote-ref\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"搭配 Fluid 如何优雅的写一篇文章 - Hexo Theme Fluid\n\">[1]</span></a></sup></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">iframe</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;100%&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;1000&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;topFrame&quot;</span> <span class=\"hljs-attr\">scrolling</span>=<span class=\"hljs-string\">&quot;yes&quot;</span>  <span class=\"hljs-attr\">noresize</span>=<span class=\"hljs-string\">&quot;noresize&quot;</span> <span class=\"hljs-attr\">frameborder</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;topFrame&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>tag插件</p>\n<iframe src=\"https://hexo.fluid-dev.com/docs/guide/#tag-%E6%8F%92%E4%BB%B6\" width=\"100%\" height=\"1000\" name=\"topFrame\" scrolling=\"yes\"  noresize=\"noresize\" frameborder=\"0\" id=\"topFrame\"></iframe>\n<hr />\n<p><strong>参考资料</strong>：</p>\n<section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span><a href=\"https://hexo.fluid-dev.com/posts/fluid-write/#iframe-%E9%A1%B5%E9%9D%A2%E9%95%B6%E5%A5%97\">搭配 Fluid 如何优雅的写一篇文章 - Hexo Theme Fluid</a>\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>"},{"title":"图床的设置","date":"2022-07-18T11:18:00.000Z","abbrlink":25586,"_content":"\n\n\n前期设置参考以下文章\n[阿里云搭建图床_理科男同学的博客-CSDN博客_阿里云图床](https://blog.csdn.net/qq_38163244/article/details/110637898?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165814246716781790729080%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165814246716781790729080&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-110637898-null-null.142^v32^pc_rank_34,185^v2^tag_show&utm_term=%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BE%E5%BA%8A&spm=1018.2226.3001.4187)\n\n\npicgo如何添加设置\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220718191920.png)\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/cf534d30e5f74c2b2bbf1545bfb68f3.png)\n\n\n\n\nLTAI5tLUoXsgd7XWbdxf9ig2\nlRXSiwrDFzVeqOsECPaIH9viKeof3p","source":"_posts/👨🏻‍💻code/项目/hexo blog/图床的设置.md","raw":"---\ntitle: 图床的设置\ndate: '2022-07-18 19:18'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 项目\n  - hexo blog\ntags: blog\nabbrlink: 25586\n---\n\n\n\n前期设置参考以下文章\n[阿里云搭建图床_理科男同学的博客-CSDN博客_阿里云图床](https://blog.csdn.net/qq_38163244/article/details/110637898?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165814246716781790729080%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165814246716781790729080&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-110637898-null-null.142^v32^pc_rank_34,185^v2^tag_show&utm_term=%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BE%E5%BA%8A&spm=1018.2226.3001.4187)\n\n\npicgo如何添加设置\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220718191920.png)\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/cf534d30e5f74c2b2bbf1545bfb68f3.png)\n\n\n\n\nLTAI5tLUoXsgd7XWbdxf9ig2\nlRXSiwrDFzVeqOsECPaIH9viKeof3p","slug":"👨🏻‍💻code/项目/hexo blog/图床的设置","published":1,"updated":"2022-07-28T02:40:58.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjc003ne0mg76nnh3rz","content":"<p>前期设置参考以下文章<br>\n<a href=\"https://blog.csdn.net/qq_38163244/article/details/110637898?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165814246716781790729080%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165814246716781790729080&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-110637898-null-null.142%5Ev32%5Epc_rank_34,185%5Ev2%5Etag_show&amp;utm_term=%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BE%E5%BA%8A&amp;spm=1018.2226.3001.4187\">阿里云搭建图床_理科男同学的博客-CSDN博客_阿里云图床</a></p>\n<p>picgo如何添加设置<br>\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220718191920.png\" alt=\"\"><br>\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/cf534d30e5f74c2b2bbf1545bfb68f3.png\" alt=\"\"></p>\n<p>LTAI5tLUoXsgd7XWbdxf9ig2<br>\nlRXSiwrDFzVeqOsECPaIH9viKeof3p</p>\n","site":{"data":{}},"wordcount":104,"excerpt":"","more":"<p>前期设置参考以下文章<br />\n<a href=\"https://blog.csdn.net/qq_38163244/article/details/110637898?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165814246716781790729080%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165814246716781790729080&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-110637898-null-null.142%5Ev32%5Epc_rank_34,185%5Ev2%5Etag_show&amp;utm_term=%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BE%E5%BA%8A&amp;spm=1018.2226.3001.4187\">阿里云搭建图床_理科男同学的博客-CSDN博客_阿里云图床</a></p>\n<p>picgo如何添加设置<br />\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220718191920.png\" alt=\"\" /><br />\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/cf534d30e5f74c2b2bbf1545bfb68f3.png\" alt=\"\" /></p>\n<p>LTAI5tLUoXsgd7XWbdxf9ig2<br />\nlRXSiwrDFzVeqOsECPaIH9viKeof3p</p>\n"},{"title":"hexo如何创建短的url","date":"2022-07-12T09:03:00.000Z","abbrlink":15258,"_content":"\n\n\n[GitHub - rozbo/hexo-abbrlink2](https://github.com/rozbo/hexo-abbrlink2)\n\n安装插件→添加config信息\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/👨🏻‍💻code/项目/hexo blog/hexo如何创建短的url.md","raw":"---\ntitle: hexo如何创建短的url\ndate: '2022-07-12 17:03'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 项目\n  - hexo blog\nabbrlink: 15258\ntags: blog\n---\n\n\n\n[GitHub - rozbo/hexo-abbrlink2](https://github.com/rozbo/hexo-abbrlink2)\n\n安装插件→添加config信息\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"👨🏻‍💻code/项目/hexo blog/hexo如何创建短的url","published":1,"updated":"2022-07-12T09:54:10.740Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjc003qe0mgbnmn3r8c","content":"<p><a href=\"https://github.com/rozbo/hexo-abbrlink2\">GitHub - rozbo/hexo-abbrlink2</a></p>\n<p>安装插件→添加config信息</p>\n","site":{"data":{}},"wordcount":42,"excerpt":"","more":"<p><a href=\"https://github.com/rozbo/hexo-abbrlink2\">GitHub - rozbo/hexo-abbrlink2</a></p>\n<p>安装插件→添加config信息</p>\n"},{"title":"域名失效问题","date":"2022-07-12T09:22:00.000Z","abbrlink":62729,"_content":"\n本地source文件添加一个文件：CNAME文件(不要任何的后缀)\n\n下一次hexo d 就会传上去\n","source":"_posts/👨🏻‍💻code/项目/hexo blog/域名失效问题.md","raw":"---\ntitle: 域名失效问题\ndate: '2022-07-12 17:22'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 项目\n  - hexo blog\nabbrlink: 62729\ntags: hexo\n\n---\n\n本地source文件添加一个文件：CNAME文件(不要任何的后缀)\n\n下一次hexo d 就会传上去\n","slug":"👨🏻‍💻code/项目/hexo blog/域名失效问题","published":1,"updated":"2022-07-12T10:00:39.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjc003ue0mgdr9ygr18","content":"<p>本地source文件添加一个文件：CNAME文件(不要任何的后缀)</p>\n<p>下一次hexo d 就会传上去</p>\n","site":{"data":{}},"wordcount":46,"excerpt":"","more":"<p>本地source文件添加一个文件：CNAME文件(不要任何的后缀)</p>\n<p>下一次hexo d 就会传上去</p>\n"},{"id":"858032de-484b-4d7f-a45f-5bab2ca7bb2b","title":"用hexo s 引发的一些错误","date":"2022-07-28T02:46:00.000Z","abbrlink":54162,"_content":"\n\n# 1 不要把没有ymal 字段 的文章放入post文件夹中，否则会编译出错\n此处把零散笔记文件夹放入post中\n![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207281050271.png)\n\n\n![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207281055164.png)\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202208021056860.png)\nsource 文件夹中的md文件都会被hexo s 编译，所以杂项也不能放入source 文件夹中\n\n![|400](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207281115268.png)\n\n用hexo s 时，在myblog(存放hexo整体的文件中)进行命令操作\n\n\n# 2 **ValidationError: ‘null’ is not a string!**\n错误说明\n一般都是因为文章无内容，可能是因为在这篇博客文章中，有某些属性没有填写，比如author属性，tag属性，categories属性等，导致该属性是空的，即`null`，所以报错。\n\n\n\n\n\n\n---\n自用ob链接：[obsidian](obsidian://advanced-uri?vault=myblog&uid=858032de-484b-4d7f-a45f-5bab2ca7bb2b)\n\n\n\n\n\n\n","source":"_posts/👨🏻‍💻code/项目/hexo blog/用hexo s 引发的一些错误.md","raw":"---\nid: 858032de-484b-4d7f-a45f-5bab2ca7bb2b\ntitle: 用hexo s 引发的一些错误\ndate: '2022-07-28 10:46'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 项目\n  - hexo blog\nabbrlink: 54162\ntags: blog\n---\n\n\n# 1 不要把没有ymal 字段 的文章放入post文件夹中，否则会编译出错\n此处把零散笔记文件夹放入post中\n![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207281050271.png)\n\n\n![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207281055164.png)\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202208021056860.png)\nsource 文件夹中的md文件都会被hexo s 编译，所以杂项也不能放入source 文件夹中\n\n![|400](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207281115268.png)\n\n用hexo s 时，在myblog(存放hexo整体的文件中)进行命令操作\n\n\n# 2 **ValidationError: ‘null’ is not a string!**\n错误说明\n一般都是因为文章无内容，可能是因为在这篇博客文章中，有某些属性没有填写，比如author属性，tag属性，categories属性等，导致该属性是空的，即`null`，所以报错。\n\n\n\n\n\n\n---\n自用ob链接：[obsidian](obsidian://advanced-uri?vault=myblog&uid=858032de-484b-4d7f-a45f-5bab2ca7bb2b)\n\n\n\n\n\n\n","slug":"👨🏻‍💻code/项目/hexo blog/用hexo s 引发的一些错误","published":1,"updated":"2022-08-02T02:56:53.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjd003we0mgfrglblw5","content":"<h1 id=\"1-不要把没有ymal-字段-的文章放入post文件夹中否则会编译出错\"><a class=\"markdownIt-Anchor\" href=\"#1-不要把没有ymal-字段-的文章放入post文件夹中否则会编译出错\"></a> 1 不要把没有ymal 字段 的文章放入post文件夹中，否则会编译出错</h1>\n<p>此处把零散笔记文件夹放入post中<br>\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207281050271.png\" alt=\"|600\"></p>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207281055164.png\" alt=\"|600\"><br>\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202208021056860.png\" alt=\"\"><br>\nsource 文件夹中的md文件都会被hexo s 编译，所以杂项也不能放入source 文件夹中</p>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207281115268.png\" alt=\"|400\"></p>\n<p>用hexo s 时，在myblog(存放hexo整体的文件中)进行命令操作</p>\n<h1 id=\"2-validationerror-null-is-not-a-string\"><a class=\"markdownIt-Anchor\" href=\"#2-validationerror-null-is-not-a-string\"></a> 2 <strong>ValidationError: ‘null’ is not a string!</strong></h1>\n<p>错误说明<br>\n一般都是因为文章无内容，可能是因为在这篇博客文章中，有某些属性没有填写，比如author属性，tag属性，categories属性等，导致该属性是空的，即<code>null</code>，所以报错。</p>\n<hr>\n<p>自用ob链接：<a href=\"obsidian://advanced-uri?vault=myblog&amp;uid=858032de-484b-4d7f-a45f-5bab2ca7bb2b\">obsidian</a></p>\n","site":{"data":{}},"wordcount":272,"excerpt":"","more":"<h1 id=\"1-不要把没有ymal-字段-的文章放入post文件夹中否则会编译出错\"><a class=\"markdownIt-Anchor\" href=\"#1-不要把没有ymal-字段-的文章放入post文件夹中否则会编译出错\"></a> 1 不要把没有ymal 字段 的文章放入post文件夹中，否则会编译出错</h1>\n<p>此处把零散笔记文件夹放入post中<br />\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207281050271.png\" alt=\"|600\" /></p>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207281055164.png\" alt=\"|600\" /><br />\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202208021056860.png\" alt=\"\" /><br />\nsource 文件夹中的md文件都会被hexo s 编译，所以杂项也不能放入source 文件夹中</p>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207281115268.png\" alt=\"|400\" /></p>\n<p>用hexo s 时，在myblog(存放hexo整体的文件中)进行命令操作</p>\n<h1 id=\"2-validationerror-null-is-not-a-string\"><a class=\"markdownIt-Anchor\" href=\"#2-validationerror-null-is-not-a-string\"></a> 2 <strong>ValidationError: ‘null’ is not a string!</strong></h1>\n<p>错误说明<br />\n一般都是因为文章无内容，可能是因为在这篇博客文章中，有某些属性没有填写，比如author属性，tag属性，categories属性等，导致该属性是空的，即<code>null</code>，所以报错。</p>\n<hr />\n<p>自用ob链接：<a href=\"obsidian://advanced-uri?vault=myblog&amp;uid=858032de-484b-4d7f-a45f-5bab2ca7bb2b\">obsidian</a></p>\n"},{"cards-deck":"source::_posts::👨🏻‍💻code::C++::C++ primer plus::进制转换.md","title":"进制转换","date":"2022-08-08T02:08:00.000Z","abbrlink":35590,"_content":"\n\n\n- 10 进制逢 10 进 1, \n- 2 进制逢 2 进 1\n- 16 进制逢 16 进 1\n\n\n![[进制转换 2022-08-08 10.12.38.excalidraw]]\n\n\n\n\n\n\n\n\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202208081030695.png)\n\n\n\n\n\n\n\n\n\n---\n **参考资料**\n [【最强干货】详解二进制，八进制，十进制，十六进制的相互转换_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1PK411g7vy/?spm_id_from=333.788.recommend_more_video.-1&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/👨🏻‍💻code/C++/C++ primer plus/进制转换.md","raw":"---\ncards-deck: \"source::_posts::\\U0001F468\\U0001F3FB‍\\U0001F4BBcode::C++::C++ primer plus::进制转换.md\"\ntitle: 进制转换\ndate: '2022-08-08 10:08'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - C++\n  - C++ primer plus\nabbrlink: 35590\ntags:\n---\n\n\n\n- 10 进制逢 10 进 1, \n- 2 进制逢 2 进 1\n- 16 进制逢 16 进 1\n\n\n![[进制转换 2022-08-08 10.12.38.excalidraw]]\n\n\n\n\n\n\n\n\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202208081030695.png)\n\n\n\n\n\n\n\n\n\n---\n **参考资料**\n [【最强干货】详解二进制，八进制，十进制，十六进制的相互转换_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1PK411g7vy/?spm_id_from=333.788.recommend_more_video.-1&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"👨🏻‍💻code/C++/C++ primer plus/进制转换","published":1,"updated":"2022-08-08T02:30:38.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjd003ze0mg0ky2e0hy","content":"<ul>\n<li>10 进制逢 10 进 1,</li>\n<li>2 进制逢 2 进 1</li>\n<li>16 进制逢 16 进 1</li>\n</ul>\n<p>![[进制转换 2022-08-08 10.12.38.excalidraw]]</p>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202208081030695.png\" alt=\"\"></p>\n<hr>\n<p><strong>参考资料</strong><br>\n<a href=\"https://www.bilibili.com/video/BV1PK411g7vy/?spm_id_from=333.788.recommend_more_video.-1&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">【最强干货】详解二进制，八进制，十进制，十六进制的相互转换_哔哩哔哩_bilibili</a></p>\n","site":{"data":{}},"wordcount":111,"excerpt":"","more":"<ul>\n<li>10 进制逢 10 进 1,</li>\n<li>2 进制逢 2 进 1</li>\n<li>16 进制逢 16 进 1</li>\n</ul>\n<p>![[进制转换 2022-08-08 10.12.38.excalidraw]]</p>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202208081030695.png\" alt=\"\" /></p>\n<hr />\n<p><strong>参考资料</strong><br />\n<a href=\"https://www.bilibili.com/video/BV1PK411g7vy/?spm_id_from=333.788.recommend_more_video.-1&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">【最强干货】详解二进制，八进制，十进制，十六进制的相互转换_哔哩哔哩_bilibili</a></p>\n"},{"abbrlink":2,"_content":"\n\n\n# 1 第51题. N皇后\n\n[力扣题目链接](https://leetcode-cn.com/problems/n-queens/)\n\nn 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。\n\n给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。\n\n每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 'Q' 和 '.' 分别代表了皇后和空位。\n\n示例 1：\n\n![](https://code-thinking-1253855093.file.myqcloud.com/pics/20211020232201.png)\n\n-   输入：n = 4\n-   输出：[ [\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"] ]\n-   解释：如上图所示，4 皇后问题存在两个不同的解法。\n\n示例 2：\n\n-   输入：n = 1\n-   输出：[ [\"Q\"] ]\n\n皇后们的约束条件：\n1.  不能同行\n2.  不能同列\n3.  不能同斜线\n\n\n# 2 思路\n\n好吧\n\n![[20.N皇后 2022-05-25 10.54.39.excalidraw]]\n\n回溯的过程到底是什么样的，录视频 ，找一个简单的题录视频吧 #疑问 \n\t目前看来是回溯到代码随想录那种图的第二层然后在往下走吧\n\t\n\n\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/回溯算法/20.N皇后.md","raw":"---\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 回溯算法\nabbrlink: 2\n---\n\n\n\n# 1 第51题. N皇后\n\n[力扣题目链接](https://leetcode-cn.com/problems/n-queens/)\n\nn 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。\n\n给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。\n\n每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 'Q' 和 '.' 分别代表了皇后和空位。\n\n示例 1：\n\n![](https://code-thinking-1253855093.file.myqcloud.com/pics/20211020232201.png)\n\n-   输入：n = 4\n-   输出：[ [\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"] ]\n-   解释：如上图所示，4 皇后问题存在两个不同的解法。\n\n示例 2：\n\n-   输入：n = 1\n-   输出：[ [\"Q\"] ]\n\n皇后们的约束条件：\n1.  不能同行\n2.  不能同列\n3.  不能同斜线\n\n\n# 2 思路\n\n好吧\n\n![[20.N皇后 2022-05-25 10.54.39.excalidraw]]\n\n回溯的过程到底是什么样的，录视频 ，找一个简单的题录视频吧 #疑问 \n\t目前看来是回溯到代码随想录那种图的第二层然后在往下走吧\n\t\n\n\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/回溯算法/20.N皇后","published":1,"date":"2022-05-25T02:52:32.000Z","updated":"2022-07-12T09:02:14.300Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjd0042e0mgh59016ha","content":"<h1 id=\"1-第51题-n皇后\"><a class=\"markdownIt-Anchor\" href=\"#1-第51题-n皇后\"></a> 1 第51题. N皇后</h1>\n<p><a href=\"https://leetcode-cn.com/problems/n-queens/\">力扣题目链接</a></p>\n<p>n&nbsp;皇后问题 研究的是如何将 n&nbsp;个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。</p>\n<p>给你一个整数 n ，返回所有不同的&nbsp;n&nbsp;皇后问题 的解决方案。</p>\n<p>每一种解法包含一个不同的&nbsp;n 皇后问题 的棋子放置方案，该方案中 ‘Q’ 和 ‘.’ 分别代表了皇后和空位。</p>\n<p>示例 1：</p>\n<p><img src=\"https://code-thinking-1253855093.file.myqcloud.com/pics/20211020232201.png\" alt=\"\"></p>\n<ul>\n<li>输入：n = 4</li>\n<li>输出：[ [\".Q…\",\"…Q\",“Q…”,\"…Q.\"],[\"…Q.\",“Q…”,\"…Q\",\".Q…\"] ]</li>\n<li>解释：如上图所示，4 皇后问题存在两个不同的解法。</li>\n</ul>\n<p>示例 2：</p>\n<ul>\n<li>输入：n = 1</li>\n<li>输出：[ [“Q”] ]</li>\n</ul>\n<p>皇后们的约束条件：</p>\n<ol>\n<li>不能同行</li>\n<li>不能同列</li>\n<li>不能同斜线</li>\n</ol>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>好吧</p>\n<p>![[20.N皇后 2022-05-25 10.54.39.excalidraw]]</p>\n<p>回溯的过程到底是什么样的，录视频 ，找一个简单的题录视频吧 #疑问<br>\n目前看来是回溯到代码随想录那种图的第二层然后在往下走吧</p>\n","site":{"data":{}},"wordcount":422,"excerpt":"","more":"<h1 id=\"1-第51题-n皇后\"><a class=\"markdownIt-Anchor\" href=\"#1-第51题-n皇后\"></a> 1 第51题. N皇后</h1>\n<p><a href=\"https://leetcode-cn.com/problems/n-queens/\">力扣题目链接</a></p>\n<p>n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。</p>\n<p>给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。</p>\n<p>每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 ‘Q’ 和 ‘.’ 分别代表了皇后和空位。</p>\n<p>示例 1：</p>\n<p><img src=\"https://code-thinking-1253855093.file.myqcloud.com/pics/20211020232201.png\" alt=\"\" /></p>\n<ul>\n<li>输入：n = 4</li>\n<li>输出：[ [&quot;.Q…&quot;,&quot;…Q&quot;,“Q…”,&quot;…Q.&quot;],[&quot;…Q.&quot;,“Q…”,&quot;…Q&quot;,&quot;.Q…&quot;] ]</li>\n<li>解释：如上图所示，4 皇后问题存在两个不同的解法。</li>\n</ul>\n<p>示例 2：</p>\n<ul>\n<li>输入：n = 1</li>\n<li>输出：[ [“Q”] ]</li>\n</ul>\n<p>皇后们的约束条件：</p>\n<ol>\n<li>不能同行</li>\n<li>不能同列</li>\n<li>不能同斜线</li>\n</ol>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>好吧</p>\n<p>![[20.N皇后 2022-05-25 10.54.39.excalidraw]]</p>\n<p>回溯的过程到底是什么样的，录视频 ，找一个简单的题录视频吧 #疑问<br />\n目前看来是回溯到代码随想录那种图的第二层然后在往下走吧</p>\n"},{"title":"21.解数独","published":1,"hideInList":false,"isTop":false,"abbrlink":5566,"date":"2022-05-27T00:40:51.000Z","feature":null,"_content":"N皇后是每一行找一个位置放皇后\n数独是**棋盘的每一个位置都要放一个数字，并检查数字是否合法**\n\n\n\nvoid backtracking(参数) {\n\t\tstartIndex：控制下一层的起始位置\n\t\t\t去重(从下一层的第一个位置开始：backtracking(...., i+1))\n\t\t\t排列问题不用startIndex\n\t\tused[]：去重(从下一层的起始位置开始：backtracking(...., 0))\n\tif (终止条件) {\n\t\t存放结果;\n\treturn;\n\t\t要取树上所有节点时不要加return\n\t}\n    for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {\n        处理节点;\n        backtracking(路径，选择列表); // 递归\n        回溯，撤销处理结果\n    }\n }\n\n# 1 回溯三部曲\n\n定义一些变量\n\n## 1.1 确定回溯函数参数返回值\n数独和N皇后的返回值用bool值\n\n## 1.2 终止条件, 存放结果, return\n不需要终止条件，等数填满了，棋盘自然终止\n\n## 1.3 单层搜索过程\n**一个for循环遍历棋盘的行，一个for循环遍历棋盘的列，一行一列确定下来之后，递归遍历这个位置放9个数字的可能性！**\n\n### 1.3.1 判断棋盘是否合法\n\n判断棋盘是否合法有如下三个维度：\n\n-   同行是否重复\n-   同列是否重复\n-   9宫格里是否重复\n\n#flashcards/代码随想录 #疑问\n二维数组的行数与列数\n?\nint array[2]  [3]；二行三列\n\tint row = array.size();     行数   \n\tint col = array[0].size();  列数\n<!--SR:!2022-08-02,29,250-->\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/回溯算法/21.解数独.md","raw":"---\ntitle: 21.解数独\ntags:\n  - 代码随想录\npublished: true\nhideInList: false\nisTop: false\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 回溯算法\nabbrlink: 5566\ndate: 2022-05-27 08:40:51\nfeature:\n---\nN皇后是每一行找一个位置放皇后\n数独是**棋盘的每一个位置都要放一个数字，并检查数字是否合法**\n\n\n\nvoid backtracking(参数) {\n\t\tstartIndex：控制下一层的起始位置\n\t\t\t去重(从下一层的第一个位置开始：backtracking(...., i+1))\n\t\t\t排列问题不用startIndex\n\t\tused[]：去重(从下一层的起始位置开始：backtracking(...., 0))\n\tif (终止条件) {\n\t\t存放结果;\n\treturn;\n\t\t要取树上所有节点时不要加return\n\t}\n    for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {\n        处理节点;\n        backtracking(路径，选择列表); // 递归\n        回溯，撤销处理结果\n    }\n }\n\n# 1 回溯三部曲\n\n定义一些变量\n\n## 1.1 确定回溯函数参数返回值\n数独和N皇后的返回值用bool值\n\n## 1.2 终止条件, 存放结果, return\n不需要终止条件，等数填满了，棋盘自然终止\n\n## 1.3 单层搜索过程\n**一个for循环遍历棋盘的行，一个for循环遍历棋盘的列，一行一列确定下来之后，递归遍历这个位置放9个数字的可能性！**\n\n### 1.3.1 判断棋盘是否合法\n\n判断棋盘是否合法有如下三个维度：\n\n-   同行是否重复\n-   同列是否重复\n-   9宫格里是否重复\n\n#flashcards/代码随想录 #疑问\n二维数组的行数与列数\n?\nint array[2]  [3]；二行三列\n\tint row = array.size();     行数   \n\tint col = array[0].size();  列数\n<!--SR:!2022-08-02,29,250-->\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/回溯算法/21.解数独","updated":"2022-07-12T09:02:14.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fje0046e0mgearb1u93","content":"<p>N皇后是每一行找一个位置放皇后<br>\n数独是<strong>棋盘的每一个位置都要放一个数字，并检查数字是否合法</strong></p>\n<p>void backtracking(参数) {<br>\nstartIndex：控制下一层的起始位置<br>\n去重(从下一层的第一个位置开始：backtracking(…, i+1))<br>\n排列问题不用startIndex<br>\nused[]：去重(从下一层的起始位置开始：backtracking(…, 0))<br>\nif (终止条件) {<br>\n存放结果;<br>\nreturn;<br>\n要取树上所有节点时不要加return<br>\n}<br>\nfor (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {<br>\n处理节点;<br>\nbacktracking(路径，选择列表); // 递归<br>\n回溯，撤销处理结果<br>\n}<br>\n}</p>\n<h1 id=\"1-回溯三部曲\"><a class=\"markdownIt-Anchor\" href=\"#1-回溯三部曲\"></a> 1 回溯三部曲</h1>\n<p>定义一些变量</p>\n<h2 id=\"11-确定回溯函数参数返回值\"><a class=\"markdownIt-Anchor\" href=\"#11-确定回溯函数参数返回值\"></a> 1.1 确定回溯函数参数返回值</h2>\n<p>数独和N皇后的返回值用bool值</p>\n<h2 id=\"12-终止条件-存放结果-return\"><a class=\"markdownIt-Anchor\" href=\"#12-终止条件-存放结果-return\"></a> 1.2 终止条件, 存放结果, return</h2>\n<p>不需要终止条件，等数填满了，棋盘自然终止</p>\n<h2 id=\"13-单层搜索过程\"><a class=\"markdownIt-Anchor\" href=\"#13-单层搜索过程\"></a> 1.3 单层搜索过程</h2>\n<p><strong>一个for循环遍历棋盘的行，一个for循环遍历棋盘的列，一行一列确定下来之后，递归遍历这个位置放9个数字的可能性！</strong></p>\n<h3 id=\"131-判断棋盘是否合法\"><a class=\"markdownIt-Anchor\" href=\"#131-判断棋盘是否合法\"></a> 1.3.1 判断棋盘是否合法</h3>\n<p>判断棋盘是否合法有如下三个维度：</p>\n<ul>\n<li>同行是否重复</li>\n<li>同列是否重复</li>\n<li>9宫格里是否重复</li>\n</ul>\n<p>#flashcards/代码随想录 #疑问<br>\n二维数组的行数与列数<br>\n?<br>\nint array[2]  [3]；二行三列<br>\nint row = array.size();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;行数&nbsp;&nbsp;&nbsp;<br>\nint col = array[0].size();  列数</p>\n<!--SR:!2022-08-02,29,250-->\n","site":{"data":{}},"wordcount":586,"excerpt":"","more":"<p>N皇后是每一行找一个位置放皇后<br />\n数独是<strong>棋盘的每一个位置都要放一个数字，并检查数字是否合法</strong></p>\n<p>void backtracking(参数) {<br />\nstartIndex：控制下一层的起始位置<br />\n去重(从下一层的第一个位置开始：backtracking(…, i+1))<br />\n排列问题不用startIndex<br />\nused[]：去重(从下一层的起始位置开始：backtracking(…, 0))<br />\nif (终止条件) {<br />\n存放结果;<br />\nreturn;<br />\n要取树上所有节点时不要加return<br />\n}<br />\nfor (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {<br />\n处理节点;<br />\nbacktracking(路径，选择列表); // 递归<br />\n回溯，撤销处理结果<br />\n}<br />\n}</p>\n<h1 id=\"1-回溯三部曲\"><a class=\"markdownIt-Anchor\" href=\"#1-回溯三部曲\"></a> 1 回溯三部曲</h1>\n<p>定义一些变量</p>\n<h2 id=\"11-确定回溯函数参数返回值\"><a class=\"markdownIt-Anchor\" href=\"#11-确定回溯函数参数返回值\"></a> 1.1 确定回溯函数参数返回值</h2>\n<p>数独和N皇后的返回值用bool值</p>\n<h2 id=\"12-终止条件-存放结果-return\"><a class=\"markdownIt-Anchor\" href=\"#12-终止条件-存放结果-return\"></a> 1.2 终止条件, 存放结果, return</h2>\n<p>不需要终止条件，等数填满了，棋盘自然终止</p>\n<h2 id=\"13-单层搜索过程\"><a class=\"markdownIt-Anchor\" href=\"#13-单层搜索过程\"></a> 1.3 单层搜索过程</h2>\n<p><strong>一个for循环遍历棋盘的行，一个for循环遍历棋盘的列，一行一列确定下来之后，递归遍历这个位置放9个数字的可能性！</strong></p>\n<h3 id=\"131-判断棋盘是否合法\"><a class=\"markdownIt-Anchor\" href=\"#131-判断棋盘是否合法\"></a> 1.3.1 判断棋盘是否合法</h3>\n<p>判断棋盘是否合法有如下三个维度：</p>\n<ul>\n<li>同行是否重复</li>\n<li>同列是否重复</li>\n<li>9宫格里是否重复</li>\n</ul>\n<p>#flashcards/代码随想录 #疑问<br />\n二维数组的行数与列数<br />\n?<br />\nint array[2]  [3]；二行三列<br />\nint row = array.size();     行数   <br />\nint col = array[0].size();  列数</p>\n<!--SR:!2022-08-02,29,250-->\n"},{"cards-deck":"source::_posts::👨🏻‍💻code::数据结构与算法::代码随想录::双指针法::双指针法总述.md","title":"双指针法总述","date":"2022-08-08T13:59:00.000Z","abbrlink":57173,"_content":"\n-   通过快慢指针操作\n1.  快指针找新数组的元素\n2.  慢指针为新数组下标, 快指针找到元素后把值赋值慢指针(下标)[[4. 有序数组的平方]] [[3. 移除元素]]\n\n\n\n-   通过双指针构建滑动窗口\n1.  起始指针 i , 终止指针 j, 通过操作 i 与 j 之间值来达到所需目的. eg: 求窗口之间的元素和 [[5. 长度最小的子数组]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n **参考资料**\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/双指针法/双指针法总述.md","raw":"---\ncards-deck: source::_posts::👨🏻‍💻code::数据结构与算法::代码随想录::双指针法::双指针法总述.md\ntitle: 双指针法总述\ndate: '2022-08-08 21:59'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 双指针法\nabbrlink: 57173\ntags:\n---\n\n-   通过快慢指针操作\n1.  快指针找新数组的元素\n2.  慢指针为新数组下标, 快指针找到元素后把值赋值慢指针(下标)[[4. 有序数组的平方]] [[3. 移除元素]]\n\n\n\n-   通过双指针构建滑动窗口\n1.  起始指针 i , 终止指针 j, 通过操作 i 与 j 之间值来达到所需目的. eg: 求窗口之间的元素和 [[5. 长度最小的子数组]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n **参考资料**\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/双指针法/双指针法总述","published":1,"updated":"2022-08-08T14:21:34.627Z","_id":"cl6ku8fje0049e0mgbdcbckwn","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>通过快慢指针操作</li>\n</ul>\n<ol>\n<li>快指针找新数组的元素</li>\n<li>慢指针为新数组下标, 快指针找到元素后把值赋值慢指针(下标)[[4. 有序数组的平方]] [[3. 移除元素]]</li>\n</ol>\n<ul>\n<li>通过双指针构建滑动窗口</li>\n</ul>\n<ol>\n<li>起始指针 i , 终止指针 j, 通过操作 i 与 j 之间值来达到所需目的. eg: 求窗口之间的元素和 [[5. 长度最小的子数组]]</li>\n</ol>\n<hr>\n<p><strong>参考资料</strong></p>\n","site":{"data":{}},"wordcount":141,"excerpt":"","more":"<ul>\n<li>通过快慢指针操作</li>\n</ul>\n<ol>\n<li>快指针找新数组的元素</li>\n<li>慢指针为新数组下标, 快指针找到元素后把值赋值慢指针(下标)[[4. 有序数组的平方]] [[3. 移除元素]]</li>\n</ol>\n<ul>\n<li>通过双指针构建滑动窗口</li>\n</ul>\n<ol>\n<li>起始指针 i , 终止指针 j, 通过操作 i 与 j 之间值来达到所需目的. eg: 求窗口之间的元素和 [[5. 长度最小的子数组]]</li>\n</ol>\n<hr />\n<p><strong>参考资料</strong></p>\n"},{"cards-deck":"source::_posts::👨🏻‍💻code::数据结构与算法::代码随想录::1.算法性能分析::代码内存消耗.md","title":"代码内存消耗","date":"2022-08-07T09:32:00.000Z","abbrlink":60393,"_content":"\n\n\n\n\n\n# 1 不同语言的内存管理\n\n不同的编程语言各自的内存管理方式。\n\n**-   C/C++这种内存堆空间的申请和释放完全靠自己管理**\n-   Java 依赖JVM来做内存管理，不了解jvm内存管理的机制，很可能会因一些错误的代码写法而导致内存泄漏或内存溢出\n-   Python内存管理是由私有堆空间管理的，所有的python对象和数据结构都存储在私有堆空间中。程序员没有访问堆的权限，只有解释器才能操作。\n\n例如Python万物皆对象，并且将内存操作封装的很好，**所以python的基本数据类型所用的内存会要远大于存放纯数据类型所占的内存**，例如，我们都知道存储int型数据需要四个字节，但是使用Python 申请一个对象来存放数据的话，所用空间要远大于四个字节。\n\n\n\n\n\n# 2 C++的内存管理\n\n以C++为例来介绍一下编程语言的内存管理。\n\n如果我们写C++的程序，就要知道栈和堆的概念，程序运行时所需的内存空间分为 固定部分，和可变部分，如下：\n\n![C++内存空间](https://img-blog.csdnimg.cn/20210309165950660.png)\n\n\n\n固定部分的内存消耗 是不会随着代码运行产生变化的， 可变部分则是会产生变化的\n\n更具体一些，一个由C/C++编译的程序占用的内存分为以下几个部分：\n\n-   栈区(Stack) ：由编译器自动分配释放，存放函数的参数值，局部变量的值等，其操作方式类似于数据结构中的栈。\n-   堆区(Heap) ：一般由程序员分配释放，若程序员不释放，程序结束时可能由OS收回\n-   未初始化数据区(Uninitialized Data)： 存放未初始化的全局变量和静态变量\n-   初始化数据区(Initialized Data)：存放已经初始化的全局变量和静态变量\n-   程序代码区(Text)：存放函数体的二进制代码\n\n代码区和数据区所占空间都是固定的，而且占用的空间非常小，那么看运行时消耗的内存主要看可变部分。\n\n在可变部分中，栈区间的数据在代码块执行结束之后，系统会自动回收，**而堆区间数据是需要程序员自己回收，所以也就是造成内存泄漏的发源地。**\n\n**而Java、Python的话则不需要程序员去考虑内存泄漏的问题，虚拟机都做了这些事情**。\n\n\n\n\n# 3 如何计算程序占用多大内存\n\n想要算出自己程序会占用多少内存就一定要了解自己定义的数据类型的大小，如下：\n\n![C++数据类型的大小](https://img-blog.csdnimg.cn/20200804193045440.png)\n**Byte :字节**\n\n\n注意图中有两个不一样的地方，为什么64位的指针就占用了8个字节，而32位的指针占用4个字节呢？\n\n**1个字节占8个比特**，那么4个字节就是32个比特，可存放数据的大小为2^32，也就是4G空间的大小，即：**4个Byte可以寻找4G空间大小的内存地址。**\n\n大家现在使用的计算机一般都是64位了，所以编译器也都是64位的。\n\n\n\n注意2^64是一个非常巨大的数，对于寻找地址来说已经足够用了。\n\n## 3.1 总结\n1 字节 = 8 比特\n\n1 字节 = 8 比特(1 Byte = 8 bit), 4字节 = 32比特, 能够存放 $2^{32}$个数据即4G内存, 就能够当寻址内存存放指针 #card\n安装64位的操作系统的计算机内存都已经超过了4G，也就是指针大小如果还是4个字节的话，**就已经不能寻址全部的内存地址**，所以64位编译器使用8个字节的指针才能寻找所有的内存地址。\n\n\n# 4 内存对齐 \n![[代码内存消耗 2022-08-07 18.01.47.excalidraw]] \n- 内存对齐:  \n一字节的char占用了四个字节，空了三个字节的内存地址，int数据从地址4开始。\n此时，直接将地址4，5，6，7处的四个字节数据读取到即可\n分割线\n- 非内存对齐\nchar型的数据和int型的数据挨在一起，该int数据从地址1开始，那么CPU想要读这个数据的话来看看需要几步操作：\n1.  因为CPU是四个字节四个字节来寻址，首先CPU读取0，1，2，3处的四个字节数据\n2.  CPU读取4，5，6，7处的四个字节数据\n3.  合并地址1，2，3，4处四个字节的数据才是本次操作需要的int数据\n此时一共需要两次寻址，一次合并的操作\n分割线\n虽然浪费内存,但是内存资源一般都是充足的,我们更希望提升运行速度\n**编译器一般都会做内存对齐的优化操作，也就是说当考虑程序真正占用的内存大小的时候，也需要认识到内存对齐的影响**。\n分割线\n例子 #card\n```c\n// char 一字节, int 四字节\nstruct node{\n   int num;\n   char cha;\n}st;\nint main() {\n    int a[100];\n    char b[100];\n    cout << sizeof(int) << endl;  // 4\n    cout << sizeof(char) << endl; // 1\n    cout << sizeof(a) << endl;    // 400\n    cout << sizeof(b) << endl;    // 100\n    cout << sizeof(st) << endl;   // 因为内存对齐,整个类的内存占用为 8 字节\n}\n```\n\n\n\n\n---\n**参考资料**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/1.算法性能分析/代码内存消耗.md","raw":"---\ncards-deck: source::_posts::👨🏻‍💻code::数据结构与算法::代码随想录::1.算法性能分析::代码内存消耗.md\ntitle: 代码内存消耗\ndate: '2022-08-07 17:32'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 1.算法性能分析\nabbrlink: 60393\ntags:\n---\n\n\n\n\n\n\n# 1 不同语言的内存管理\n\n不同的编程语言各自的内存管理方式。\n\n**-   C/C++这种内存堆空间的申请和释放完全靠自己管理**\n-   Java 依赖JVM来做内存管理，不了解jvm内存管理的机制，很可能会因一些错误的代码写法而导致内存泄漏或内存溢出\n-   Python内存管理是由私有堆空间管理的，所有的python对象和数据结构都存储在私有堆空间中。程序员没有访问堆的权限，只有解释器才能操作。\n\n例如Python万物皆对象，并且将内存操作封装的很好，**所以python的基本数据类型所用的内存会要远大于存放纯数据类型所占的内存**，例如，我们都知道存储int型数据需要四个字节，但是使用Python 申请一个对象来存放数据的话，所用空间要远大于四个字节。\n\n\n\n\n\n# 2 C++的内存管理\n\n以C++为例来介绍一下编程语言的内存管理。\n\n如果我们写C++的程序，就要知道栈和堆的概念，程序运行时所需的内存空间分为 固定部分，和可变部分，如下：\n\n![C++内存空间](https://img-blog.csdnimg.cn/20210309165950660.png)\n\n\n\n固定部分的内存消耗 是不会随着代码运行产生变化的， 可变部分则是会产生变化的\n\n更具体一些，一个由C/C++编译的程序占用的内存分为以下几个部分：\n\n-   栈区(Stack) ：由编译器自动分配释放，存放函数的参数值，局部变量的值等，其操作方式类似于数据结构中的栈。\n-   堆区(Heap) ：一般由程序员分配释放，若程序员不释放，程序结束时可能由OS收回\n-   未初始化数据区(Uninitialized Data)： 存放未初始化的全局变量和静态变量\n-   初始化数据区(Initialized Data)：存放已经初始化的全局变量和静态变量\n-   程序代码区(Text)：存放函数体的二进制代码\n\n代码区和数据区所占空间都是固定的，而且占用的空间非常小，那么看运行时消耗的内存主要看可变部分。\n\n在可变部分中，栈区间的数据在代码块执行结束之后，系统会自动回收，**而堆区间数据是需要程序员自己回收，所以也就是造成内存泄漏的发源地。**\n\n**而Java、Python的话则不需要程序员去考虑内存泄漏的问题，虚拟机都做了这些事情**。\n\n\n\n\n# 3 如何计算程序占用多大内存\n\n想要算出自己程序会占用多少内存就一定要了解自己定义的数据类型的大小，如下：\n\n![C++数据类型的大小](https://img-blog.csdnimg.cn/20200804193045440.png)\n**Byte :字节**\n\n\n注意图中有两个不一样的地方，为什么64位的指针就占用了8个字节，而32位的指针占用4个字节呢？\n\n**1个字节占8个比特**，那么4个字节就是32个比特，可存放数据的大小为2^32，也就是4G空间的大小，即：**4个Byte可以寻找4G空间大小的内存地址。**\n\n大家现在使用的计算机一般都是64位了，所以编译器也都是64位的。\n\n\n\n注意2^64是一个非常巨大的数，对于寻找地址来说已经足够用了。\n\n## 3.1 总结\n1 字节 = 8 比特\n\n1 字节 = 8 比特(1 Byte = 8 bit), 4字节 = 32比特, 能够存放 $2^{32}$个数据即4G内存, 就能够当寻址内存存放指针 #card\n安装64位的操作系统的计算机内存都已经超过了4G，也就是指针大小如果还是4个字节的话，**就已经不能寻址全部的内存地址**，所以64位编译器使用8个字节的指针才能寻找所有的内存地址。\n\n\n# 4 内存对齐 \n![[代码内存消耗 2022-08-07 18.01.47.excalidraw]] \n- 内存对齐:  \n一字节的char占用了四个字节，空了三个字节的内存地址，int数据从地址4开始。\n此时，直接将地址4，5，6，7处的四个字节数据读取到即可\n分割线\n- 非内存对齐\nchar型的数据和int型的数据挨在一起，该int数据从地址1开始，那么CPU想要读这个数据的话来看看需要几步操作：\n1.  因为CPU是四个字节四个字节来寻址，首先CPU读取0，1，2，3处的四个字节数据\n2.  CPU读取4，5，6，7处的四个字节数据\n3.  合并地址1，2，3，4处四个字节的数据才是本次操作需要的int数据\n此时一共需要两次寻址，一次合并的操作\n分割线\n虽然浪费内存,但是内存资源一般都是充足的,我们更希望提升运行速度\n**编译器一般都会做内存对齐的优化操作，也就是说当考虑程序真正占用的内存大小的时候，也需要认识到内存对齐的影响**。\n分割线\n例子 #card\n```c\n// char 一字节, int 四字节\nstruct node{\n   int num;\n   char cha;\n}st;\nint main() {\n    int a[100];\n    char b[100];\n    cout << sizeof(int) << endl;  // 4\n    cout << sizeof(char) << endl; // 1\n    cout << sizeof(a) << endl;    // 400\n    cout << sizeof(b) << endl;    // 100\n    cout << sizeof(st) << endl;   // 因为内存对齐,整个类的内存占用为 8 字节\n}\n```\n\n\n\n\n---\n**参考资料**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/1.算法性能分析/代码内存消耗","published":1,"updated":"2022-08-08T14:50:49.148Z","_id":"cl6ku8fjf004de0mgfad00yhn","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-不同语言的内存管理\"><a class=\"markdownIt-Anchor\" href=\"#1-不同语言的内存管理\"></a> 1 不同语言的内存管理</h1>\n<p>不同的编程语言各自的内存管理方式。</p>\n<p><strong>-   C/C++这种内存堆空间的申请和释放完全靠自己管理</strong></p>\n<ul>\n<li>Java 依赖JVM来做内存管理，不了解jvm内存管理的机制，很可能会因一些错误的代码写法而导致内存泄漏或内存溢出</li>\n<li>Python内存管理是由私有堆空间管理的，所有的python对象和数据结构都存储在私有堆空间中。程序员没有访问堆的权限，只有解释器才能操作。</li>\n</ul>\n<p>例如Python万物皆对象，并且将内存操作封装的很好，<strong>所以python的基本数据类型所用的内存会要远大于存放纯数据类型所占的内存</strong>，例如，我们都知道存储int型数据需要四个字节，但是使用Python 申请一个对象来存放数据的话，所用空间要远大于四个字节。</p>\n<h1 id=\"2-c的内存管理\"><a class=\"markdownIt-Anchor\" href=\"#2-c的内存管理\"></a> 2 C++的内存管理</h1>\n<p>以C++为例来介绍一下编程语言的内存管理。</p>\n<p>如果我们写C++的程序，就要知道栈和堆的概念，程序运行时所需的内存空间分为 固定部分，和可变部分，如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210309165950660.png\" alt=\"C++内存空间\"></p>\n<p>固定部分的内存消耗 是不会随着代码运行产生变化的， 可变部分则是会产生变化的</p>\n<p>更具体一些，一个由C/C++编译的程序占用的内存分为以下几个部分：</p>\n<ul>\n<li>栈区(Stack) ：由编译器自动分配释放，存放函数的参数值，局部变量的值等，其操作方式类似于数据结构中的栈。</li>\n<li>堆区(Heap) ：一般由程序员分配释放，若程序员不释放，程序结束时可能由OS收回</li>\n<li>未初始化数据区(Uninitialized Data)： 存放未初始化的全局变量和静态变量</li>\n<li>初始化数据区(Initialized Data)：存放已经初始化的全局变量和静态变量</li>\n<li>程序代码区(Text)：存放函数体的二进制代码</li>\n</ul>\n<p>代码区和数据区所占空间都是固定的，而且占用的空间非常小，那么看运行时消耗的内存主要看可变部分。</p>\n<p>在可变部分中，栈区间的数据在代码块执行结束之后，系统会自动回收，<strong>而堆区间数据是需要程序员自己回收，所以也就是造成内存泄漏的发源地。</strong></p>\n<p><strong>而Java、Python的话则不需要程序员去考虑内存泄漏的问题，虚拟机都做了这些事情</strong>。</p>\n<h1 id=\"3-如何计算程序占用多大内存\"><a class=\"markdownIt-Anchor\" href=\"#3-如何计算程序占用多大内存\"></a> 3 如何计算程序占用多大内存</h1>\n<p>想要算出自己程序会占用多少内存就一定要了解自己定义的数据类型的大小，如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200804193045440.png\" alt=\"C++数据类型的大小\"><br>\n<strong>Byte :字节</strong></p>\n<p>注意图中有两个不一样的地方，为什么64位的指针就占用了8个字节，而32位的指针占用4个字节呢？</p>\n<p><strong>1个字节占8个比特</strong>，那么4个字节就是32个比特，可存放数据的大小为2^32，也就是4G空间的大小，即：<strong>4个Byte可以寻找4G空间大小的内存地址。</strong></p>\n<p>大家现在使用的计算机一般都是64位了，所以编译器也都是64位的。</p>\n<p>注意2^64是一个非常巨大的数，对于寻找地址来说已经足够用了。</p>\n<h2 id=\"31-总结\"><a class=\"markdownIt-Anchor\" href=\"#31-总结\"></a> 3.1 总结</h2>\n<p>1 字节 = 8 比特</p>\n<p>1 字节 = 8 比特(1 Byte = 8 bit), 4字节 = 32比特, 能够存放 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{32}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span>个数据即4G内存, 就能够当寻址内存存放指针 #card<br>\n安装64位的操作系统的计算机内存都已经超过了4G，也就是指针大小如果还是4个字节的话，<strong>就已经不能寻址全部的内存地址</strong>，所以64位编译器使用8个字节的指针才能寻找所有的内存地址。</p>\n<h1 id=\"4-内存对齐\"><a class=\"markdownIt-Anchor\" href=\"#4-内存对齐\"></a> 4 内存对齐</h1>\n<p>![[代码内存消耗 2022-08-07 18.01.47.excalidraw]]</p>\n<ul>\n<li>内存对齐:<br>\n一字节的char占用了四个字节，空了三个字节的内存地址，int数据从地址4开始。<br>\n此时，直接将地址4，5，6，7处的四个字节数据读取到即可<br>\n分割线</li>\n<li>非内存对齐<br>\nchar型的数据和int型的数据挨在一起，该int数据从地址1开始，那么CPU想要读这个数据的话来看看需要几步操作：</li>\n</ul>\n<ol>\n<li>因为CPU是四个字节四个字节来寻址，首先CPU读取0，1，2，3处的四个字节数据</li>\n<li>CPU读取4，5，6，7处的四个字节数据</li>\n<li>合并地址1，2，3，4处四个字节的数据才是本次操作需要的int数据<br>\n此时一共需要两次寻址，一次合并的操作<br>\n分割线<br>\n虽然浪费内存,但是内存资源一般都是充足的,我们更希望提升运行速度<br>\n<strong>编译器一般都会做内存对齐的优化操作，也就是说当考虑程序真正占用的内存大小的时候，也需要认识到内存对齐的影响</strong>。<br>\n分割线<br>\n例子 #card</li>\n</ol>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// char 一字节, int 四字节</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span>{</span><br>   <span class=\"hljs-type\">int</span> num;<br>   <span class=\"hljs-type\">char</span> cha;<br>}st;<br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {<br>    <span class=\"hljs-type\">int</span> a[<span class=\"hljs-number\">100</span>];<br>    <span class=\"hljs-type\">char</span> b[<span class=\"hljs-number\">100</span>];<br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;  <span class=\"hljs-comment\">// 4</span><br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">char</span>) &lt;&lt; <span class=\"hljs-built_in\">endl</span>; <span class=\"hljs-comment\">// 1</span><br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-keyword\">sizeof</span>(a) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;    <span class=\"hljs-comment\">// 400</span><br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-keyword\">sizeof</span>(b) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;    <span class=\"hljs-comment\">// 100</span><br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-keyword\">sizeof</span>(st) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;   <span class=\"hljs-comment\">// 因为内存对齐,整个类的内存占用为 8 字节</span><br>}<br></code></pre></td></tr></tbody></table></figure>\n<hr>\n<p><strong>参考资料</strong></p>\n","site":{"data":{}},"wordcount":1948,"excerpt":"","more":"<h1 id=\"1-不同语言的内存管理\"><a class=\"markdownIt-Anchor\" href=\"#1-不同语言的内存管理\"></a> 1 不同语言的内存管理</h1>\n<p>不同的编程语言各自的内存管理方式。</p>\n<p><strong>-   C/C++这种内存堆空间的申请和释放完全靠自己管理</strong></p>\n<ul>\n<li>Java 依赖JVM来做内存管理，不了解jvm内存管理的机制，很可能会因一些错误的代码写法而导致内存泄漏或内存溢出</li>\n<li>Python内存管理是由私有堆空间管理的，所有的python对象和数据结构都存储在私有堆空间中。程序员没有访问堆的权限，只有解释器才能操作。</li>\n</ul>\n<p>例如Python万物皆对象，并且将内存操作封装的很好，<strong>所以python的基本数据类型所用的内存会要远大于存放纯数据类型所占的内存</strong>，例如，我们都知道存储int型数据需要四个字节，但是使用Python 申请一个对象来存放数据的话，所用空间要远大于四个字节。</p>\n<h1 id=\"2-c的内存管理\"><a class=\"markdownIt-Anchor\" href=\"#2-c的内存管理\"></a> 2 C++的内存管理</h1>\n<p>以C++为例来介绍一下编程语言的内存管理。</p>\n<p>如果我们写C++的程序，就要知道栈和堆的概念，程序运行时所需的内存空间分为 固定部分，和可变部分，如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210309165950660.png\" alt=\"C++内存空间\" /></p>\n<p>固定部分的内存消耗 是不会随着代码运行产生变化的， 可变部分则是会产生变化的</p>\n<p>更具体一些，一个由C/C++编译的程序占用的内存分为以下几个部分：</p>\n<ul>\n<li>栈区(Stack) ：由编译器自动分配释放，存放函数的参数值，局部变量的值等，其操作方式类似于数据结构中的栈。</li>\n<li>堆区(Heap) ：一般由程序员分配释放，若程序员不释放，程序结束时可能由OS收回</li>\n<li>未初始化数据区(Uninitialized Data)： 存放未初始化的全局变量和静态变量</li>\n<li>初始化数据区(Initialized Data)：存放已经初始化的全局变量和静态变量</li>\n<li>程序代码区(Text)：存放函数体的二进制代码</li>\n</ul>\n<p>代码区和数据区所占空间都是固定的，而且占用的空间非常小，那么看运行时消耗的内存主要看可变部分。</p>\n<p>在可变部分中，栈区间的数据在代码块执行结束之后，系统会自动回收，<strong>而堆区间数据是需要程序员自己回收，所以也就是造成内存泄漏的发源地。</strong></p>\n<p><strong>而Java、Python的话则不需要程序员去考虑内存泄漏的问题，虚拟机都做了这些事情</strong>。</p>\n<h1 id=\"3-如何计算程序占用多大内存\"><a class=\"markdownIt-Anchor\" href=\"#3-如何计算程序占用多大内存\"></a> 3 如何计算程序占用多大内存</h1>\n<p>想要算出自己程序会占用多少内存就一定要了解自己定义的数据类型的大小，如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200804193045440.png\" alt=\"C++数据类型的大小\" /><br />\n<strong>Byte :字节</strong></p>\n<p>注意图中有两个不一样的地方，为什么64位的指针就占用了8个字节，而32位的指针占用4个字节呢？</p>\n<p><strong>1个字节占8个比特</strong>，那么4个字节就是32个比特，可存放数据的大小为2^32，也就是4G空间的大小，即：<strong>4个Byte可以寻找4G空间大小的内存地址。</strong></p>\n<p>大家现在使用的计算机一般都是64位了，所以编译器也都是64位的。</p>\n<p>注意2^64是一个非常巨大的数，对于寻找地址来说已经足够用了。</p>\n<h2 id=\"31-总结\"><a class=\"markdownIt-Anchor\" href=\"#31-总结\"></a> 3.1 总结</h2>\n<p>1 字节 = 8 比特</p>\n<p>1 字节 = 8 比特(1 Byte = 8 bit), 4字节 = 32比特, 能够存放 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{32}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span>个数据即4G内存, 就能够当寻址内存存放指针 #card<br />\n安装64位的操作系统的计算机内存都已经超过了4G，也就是指针大小如果还是4个字节的话，<strong>就已经不能寻址全部的内存地址</strong>，所以64位编译器使用8个字节的指针才能寻找所有的内存地址。</p>\n<h1 id=\"4-内存对齐\"><a class=\"markdownIt-Anchor\" href=\"#4-内存对齐\"></a> 4 内存对齐</h1>\n<p>![[代码内存消耗 2022-08-07 18.01.47.excalidraw]]</p>\n<ul>\n<li>内存对齐:<br />\n一字节的char占用了四个字节，空了三个字节的内存地址，int数据从地址4开始。<br />\n此时，直接将地址4，5，6，7处的四个字节数据读取到即可<br />\n分割线</li>\n<li>非内存对齐<br />\nchar型的数据和int型的数据挨在一起，该int数据从地址1开始，那么CPU想要读这个数据的话来看看需要几步操作：</li>\n</ul>\n<ol>\n<li>因为CPU是四个字节四个字节来寻址，首先CPU读取0，1，2，3处的四个字节数据</li>\n<li>CPU读取4，5，6，7处的四个字节数据</li>\n<li>合并地址1，2，3，4处四个字节的数据才是本次操作需要的int数据<br />\n此时一共需要两次寻址，一次合并的操作<br />\n分割线<br />\n虽然浪费内存,但是内存资源一般都是充足的,我们更希望提升运行速度<br />\n<strong>编译器一般都会做内存对齐的优化操作，也就是说当考虑程序真正占用的内存大小的时候，也需要认识到内存对齐的影响</strong>。<br />\n分割线<br />\n例子 #card</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// char 一字节, int 四字节</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span>&#123;</span><br>   <span class=\"hljs-type\">int</span> num;<br>   <span class=\"hljs-type\">char</span> cha;<br>&#125;st;<br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">int</span> a[<span class=\"hljs-number\">100</span>];<br>    <span class=\"hljs-type\">char</span> b[<span class=\"hljs-number\">100</span>];<br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;  <span class=\"hljs-comment\">// 4</span><br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">char</span>) &lt;&lt; <span class=\"hljs-built_in\">endl</span>; <span class=\"hljs-comment\">// 1</span><br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-keyword\">sizeof</span>(a) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;    <span class=\"hljs-comment\">// 400</span><br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-keyword\">sizeof</span>(b) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;    <span class=\"hljs-comment\">// 100</span><br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-keyword\">sizeof</span>(st) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;   <span class=\"hljs-comment\">// 因为内存对齐,整个类的内存占用为 8 字节</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<hr />\n<p><strong>参考资料</strong></p>\n"},{"title":"时间复杂度分析","date":"2022-07-12T06:58:00.000Z","abbrlink":30256,"_content":"\n文章简介：如题\n<!-- more -->\n# 1 概念\n\n## 1.1 定义[^1]\n\n**时间复杂度是一个函数，它定性描述该算法的运行时间**。\n估计程序运行时间：通常会估算算法的**操作单元数量**来代表程序消耗的时间\n>这里默认CPU的每个单元运行消耗的时间都是相同的。\n\n假设算法的问题规模为n，那么操作单元数量便用函数f(n)来表示，随着数据规模n的增大，算法执行时间的增长率和f(n)的增长率相同，这称作为算法的渐近时间复杂度，简称时间复杂度，记为 O(f(n))。\n\n时间复杂度对应的是物理上的加速度[^2]\n![[时间复杂度分析 2022-08-05 17.27.42.excalidraw]]\n\n\n## 1.2 复杂度分析\n\n复杂度分析只考虑最坏的情况\n**大O用来表示上界的**，它作为算法的最坏情况运行时间的上界\n\n我们主要关心的还是一般情况下的数据形式。\n\n**面试中说道算法的时间复杂度是多少，指的都是一般情况**。但是如果面试官和我们深入探讨一个算法的实现以及性能的时候，就要时刻想着数据用例的不一样，时间复杂度也是不同的，这一点是一定要注意的。\n## 1.3 不同数据规模的差异\n![时间复杂度，不同数据规模的差异|500](https://img-blog.csdnimg.cn/20200728191447384.png)\n\n**我们说的时间复杂度都是省略常数项系数的，是因为一般情况下都是默认数据规模足够的大，基于这样的事实，给出的算法时间复杂的的一个排行如下所示**：\n\n$O(1)<O(logn)<O(n)<O(nlogn)<O(n^{2})<O(2^{n})$\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202208051803308.png)\n\n\n但是也要注意大常数，如果这个常数非常大，例如10^7 ，10^9 ，那么常数就是不得不考虑的因素了\n在决定使用哪些算法的时候，不是时间复杂越低的越好（因为简化后的时间复杂度忽略了常数项等等），要考虑数据规模，如果数据规模很小甚至可以用O(n^2)的算法比O(n)的更合适（在有常数项的时候）\n\n## 1.4 O(logn)中的log是以什么为底？\n**logn，也就是忽略底数的描述**。也可以是以10为底n的对数，也可以是以20为底n的对数，等等\n`以2为底n的对数 = 以2为底10的对数 * 以10为底n的对数`。\n而以2为底10的对数是一个常数，在上文已经讲述了我们计算时间复杂度是忽略常数项系数的。\n![|500](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121533152.png)\n# 2 常见的时间复杂度\n![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121507462.png)\n快速排序：$O(nlogn)$ : sort 函数[[sort函数]]\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202208051803308.png)\n\n\n\n# 3 计算时间复杂度\n时间复杂的是看**次数**[^3]\n![[时间复杂度分析 2022-08-05 18.11.16.excalidraw]]\n## 3.1 普通类型\n~~乘法：乘法操作的时间复杂度 = O(1) ：O(n) 就是乘n次~~\n~~加法：一般忽略，但从0加到n的为O(n)的复杂度~~\n## 3.2 函数类型\n1. for循环嵌套：循环\n2. if else：选择分支内最大的复杂度\n3.  [[递归算法的复杂度]]：递归次数 * 每次递归的操作次数\n## 3.3 其他类型\n1. 两端算法相加时，取两者最大值：$T_1(n)+T_2(n)=max(Of_1(n),Of_2(n))$，eg：$n^5+n=n^5$\n2. 两段算法嵌套时：为两者相乘：$T_1(n)*T_2(n)=O(f_1(n)*f_2(n))$，eg：$n^{2}*n^{2}=n^{4}$\n3. 有两算法时,本质是时间复杂度为两个函数相加, 但最终结果还是取的大头[^4]\n\n\n# 4 例子\n## 4.1 找出n个字符串中相同的两个字符串（假设这里只有两个相同的字符串）。\n\n先排对n个字符串按字典序来排序，排序后n个字符串就是有序的，意味着两个相同的字符串就是挨在一起，然后在遍历一遍n个字符串，这样就找到两个相同的字符串了。\n\n那看看这种算法的时间复杂度，快速排序时间复杂度为O(nlogn)，依然要考虑字符串的长度是m，那么快速排序每次的比较都要有m次的字符比较的操作，就是O(m × n × log n) 。\n\n## 4.2 01背包\n暴力解法\n每一件物品其实只有两个状态，取或者不取，所以可以使用回溯法搜索出所有的情况，那么时间复杂度就是$o(2^n)$，这里的n表示物品数量。\n\n\n\n\n\n# 5 参考资料\n\n\n\n\n[^1]: [关于时间复杂度，你不知道的都在这里！ | 代码随想录](https://www.programmercarl.com/%E5%89%8D%E5%BA%8F/%E5%85%B3%E4%BA%8E%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%8C%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E9%83%BD%E5%9C%A8%E8%BF%99%E9%87%8C%EF%BC%81.html#%E7%A9%B6%E7%AB%9F%E4%BB%80%E4%B9%88%E6%98%AF%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6)\n[^2]: [1-4 初识时间复杂度_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV11h411h7nT?p=4&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n[^3]: \n[^4]: [[4. 有序数组的平方]]","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/1.算法性能分析/时间复杂度分析.md","raw":"---\ntitle: 时间复杂度分析\ndate: '2022-07-12 14:58'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 1.算法性能分析\ntags:\n  - 复杂度\nabbrlink: 30256\n---\n\n文章简介：如题\n<!-- more -->\n# 1 概念\n\n## 1.1 定义[^1]\n\n**时间复杂度是一个函数，它定性描述该算法的运行时间**。\n估计程序运行时间：通常会估算算法的**操作单元数量**来代表程序消耗的时间\n>这里默认CPU的每个单元运行消耗的时间都是相同的。\n\n假设算法的问题规模为n，那么操作单元数量便用函数f(n)来表示，随着数据规模n的增大，算法执行时间的增长率和f(n)的增长率相同，这称作为算法的渐近时间复杂度，简称时间复杂度，记为 O(f(n))。\n\n时间复杂度对应的是物理上的加速度[^2]\n![[时间复杂度分析 2022-08-05 17.27.42.excalidraw]]\n\n\n## 1.2 复杂度分析\n\n复杂度分析只考虑最坏的情况\n**大O用来表示上界的**，它作为算法的最坏情况运行时间的上界\n\n我们主要关心的还是一般情况下的数据形式。\n\n**面试中说道算法的时间复杂度是多少，指的都是一般情况**。但是如果面试官和我们深入探讨一个算法的实现以及性能的时候，就要时刻想着数据用例的不一样，时间复杂度也是不同的，这一点是一定要注意的。\n## 1.3 不同数据规模的差异\n![时间复杂度，不同数据规模的差异|500](https://img-blog.csdnimg.cn/20200728191447384.png)\n\n**我们说的时间复杂度都是省略常数项系数的，是因为一般情况下都是默认数据规模足够的大，基于这样的事实，给出的算法时间复杂的的一个排行如下所示**：\n\n$O(1)<O(logn)<O(n)<O(nlogn)<O(n^{2})<O(2^{n})$\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202208051803308.png)\n\n\n但是也要注意大常数，如果这个常数非常大，例如10^7 ，10^9 ，那么常数就是不得不考虑的因素了\n在决定使用哪些算法的时候，不是时间复杂越低的越好（因为简化后的时间复杂度忽略了常数项等等），要考虑数据规模，如果数据规模很小甚至可以用O(n^2)的算法比O(n)的更合适（在有常数项的时候）\n\n## 1.4 O(logn)中的log是以什么为底？\n**logn，也就是忽略底数的描述**。也可以是以10为底n的对数，也可以是以20为底n的对数，等等\n`以2为底n的对数 = 以2为底10的对数 * 以10为底n的对数`。\n而以2为底10的对数是一个常数，在上文已经讲述了我们计算时间复杂度是忽略常数项系数的。\n![|500](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121533152.png)\n# 2 常见的时间复杂度\n![|600](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121507462.png)\n快速排序：$O(nlogn)$ : sort 函数[[sort函数]]\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202208051803308.png)\n\n\n\n# 3 计算时间复杂度\n时间复杂的是看**次数**[^3]\n![[时间复杂度分析 2022-08-05 18.11.16.excalidraw]]\n## 3.1 普通类型\n~~乘法：乘法操作的时间复杂度 = O(1) ：O(n) 就是乘n次~~\n~~加法：一般忽略，但从0加到n的为O(n)的复杂度~~\n## 3.2 函数类型\n1. for循环嵌套：循环\n2. if else：选择分支内最大的复杂度\n3.  [[递归算法的复杂度]]：递归次数 * 每次递归的操作次数\n## 3.3 其他类型\n1. 两端算法相加时，取两者最大值：$T_1(n)+T_2(n)=max(Of_1(n),Of_2(n))$，eg：$n^5+n=n^5$\n2. 两段算法嵌套时：为两者相乘：$T_1(n)*T_2(n)=O(f_1(n)*f_2(n))$，eg：$n^{2}*n^{2}=n^{4}$\n3. 有两算法时,本质是时间复杂度为两个函数相加, 但最终结果还是取的大头[^4]\n\n\n# 4 例子\n## 4.1 找出n个字符串中相同的两个字符串（假设这里只有两个相同的字符串）。\n\n先排对n个字符串按字典序来排序，排序后n个字符串就是有序的，意味着两个相同的字符串就是挨在一起，然后在遍历一遍n个字符串，这样就找到两个相同的字符串了。\n\n那看看这种算法的时间复杂度，快速排序时间复杂度为O(nlogn)，依然要考虑字符串的长度是m，那么快速排序每次的比较都要有m次的字符比较的操作，就是O(m × n × log n) 。\n\n## 4.2 01背包\n暴力解法\n每一件物品其实只有两个状态，取或者不取，所以可以使用回溯法搜索出所有的情况，那么时间复杂度就是$o(2^n)$，这里的n表示物品数量。\n\n\n\n\n\n# 5 参考资料\n\n\n\n\n[^1]: [关于时间复杂度，你不知道的都在这里！ | 代码随想录](https://www.programmercarl.com/%E5%89%8D%E5%BA%8F/%E5%85%B3%E4%BA%8E%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%8C%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E9%83%BD%E5%9C%A8%E8%BF%99%E9%87%8C%EF%BC%81.html#%E7%A9%B6%E7%AB%9F%E4%BB%80%E4%B9%88%E6%98%AF%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6)\n[^2]: [1-4 初识时间复杂度_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV11h411h7nT?p=4&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n[^3]: \n[^4]: [[4. 有序数组的平方]]","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/1.算法性能分析/时间复杂度分析","published":1,"updated":"2022-08-08T09:01:04.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjf004fe0mghkuh1dey","content":"<p>文章简介：如题</p>\n<span id=\"more\"></span>\n<h1 id=\"1-概念\"><a class=\"markdownIt-Anchor\" href=\"#1-概念\"></a> 1 概念</h1>\n<h2 id=\"11-定义sup-idfnref1-classfootnote-refa-hreffn1-relfootnotespan-classhinttop-hintrounded-aria-label关于时间复杂度你不知道的都在这里-代码随想录\"><a class=\"markdownIt-Anchor\" href=\"#11-定义sup-idfnref1-classfootnote-refa-hreffn1-relfootnotespan-classhinttop-hintrounded-aria-label关于时间复杂度你不知道的都在这里-代码随想录\"></a> 1.1 定义<sup id=\"fnref:1\" class=\"footnote-ref\"><a href=\"#fn:1\" rel=\"footnote\">&lt;span class=“hint–top hint–rounded” aria-label=\"关于时间复杂度，你不知道的都在这里！ | 代码随想录</a></sup></h2><a href=\"#fn:1\" rel=\"footnote\">\n</a><p><a href=\"#fn:1\" rel=\"footnote\">\"&gt;[1]</a></p>\n<p><strong>时间复杂度是一个函数，它定性描述该算法的运行时间</strong>。<br>\n估计程序运行时间：通常会估算算法的<strong>操作单元数量</strong>来代表程序消耗的时间</p>\n<blockquote>\n<p>这里默认CPU的每个单元运行消耗的时间都是相同的。</p>\n</blockquote>\n<p>假设算法的问题规模为n，那么操作单元数量便用函数f(n)来表示，随着数据规模n的增大，算法执行时间的增长率和f(n)的增长率相同，这称作为算法的渐近时间复杂度，简称时间复杂度，记为 O(f(n))。</p>\n<p>时间复杂度对应的是物理上的加速度<sup id=\"fnref:2\" class=\"footnote-ref\"><a href=\"#fn:2\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"1-4 初识时间复杂度_哔哩哔哩_bilibili\n\">[2]</span></a></sup><br>\n![[时间复杂度分析 2022-08-05 17.27.42.excalidraw]]</p>\n<h2 id=\"12-复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#12-复杂度分析\"></a> 1.2 复杂度分析</h2>\n<p>复杂度分析只考虑最坏的情况<br>\n<strong>大O用来表示上界的</strong>，它作为算法的最坏情况运行时间的上界</p>\n<p>我们主要关心的还是一般情况下的数据形式。</p>\n<p><strong>面试中说道算法的时间复杂度是多少，指的都是一般情况</strong>。但是如果面试官和我们深入探讨一个算法的实现以及性能的时候，就要时刻想着数据用例的不一样，时间复杂度也是不同的，这一点是一定要注意的。</p>\n<h2 id=\"13-不同数据规模的差异\"><a class=\"markdownIt-Anchor\" href=\"#13-不同数据规模的差异\"></a> 1.3 不同数据规模的差异</h2>\n<p><img src=\"https://img-blog.csdnimg.cn/20200728191447384.png\" alt=\"时间复杂度，不同数据规模的差异|500\"></p>\n<p><strong>我们说的时间复杂度都是省略常数项系数的，是因为一般情况下都是默认数据规模足够的大，基于这样的事实，给出的算法时间复杂的的一个排行如下所示</strong>：</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^{2})&lt;O(2^{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span><br>\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202208051803308.png\" alt=\"\"></p>\n<p>但是也要注意大常数，如果这个常数非常大，例如10^7 ，10^9 ，那么常数就是不得不考虑的因素了<br>\n在决定使用哪些算法的时候，不是时间复杂越低的越好（因为简化后的时间复杂度忽略了常数项等等），要考虑数据规模，如果数据规模很小甚至可以用O(n^2)的算法比O(n)的更合适（在有常数项的时候）</p>\n<h2 id=\"14-ologn中的log是以什么为底\"><a class=\"markdownIt-Anchor\" href=\"#14-ologn中的log是以什么为底\"></a> 1.4 O(logn)中的log是以什么为底？</h2>\n<p><strong>logn，也就是忽略底数的描述</strong>。也可以是以10为底n的对数，也可以是以20为底n的对数，等等<br>\n<code>以2为底n的对数 = 以2为底10的对数 * 以10为底n的对数</code>。<br>\n而以2为底10的对数是一个常数，在上文已经讲述了我们计算时间复杂度是忽略常数项系数的。<br>\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121533152.png\" alt=\"|500\"></p>\n<h1 id=\"2-常见的时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#2-常见的时间复杂度\"></a> 2 常见的时间复杂度</h1>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121507462.png\" alt=\"|600\"><br>\n快速排序：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> : sort 函数[[sort函数]]<br>\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202208051803308.png\" alt=\"\"></p>\n<h1 id=\"3-计算时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#3-计算时间复杂度\"></a> 3 计算时间复杂度</h1>\n<p>时间复杂的是看<strong>次数</strong><sup id=\"fnref:3\" class=\"footnote-ref\"><a href=\"#fn:3\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"\">[3]</span></a></sup><br>\n![[时间复杂度分析 2022-08-05 18.11.16.excalidraw]]</p>\n<h2 id=\"31-普通类型\"><a class=\"markdownIt-Anchor\" href=\"#31-普通类型\"></a> 3.1 普通类型</h2>\n<p><s>乘法：乘法操作的时间复杂度 = O(1) ：O(n) 就是乘n次</s><br>\n<s>加法：一般忽略，但从0加到n的为O(n)的复杂度</s></p>\n<h2 id=\"32-函数类型\"><a class=\"markdownIt-Anchor\" href=\"#32-函数类型\"></a> 3.2 函数类型</h2>\n<ol>\n<li>for循环嵌套：循环</li>\n<li>if else：选择分支内最大的复杂度</li>\n<li>[[递归算法的复杂度]]：递归次数 * 每次递归的操作次数</li>\n</ol>\n<h2 id=\"33-其他类型\"><a class=\"markdownIt-Anchor\" href=\"#33-其他类型\"></a> 3.3 其他类型</h2>\n<ol>\n<li>两端算法相加时，取两者最大值：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>+</mo><msub><mi>T</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>O</mi><msub><mi>f</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>O</mi><msub><mi>f</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T_1(n)+T_2(n)=max(Of_1(n),Of_2(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>，eg：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>n</mi><mn>5</mn></msup><mo>+</mo><mi>n</mi><mo>=</mo><msup><mi>n</mi><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^5+n=n^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span></li>\n<li>两段算法嵌套时：为两者相乘：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><msub><mi>T</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msub><mi>f</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><msub><mi>f</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T_1(n)*T_2(n)=O(f_1(n)*f_2(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>，eg：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup><mo>∗</mo><msup><mi>n</mi><mn>2</mn></msup><mo>=</mo><msup><mi>n</mi><mn>4</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^{2}*n^{2}=n^{4}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span></span></span></li>\n<li>有两算法时,本质是时间复杂度为两个函数相加, 但最终结果还是取的大头<sup id=\"fnref:4\" class=\"footnote-ref\"><a href=\"#fn:4\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"[[4. 有序数组的平方]]\n\">[4]</span></a></sup></li>\n</ol>\n<h1 id=\"4-例子\"><a class=\"markdownIt-Anchor\" href=\"#4-例子\"></a> 4 例子</h1>\n<h2 id=\"41-找出n个字符串中相同的两个字符串假设这里只有两个相同的字符串\"><a class=\"markdownIt-Anchor\" href=\"#41-找出n个字符串中相同的两个字符串假设这里只有两个相同的字符串\"></a> 4.1 找出n个字符串中相同的两个字符串（假设这里只有两个相同的字符串）。</h2>\n<p>先排对n个字符串按字典序来排序，排序后n个字符串就是有序的，意味着两个相同的字符串就是挨在一起，然后在遍历一遍n个字符串，这样就找到两个相同的字符串了。</p>\n<p>那看看这种算法的时间复杂度，快速排序时间复杂度为O(nlogn)，依然要考虑字符串的长度是m，那么快速排序每次的比较都要有m次的字符比较的操作，就是O(m × n × log n) 。</p>\n<h2 id=\"42-01背包\"><a class=\"markdownIt-Anchor\" href=\"#42-01背包\"></a> 4.2 01背包</h2>\n<p>暴力解法<br>\n每一件物品其实只有两个状态，取或者不取，所以可以使用回溯法搜索出所有的情况，那么时间复杂度就是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>o</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">o(2^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，这里的n表示物品数量。</p>\n<h1 id=\"5-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#5-参考资料\"></a> 5 参考资料</h1>\n<section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span><a href=\"https://www.programmercarl.com/%E5%89%8D%E5%BA%8F/%E5%85%B3%E4%BA%8E%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%8C%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E9%83%BD%E5%9C%A8%E8%BF%99%E9%87%8C%EF%BC%81.html#%E7%A9%B6%E7%AB%9F%E4%BB%80%E4%B9%88%E6%98%AF%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\">关于时间复杂度，你不知道的都在这里！ | 代码随想录</a>\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li><li><span id=\"fn:2\" class=\"footnote-text\"><span><a href=\"https://www.bilibili.com/video/BV11h411h7nT?p=4&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">1-4 初识时间复杂度_哔哩哔哩_bilibili</a>\n<a href=\"#fnref:2\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li><li><span id=\"fn:3\" class=\"footnote-text\"><span><a href=\"#fnref:3\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li><li><span id=\"fn:4\" class=\"footnote-text\"><span>[[4. 有序数组的平方]]\n<a href=\"#fnref:4\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>","site":{"data":{}},"wordcount":1948,"excerpt":"<p>文章简介：如题</p>","more":"<h1 id=\"1-概念\"><a class=\"markdownIt-Anchor\" href=\"#1-概念\"></a> 1 概念</h1>\n<h2 id=\"11-定义sup-idfnref1-classfootnote-refa-hreffn1-relfootnotespan-classhinttop-hintrounded-aria-label关于时间复杂度你不知道的都在这里-代码随想录\"><a class=\"markdownIt-Anchor\" href=\"#11-定义sup-idfnref1-classfootnote-refa-hreffn1-relfootnotespan-classhinttop-hintrounded-aria-label关于时间复杂度你不知道的都在这里-代码随想录\"></a> 1.1 定义<sup id=\"fnref:1\" class=\"footnote-ref\"><a href=\"#fn:1\" rel=\"footnote\">&lt;span class=“hint–top hint–rounded” aria-label=&quot;关于时间复杂度，你不知道的都在这里！ | 代码随想录</h2>\n<p>&quot;&gt;[1]</span></a></sup></p>\n<p><strong>时间复杂度是一个函数，它定性描述该算法的运行时间</strong>。<br />\n估计程序运行时间：通常会估算算法的<strong>操作单元数量</strong>来代表程序消耗的时间</p>\n<blockquote>\n<p>这里默认CPU的每个单元运行消耗的时间都是相同的。</p>\n</blockquote>\n<p>假设算法的问题规模为n，那么操作单元数量便用函数f(n)来表示，随着数据规模n的增大，算法执行时间的增长率和f(n)的增长率相同，这称作为算法的渐近时间复杂度，简称时间复杂度，记为 O(f(n))。</p>\n<p>时间复杂度对应的是物理上的加速度<sup id=\"fnref:2\" class=\"footnote-ref\"><a href=\"#fn:2\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"1-4 初识时间复杂度_哔哩哔哩_bilibili\n\">[2]</span></a></sup><br />\n![[时间复杂度分析 2022-08-05 17.27.42.excalidraw]]</p>\n<h2 id=\"12-复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#12-复杂度分析\"></a> 1.2 复杂度分析</h2>\n<p>复杂度分析只考虑最坏的情况<br />\n<strong>大O用来表示上界的</strong>，它作为算法的最坏情况运行时间的上界</p>\n<p>我们主要关心的还是一般情况下的数据形式。</p>\n<p><strong>面试中说道算法的时间复杂度是多少，指的都是一般情况</strong>。但是如果面试官和我们深入探讨一个算法的实现以及性能的时候，就要时刻想着数据用例的不一样，时间复杂度也是不同的，这一点是一定要注意的。</p>\n<h2 id=\"13-不同数据规模的差异\"><a class=\"markdownIt-Anchor\" href=\"#13-不同数据规模的差异\"></a> 1.3 不同数据规模的差异</h2>\n<p><img src=\"https://img-blog.csdnimg.cn/20200728191447384.png\" alt=\"时间复杂度，不同数据规模的差异|500\" /></p>\n<p><strong>我们说的时间复杂度都是省略常数项系数的，是因为一般情况下都是默认数据规模足够的大，基于这样的事实，给出的算法时间复杂的的一个排行如下所示</strong>：</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^{2})&lt;O(2^{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span><br />\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202208051803308.png\" alt=\"\" /></p>\n<p>但是也要注意大常数，如果这个常数非常大，例如10^7 ，10^9 ，那么常数就是不得不考虑的因素了<br />\n在决定使用哪些算法的时候，不是时间复杂越低的越好（因为简化后的时间复杂度忽略了常数项等等），要考虑数据规模，如果数据规模很小甚至可以用O(n^2)的算法比O(n)的更合适（在有常数项的时候）</p>\n<h2 id=\"14-ologn中的log是以什么为底\"><a class=\"markdownIt-Anchor\" href=\"#14-ologn中的log是以什么为底\"></a> 1.4 O(logn)中的log是以什么为底？</h2>\n<p><strong>logn，也就是忽略底数的描述</strong>。也可以是以10为底n的对数，也可以是以20为底n的对数，等等<br />\n<code>以2为底n的对数 = 以2为底10的对数 * 以10为底n的对数</code>。<br />\n而以2为底10的对数是一个常数，在上文已经讲述了我们计算时间复杂度是忽略常数项系数的。<br />\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121533152.png\" alt=\"|500\" /></p>\n<h1 id=\"2-常见的时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#2-常见的时间复杂度\"></a> 2 常见的时间复杂度</h1>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121507462.png\" alt=\"|600\" /><br />\n快速排序：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> : sort 函数[[sort函数]]<br />\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202208051803308.png\" alt=\"\" /></p>\n<h1 id=\"3-计算时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#3-计算时间复杂度\"></a> 3 计算时间复杂度</h1>\n<p>时间复杂的是看<strong>次数</strong><sup id=\"fnref:3\" class=\"footnote-ref\"><a href=\"#fn:3\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"\">[3]</span></a></sup><br />\n![[时间复杂度分析 2022-08-05 18.11.16.excalidraw]]</p>\n<h2 id=\"31-普通类型\"><a class=\"markdownIt-Anchor\" href=\"#31-普通类型\"></a> 3.1 普通类型</h2>\n<p><s>乘法：乘法操作的时间复杂度 = O(1) ：O(n) 就是乘n次</s><br />\n<s>加法：一般忽略，但从0加到n的为O(n)的复杂度</s></p>\n<h2 id=\"32-函数类型\"><a class=\"markdownIt-Anchor\" href=\"#32-函数类型\"></a> 3.2 函数类型</h2>\n<ol>\n<li>for循环嵌套：循环</li>\n<li>if else：选择分支内最大的复杂度</li>\n<li>[[递归算法的复杂度]]：递归次数 * 每次递归的操作次数</li>\n</ol>\n<h2 id=\"33-其他类型\"><a class=\"markdownIt-Anchor\" href=\"#33-其他类型\"></a> 3.3 其他类型</h2>\n<ol>\n<li>两端算法相加时，取两者最大值：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>+</mo><msub><mi>T</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>O</mi><msub><mi>f</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>O</mi><msub><mi>f</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T_1(n)+T_2(n)=max(Of_1(n),Of_2(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>，eg：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>n</mi><mn>5</mn></msup><mo>+</mo><mi>n</mi><mo>=</mo><msup><mi>n</mi><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^5+n=n^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span></li>\n<li>两段算法嵌套时：为两者相乘：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><msub><mi>T</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msub><mi>f</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><msub><mi>f</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T_1(n)*T_2(n)=O(f_1(n)*f_2(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>，eg：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup><mo>∗</mo><msup><mi>n</mi><mn>2</mn></msup><mo>=</mo><msup><mi>n</mi><mn>4</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^{2}*n^{2}=n^{4}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span></span></span></li>\n<li>有两算法时,本质是时间复杂度为两个函数相加, 但最终结果还是取的大头<sup id=\"fnref:4\" class=\"footnote-ref\"><a href=\"#fn:4\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"[[4. 有序数组的平方]]\n\">[4]</span></a></sup></li>\n</ol>\n<h1 id=\"4-例子\"><a class=\"markdownIt-Anchor\" href=\"#4-例子\"></a> 4 例子</h1>\n<h2 id=\"41-找出n个字符串中相同的两个字符串假设这里只有两个相同的字符串\"><a class=\"markdownIt-Anchor\" href=\"#41-找出n个字符串中相同的两个字符串假设这里只有两个相同的字符串\"></a> 4.1 找出n个字符串中相同的两个字符串（假设这里只有两个相同的字符串）。</h2>\n<p>先排对n个字符串按字典序来排序，排序后n个字符串就是有序的，意味着两个相同的字符串就是挨在一起，然后在遍历一遍n个字符串，这样就找到两个相同的字符串了。</p>\n<p>那看看这种算法的时间复杂度，快速排序时间复杂度为O(nlogn)，依然要考虑字符串的长度是m，那么快速排序每次的比较都要有m次的字符比较的操作，就是O(m × n × log n) 。</p>\n<h2 id=\"42-01背包\"><a class=\"markdownIt-Anchor\" href=\"#42-01背包\"></a> 4.2 01背包</h2>\n<p>暴力解法<br />\n每一件物品其实只有两个状态，取或者不取，所以可以使用回溯法搜索出所有的情况，那么时间复杂度就是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>o</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">o(2^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，这里的n表示物品数量。</p>\n<h1 id=\"5-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#5-参考资料\"></a> 5 参考资料</h1>\n<section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span><a href=\"https://www.programmercarl.com/%E5%89%8D%E5%BA%8F/%E5%85%B3%E4%BA%8E%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%8C%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E9%83%BD%E5%9C%A8%E8%BF%99%E9%87%8C%EF%BC%81.html#%E7%A9%B6%E7%AB%9F%E4%BB%80%E4%B9%88%E6%98%AF%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\">关于时间复杂度，你不知道的都在这里！ | 代码随想录</a>\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li><li><span id=\"fn:2\" class=\"footnote-text\"><span><a href=\"https://www.bilibili.com/video/BV11h411h7nT?p=4&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">1-4 初识时间复杂度_哔哩哔哩_bilibili</a>\n<a href=\"#fnref:2\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li><li><span id=\"fn:3\" class=\"footnote-text\"><span><a href=\"#fnref:3\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li><li><span id=\"fn:4\" class=\"footnote-text\"><span>[[4. 有序数组的平方]]\n<a href=\"#fnref:4\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>"},{"deck":"source::_posts::👨🏻‍💻code::数据结构与算法::代码随想录::1.算法性能分析::空间复杂度分析.md","title":"空间复杂度分析","date":"2022-08-02T10:14:00.000Z","abbrlink":11552,"_content":"空间复杂度(Space Complexity)记作S(n)：S(n)=O(f(n))。依然使用大O来表示\n\n\n1. 空间复杂度是考虑程序（可执行文件）的大小么？\n\n**空间复杂度是考虑程序运行时占用内存的大小，而不是可执行文件的大小。**\n利用程序的空间复杂度，可以对程序运行中需要多少内存有个预先估计。\n\n2. 空间复杂度是准确算出程序运行时所占用的内存么？\n不要以为空间复杂度就已经精准的掌握了程序的内存使用大小，很多因素会影响程序真正内存使用大小，例如编译器的内存对齐，编程语言容器的底层实现等等这些都会影响到程序内存的开销。\n\n所以空间复杂度是预先大体评估程序内存使用的大小。\n\n\n\n空间复杂度O(1)： 所开辟的内存空间不会随着n的变化而变化，即空间复杂度为一个常量O(1)\n```c\nint j = 0;\nfor (int i = 0; i < n; i++) { // n别超过 2^32 - 1就行。(int 的取值范围)\n    j++;\n}\n```\n第一段代码可以看出，随着n的变化，所需开辟的内存空间并不会随着n的变化而变化。即此算法空间复杂度为一个常量，所以表示为大O(1)。\n空间复杂度O(n)：消耗空间和输入参数n保持线性增长 \n```c\nint* a = new int(n); // a指向值为n的int数\nfor (int i = 0; i < n; i++) {\n    a[i] = i; // 不断的扩大a的数组长度\n}\n```\nnew 函数\n```c\n1.new int[] 是创建一个int型数组，数组大小是在[]中指定\n  int *p = new int[3]; //申请一个整型数组，数组的长度为[]中的值\n2.new int()是创建一个int型数，并且用()括号中的数据进行初始化,例如：\n  int *p = new int(10); // p指向一个值为10的int数。\n```\n\n\n这段代码的空间复杂度主要看第一行即可，随着n的增大，开辟的内存大小呈线性增长，即 O(n)\nO(n^2)， O(n^3)：即2 * 2,   3 * 3 矩阵\n\n空间复杂度是**logn**的情况确实有些特殊，其实是在**递归的时候，会出现空间复杂度为logn的情况**。\n\n\n[[C++ new的用法]]\n[[时间复杂度分析]]\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/1.算法性能分析/空间复杂度分析.md","raw":"---\ndeck: source::_posts::👨🏻‍💻code::数据结构与算法::代码随想录::1.算法性能分析::空间复杂度分析.md \ntitle: 空间复杂度分析\ndate: '2022-08-02 18:14'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 1.算法性能分析\nabbrlink: 11552\ntags:\n---\n空间复杂度(Space Complexity)记作S(n)：S(n)=O(f(n))。依然使用大O来表示\n\n\n1. 空间复杂度是考虑程序（可执行文件）的大小么？\n\n**空间复杂度是考虑程序运行时占用内存的大小，而不是可执行文件的大小。**\n利用程序的空间复杂度，可以对程序运行中需要多少内存有个预先估计。\n\n2. 空间复杂度是准确算出程序运行时所占用的内存么？\n不要以为空间复杂度就已经精准的掌握了程序的内存使用大小，很多因素会影响程序真正内存使用大小，例如编译器的内存对齐，编程语言容器的底层实现等等这些都会影响到程序内存的开销。\n\n所以空间复杂度是预先大体评估程序内存使用的大小。\n\n\n\n空间复杂度O(1)： 所开辟的内存空间不会随着n的变化而变化，即空间复杂度为一个常量O(1)\n```c\nint j = 0;\nfor (int i = 0; i < n; i++) { // n别超过 2^32 - 1就行。(int 的取值范围)\n    j++;\n}\n```\n第一段代码可以看出，随着n的变化，所需开辟的内存空间并不会随着n的变化而变化。即此算法空间复杂度为一个常量，所以表示为大O(1)。\n空间复杂度O(n)：消耗空间和输入参数n保持线性增长 \n```c\nint* a = new int(n); // a指向值为n的int数\nfor (int i = 0; i < n; i++) {\n    a[i] = i; // 不断的扩大a的数组长度\n}\n```\nnew 函数\n```c\n1.new int[] 是创建一个int型数组，数组大小是在[]中指定\n  int *p = new int[3]; //申请一个整型数组，数组的长度为[]中的值\n2.new int()是创建一个int型数，并且用()括号中的数据进行初始化,例如：\n  int *p = new int(10); // p指向一个值为10的int数。\n```\n\n\n这段代码的空间复杂度主要看第一行即可，随着n的增大，开辟的内存大小呈线性增长，即 O(n)\nO(n^2)， O(n^3)：即2 * 2,   3 * 3 矩阵\n\n空间复杂度是**logn**的情况确实有些特殊，其实是在**递归的时候，会出现空间复杂度为logn的情况**。\n\n\n[[C++ new的用法]]\n[[时间复杂度分析]]\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/1.算法性能分析/空间复杂度分析","published":1,"updated":"2022-08-08T15:32:03.509Z","_id":"cl6ku8fjf004ie0mgeol28kkd","comments":1,"layout":"post","photos":[],"link":"","content":"<p>空间复杂度(Space Complexity)记作S(n)：S(n)=O(f(n))。依然使用大O来表示</p>\n<ol>\n<li>空间复杂度是考虑程序（可执行文件）的大小么？</li>\n</ol>\n<p><strong>空间复杂度是考虑程序运行时占用内存的大小，而不是可执行文件的大小。</strong><br>\n利用程序的空间复杂度，可以对程序运行中需要多少内存有个预先估计。</p>\n<ol start=\"2\">\n<li>空间复杂度是准确算出程序运行时所占用的内存么？<br>\n不要以为空间复杂度就已经精准的掌握了程序的内存使用大小，很多因素会影响程序真正内存使用大小，例如编译器的内存对齐，编程语言容器的底层实现等等这些都会影响到程序内存的开销。</li>\n</ol>\n<p>所以空间复杂度是预先大体评估程序内存使用的大小。</p>\n<p>空间复杂度O(1)： 所开辟的内存空间不会随着n的变化而变化，即空间复杂度为一个常量O(1)</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) { <span class=\"hljs-comment\">// n别超过 2^32 - 1就行。(int 的取值范围)</span><br>    j++;<br>}<br></code></pre></td></tr></tbody></table></figure>\n<p>第一段代码可以看出，随着n的变化，所需开辟的内存空间并不会随着n的变化而变化。即此算法空间复杂度为一个常量，所以表示为大O(1)。<br>\n空间复杂度O(n)：消耗空间和输入参数n保持线性增长</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span>* a = new <span class=\"hljs-type\">int</span>(n); <span class=\"hljs-comment\">// a指向值为n的int数</span><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {<br>    a[i] = i; <span class=\"hljs-comment\">// 不断的扩大a的数组长度</span><br>}<br></code></pre></td></tr></tbody></table></figure>\n<p>new 函数</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-number\">1.</span>new <span class=\"hljs-type\">int</span>[] 是创建一个<span class=\"hljs-type\">int</span>型数组，数组大小是在[]中指定<br>  <span class=\"hljs-type\">int</span> *p = new <span class=\"hljs-type\">int</span>[<span class=\"hljs-number\">3</span>]; <span class=\"hljs-comment\">//申请一个整型数组，数组的长度为[]中的值</span><br><span class=\"hljs-number\">2.</span>new <span class=\"hljs-title function_\">int</span><span class=\"hljs-params\">()</span>是创建一个<span class=\"hljs-type\">int</span>型数，并且用<span class=\"hljs-params\">()</span>括号中的数据进行初始化,例如：<br>  <span class=\"hljs-type\">int</span> *p = new <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// p指向一个值为10的int数。</span><br></code></pre></td></tr></tbody></table></figure>\n<p>这段代码的空间复杂度主要看第一行即可，随着n的增大，开辟的内存大小呈线性增长，即 O(n)<br>\nO(n^2)， O(n^3)：即2 * 2,   3 * 3 矩阵</p>\n<p>空间复杂度是<strong>logn</strong>的情况确实有些特殊，其实是在<strong>递归的时候，会出现空间复杂度为logn的情况</strong>。</p>\n<p>[[C++ new的用法]]<br>\n[[时间复杂度分析]]</p>\n","site":{"data":{}},"wordcount":861,"excerpt":"","more":"<p>空间复杂度(Space Complexity)记作S(n)：S(n)=O(f(n))。依然使用大O来表示</p>\n<ol>\n<li>空间复杂度是考虑程序（可执行文件）的大小么？</li>\n</ol>\n<p><strong>空间复杂度是考虑程序运行时占用内存的大小，而不是可执行文件的大小。</strong><br />\n利用程序的空间复杂度，可以对程序运行中需要多少内存有个预先估计。</p>\n<ol start=\"2\">\n<li>空间复杂度是准确算出程序运行时所占用的内存么？<br />\n不要以为空间复杂度就已经精准的掌握了程序的内存使用大小，很多因素会影响程序真正内存使用大小，例如编译器的内存对齐，编程语言容器的底层实现等等这些都会影响到程序内存的开销。</li>\n</ol>\n<p>所以空间复杂度是预先大体评估程序内存使用的大小。</p>\n<p>空间复杂度O(1)： 所开辟的内存空间不会随着n的变化而变化，即空间复杂度为一个常量O(1)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) &#123; <span class=\"hljs-comment\">// n别超过 2^32 - 1就行。(int 的取值范围)</span><br>    j++;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>第一段代码可以看出，随着n的变化，所需开辟的内存空间并不会随着n的变化而变化。即此算法空间复杂度为一个常量，所以表示为大O(1)。<br />\n空间复杂度O(n)：消耗空间和输入参数n保持线性增长</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span>* a = new <span class=\"hljs-type\">int</span>(n); <span class=\"hljs-comment\">// a指向值为n的int数</span><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) &#123;<br>    a[i] = i; <span class=\"hljs-comment\">// 不断的扩大a的数组长度</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>new 函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-number\">1.</span>new <span class=\"hljs-type\">int</span>[] 是创建一个<span class=\"hljs-type\">int</span>型数组，数组大小是在[]中指定<br>  <span class=\"hljs-type\">int</span> *p = new <span class=\"hljs-type\">int</span>[<span class=\"hljs-number\">3</span>]; <span class=\"hljs-comment\">//申请一个整型数组，数组的长度为[]中的值</span><br><span class=\"hljs-number\">2.</span>new <span class=\"hljs-title function_\">int</span><span class=\"hljs-params\">()</span>是创建一个<span class=\"hljs-type\">int</span>型数，并且用<span class=\"hljs-params\">()</span>括号中的数据进行初始化,例如：<br>  <span class=\"hljs-type\">int</span> *p = new <span class=\"hljs-type\">int</span>(<span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// p指向一个值为10的int数。</span><br></code></pre></td></tr></table></figure>\n<p>这段代码的空间复杂度主要看第一行即可，随着n的增大，开辟的内存大小呈线性增长，即 O(n)<br />\nO(n^2)， O(n^3)：即2 * 2,   3 * 3 矩阵</p>\n<p>空间复杂度是<strong>logn</strong>的情况确实有些特殊，其实是在<strong>递归的时候，会出现空间复杂度为logn的情况</strong>。</p>\n<p>[[C++ new的用法]]<br />\n[[时间复杂度分析]]</p>\n"},{"title":"算法为什么会超时","date":"2022-08-02T02:54:00.000Z","abbrlink":26126,"_content":"# 从硬件配置看计算机的性能\n计算机的运算速度主要看CPU的配置，以2015年MacPro为例\nCPU配置：2.7 GHz Dual-Core Intel Core i5 。\n也就是 2.7 GHz 奔腾双核，i5处理器，GHz是指什么呢\n-   1GHz（兆赫）= 1000MHz（兆赫）\n-   1MHz（兆赫）= 1百万赫兹\n\n1Hz = 1/s，\n1Hz 是CPU的一次脉冲（可以理解为一次改变状态，也叫时钟周期）称之为为赫兹，\n\n\n所以 **1GHz = 10亿Hz**，表示CPU可以一秒脉冲10亿次（有10亿个时钟周期），这里不要简单理解一个时钟周期就是一次CPU运算。\n\n例如1 + 2 = 3，cpu要执行四次才能完整这个操作，步骤一：把1放入寄存机，步骤二：把2放入寄存器，步骤三：做加法，步骤四：保存3。\n\n而且计算机的cpu也不会只运行我们自己写的程序上，同时cpu也要执行计算机的各种进程任务等等，我们的程序仅仅是其中的一个进程而已。\n\n==Apple M1具有Apple M-Series的 L1 缓存，基本/**最大CPU频率**为2.06 - 3.20 GHz==\n“英特尔发布 i9-12900KS：最高睿频 5.5GHz，全大核 5.2 GHz”\n# 测试1s能处理多少个数据\n\n算法4里面的一段话：\n-   火箭科学家需要大致知道一枚试射火箭的着陆点是在大海里还是在城市中；\n-   医学研究者需要知道一次药物测试是会杀死还是会治愈实验对象；\n**任何开发计算机程序员的软件工程师都应该能够估计这个程序的运行时间是一秒钟还是一年**。\n\n\n在写测试程序测1s内处理多大数量级数据的时候，有三点需要注意：\n\n-   CPU执行每条指令所需的时间实际上并不相同，例如CPU执行加法和乘法操作的耗时实际上都是不一样的。\n-   现在大多计算机系统的内存管理都有缓存技术，所以频繁访问相同地址的数据和访问不相邻元素所需的时间也是不同的。\n-   计算机同时运行多个程序，每个程序里还有不同的进程线程在抢占资源。\n\n\n\n实现三个函数，时间复杂度分别是 $O(n)$ , $O(n^2)$, $O(n\\log n)$，使用加法运算来统一测试。\n\n```cpp\n#include <iostream>\n#include <chrono>\n#include <thread>\nusing namespace std;\nusing namespace chrono;\n// O(n) 简单的for循环加法 0-n\nvoid function1(long long n) {\n    long long k = 0;\n    for (long long i = 0; i < n; i++) {\n        k++;\n    }\n}\n\n// O(n^2) for循环嵌套：循环体内部复杂度相乘 \nvoid function2(long long n) {\n    long long k = 0;\n    for (long long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            k++;\n        }\n    }\n\n}\n// O(nlogn)\nvoid function3(long long n) {\n    long long k = 0;\n    for (long long i = 0; i < n; i++) {\n        for (long long j = 1; j < n; j = j*2) { // 注意这里j=1；j = 1，2,4,8,16(两倍递增)\n            k++;\n        }\n    }\n}\nint main() {\n    long long n; // 数据规模\n    while (1) {\n        cout << \"输入n：\";\n        cin >> n;\n        milliseconds start_time = duration_cast<milliseconds >(\n            system_clock::now().time_since_epoch()\n        );\n        function1(n);\n//        function2(n);\n//        function3(n);\n        milliseconds end_time = duration_cast<milliseconds >(\n            system_clock::now().time_since_epoch()\n        );\n        cout << \"耗时:\" << milliseconds(end_time).count() - milliseconds(start_time).count()\n            <<\" ms\"<< endl;\n    }\n}\n\n```\n\nO(n)：1s大概能处理$1^{10}$  的数据，O(n^2)的数量级为O(n)开根号，O(nlogn)比O(n^2)多一点，因为复杂度比它小一点。但比O(n)还是**少一个**数量级\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202208021618668.png)\n\n\n\n\n\n\n\n\n\n\n\n\n参考资料\n---\n\n[On的算法居然超时了，此时的n究竟是多大？ | 代码随想录](https://www.programmercarl.com/%E5%89%8D%E5%BA%8F/On%E7%9A%84%E7%AE%97%E6%B3%95%E5%B1%85%E7%84%B6%E8%B6%85%E6%97%B6%E4%BA%86%EF%BC%8C%E6%AD%A4%E6%97%B6%E7%9A%84n%E7%A9%B6%E7%AB%9F%E6%98%AF%E5%A4%9A%E5%A4%A7%EF%BC%9F.html#%E5%81%9A%E4%B8%AA%E6%B5%8B%E8%AF%95%E5%AE%9E%E9%AA%8C)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/1.算法性能分析/算法为什么会超时.md","raw":"---\ntitle: 算法为什么会超时\ndate: '2022-08-02 10:54'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 1.算法性能分析\nabbrlink: 26126\ntags:\n---\n# 从硬件配置看计算机的性能\n计算机的运算速度主要看CPU的配置，以2015年MacPro为例\nCPU配置：2.7 GHz Dual-Core Intel Core i5 。\n也就是 2.7 GHz 奔腾双核，i5处理器，GHz是指什么呢\n-   1GHz（兆赫）= 1000MHz（兆赫）\n-   1MHz（兆赫）= 1百万赫兹\n\n1Hz = 1/s，\n1Hz 是CPU的一次脉冲（可以理解为一次改变状态，也叫时钟周期）称之为为赫兹，\n\n\n所以 **1GHz = 10亿Hz**，表示CPU可以一秒脉冲10亿次（有10亿个时钟周期），这里不要简单理解一个时钟周期就是一次CPU运算。\n\n例如1 + 2 = 3，cpu要执行四次才能完整这个操作，步骤一：把1放入寄存机，步骤二：把2放入寄存器，步骤三：做加法，步骤四：保存3。\n\n而且计算机的cpu也不会只运行我们自己写的程序上，同时cpu也要执行计算机的各种进程任务等等，我们的程序仅仅是其中的一个进程而已。\n\n==Apple M1具有Apple M-Series的 L1 缓存，基本/**最大CPU频率**为2.06 - 3.20 GHz==\n“英特尔发布 i9-12900KS：最高睿频 5.5GHz，全大核 5.2 GHz”\n# 测试1s能处理多少个数据\n\n算法4里面的一段话：\n-   火箭科学家需要大致知道一枚试射火箭的着陆点是在大海里还是在城市中；\n-   医学研究者需要知道一次药物测试是会杀死还是会治愈实验对象；\n**任何开发计算机程序员的软件工程师都应该能够估计这个程序的运行时间是一秒钟还是一年**。\n\n\n在写测试程序测1s内处理多大数量级数据的时候，有三点需要注意：\n\n-   CPU执行每条指令所需的时间实际上并不相同，例如CPU执行加法和乘法操作的耗时实际上都是不一样的。\n-   现在大多计算机系统的内存管理都有缓存技术，所以频繁访问相同地址的数据和访问不相邻元素所需的时间也是不同的。\n-   计算机同时运行多个程序，每个程序里还有不同的进程线程在抢占资源。\n\n\n\n实现三个函数，时间复杂度分别是 $O(n)$ , $O(n^2)$, $O(n\\log n)$，使用加法运算来统一测试。\n\n```cpp\n#include <iostream>\n#include <chrono>\n#include <thread>\nusing namespace std;\nusing namespace chrono;\n// O(n) 简单的for循环加法 0-n\nvoid function1(long long n) {\n    long long k = 0;\n    for (long long i = 0; i < n; i++) {\n        k++;\n    }\n}\n\n// O(n^2) for循环嵌套：循环体内部复杂度相乘 \nvoid function2(long long n) {\n    long long k = 0;\n    for (long long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            k++;\n        }\n    }\n\n}\n// O(nlogn)\nvoid function3(long long n) {\n    long long k = 0;\n    for (long long i = 0; i < n; i++) {\n        for (long long j = 1; j < n; j = j*2) { // 注意这里j=1；j = 1，2,4,8,16(两倍递增)\n            k++;\n        }\n    }\n}\nint main() {\n    long long n; // 数据规模\n    while (1) {\n        cout << \"输入n：\";\n        cin >> n;\n        milliseconds start_time = duration_cast<milliseconds >(\n            system_clock::now().time_since_epoch()\n        );\n        function1(n);\n//        function2(n);\n//        function3(n);\n        milliseconds end_time = duration_cast<milliseconds >(\n            system_clock::now().time_since_epoch()\n        );\n        cout << \"耗时:\" << milliseconds(end_time).count() - milliseconds(start_time).count()\n            <<\" ms\"<< endl;\n    }\n}\n\n```\n\nO(n)：1s大概能处理$1^{10}$  的数据，O(n^2)的数量级为O(n)开根号，O(nlogn)比O(n^2)多一点，因为复杂度比它小一点。但比O(n)还是**少一个**数量级\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202208021618668.png)\n\n\n\n\n\n\n\n\n\n\n\n\n参考资料\n---\n\n[On的算法居然超时了，此时的n究竟是多大？ | 代码随想录](https://www.programmercarl.com/%E5%89%8D%E5%BA%8F/On%E7%9A%84%E7%AE%97%E6%B3%95%E5%B1%85%E7%84%B6%E8%B6%85%E6%97%B6%E4%BA%86%EF%BC%8C%E6%AD%A4%E6%97%B6%E7%9A%84n%E7%A9%B6%E7%AB%9F%E6%98%AF%E5%A4%9A%E5%A4%A7%EF%BC%9F.html#%E5%81%9A%E4%B8%AA%E6%B5%8B%E8%AF%95%E5%AE%9E%E9%AA%8C)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/1.算法性能分析/算法为什么会超时","published":1,"updated":"2022-08-02T08:30:37.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjf004ke0mg2fw8dgsv","content":"<h1 id=\"从硬件配置看计算机的性能\"><a class=\"markdownIt-Anchor\" href=\"#从硬件配置看计算机的性能\"></a> 从硬件配置看计算机的性能</h1>\n<p>计算机的运算速度主要看CPU的配置，以2015年MacPro为例<br>\nCPU配置：2.7 GHz Dual-Core Intel Core i5 。<br>\n也就是 2.7 GHz 奔腾双核，i5处理器，GHz是指什么呢</p>\n<ul>\n<li>1GHz（兆赫）= 1000MHz（兆赫）</li>\n<li>1MHz（兆赫）= 1百万赫兹</li>\n</ul>\n<p>1Hz = 1/s，<br>\n1Hz 是CPU的一次脉冲（可以理解为一次改变状态，也叫时钟周期）称之为为赫兹，</p>\n<p>所以 <strong>1GHz = 10亿Hz</strong>，表示CPU可以一秒脉冲10亿次（有10亿个时钟周期），这里不要简单理解一个时钟周期就是一次CPU运算。</p>\n<p>例如1 + 2 = 3，cpu要执行四次才能完整这个操作，步骤一：把1放入寄存机，步骤二：把2放入寄存器，步骤三：做加法，步骤四：保存3。</p>\n<p>而且计算机的cpu也不会只运行我们自己写的程序上，同时cpu也要执行计算机的各种进程任务等等，我们的程序仅仅是其中的一个进程而已。</p>\n<p><mark>Apple M1具有Apple M-Series的 L1 缓存，基本/<strong>最大CPU频率</strong>为2.06 - 3.20 GHz</mark><br>\n“英特尔发布 i9-12900KS：最高睿频 5.5GHz，全大核 5.2 GHz”</p>\n<h1 id=\"测试1s能处理多少个数据\"><a class=\"markdownIt-Anchor\" href=\"#测试1s能处理多少个数据\"></a> 测试1s能处理多少个数据</h1>\n<p>算法4里面的一段话：</p>\n<ul>\n<li>火箭科学家需要大致知道一枚试射火箭的着陆点是在大海里还是在城市中；</li>\n<li>医学研究者需要知道一次药物测试是会杀死还是会治愈实验对象；<br>\n<strong>任何开发计算机程序员的软件工程师都应该能够估计这个程序的运行时间是一秒钟还是一年</strong>。</li>\n</ul>\n<p>在写测试程序测1s内处理多大数量级数据的时候，有三点需要注意：</p>\n<ul>\n<li>CPU执行每条指令所需的时间实际上并不相同，例如CPU执行加法和乘法操作的耗时实际上都是不一样的。</li>\n<li>现在大多计算机系统的内存管理都有缓存技术，所以频繁访问相同地址的数据和访问不相邻元素所需的时间也是不同的。</li>\n<li>计算机同时运行多个程序，每个程序里还有不同的进程线程在抢占资源。</li>\n</ul>\n<p>实现三个函数，时间复杂度分别是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> , <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>，使用加法运算来统一测试。</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;chrono&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;thread&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> chrono;<br><span class=\"hljs-comment\">// O(n) 简单的for循环加法 0-n</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">function1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> n)</span> </span>{<br>    <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> k = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {<br>        k++;<br>    }<br>}<br><br><span class=\"hljs-comment\">// O(n^2) for循环嵌套：循环体内部复杂度相乘 </span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">function2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> n)</span> </span>{<br>    <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> k = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">long</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) {<br>            k++;<br>        }<br>    }<br><br>}<br><span class=\"hljs-comment\">// O(nlogn)</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">function3</span><span class=\"hljs-params\">(<span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> n)</span> </span>{<br>    <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> k = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> j = <span class=\"hljs-number\">1</span>; j &lt; n; j = j*<span class=\"hljs-number\">2</span>) { <span class=\"hljs-comment\">// 注意这里j=1；j = 1，2,4,8,16(两倍递增)</span><br>            k++;<br>        }<br>    }<br>}<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{<br>    <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> n; <span class=\"hljs-comment\">// 数据规模</span><br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {<br>        cout &lt;&lt; <span class=\"hljs-string\">\"输入n：\"</span>;<br>        cin &gt;&gt; n;<br>        milliseconds start_time = <span class=\"hljs-built_in\">duration_cast</span>&lt;milliseconds &gt;(<br>            system_clock::<span class=\"hljs-built_in\">now</span>().<span class=\"hljs-built_in\">time_since_epoch</span>()<br>        );<br>        <span class=\"hljs-built_in\">function1</span>(n);<br><span class=\"hljs-comment\">//        function2(n);</span><br><span class=\"hljs-comment\">//        function3(n);</span><br>        milliseconds end_time = <span class=\"hljs-built_in\">duration_cast</span>&lt;milliseconds &gt;(<br>            system_clock::<span class=\"hljs-built_in\">now</span>().<span class=\"hljs-built_in\">time_since_epoch</span>()<br>        );<br>        cout &lt;&lt; <span class=\"hljs-string\">\"耗时:\"</span> &lt;&lt; <span class=\"hljs-built_in\">milliseconds</span>(end_time).<span class=\"hljs-built_in\">count</span>() - <span class=\"hljs-built_in\">milliseconds</span>(start_time).<span class=\"hljs-built_in\">count</span>()<br>            &lt;&lt;<span class=\"hljs-string\">\" ms\"</span>&lt;&lt; endl;<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure>\n<p>O(n)：1s大概能处理<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>1</mn><mn>10</mn></msup></mrow><annotation encoding=\"application/x-tex\">1^{10}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span>  的数据，O(n<sup>2)的数量级为O(n)开根号，O(nlogn)比O(n</sup>2)多一点，因为复杂度比它小一点。但比O(n)还是<strong>少一个</strong>数量级<br>\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202208021618668.png\" alt=\"\"></p>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h2>\n<p><a href=\"https://www.programmercarl.com/%E5%89%8D%E5%BA%8F/On%E7%9A%84%E7%AE%97%E6%B3%95%E5%B1%85%E7%84%B6%E8%B6%85%E6%97%B6%E4%BA%86%EF%BC%8C%E6%AD%A4%E6%97%B6%E7%9A%84n%E7%A9%B6%E7%AB%9F%E6%98%AF%E5%A4%9A%E5%A4%A7%EF%BC%9F.html#%E5%81%9A%E4%B8%AA%E6%B5%8B%E8%AF%95%E5%AE%9E%E9%AA%8C\">On的算法居然超时了，此时的n究竟是多大？ | 代码随想录</a></p>\n","site":{"data":{}},"wordcount":2062,"excerpt":"","more":"<h1 id=\"从硬件配置看计算机的性能\"><a class=\"markdownIt-Anchor\" href=\"#从硬件配置看计算机的性能\"></a> 从硬件配置看计算机的性能</h1>\n<p>计算机的运算速度主要看CPU的配置，以2015年MacPro为例<br />\nCPU配置：2.7 GHz Dual-Core Intel Core i5 。<br />\n也就是 2.7 GHz 奔腾双核，i5处理器，GHz是指什么呢</p>\n<ul>\n<li>1GHz（兆赫）= 1000MHz（兆赫）</li>\n<li>1MHz（兆赫）= 1百万赫兹</li>\n</ul>\n<p>1Hz = 1/s，<br />\n1Hz 是CPU的一次脉冲（可以理解为一次改变状态，也叫时钟周期）称之为为赫兹，</p>\n<p>所以 <strong>1GHz = 10亿Hz</strong>，表示CPU可以一秒脉冲10亿次（有10亿个时钟周期），这里不要简单理解一个时钟周期就是一次CPU运算。</p>\n<p>例如1 + 2 = 3，cpu要执行四次才能完整这个操作，步骤一：把1放入寄存机，步骤二：把2放入寄存器，步骤三：做加法，步骤四：保存3。</p>\n<p>而且计算机的cpu也不会只运行我们自己写的程序上，同时cpu也要执行计算机的各种进程任务等等，我们的程序仅仅是其中的一个进程而已。</p>\n<p><mark>Apple M1具有Apple M-Series的 L1 缓存，基本/<strong>最大CPU频率</strong>为2.06 - 3.20 GHz</mark><br />\n“英特尔发布 i9-12900KS：最高睿频 5.5GHz，全大核 5.2 GHz”</p>\n<h1 id=\"测试1s能处理多少个数据\"><a class=\"markdownIt-Anchor\" href=\"#测试1s能处理多少个数据\"></a> 测试1s能处理多少个数据</h1>\n<p>算法4里面的一段话：</p>\n<ul>\n<li>火箭科学家需要大致知道一枚试射火箭的着陆点是在大海里还是在城市中；</li>\n<li>医学研究者需要知道一次药物测试是会杀死还是会治愈实验对象；<br />\n<strong>任何开发计算机程序员的软件工程师都应该能够估计这个程序的运行时间是一秒钟还是一年</strong>。</li>\n</ul>\n<p>在写测试程序测1s内处理多大数量级数据的时候，有三点需要注意：</p>\n<ul>\n<li>CPU执行每条指令所需的时间实际上并不相同，例如CPU执行加法和乘法操作的耗时实际上都是不一样的。</li>\n<li>现在大多计算机系统的内存管理都有缓存技术，所以频繁访问相同地址的数据和访问不相邻元素所需的时间也是不同的。</li>\n<li>计算机同时运行多个程序，每个程序里还有不同的进程线程在抢占资源。</li>\n</ul>\n<p>实现三个函数，时间复杂度分别是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> , <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>，使用加法运算来统一测试。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;chrono&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;thread&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> chrono;<br><span class=\"hljs-comment\">// O(n) 简单的for循环加法 0-n</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">function1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> n)</span> </span>&#123;<br>    <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> k = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) &#123;<br>        k++;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// O(n^2) for循环嵌套：循环体内部复杂度相乘 </span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">function2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> n)</span> </span>&#123;<br>    <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> k = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">long</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) &#123;<br>            k++;<br>        &#125;<br>    &#125;<br><br>&#125;<br><span class=\"hljs-comment\">// O(nlogn)</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">function3</span><span class=\"hljs-params\">(<span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> n)</span> </span>&#123;<br>    <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> k = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> j = <span class=\"hljs-number\">1</span>; j &lt; n; j = j*<span class=\"hljs-number\">2</span>) &#123; <span class=\"hljs-comment\">// 注意这里j=1；j = 1，2,4,8,16(两倍递增)</span><br>            k++;<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> n; <span class=\"hljs-comment\">// 数据规模</span><br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) &#123;<br>        cout &lt;&lt; <span class=\"hljs-string\">&quot;输入n：&quot;</span>;<br>        cin &gt;&gt; n;<br>        milliseconds start_time = <span class=\"hljs-built_in\">duration_cast</span>&lt;milliseconds &gt;(<br>            system_clock::<span class=\"hljs-built_in\">now</span>().<span class=\"hljs-built_in\">time_since_epoch</span>()<br>        );<br>        <span class=\"hljs-built_in\">function1</span>(n);<br><span class=\"hljs-comment\">//        function2(n);</span><br><span class=\"hljs-comment\">//        function3(n);</span><br>        milliseconds end_time = <span class=\"hljs-built_in\">duration_cast</span>&lt;milliseconds &gt;(<br>            system_clock::<span class=\"hljs-built_in\">now</span>().<span class=\"hljs-built_in\">time_since_epoch</span>()<br>        );<br>        cout &lt;&lt; <span class=\"hljs-string\">&quot;耗时:&quot;</span> &lt;&lt; <span class=\"hljs-built_in\">milliseconds</span>(end_time).<span class=\"hljs-built_in\">count</span>() - <span class=\"hljs-built_in\">milliseconds</span>(start_time).<span class=\"hljs-built_in\">count</span>()<br>            &lt;&lt;<span class=\"hljs-string\">&quot; ms&quot;</span>&lt;&lt; endl;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>O(n)：1s大概能处理<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>1</mn><mn>10</mn></msup></mrow><annotation encoding=\"application/x-tex\">1^{10}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span>  的数据，O(n<sup>2)的数量级为O(n)开根号，O(nlogn)比O(n</sup>2)多一点，因为复杂度比它小一点。但比O(n)还是<strong>少一个</strong>数量级<br />\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202208021618668.png\" alt=\"\" /></p>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h2>\n<p><a href=\"https://www.programmercarl.com/%E5%89%8D%E5%BA%8F/On%E7%9A%84%E7%AE%97%E6%B3%95%E5%B1%85%E7%84%B6%E8%B6%85%E6%97%B6%E4%BA%86%EF%BC%8C%E6%AD%A4%E6%97%B6%E7%9A%84n%E7%A9%B6%E7%AB%9F%E6%98%AF%E5%A4%9A%E5%A4%A7%EF%BC%9F.html#%E5%81%9A%E4%B8%AA%E6%B5%8B%E8%AF%95%E5%AE%9E%E9%AA%8C\">On的算法居然超时了，此时的n究竟是多大？ | 代码随想录</a></p>\n"},{"title":"递归思想","date":"2022-08-05T07:42:00.000Z","abbrlink":8679,"_content":"\n递归思想是：分而治之\n\n简单的递归：阶乘\n将大问题不断的拆分为子问题拆到不可拆分之后，自底向上放入栈中\n在自顶向下不断计算子问题，返回结果给下一层在计算，直至计算出最后一层\n\n![[递归思想 2022-08-05 15.45.22.excalidraw|1100]]\n\n\n\n\n使用递归相当于，程序为我们创建了一个栈，我们只需拆分问题放入栈，在分而治之\n阶乘是线性结构可以直接自底向上的解决而不使\n但是树的递归就不是了线性了，递归的思想是拆分子问题放入栈，在解决子问题在传递给下一层直至计算完毕\n\n![[递归思想 2022-08-05 17.04.12.excalidraw|1100]]\n\n\n\n\n\n\n\n参考资料\n---\n\n[1-2 栈与深度优先遍历_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV11h411h7nT?p=2&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/1.算法性能分析/递归思想.md","raw":"---\ntitle: 递归思想\ndate: '2022-08-05 15:42'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 1.算法性能分析\nabbrlink: 8679\ntags: 递归\n---\n\n递归思想是：分而治之\n\n简单的递归：阶乘\n将大问题不断的拆分为子问题拆到不可拆分之后，自底向上放入栈中\n在自顶向下不断计算子问题，返回结果给下一层在计算，直至计算出最后一层\n\n![[递归思想 2022-08-05 15.45.22.excalidraw|1100]]\n\n\n\n\n使用递归相当于，程序为我们创建了一个栈，我们只需拆分问题放入栈，在分而治之\n阶乘是线性结构可以直接自底向上的解决而不使\n但是树的递归就不是了线性了，递归的思想是拆分子问题放入栈，在解决子问题在传递给下一层直至计算完毕\n\n![[递归思想 2022-08-05 17.04.12.excalidraw|1100]]\n\n\n\n\n\n\n\n参考资料\n---\n\n[1-2 栈与深度优先遍历_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV11h411h7nT?p=2&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/1.算法性能分析/递归思想","published":1,"updated":"2022-08-05T16:19:00.315Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjg004ne0mg6mq9euev","content":"<p>递归思想是：分而治之</p>\n<p>简单的递归：阶乘<br>\n将大问题不断的拆分为子问题拆到不可拆分之后，自底向上放入栈中<br>\n在自顶向下不断计算子问题，返回结果给下一层在计算，直至计算出最后一层</p>\n<p>![[递归思想 2022-08-05 15.45.22.excalidraw|1100]]</p>\n<p>使用递归相当于，程序为我们创建了一个栈，我们只需拆分问题放入栈，在分而治之<br>\n阶乘是线性结构可以直接自底向上的解决而不使<br>\n但是树的递归就不是了线性了，递归的思想是拆分子问题放入栈，在解决子问题在传递给下一层直至计算完毕</p>\n<p>![[递归思想 2022-08-05 17.04.12.excalidraw|1100]]</p>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h2>\n<p><a href=\"https://www.bilibili.com/video/BV11h411h7nT?p=2&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">1-2 栈与深度优先遍历_哔哩哔哩_bilibili</a></p>\n","site":{"data":{}},"wordcount":303,"excerpt":"","more":"<p>递归思想是：分而治之</p>\n<p>简单的递归：阶乘<br />\n将大问题不断的拆分为子问题拆到不可拆分之后，自底向上放入栈中<br />\n在自顶向下不断计算子问题，返回结果给下一层在计算，直至计算出最后一层</p>\n<p>![[递归思想 2022-08-05 15.45.22.excalidraw|1100]]</p>\n<p>使用递归相当于，程序为我们创建了一个栈，我们只需拆分问题放入栈，在分而治之<br />\n阶乘是线性结构可以直接自底向上的解决而不使<br />\n但是树的递归就不是了线性了，递归的思想是拆分子问题放入栈，在解决子问题在传递给下一层直至计算完毕</p>\n<p>![[递归思想 2022-08-05 17.04.12.excalidraw|1100]]</p>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h2>\n<p><a href=\"https://www.bilibili.com/video/BV11h411h7nT?p=2&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">1-2 栈与深度优先遍历_哔哩哔哩_bilibili</a></p>\n"},{"title":"递归算法的复杂度","date":"2022-08-02T09:37:00.000Z","abbrlink":9398,"_content":"\n**同一道题目，同样使用递归算法，有的同学会写出了O(n)的代码，有的同学就写出了O(logn)的代码**。\n如果对递归的时间复杂度理解的不够深入的话，就会这样！\n\n题目： 求x的n次方\n\nfor循环暴力求解\n```cpp\n// 求x的n次方\nint function1(int x, int n) {\n    int result = 1;  // 注意 任何数的0次方等于1\n    for (int i = 0; i < n; i++) {\n        result = result * x; // result = x，x * x, x^2 * x, ........\n    }\n    return result;\n}\n```\n\n\n\n\n [[代码随想录视频]]\n\n\n\n\n\n\n\n\n\n\n\n\n参考资料\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/1.算法性能分析/递归算法的复杂度.md","raw":"---\ntitle: 递归算法的复杂度\ndate: '2022-08-02 17:37'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 1.算法性能分析\nabbrlink: 9398\ntags: \n- 待解决\n- 复杂度\n---\n\n**同一道题目，同样使用递归算法，有的同学会写出了O(n)的代码，有的同学就写出了O(logn)的代码**。\n如果对递归的时间复杂度理解的不够深入的话，就会这样！\n\n题目： 求x的n次方\n\nfor循环暴力求解\n```cpp\n// 求x的n次方\nint function1(int x, int n) {\n    int result = 1;  // 注意 任何数的0次方等于1\n    for (int i = 0; i < n; i++) {\n        result = result * x; // result = x，x * x, x^2 * x, ........\n    }\n    return result;\n}\n```\n\n\n\n\n [[代码随想录视频]]\n\n\n\n\n\n\n\n\n\n\n\n\n参考资料\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/1.算法性能分析/递归算法的复杂度","published":1,"updated":"2022-08-08T07:31:04.078Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjg004pe0mg0ne73di1","content":"<p><strong>同一道题目，同样使用递归算法，有的同学会写出了O(n)的代码，有的同学就写出了O(logn)的代码</strong>。<br>\n如果对递归的时间复杂度理解的不够深入的话，就会这样！</p>\n<p>题目： 求x的n次方</p>\n<p>for循环暴力求解</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 求x的n次方</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">function1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> n)</span> </span>{<br>    <span class=\"hljs-type\">int</span> result = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// 注意 任何数的0次方等于1</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {<br>        result = result * x; <span class=\"hljs-comment\">// result = x，x * x, x^2 * x, ........</span><br>    }<br>    <span class=\"hljs-keyword\">return</span> result;<br>}<br></code></pre></td></tr></tbody></table></figure>\n<p>[[代码随想录视频]]</p>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h2>\n","site":{"data":{}},"wordcount":278,"excerpt":"","more":"<p><strong>同一道题目，同样使用递归算法，有的同学会写出了O(n)的代码，有的同学就写出了O(logn)的代码</strong>。<br />\n如果对递归的时间复杂度理解的不够深入的话，就会这样！</p>\n<p>题目： 求x的n次方</p>\n<p>for循环暴力求解</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 求x的n次方</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">function1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> n)</span> </span>&#123;<br>    <span class=\"hljs-type\">int</span> result = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// 注意 任何数的0次方等于1</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) &#123;<br>        result = result * x; <span class=\"hljs-comment\">// result = x，x * x, x^2 * x, ........</span><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>[[代码随想录视频]]</p>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h2>\n"},{"title":"1.动态规划理论基础","date":"2022-07-05T08:27:00.000Z","index_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207041948383.jpg","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207041948383.jpg","abbrlink":31294,"_content":"\n文章简介：如题\n<!-- more -->\n\n动态规划，英文：Dynamic Programming，简称DP\n**动态规划中每一个状态一定是由上一个状态推导出来的**，贪心是局部最优推导全局最优\n\n例如：有N件物品和一个最多能背重量为W 的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。**每件物品只能用一次**，求解将哪些物品装入背包里物品价值总和最大。\n\n动态规划中dp[j]是由dp[j-weight[i]]推导出来的，然后取max(dp[j], dp[j - weight[i]] + value[i])。\n# 1 动态规划解题步骤\n\n1.  确定dp数组（dp table）以及下标的含义\n2.  确定递推公式\n3.  dp数组如何初始化\n4.  确定遍历顺序\n5.  举例推导dp数组\n**一些情况是递推公式决定了dp数组要如何初始化！**\n\n**做动规的题目，写代码之前一定要把状态转移在dp数组的上具体情况模拟一遍，心中有数，确定最后推出的是想要的结果**。\n然后再写代码，如果代码没通过就打印dp数组，看看是不是和自己预先推导的哪里不一样。\n\n如果打印出来和自己预先模拟推导是一样的，那么就是自己的递归公式、初始化或者遍历顺序有问题了。\n\n如果和自己预先模拟推导的不一样，那么就是代码实现细节有问题。\n**找问题的最好方式就是把dp数组打印出来，看看究竟是不是按照自己思路推导的！**\n\n## 1.1 debug\n**如果代码写出来了，一直AC不了，灵魂三问：**\n\n1.  这道题目我举例推导状态转移公式了么？\n2.  我打印dp数组的日志了么？\n3.  打印出来了dp数组和我想的一样么？\n\n哈哈，专治各种代码写出来了但AC不了的疑难杂症。\n\n\n# 2 参考资料\n[代码随想录](https://www.programmercarl.com/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%9A%84%E8%A7%A3%E9%A2%98%E6%AD%A5%E9%AA%A4)\n自用跳转连接：🈚️\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/1.动态规划理论基础.md","raw":"---\ntitle: 1.动态规划理论基础\ndate: '2022-07-05 16:27'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 动态规划\nindex_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207041948383.jpg'\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207041948383.jpg'\ntags: 动态规划\nabbrlink: 31294\n---\n\n文章简介：如题\n<!-- more -->\n\n动态规划，英文：Dynamic Programming，简称DP\n**动态规划中每一个状态一定是由上一个状态推导出来的**，贪心是局部最优推导全局最优\n\n例如：有N件物品和一个最多能背重量为W 的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。**每件物品只能用一次**，求解将哪些物品装入背包里物品价值总和最大。\n\n动态规划中dp[j]是由dp[j-weight[i]]推导出来的，然后取max(dp[j], dp[j - weight[i]] + value[i])。\n# 1 动态规划解题步骤\n\n1.  确定dp数组（dp table）以及下标的含义\n2.  确定递推公式\n3.  dp数组如何初始化\n4.  确定遍历顺序\n5.  举例推导dp数组\n**一些情况是递推公式决定了dp数组要如何初始化！**\n\n**做动规的题目，写代码之前一定要把状态转移在dp数组的上具体情况模拟一遍，心中有数，确定最后推出的是想要的结果**。\n然后再写代码，如果代码没通过就打印dp数组，看看是不是和自己预先推导的哪里不一样。\n\n如果打印出来和自己预先模拟推导是一样的，那么就是自己的递归公式、初始化或者遍历顺序有问题了。\n\n如果和自己预先模拟推导的不一样，那么就是代码实现细节有问题。\n**找问题的最好方式就是把dp数组打印出来，看看究竟是不是按照自己思路推导的！**\n\n## 1.1 debug\n**如果代码写出来了，一直AC不了，灵魂三问：**\n\n1.  这道题目我举例推导状态转移公式了么？\n2.  我打印dp数组的日志了么？\n3.  打印出来了dp数组和我想的一样么？\n\n哈哈，专治各种代码写出来了但AC不了的疑难杂症。\n\n\n# 2 参考资料\n[代码随想录](https://www.programmercarl.com/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%9A%84%E8%A7%A3%E9%A2%98%E6%AD%A5%E9%AA%A4)\n自用跳转连接：🈚️\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/1.动态规划理论基础","published":1,"updated":"2022-07-12T09:02:14.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjg004re0mg7275bl8q","content":"<p>文章简介：如题</p>\n<span id=\"more\"></span>\n<p>动态规划，英文：Dynamic Programming，简称DP<br>\n<strong>动态规划中每一个状态一定是由上一个状态推导出来的</strong>，贪心是局部最优推导全局最优</p>\n<p>例如：有N件物品和一个最多能背重量为W 的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。<strong>每件物品只能用一次</strong>，求解将哪些物品装入背包里物品价值总和最大。</p>\n<p>动态规划中dp[j]是由dp[j-weight[i]]推导出来的，然后取max(dp[j], dp[j - weight[i]] + value[i])。</p>\n<h1 id=\"1-动态规划解题步骤\"><a class=\"markdownIt-Anchor\" href=\"#1-动态规划解题步骤\"></a> 1 动态规划解题步骤</h1>\n<ol>\n<li>确定dp数组（dp table）以及下标的含义</li>\n<li>确定递推公式</li>\n<li>dp数组如何初始化</li>\n<li>确定遍历顺序</li>\n<li>举例推导dp数组<br>\n<strong>一些情况是递推公式决定了dp数组要如何初始化！</strong></li>\n</ol>\n<p><strong>做动规的题目，写代码之前一定要把状态转移在dp数组的上具体情况模拟一遍，心中有数，确定最后推出的是想要的结果</strong>。<br>\n然后再写代码，如果代码没通过就打印dp数组，看看是不是和自己预先推导的哪里不一样。</p>\n<p>如果打印出来和自己预先模拟推导是一样的，那么就是自己的递归公式、初始化或者遍历顺序有问题了。</p>\n<p>如果和自己预先模拟推导的不一样，那么就是代码实现细节有问题。<br>\n<strong>找问题的最好方式就是把dp数组打印出来，看看究竟是不是按照自己思路推导的！</strong></p>\n<h2 id=\"11-debug\"><a class=\"markdownIt-Anchor\" href=\"#11-debug\"></a> 1.1 debug</h2>\n<p><strong>如果代码写出来了，一直AC不了，灵魂三问：</strong></p>\n<ol>\n<li>这道题目我举例推导状态转移公式了么？</li>\n<li>我打印dp数组的日志了么？</li>\n<li>打印出来了dp数组和我想的一样么？</li>\n</ol>\n<p>哈哈，专治各种代码写出来了但AC不了的疑难杂症。</p>\n<h1 id=\"2-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#2-参考资料\"></a> 2 参考资料</h1>\n<p><a href=\"https://www.programmercarl.com/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%9A%84%E8%A7%A3%E9%A2%98%E6%AD%A5%E9%AA%A4\">代码随想录</a><br>\n自用跳转连接：🈚️</p>\n","site":{"data":{}},"wordcount":649,"excerpt":"<p>文章简介：如题</p>","more":"<p>动态规划，英文：Dynamic Programming，简称DP<br />\n<strong>动态规划中每一个状态一定是由上一个状态推导出来的</strong>，贪心是局部最优推导全局最优</p>\n<p>例如：有N件物品和一个最多能背重量为W 的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。<strong>每件物品只能用一次</strong>，求解将哪些物品装入背包里物品价值总和最大。</p>\n<p>动态规划中dp[j]是由dp[j-weight[i]]推导出来的，然后取max(dp[j], dp[j - weight[i]] + value[i])。</p>\n<h1 id=\"1-动态规划解题步骤\"><a class=\"markdownIt-Anchor\" href=\"#1-动态规划解题步骤\"></a> 1 动态规划解题步骤</h1>\n<ol>\n<li>确定dp数组（dp table）以及下标的含义</li>\n<li>确定递推公式</li>\n<li>dp数组如何初始化</li>\n<li>确定遍历顺序</li>\n<li>举例推导dp数组<br />\n<strong>一些情况是递推公式决定了dp数组要如何初始化！</strong></li>\n</ol>\n<p><strong>做动规的题目，写代码之前一定要把状态转移在dp数组的上具体情况模拟一遍，心中有数，确定最后推出的是想要的结果</strong>。<br />\n然后再写代码，如果代码没通过就打印dp数组，看看是不是和自己预先推导的哪里不一样。</p>\n<p>如果打印出来和自己预先模拟推导是一样的，那么就是自己的递归公式、初始化或者遍历顺序有问题了。</p>\n<p>如果和自己预先模拟推导的不一样，那么就是代码实现细节有问题。<br />\n<strong>找问题的最好方式就是把dp数组打印出来，看看究竟是不是按照自己思路推导的！</strong></p>\n<h2 id=\"11-debug\"><a class=\"markdownIt-Anchor\" href=\"#11-debug\"></a> 1.1 debug</h2>\n<p><strong>如果代码写出来了，一直AC不了，灵魂三问：</strong></p>\n<ol>\n<li>这道题目我举例推导状态转移公式了么？</li>\n<li>我打印dp数组的日志了么？</li>\n<li>打印出来了dp数组和我想的一样么？</li>\n</ol>\n<p>哈哈，专治各种代码写出来了但AC不了的疑难杂症。</p>\n<h1 id=\"2-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#2-参考资料\"></a> 2 参考资料</h1>\n<p><a href=\"https://www.programmercarl.com/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%9A%84%E8%A7%A3%E9%A2%98%E6%AD%A5%E9%AA%A4\">代码随想录</a><br />\n自用跳转连接：🈚️</p>"},{"title":"11.0-1背包理论基础","date":"2022-07-12T06:55:00.000Z","index_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121421154.jpg","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121421154.jpg","abbrlink":8980,"_content":"\n文章简介：如题\n<!-- more -->\n\n![416.分割等和子集1](https://img-blog.csdnimg.cn/20210117171307407.png)\n\n\n\n# 1 01 背包\n\n有n件物品和一个最多能背重量为w 的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。**每件物品只能用一次**，求解将哪些物品装入背包里物品价值总和最大。\n\n![动态规划-背包问题|600](https://img-blog.csdnimg.cn/20210117175428387.jpg)\n**背包问题有多种背包方式，常见的有：01背包、完全背包、多重背包、分组背包和混合背包等等。**\n\n01 背包：一个商品只能放入一次\n完全背包：即物品无限个，可多次放入背包\n多重背包：每个物品，数量不同\n\n\n\n原始可用暴力解法\n每一件物品其实只有两个状态，取或者不取，所以可以使用回溯法搜索出所有的情况，那么时间复杂度就是$o(2^n)$，这里的n表示物品数量。\n\n**所以暴力的解法是指数级别的时间复杂度。进而才需要动态规划的解法来进行优化！**\n\n# 2 二维dp数组01背包\n背包最大重量为4。\n|       | 重量 | 价值 |\n| ----- | ---- | ---- |\n| 物品0 | 1    | 15   |\n| 物品1 | 3    | 20   |\n| 物品2 | 4    | 30   | \n问背包能背的物品最大价值是多少？\n\n1.  确定dp数组以及下标的含义\n对于背包问题，有一种写法， 是使用二维数组，**即`dp[i][j]` 表示从下标为[0-i]的物品里任意取，放进容量为j的背包，价值总和最大是多少**。\n![动态规划-背包问题1|600](https://img-blog.csdnimg.cn/20210110103003361.png)\n2. 递推公式\n有两个方向推出来`dp[i][j]`，\n\n-   **不放物品i**：由`dp[i - 1][j]`、头顶格子\n>(其实就是当物品i的重量大于背包j的重量时，物品i无法放进背包中，所以被背包内的价值依然和前面相同。)\n>i-1是指：只能选择的物品范围是 i-1，而不是真的放了i-1个物品\n\n-   **放物品i**：`dp[i - 1][j - weight[i]] + value[i]` ，左上方格子\n>某一列中缺失掉哪一个物品\n\n\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220719160159.png)\n\n从两个方向推出来：1.头顶上一格  2.左上角的一块地方(不是左上角一格)\n\n所以递归公式： \n\n`dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);`\n\n\n```col\n```\n\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220719155624.png)\n\n以`dp[1] [3]`为例\n`dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);`\n`dp[1][3] = max(dp[0][3], dp[0][3 - weight[1]] + value[1]);`\n\n头顶格子：20之前那的值是15，原因是背包重量不够装物品1，即为`dp[i - 1][j]`，`dp[1 -1= 0][3]` ：即头顶格子\n左上方格子：`dp[0][3 - weight[1]] + value[1]`=`dp[0][0] + value[1]`：(减去要装的重量)的价值 + 要装的价值\n为什么要取最大值呢\n?\n因为装了物品i，有可能会导致前边的一些物品丢弃掉。而丢弃的物品可能价值很大。所以要比较他们的最大值\n\n\n\n\n\n3.  dp数组如何初始化\n初始化第一行，第一列。剩下元素即可都推出来\n从两个方向推出来：1.头顶上一格  2.左上方(不是左上角)\n\n\n第一列：背包容量为0，一个也装不了，总价值当然为0\n第一行：物品0的重量为1，所以背包容量>1都可以装物品0一个，所以价值是15\n![动态规划-背包问题7|600](https://img-blog.csdnimg.cn/20210110103109140.png)\n其余未赋值的都保持默认0即可，反正最后都会被覆盖掉\n[[vector]]\n```c\n// 初始化 dp\nvector<vector<int>> dp(weight.size(), vector<int>(bagweight + 1, 0));\nfor (int j = weight[0]; j <= bagweight; j++) {\n    dp[0][j] = value[0];\n}\n```\n4.  确定遍历顺序\n有两个遍历的维度：物品与背包重量\n\n**先遍历 物品还是先遍历背包重量都可以**\n先物品在背包，就是一行一行的遍历(从左到右)，遍历到20时，他的左上方和上方都有值\n先背包在物品，就是一列一列的遍历(从上到下)，遍历到20时，他的左边全部有值(即左上面有值)，上方也全都有值  \n```col\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220719155624.png)\n\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220719155536.png)\n```\n\n**先遍历物品更好理解**，如下\n```c\n// weight数组的大小 就是物品个数\nfor(int i = 1; i < weight.size(); i++) { // 遍历物品\n    for(int j = 0; j <= bagweight; j++) { // 遍历背包容量\n        if (j < weight[i]) dp[i][j] = dp[i - 1][j];  // i的重量太大，放不下\n        else dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);\n\n    }\n}\n```\n\n先遍历背包\n```c\n// weight数组的大小 就是物品个数\nfor(int j = 0; j <= bagweight; j++) { // 遍历背包容量\n    for(int i = 1; i < weight.size(); i++) { // 遍历物品\n        if (j < weight[i]) dp[i][j] = dp[i - 1][j];\n        else dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);\n    }\n}\n```\n\n5.  举例推导dp数组\n\n来看一下对应的dp数组的数值，如图：\n\n![动态规划-背包问题4](https://img-blog.csdnimg.cn/20210118163425129.jpg)\n\n# 3 代码\n\n```cpp\nvoid test_2_wei_bag_problem1() {\n    vector<int> weight = {1, 3, 4};\n    vector<int> value = {15, 20, 30};\n    int bagweight = 4;\n\n    // 二维数组\n    vector<vector<int>> dp(weight.size(), vector<int>(bagweight + 1, 0));\n\n    // 初始化\n    for (int j = weight[0]; j <= bagweight; j++) {\n        dp[0][j] = value[0];\n    }\n\n    // weight数组的大小 就是物品个数\n    for(int i = 1; i < weight.size(); i++) { // 遍历物品\n        for(int j = 0; j <= bagweight; j++) { // 遍历背包容量\n            if (j < weight[i]) dp[i][j] = dp[i - 1][j];\n            else dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);\n\n        }\n    }\n\n    cout << dp[weight.size() - 1][bagweight] << endl;\n}\n\nint main() {\n    test_2_wei_bag_problem1();\n}\n\n```\n\n\n# 4 参考资料\n\n[带你学透0-1背包问题！| 关于背包问题，你不清楚的地方，这里都讲了！| 动态规划经典问题 | 数据结构与算法_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1cg411g7Y6/?spm_id_from=333.788&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n自用跳转链接：🈚\n\n\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/11.0-1背包理论基础(一).md","raw":"---\ntitle: 11.0-1背包理论基础\ndate: '2022-07-12 14:55'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 动态规划\nindex_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121421154.jpg'\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121421154.jpg'\ntags:\n  - 动态规划\nabbrlink: 8980\n---\n\n文章简介：如题\n<!-- more -->\n\n![416.分割等和子集1](https://img-blog.csdnimg.cn/20210117171307407.png)\n\n\n\n# 1 01 背包\n\n有n件物品和一个最多能背重量为w 的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。**每件物品只能用一次**，求解将哪些物品装入背包里物品价值总和最大。\n\n![动态规划-背包问题|600](https://img-blog.csdnimg.cn/20210117175428387.jpg)\n**背包问题有多种背包方式，常见的有：01背包、完全背包、多重背包、分组背包和混合背包等等。**\n\n01 背包：一个商品只能放入一次\n完全背包：即物品无限个，可多次放入背包\n多重背包：每个物品，数量不同\n\n\n\n原始可用暴力解法\n每一件物品其实只有两个状态，取或者不取，所以可以使用回溯法搜索出所有的情况，那么时间复杂度就是$o(2^n)$，这里的n表示物品数量。\n\n**所以暴力的解法是指数级别的时间复杂度。进而才需要动态规划的解法来进行优化！**\n\n# 2 二维dp数组01背包\n背包最大重量为4。\n|       | 重量 | 价值 |\n| ----- | ---- | ---- |\n| 物品0 | 1    | 15   |\n| 物品1 | 3    | 20   |\n| 物品2 | 4    | 30   | \n问背包能背的物品最大价值是多少？\n\n1.  确定dp数组以及下标的含义\n对于背包问题，有一种写法， 是使用二维数组，**即`dp[i][j]` 表示从下标为[0-i]的物品里任意取，放进容量为j的背包，价值总和最大是多少**。\n![动态规划-背包问题1|600](https://img-blog.csdnimg.cn/20210110103003361.png)\n2. 递推公式\n有两个方向推出来`dp[i][j]`，\n\n-   **不放物品i**：由`dp[i - 1][j]`、头顶格子\n>(其实就是当物品i的重量大于背包j的重量时，物品i无法放进背包中，所以被背包内的价值依然和前面相同。)\n>i-1是指：只能选择的物品范围是 i-1，而不是真的放了i-1个物品\n\n-   **放物品i**：`dp[i - 1][j - weight[i]] + value[i]` ，左上方格子\n>某一列中缺失掉哪一个物品\n\n\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220719160159.png)\n\n从两个方向推出来：1.头顶上一格  2.左上角的一块地方(不是左上角一格)\n\n所以递归公式： \n\n`dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);`\n\n\n```col\n```\n\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220719155624.png)\n\n以`dp[1] [3]`为例\n`dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);`\n`dp[1][3] = max(dp[0][3], dp[0][3 - weight[1]] + value[1]);`\n\n头顶格子：20之前那的值是15，原因是背包重量不够装物品1，即为`dp[i - 1][j]`，`dp[1 -1= 0][3]` ：即头顶格子\n左上方格子：`dp[0][3 - weight[1]] + value[1]`=`dp[0][0] + value[1]`：(减去要装的重量)的价值 + 要装的价值\n为什么要取最大值呢\n?\n因为装了物品i，有可能会导致前边的一些物品丢弃掉。而丢弃的物品可能价值很大。所以要比较他们的最大值\n\n\n\n\n\n3.  dp数组如何初始化\n初始化第一行，第一列。剩下元素即可都推出来\n从两个方向推出来：1.头顶上一格  2.左上方(不是左上角)\n\n\n第一列：背包容量为0，一个也装不了，总价值当然为0\n第一行：物品0的重量为1，所以背包容量>1都可以装物品0一个，所以价值是15\n![动态规划-背包问题7|600](https://img-blog.csdnimg.cn/20210110103109140.png)\n其余未赋值的都保持默认0即可，反正最后都会被覆盖掉\n[[vector]]\n```c\n// 初始化 dp\nvector<vector<int>> dp(weight.size(), vector<int>(bagweight + 1, 0));\nfor (int j = weight[0]; j <= bagweight; j++) {\n    dp[0][j] = value[0];\n}\n```\n4.  确定遍历顺序\n有两个遍历的维度：物品与背包重量\n\n**先遍历 物品还是先遍历背包重量都可以**\n先物品在背包，就是一行一行的遍历(从左到右)，遍历到20时，他的左上方和上方都有值\n先背包在物品，就是一列一列的遍历(从上到下)，遍历到20时，他的左边全部有值(即左上面有值)，上方也全都有值  \n```col\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220719155624.png)\n\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220719155536.png)\n```\n\n**先遍历物品更好理解**，如下\n```c\n// weight数组的大小 就是物品个数\nfor(int i = 1; i < weight.size(); i++) { // 遍历物品\n    for(int j = 0; j <= bagweight; j++) { // 遍历背包容量\n        if (j < weight[i]) dp[i][j] = dp[i - 1][j];  // i的重量太大，放不下\n        else dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);\n\n    }\n}\n```\n\n先遍历背包\n```c\n// weight数组的大小 就是物品个数\nfor(int j = 0; j <= bagweight; j++) { // 遍历背包容量\n    for(int i = 1; i < weight.size(); i++) { // 遍历物品\n        if (j < weight[i]) dp[i][j] = dp[i - 1][j];\n        else dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);\n    }\n}\n```\n\n5.  举例推导dp数组\n\n来看一下对应的dp数组的数值，如图：\n\n![动态规划-背包问题4](https://img-blog.csdnimg.cn/20210118163425129.jpg)\n\n# 3 代码\n\n```cpp\nvoid test_2_wei_bag_problem1() {\n    vector<int> weight = {1, 3, 4};\n    vector<int> value = {15, 20, 30};\n    int bagweight = 4;\n\n    // 二维数组\n    vector<vector<int>> dp(weight.size(), vector<int>(bagweight + 1, 0));\n\n    // 初始化\n    for (int j = weight[0]; j <= bagweight; j++) {\n        dp[0][j] = value[0];\n    }\n\n    // weight数组的大小 就是物品个数\n    for(int i = 1; i < weight.size(); i++) { // 遍历物品\n        for(int j = 0; j <= bagweight; j++) { // 遍历背包容量\n            if (j < weight[i]) dp[i][j] = dp[i - 1][j];\n            else dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);\n\n        }\n    }\n\n    cout << dp[weight.size() - 1][bagweight] << endl;\n}\n\nint main() {\n    test_2_wei_bag_problem1();\n}\n\n```\n\n\n# 4 参考资料\n\n[带你学透0-1背包问题！| 关于背包问题，你不清楚的地方，这里都讲了！| 动态规划经典问题 | 数据结构与算法_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1cg411g7Y6/?spm_id_from=333.788&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n自用跳转链接：🈚\n\n\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/11.0-1背包理论基础(一)","published":1,"updated":"2022-07-21T07:16:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjh004ue0mg6qzbf578","content":"<p>文章简介：如题</p>\n<span id=\"more\"></span>\n<p><img src=\"https://img-blog.csdnimg.cn/20210117171307407.png\" alt=\"416.分割等和子集1\"></p>\n<h1 id=\"1-01-背包\"><a class=\"markdownIt-Anchor\" href=\"#1-01-背包\"></a> 1 01 背包</h1>\n<p>有n件物品和一个最多能背重量为w 的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。<strong>每件物品只能用一次</strong>，求解将哪些物品装入背包里物品价值总和最大。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210117175428387.jpg\" alt=\"动态规划-背包问题|600\"><br>\n<strong>背包问题有多种背包方式，常见的有：01背包、完全背包、多重背包、分组背包和混合背包等等。</strong></p>\n<p>01 背包：一个商品只能放入一次<br>\n完全背包：即物品无限个，可多次放入背包<br>\n多重背包：每个物品，数量不同</p>\n<p>原始可用暴力解法<br>\n每一件物品其实只有两个状态，取或者不取，所以可以使用回溯法搜索出所有的情况，那么时间复杂度就是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>o</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">o(2^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，这里的n表示物品数量。</p>\n<p><strong>所以暴力的解法是指数级别的时间复杂度。进而才需要动态规划的解法来进行优化！</strong></p>\n<h1 id=\"2-二维dp数组01背包\"><a class=\"markdownIt-Anchor\" href=\"#2-二维dp数组01背包\"></a> 2 二维dp数组01背包</h1>\n<p>背包最大重量为4。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>重量</th>\n<th>价值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>物品0</td>\n<td>1</td>\n<td>15</td>\n</tr>\n<tr>\n<td>物品1</td>\n<td>3</td>\n<td>20</td>\n</tr>\n<tr>\n<td>物品2</td>\n<td>4</td>\n<td>30</td>\n</tr>\n</tbody>\n</table>\n<p>问背包能背的物品最大价值是多少？</p>\n<ol>\n<li>确定dp数组以及下标的含义<br>\n对于背包问题，有一种写法， 是使用二维数组，<strong>即<code>dp[i][j]</code> 表示从下标为[0-i]的物品里任意取，放进容量为j的背包，价值总和最大是多少</strong>。<br>\n<img src=\"https://img-blog.csdnimg.cn/20210110103003361.png\" alt=\"动态规划-背包问题1|600\"></li>\n<li>递推公式<br>\n有两个方向推出来<code>dp[i][j]</code>，</li>\n</ol>\n<ul>\n<li><strong>不放物品i</strong>：由<code>dp[i - 1][j]</code>、头顶格子</li>\n</ul>\n<blockquote>\n<p>(其实就是当物品i的重量大于背包j的重量时，物品i无法放进背包中，所以被背包内的价值依然和前面相同。)<br>\ni-1是指：只能选择的物品范围是 i-1，而不是真的放了i-1个物品</p>\n</blockquote>\n<ul>\n<li><strong>放物品i</strong>：<code>dp[i - 1][j - weight[i]] + value[i]</code> ，左上方格子</li>\n</ul>\n<blockquote>\n<p>某一列中缺失掉哪一个物品</p>\n</blockquote>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220719160159.png\" alt=\"\"></p>\n<p>从两个方向推出来：1.头顶上一格  2.左上角的一块地方(不是左上角一格)</p>\n<p>所以递归公式：</p>\n<p><code>dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);</code></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs col\">```<br><br>![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220719155624.png)<br><br>以`dp[1] [3]`为例<br>`dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);`<br>`dp[1][3] = max(dp[0][3], dp[0][3 - weight[1]] + value[1]);`<br><br>头顶格子：20之前那的值是15，原因是背包重量不够装物品1，即为`dp[i - 1][j]`，`dp[1 -1= 0][3]` ：即头顶格子<br>左上方格子：`dp[0][3 - weight[1]] + value[1]`=`dp[0][0] + value[1]`：(减去要装的重量)的价值 + 要装的价值<br>为什么要取最大值呢<br>?<br>因为装了物品i，有可能会导致前边的一些物品丢弃掉。而丢弃的物品可能价值很大。所以要比较他们的最大值<br><br><br><br><br><br>3.  dp数组如何初始化<br>初始化第一行，第一列。剩下元素即可都推出来<br>从两个方向推出来：1.头顶上一格  2.左上方(不是左上角)<br><br><br>第一列：背包容量为0，一个也装不了，总价值当然为0<br>第一行：物品0的重量为1，所以背包容量&gt;1都可以装物品0一个，所以价值是15<br>![动态规划-背包问题7|600](https://img-blog.csdnimg.cn/20210110103109140.png)<br>其余未赋值的都保持默认0即可，反正最后都会被覆盖掉<br>[[vector]]<br>```c<br>// 初始化 dp<br>vector&lt;vector&lt;int&gt;&gt; dp(weight.size(), vector&lt;int&gt;(bagweight + 1, 0));<br>for (int j = weight[0]; j &lt;= bagweight; j++) {<br>    dp[0][j] = value[0];<br>}<br></code></pre></td></tr></tbody></table></figure>\n<ol start=\"4\">\n<li>确定遍历顺序<br>\n有两个遍历的维度：物品与背包重量</li>\n</ol>\n<p><strong>先遍历 物品还是先遍历背包重量都可以</strong><br>\n先物品在背包，就是一行一行的遍历(从左到右)，遍历到20时，他的左上方和上方都有值<br>\n先背包在物品，就是一列一列的遍历(从上到下)，遍历到20时，他的左边全部有值(即左上面有值)，上方也全都有值</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs col\">![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220719155624.png)<br><br>![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220719155536.png)<br></code></pre></td></tr></tbody></table></figure>\n<p><strong>先遍历物品更好理解</strong>，如下</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// weight数组的大小 就是物品个数</span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; weight.size(); i++) { <span class=\"hljs-comment\">// 遍历物品</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;= bagweight; j++) { <span class=\"hljs-comment\">// 遍历背包容量</span><br>        <span class=\"hljs-keyword\">if</span> (j &lt; weight[i]) dp[i][j] = dp[i - <span class=\"hljs-number\">1</span>][j];  <span class=\"hljs-comment\">// i的重量太大，放不下</span><br>        <span class=\"hljs-keyword\">else</span> dp[i][j] = max(dp[i - <span class=\"hljs-number\">1</span>][j], dp[i - <span class=\"hljs-number\">1</span>][j - weight[i]] + value[i]);<br><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure>\n<p>先遍历背包</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// weight数组的大小 就是物品个数</span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;= bagweight; j++) { <span class=\"hljs-comment\">// 遍历背包容量</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; weight.size(); i++) { <span class=\"hljs-comment\">// 遍历物品</span><br>        <span class=\"hljs-keyword\">if</span> (j &lt; weight[i]) dp[i][j] = dp[i - <span class=\"hljs-number\">1</span>][j];<br>        <span class=\"hljs-keyword\">else</span> dp[i][j] = max(dp[i - <span class=\"hljs-number\">1</span>][j], dp[i - <span class=\"hljs-number\">1</span>][j - weight[i]] + value[i]);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure>\n<ol start=\"5\">\n<li>举例推导dp数组</li>\n</ol>\n<p>来看一下对应的dp数组的数值，如图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210118163425129.jpg\" alt=\"动态规划-背包问题4\"></p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_2_wei_bag_problem1</span><span class=\"hljs-params\">()</span> </span>{<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; weight = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>};<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; value = {<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>};<br>    <span class=\"hljs-type\">int</span> bagweight = <span class=\"hljs-number\">4</span>;<br><br>    <span class=\"hljs-comment\">// 二维数组</span><br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">dp</span>(weight.<span class=\"hljs-built_in\">size</span>(), <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;(bagweight + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>));<br><br>    <span class=\"hljs-comment\">// 初始化</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = weight[<span class=\"hljs-number\">0</span>]; j &lt;= bagweight; j++) {<br>        dp[<span class=\"hljs-number\">0</span>][j] = value[<span class=\"hljs-number\">0</span>];<br>    }<br><br>    <span class=\"hljs-comment\">// weight数组的大小 就是物品个数</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; weight.<span class=\"hljs-built_in\">size</span>(); i++) { <span class=\"hljs-comment\">// 遍历物品</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;= bagweight; j++) { <span class=\"hljs-comment\">// 遍历背包容量</span><br>            <span class=\"hljs-keyword\">if</span> (j &lt; weight[i]) dp[i][j] = dp[i - <span class=\"hljs-number\">1</span>][j];<br>            <span class=\"hljs-keyword\">else</span> dp[i][j] = <span class=\"hljs-built_in\">max</span>(dp[i - <span class=\"hljs-number\">1</span>][j], dp[i - <span class=\"hljs-number\">1</span>][j - weight[i]] + value[i]);<br><br>        }<br>    }<br><br>    cout &lt;&lt; dp[weight.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>][bagweight] &lt;&lt; endl;<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{<br>    <span class=\"hljs-built_in\">test_2_wei_bag_problem1</span>();<br>}<br><br></code></pre></td></tr></tbody></table></figure>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p><a href=\"https://www.bilibili.com/video/BV1cg411g7Y6/?spm_id_from=333.788&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">带你学透0-1背包问题！| 关于背包问题，你不清楚的地方，这里都讲了！| 动态规划经典问题 | 数据结构与算法_哔哩哔哩_bilibili</a><br>\n自用跳转链接：🈚</p>\n","site":{"data":{}},"wordcount":3140,"excerpt":"<p>文章简介：如题</p>","more":"<p><img src=\"https://img-blog.csdnimg.cn/20210117171307407.png\" alt=\"416.分割等和子集1\" /></p>\n<h1 id=\"1-01-背包\"><a class=\"markdownIt-Anchor\" href=\"#1-01-背包\"></a> 1 01 背包</h1>\n<p>有n件物品和一个最多能背重量为w 的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。<strong>每件物品只能用一次</strong>，求解将哪些物品装入背包里物品价值总和最大。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210117175428387.jpg\" alt=\"动态规划-背包问题|600\" /><br />\n<strong>背包问题有多种背包方式，常见的有：01背包、完全背包、多重背包、分组背包和混合背包等等。</strong></p>\n<p>01 背包：一个商品只能放入一次<br />\n完全背包：即物品无限个，可多次放入背包<br />\n多重背包：每个物品，数量不同</p>\n<p>原始可用暴力解法<br />\n每一件物品其实只有两个状态，取或者不取，所以可以使用回溯法搜索出所有的情况，那么时间复杂度就是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>o</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">o(2^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">o</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，这里的n表示物品数量。</p>\n<p><strong>所以暴力的解法是指数级别的时间复杂度。进而才需要动态规划的解法来进行优化！</strong></p>\n<h1 id=\"2-二维dp数组01背包\"><a class=\"markdownIt-Anchor\" href=\"#2-二维dp数组01背包\"></a> 2 二维dp数组01背包</h1>\n<p>背包最大重量为4。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>重量</th>\n<th>价值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>物品0</td>\n<td>1</td>\n<td>15</td>\n</tr>\n<tr>\n<td>物品1</td>\n<td>3</td>\n<td>20</td>\n</tr>\n<tr>\n<td>物品2</td>\n<td>4</td>\n<td>30</td>\n</tr>\n</tbody>\n</table>\n<p>问背包能背的物品最大价值是多少？</p>\n<ol>\n<li>确定dp数组以及下标的含义<br />\n对于背包问题，有一种写法， 是使用二维数组，<strong>即<code>dp[i][j]</code> 表示从下标为[0-i]的物品里任意取，放进容量为j的背包，价值总和最大是多少</strong>。<br />\n<img src=\"https://img-blog.csdnimg.cn/20210110103003361.png\" alt=\"动态规划-背包问题1|600\" /></li>\n<li>递推公式<br />\n有两个方向推出来<code>dp[i][j]</code>，</li>\n</ol>\n<ul>\n<li><strong>不放物品i</strong>：由<code>dp[i - 1][j]</code>、头顶格子</li>\n</ul>\n<blockquote>\n<p>(其实就是当物品i的重量大于背包j的重量时，物品i无法放进背包中，所以被背包内的价值依然和前面相同。)<br />\ni-1是指：只能选择的物品范围是 i-1，而不是真的放了i-1个物品</p>\n</blockquote>\n<ul>\n<li><strong>放物品i</strong>：<code>dp[i - 1][j - weight[i]] + value[i]</code> ，左上方格子</li>\n</ul>\n<blockquote>\n<p>某一列中缺失掉哪一个物品</p>\n</blockquote>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220719160159.png\" alt=\"\" /></p>\n<p>从两个方向推出来：1.头顶上一格  2.左上角的一块地方(不是左上角一格)</p>\n<p>所以递归公式：</p>\n<p><code>dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs col\">```<br><br>![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220719155624.png)<br><br>以`dp[1] [3]`为例<br>`dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);`<br>`dp[1][3] = max(dp[0][3], dp[0][3 - weight[1]] + value[1]);`<br><br>头顶格子：20之前那的值是15，原因是背包重量不够装物品1，即为`dp[i - 1][j]`，`dp[1 -1= 0][3]` ：即头顶格子<br>左上方格子：`dp[0][3 - weight[1]] + value[1]`=`dp[0][0] + value[1]`：(减去要装的重量)的价值 + 要装的价值<br>为什么要取最大值呢<br>?<br>因为装了物品i，有可能会导致前边的一些物品丢弃掉。而丢弃的物品可能价值很大。所以要比较他们的最大值<br><br><br><br><br><br>3.  dp数组如何初始化<br>初始化第一行，第一列。剩下元素即可都推出来<br>从两个方向推出来：1.头顶上一格  2.左上方(不是左上角)<br><br><br>第一列：背包容量为0，一个也装不了，总价值当然为0<br>第一行：物品0的重量为1，所以背包容量&gt;1都可以装物品0一个，所以价值是15<br>![动态规划-背包问题7|600](https://img-blog.csdnimg.cn/20210110103109140.png)<br>其余未赋值的都保持默认0即可，反正最后都会被覆盖掉<br>[[vector]]<br>```c<br>// 初始化 dp<br>vector&lt;vector&lt;int&gt;&gt; dp(weight.size(), vector&lt;int&gt;(bagweight + 1, 0));<br>for (int j = weight[0]; j &lt;= bagweight; j++) &#123;<br>    dp[0][j] = value[0];<br>&#125;<br></code></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>确定遍历顺序<br />\n有两个遍历的维度：物品与背包重量</li>\n</ol>\n<p><strong>先遍历 物品还是先遍历背包重量都可以</strong><br />\n先物品在背包，就是一行一行的遍历(从左到右)，遍历到20时，他的左上方和上方都有值<br />\n先背包在物品，就是一列一列的遍历(从上到下)，遍历到20时，他的左边全部有值(即左上面有值)，上方也全都有值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs col\">![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220719155624.png)<br><br>![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220719155536.png)<br></code></pre></td></tr></table></figure>\n<p><strong>先遍历物品更好理解</strong>，如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// weight数组的大小 就是物品个数</span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; weight.size(); i++) &#123; <span class=\"hljs-comment\">// 遍历物品</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;= bagweight; j++) &#123; <span class=\"hljs-comment\">// 遍历背包容量</span><br>        <span class=\"hljs-keyword\">if</span> (j &lt; weight[i]) dp[i][j] = dp[i - <span class=\"hljs-number\">1</span>][j];  <span class=\"hljs-comment\">// i的重量太大，放不下</span><br>        <span class=\"hljs-keyword\">else</span> dp[i][j] = max(dp[i - <span class=\"hljs-number\">1</span>][j], dp[i - <span class=\"hljs-number\">1</span>][j - weight[i]] + value[i]);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>先遍历背包</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// weight数组的大小 就是物品个数</span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;= bagweight; j++) &#123; <span class=\"hljs-comment\">// 遍历背包容量</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; weight.size(); i++) &#123; <span class=\"hljs-comment\">// 遍历物品</span><br>        <span class=\"hljs-keyword\">if</span> (j &lt; weight[i]) dp[i][j] = dp[i - <span class=\"hljs-number\">1</span>][j];<br>        <span class=\"hljs-keyword\">else</span> dp[i][j] = max(dp[i - <span class=\"hljs-number\">1</span>][j], dp[i - <span class=\"hljs-number\">1</span>][j - weight[i]] + value[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>举例推导dp数组</li>\n</ol>\n<p>来看一下对应的dp数组的数值，如图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210118163425129.jpg\" alt=\"动态规划-背包问题4\" /></p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_2_wei_bag_problem1</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; weight = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;;<br>    vector&lt;<span class=\"hljs-type\">int</span>&gt; value = &#123;<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>&#125;;<br>    <span class=\"hljs-type\">int</span> bagweight = <span class=\"hljs-number\">4</span>;<br><br>    <span class=\"hljs-comment\">// 二维数组</span><br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">dp</span>(weight.<span class=\"hljs-built_in\">size</span>(), <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;(bagweight + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>));<br><br>    <span class=\"hljs-comment\">// 初始化</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = weight[<span class=\"hljs-number\">0</span>]; j &lt;= bagweight; j++) &#123;<br>        dp[<span class=\"hljs-number\">0</span>][j] = value[<span class=\"hljs-number\">0</span>];<br>    &#125;<br><br>    <span class=\"hljs-comment\">// weight数组的大小 就是物品个数</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; weight.<span class=\"hljs-built_in\">size</span>(); i++) &#123; <span class=\"hljs-comment\">// 遍历物品</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;= bagweight; j++) &#123; <span class=\"hljs-comment\">// 遍历背包容量</span><br>            <span class=\"hljs-keyword\">if</span> (j &lt; weight[i]) dp[i][j] = dp[i - <span class=\"hljs-number\">1</span>][j];<br>            <span class=\"hljs-keyword\">else</span> dp[i][j] = <span class=\"hljs-built_in\">max</span>(dp[i - <span class=\"hljs-number\">1</span>][j], dp[i - <span class=\"hljs-number\">1</span>][j - weight[i]] + value[i]);<br><br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; dp[weight.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>][bagweight] &lt;&lt; endl;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-built_in\">test_2_wei_bag_problem1</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p><a href=\"https://www.bilibili.com/video/BV1cg411g7Y6/?spm_id_from=333.788&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">带你学透0-1背包问题！| 关于背包问题，你不清楚的地方，这里都讲了！| 动态规划经典问题 | 数据结构与算法_哔哩哔哩_bilibili</a><br />\n自用跳转链接：🈚</p>"},{"cards-deck":"source::_posts::👨🏻‍💻code::数据结构与算法::代码随想录::动态规划::12.0-1背包理论基础（二）.md","title":"12.0-1背包理论基础（二）","date":"2022-07-13T06:57:00.000Z","abbrlink":38995,"_content":"\n\n\n# 1 滚动数组思路\n滚动数组，就是把二维dp降为一维dp\n**如果把dp[i - 1]那一层拷贝到dp[i]上，表达式完全可以是：`dp[i][j] = max(dp[i][j], dp[i][j - weight[i]] + value[i]);`**\n>上一次的i,j 的值存在max里边，不断的比较得到最大值\n\n滚动数组：在同一层中，不断的进行覆盖然后刷新\n\n动规五部曲分析如下：\n## 1.1 确定dp数组的定义\ndp[j]：容量为j的背包，所背的物品价值可以最大为dp[j]。\n\n## 1.2 一维dp数组的递推公式\n\n整体思路： 想想如何从前面的数推过来\n\ndp[j]有两个选择，\n不放物品i：dp[j]， 未覆盖的值\n\n放物品i：dp[j - weight[i]] + value[i]，覆盖后的值\n(总重量 - 要放物品的重量)的最大价值+要放物品的价值\n除去要放物品的背包 的价值 + 要放物品的价值\nQ：万一放不了呢，之前二维数组是有一个判断语句，一维中没有啊？\nA：`for(int j = bagWeight; j >= weight[i]; j--)`。一维中也有判断语句，进入for循环的条件是背包容量大于所放物品i的重量\n\n```\ndp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n```\n\n## 1.3 一维dp数组如何初始化\ndp[0]=0：背包容量为0所背的物品的最大价值是0\n其他的值都初始为0就行，因为递推公式中会赋值\n不能初始化太大的值，防止取最大值的时候覆盖掉真实结果\n**总结**：其实全部初始化为0即可\n\n## 1.4 一维dp数组遍历顺序\n**只能先物品后背包**\n\t如果顺序被颠倒，那么dp数组中记录的都是一个物品的数值了\n**倒序遍历：保证物品只放入一次**\n\t看下面的例子\n```c\nfor(int i = 0; i < weight.size(); i++) { // 遍历物品，二维数组的行，反复覆盖\n    for(int j = bagWeight; j >= weight[i]; j--) { // j = 背包容量，也不要忘了=（背包容量等于重量时也可以加入的）\n        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);// 不断更新该行的列向量\n    }\n}\n```\n\n为什么不能正序遍历：例子\n?\n`dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);`\n物品0的重量**weight[0] = 1**，价值**value[0] = 15**\n如果正序遍历，此时//  [[for 循环]]\n\n正序循环中的第二for循环的条件应该怎么写  #card #已解决 \n```c\n// 先遍历物品，再遍历背包，内层for循环正序遍历\nfor(int i = 0; i < weight.size(); i++) { // 遍历物品\n    for(int j = weight[i]; j <= bagWeight ; j++) { // 遍历背包容量\n        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n    }\n}\n```\n\n\n\ndp[1] = dp[1 - weight[0]] + value[0] = 15\ndp[2] = dp[2 - weight[0]] + value[0] = 30\n此时dp[2]就已经是30了，意味着物品0，被放入了两次，所以不能正序遍历\n说白了，当前dp[i]要使用上一层左侧的dp值，正序覆盖了上一层左侧的dp值，倒叙避免了覆盖\n\n倒序遍历：\n  `vector<int> dp(bagWeight + 1, 0);` 原来的初始化是0\ndp[2] = dp[2 - weight[0]] + value[0] = 15\n>倒序计算时，由于 dp 数组初始化为 0，所以 dp[2-1] 为 0，所以 dp[2] 为 15\n\ndp[1] = dp[1 - weight[0]] + value[0] = 15\n\n## 1.5 举例推导dp数组\n一维dp，分别用物品0，物品1，物品2 来遍历背包，最终得到结果如下：\n\n![动态规划-背包问题9](https://img-blog.csdnimg.cn/20210110103614769.png)\n\n\n\n\n\n# 2 代码\n\n```c\nvoid test_1_wei_bag_problem() {\n    vector<int> weight = {1, 3, 4};\n    vector<int> value = {15, 20, 30};\n    int bagWeight = 4;\n\n    // 初始化\n    vector<int> dp(bagWeight + 1, 0);\n    for(int i = 0; i < weight.size(); i++) { // 遍历物品\n        for(int j = bagWeight; j >= weight[i]; j--) { // 遍历背包容量\n            dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n        }\n    }\n    cout << dp[bagWeight] << endl;\n}\n\nint main() {\n    test_1_wei_bag_problem();\n}\n```\n\n一维dp 的01背包，要比二维简洁的多！ 初始化 和 遍历顺序相对简单了，**空间复杂度还降了一个数量级**\n推荐用一维数组\n\n\n# 3 总结\n\n## 3.1 面试问题\n要求先实现一个纯二维的01背包,如果写出来了,然后再问为什么两个for循环的嵌套顺序这么写?反过来写行不行 #card \n第一种是先物品后背包的遍历，根据状态转移方程可得，当前值由该位置的上方和左上上方来确定，首先初始化了第一行和第一列的值，这种先物品后背包的方式，是从左到右的一个个行遍历赋值。遍历到`dp[i][j]`时，它的上方和左上方都赋值完毕，可以推导出来\n第二种是先背包后物品的遍历，遍历方式是从上到下的一列一列的遍历赋值。遍历到`dp[i][j]`时，它的整个左部分都赋值完毕，上方也赋值了。同理可推导出来。\n所以反过来写是可以的\n\n\n\n\n\n[[讲一讲01背包初始化的逻辑。]]\n\n\n一维数组的01背包，两个for循环的顺序反过来写行不行 #card #疑问 \n不行，\n\n\n注意以上问题都是在候选人把代码写出来的情况下才问的。\n\n\n\n\n\n\n---\n**参考资料**\n自用跳转链接：🈚\n[滚动数组详解_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1dZ4y1u7ZT?spm_id_from=333.337.search-card.all.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n\n\n[[测试deck]]\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/12.0-1背包理论基础（二）.md","raw":"---\ncards-deck: source::_posts::👨🏻‍💻code::数据结构与算法::代码随想录::动态规划::12.0-1背包理论基础（二）.md\ntitle: 12.0-1背包理论基础（二）\ndate: '2022-07-13 14:57'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 动态规划\nabbrlink: 38995\ntags: 动态规划\n---\n\n\n\n# 1 滚动数组思路\n滚动数组，就是把二维dp降为一维dp\n**如果把dp[i - 1]那一层拷贝到dp[i]上，表达式完全可以是：`dp[i][j] = max(dp[i][j], dp[i][j - weight[i]] + value[i]);`**\n>上一次的i,j 的值存在max里边，不断的比较得到最大值\n\n滚动数组：在同一层中，不断的进行覆盖然后刷新\n\n动规五部曲分析如下：\n## 1.1 确定dp数组的定义\ndp[j]：容量为j的背包，所背的物品价值可以最大为dp[j]。\n\n## 1.2 一维dp数组的递推公式\n\n整体思路： 想想如何从前面的数推过来\n\ndp[j]有两个选择，\n不放物品i：dp[j]， 未覆盖的值\n\n放物品i：dp[j - weight[i]] + value[i]，覆盖后的值\n(总重量 - 要放物品的重量)的最大价值+要放物品的价值\n除去要放物品的背包 的价值 + 要放物品的价值\nQ：万一放不了呢，之前二维数组是有一个判断语句，一维中没有啊？\nA：`for(int j = bagWeight; j >= weight[i]; j--)`。一维中也有判断语句，进入for循环的条件是背包容量大于所放物品i的重量\n\n```\ndp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n```\n\n## 1.3 一维dp数组如何初始化\ndp[0]=0：背包容量为0所背的物品的最大价值是0\n其他的值都初始为0就行，因为递推公式中会赋值\n不能初始化太大的值，防止取最大值的时候覆盖掉真实结果\n**总结**：其实全部初始化为0即可\n\n## 1.4 一维dp数组遍历顺序\n**只能先物品后背包**\n\t如果顺序被颠倒，那么dp数组中记录的都是一个物品的数值了\n**倒序遍历：保证物品只放入一次**\n\t看下面的例子\n```c\nfor(int i = 0; i < weight.size(); i++) { // 遍历物品，二维数组的行，反复覆盖\n    for(int j = bagWeight; j >= weight[i]; j--) { // j = 背包容量，也不要忘了=（背包容量等于重量时也可以加入的）\n        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);// 不断更新该行的列向量\n    }\n}\n```\n\n为什么不能正序遍历：例子\n?\n`dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);`\n物品0的重量**weight[0] = 1**，价值**value[0] = 15**\n如果正序遍历，此时//  [[for 循环]]\n\n正序循环中的第二for循环的条件应该怎么写  #card #已解决 \n```c\n// 先遍历物品，再遍历背包，内层for循环正序遍历\nfor(int i = 0; i < weight.size(); i++) { // 遍历物品\n    for(int j = weight[i]; j <= bagWeight ; j++) { // 遍历背包容量\n        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n    }\n}\n```\n\n\n\ndp[1] = dp[1 - weight[0]] + value[0] = 15\ndp[2] = dp[2 - weight[0]] + value[0] = 30\n此时dp[2]就已经是30了，意味着物品0，被放入了两次，所以不能正序遍历\n说白了，当前dp[i]要使用上一层左侧的dp值，正序覆盖了上一层左侧的dp值，倒叙避免了覆盖\n\n倒序遍历：\n  `vector<int> dp(bagWeight + 1, 0);` 原来的初始化是0\ndp[2] = dp[2 - weight[0]] + value[0] = 15\n>倒序计算时，由于 dp 数组初始化为 0，所以 dp[2-1] 为 0，所以 dp[2] 为 15\n\ndp[1] = dp[1 - weight[0]] + value[0] = 15\n\n## 1.5 举例推导dp数组\n一维dp，分别用物品0，物品1，物品2 来遍历背包，最终得到结果如下：\n\n![动态规划-背包问题9](https://img-blog.csdnimg.cn/20210110103614769.png)\n\n\n\n\n\n# 2 代码\n\n```c\nvoid test_1_wei_bag_problem() {\n    vector<int> weight = {1, 3, 4};\n    vector<int> value = {15, 20, 30};\n    int bagWeight = 4;\n\n    // 初始化\n    vector<int> dp(bagWeight + 1, 0);\n    for(int i = 0; i < weight.size(); i++) { // 遍历物品\n        for(int j = bagWeight; j >= weight[i]; j--) { // 遍历背包容量\n            dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n        }\n    }\n    cout << dp[bagWeight] << endl;\n}\n\nint main() {\n    test_1_wei_bag_problem();\n}\n```\n\n一维dp 的01背包，要比二维简洁的多！ 初始化 和 遍历顺序相对简单了，**空间复杂度还降了一个数量级**\n推荐用一维数组\n\n\n# 3 总结\n\n## 3.1 面试问题\n要求先实现一个纯二维的01背包,如果写出来了,然后再问为什么两个for循环的嵌套顺序这么写?反过来写行不行 #card \n第一种是先物品后背包的遍历，根据状态转移方程可得，当前值由该位置的上方和左上上方来确定，首先初始化了第一行和第一列的值，这种先物品后背包的方式，是从左到右的一个个行遍历赋值。遍历到`dp[i][j]`时，它的上方和左上方都赋值完毕，可以推导出来\n第二种是先背包后物品的遍历，遍历方式是从上到下的一列一列的遍历赋值。遍历到`dp[i][j]`时，它的整个左部分都赋值完毕，上方也赋值了。同理可推导出来。\n所以反过来写是可以的\n\n\n\n\n\n[[讲一讲01背包初始化的逻辑。]]\n\n\n一维数组的01背包，两个for循环的顺序反过来写行不行 #card #疑问 \n不行，\n\n\n注意以上问题都是在候选人把代码写出来的情况下才问的。\n\n\n\n\n\n\n---\n**参考资料**\n自用跳转链接：🈚\n[滚动数组详解_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1dZ4y1u7ZT?spm_id_from=333.337.search-card.all.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n\n\n[[测试deck]]\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/12.0-1背包理论基础（二）","published":1,"updated":"2022-08-08T14:48:00.014Z","_id":"cl6ku8fjh004xe0mgear7dhyc","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-滚动数组思路\"><a class=\"markdownIt-Anchor\" href=\"#1-滚动数组思路\"></a> 1 滚动数组思路</h1>\n<p>滚动数组，就是把二维dp降为一维dp<br>\n<strong>如果把dp[i - 1]那一层拷贝到dp[i]上，表达式完全可以是：<code>dp[i][j] = max(dp[i][j], dp[i][j - weight[i]] + value[i]);</code></strong></p>\n<blockquote>\n<p>上一次的i,j 的值存在max里边，不断的比较得到最大值</p>\n</blockquote>\n<p>滚动数组：在同一层中，不断的进行覆盖然后刷新</p>\n<p>动规五部曲分析如下：</p>\n<h2 id=\"11-确定dp数组的定义\"><a class=\"markdownIt-Anchor\" href=\"#11-确定dp数组的定义\"></a> 1.1 确定dp数组的定义</h2>\n<p>dp[j]：容量为j的背包，所背的物品价值可以最大为dp[j]。</p>\n<h2 id=\"12-一维dp数组的递推公式\"><a class=\"markdownIt-Anchor\" href=\"#12-一维dp数组的递推公式\"></a> 1.2 一维dp数组的递推公式</h2>\n<p>整体思路： 想想如何从前面的数推过来</p>\n<p>dp[j]有两个选择，<br>\n不放物品i：dp[j]， 未覆盖的值</p>\n<p>放物品i：dp[j - weight[i]] + value[i]，覆盖后的值<br>\n(总重量 - 要放物品的重量)的最大价值+要放物品的价值<br>\n除去要放物品的背包 的价值 + 要放物品的价值<br>\nQ：万一放不了呢，之前二维数组是有一个判断语句，一维中没有啊？<br>\nA：<code>for(int j = bagWeight; j &gt;= weight[i]; j--)</code>。一维中也有判断语句，进入for循环的条件是背包容量大于所放物品i的重量</p>\n<figure class=\"highlight inform7\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs inform7\">dp<span class=\"hljs-comment\">[j]</span> = max(dp<span class=\"hljs-comment\">[j]</span>, dp<span class=\"hljs-comment\">[j - weight<span class=\"hljs-comment\">[i]</span>]</span> + value<span class=\"hljs-comment\">[i]</span>);<br></code></pre></td></tr></tbody></table></figure>\n<h2 id=\"13-一维dp数组如何初始化\"><a class=\"markdownIt-Anchor\" href=\"#13-一维dp数组如何初始化\"></a> 1.3 一维dp数组如何初始化</h2>\n<p>dp[0]=0：背包容量为0所背的物品的最大价值是0<br>\n其他的值都初始为0就行，因为递推公式中会赋值<br>\n不能初始化太大的值，防止取最大值的时候覆盖掉真实结果<br>\n<strong>总结</strong>：其实全部初始化为0即可</p>\n<h2 id=\"14-一维dp数组遍历顺序\"><a class=\"markdownIt-Anchor\" href=\"#14-一维dp数组遍历顺序\"></a> 1.4 一维dp数组遍历顺序</h2>\n<p><strong>只能先物品后背包</strong><br>\n如果顺序被颠倒，那么dp数组中记录的都是一个物品的数值了<br>\n<strong>倒序遍历：保证物品只放入一次</strong><br>\n看下面的例子</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; weight.size(); i++) { <span class=\"hljs-comment\">// 遍历物品，二维数组的行，反复覆盖</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = bagWeight; j &gt;= weight[i]; j--) { <span class=\"hljs-comment\">// j = 背包容量，也不要忘了=（背包容量等于重量时也可以加入的）</span><br>        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<span class=\"hljs-comment\">// 不断更新该行的列向量</span><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure>\n<p>为什么不能正序遍历：例子<br>\n?<br>\n<code>dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);</code><br>\n物品0的重量<strong>weight[0] = 1</strong>，价值<strong>value[0] = 15</strong><br>\n如果正序遍历，此时//  [[for 循环]]</p>\n<p>正序循环中的第二for循环的条件应该怎么写  #card #已解决</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// 先遍历物品，再遍历背包，内层for循环正序遍历</span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; weight.size(); i++) { <span class=\"hljs-comment\">// 遍历物品</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = weight[i]; j &lt;= bagWeight ; j++) { <span class=\"hljs-comment\">// 遍历背包容量</span><br>        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure>\n<p>dp[1] = dp[1 - weight[0]] + value[0] = 15<br>\ndp[2] = dp[2 - weight[0]] + value[0] = 30<br>\n此时dp[2]就已经是30了，意味着物品0，被放入了两次，所以不能正序遍历<br>\n说白了，当前dp[i]要使用上一层左侧的dp值，正序覆盖了上一层左侧的dp值，倒叙避免了覆盖</p>\n<p>倒序遍历：<br>\n<code>vector&lt;int&gt; dp(bagWeight + 1, 0);</code> 原来的初始化是0<br>\ndp[2] = dp[2 - weight[0]] + value[0] = 15</p>\n<blockquote>\n<p>倒序计算时，由于 dp 数组初始化为 0，所以 dp[2-1] 为 0，所以 dp[2] 为 15</p>\n</blockquote>\n<p>dp[1] = dp[1 - weight[0]] + value[0] = 15</p>\n<h2 id=\"15-举例推导dp数组\"><a class=\"markdownIt-Anchor\" href=\"#15-举例推导dp数组\"></a> 1.5 举例推导dp数组</h2>\n<p>一维dp，分别用物品0，物品1，物品2 来遍历背包，最终得到结果如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210110103614769.png\" alt=\"动态规划-背包问题9\"></p>\n<h1 id=\"2-代码\"><a class=\"markdownIt-Anchor\" href=\"#2-代码\"></a> 2 代码</h1>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test_1_wei_bag_problem</span><span class=\"hljs-params\">()</span> {<br>    <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; weight = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>};<br>    <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; value = {<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>};<br>    <span class=\"hljs-type\">int</span> bagWeight = <span class=\"hljs-number\">4</span>;<br><br>    <span class=\"hljs-comment\">// 初始化</span><br>    <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title function_\">dp</span><span class=\"hljs-params\">(bagWeight + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; weight.size(); i++) { <span class=\"hljs-comment\">// 遍历物品</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = bagWeight; j &gt;= weight[i]; j--) { <span class=\"hljs-comment\">// 遍历背包容量</span><br>            dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<br>        }<br>    }<br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; dp[bagWeight] &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>}<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {<br>    test_1_wei_bag_problem();<br>}<br></code></pre></td></tr></tbody></table></figure>\n<p>一维dp 的01背包，要比二维简洁的多！ 初始化 和 遍历顺序相对简单了，<strong>空间复杂度还降了一个数量级</strong><br>\n推荐用一维数组</p>\n<h1 id=\"3-总结\"><a class=\"markdownIt-Anchor\" href=\"#3-总结\"></a> 3 总结</h1>\n<h2 id=\"31-面试问题\"><a class=\"markdownIt-Anchor\" href=\"#31-面试问题\"></a> 3.1 面试问题</h2>\n<p>要求先实现一个纯二维的01背包,如果写出来了,然后再问为什么两个for循环的嵌套顺序这么写?反过来写行不行 #card<br>\n第一种是先物品后背包的遍历，根据状态转移方程可得，当前值由该位置的上方和左上上方来确定，首先初始化了第一行和第一列的值，这种先物品后背包的方式，是从左到右的一个个行遍历赋值。遍历到<code>dp[i][j]</code>时，它的上方和左上方都赋值完毕，可以推导出来<br>\n第二种是先背包后物品的遍历，遍历方式是从上到下的一列一列的遍历赋值。遍历到<code>dp[i][j]</code>时，它的整个左部分都赋值完毕，上方也赋值了。同理可推导出来。<br>\n所以反过来写是可以的</p>\n<p>[[讲一讲01背包初始化的逻辑。]]</p>\n<p>一维数组的01背包，两个for循环的顺序反过来写行不行 #card #疑问<br>\n不行，</p>\n<p>注意以上问题都是在候选人把代码写出来的情况下才问的。</p>\n<hr>\n<p><strong>参考资料</strong><br>\n自用跳转链接：🈚<br>\n<a href=\"https://www.bilibili.com/video/BV1dZ4y1u7ZT?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">滚动数组详解_哔哩哔哩_bilibili</a></p>\n<p>[[测试deck]]</p>\n","site":{"data":{}},"wordcount":2446,"excerpt":"","more":"<h1 id=\"1-滚动数组思路\"><a class=\"markdownIt-Anchor\" href=\"#1-滚动数组思路\"></a> 1 滚动数组思路</h1>\n<p>滚动数组，就是把二维dp降为一维dp<br />\n<strong>如果把dp[i - 1]那一层拷贝到dp[i]上，表达式完全可以是：<code>dp[i][j] = max(dp[i][j], dp[i][j - weight[i]] + value[i]);</code></strong></p>\n<blockquote>\n<p>上一次的i,j 的值存在max里边，不断的比较得到最大值</p>\n</blockquote>\n<p>滚动数组：在同一层中，不断的进行覆盖然后刷新</p>\n<p>动规五部曲分析如下：</p>\n<h2 id=\"11-确定dp数组的定义\"><a class=\"markdownIt-Anchor\" href=\"#11-确定dp数组的定义\"></a> 1.1 确定dp数组的定义</h2>\n<p>dp[j]：容量为j的背包，所背的物品价值可以最大为dp[j]。</p>\n<h2 id=\"12-一维dp数组的递推公式\"><a class=\"markdownIt-Anchor\" href=\"#12-一维dp数组的递推公式\"></a> 1.2 一维dp数组的递推公式</h2>\n<p>整体思路： 想想如何从前面的数推过来</p>\n<p>dp[j]有两个选择，<br />\n不放物品i：dp[j]， 未覆盖的值</p>\n<p>放物品i：dp[j - weight[i]] + value[i]，覆盖后的值<br />\n(总重量 - 要放物品的重量)的最大价值+要放物品的价值<br />\n除去要放物品的背包 的价值 + 要放物品的价值<br />\nQ：万一放不了呢，之前二维数组是有一个判断语句，一维中没有啊？<br />\nA：<code>for(int j = bagWeight; j &gt;= weight[i]; j--)</code>。一维中也有判断语句，进入for循环的条件是背包容量大于所放物品i的重量</p>\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs inform7\">dp<span class=\"hljs-comment\">[j]</span> = max(dp<span class=\"hljs-comment\">[j]</span>, dp<span class=\"hljs-comment\">[j - weight<span class=\"hljs-comment\">[i]</span>]</span> + value<span class=\"hljs-comment\">[i]</span>);<br></code></pre></td></tr></table></figure>\n<h2 id=\"13-一维dp数组如何初始化\"><a class=\"markdownIt-Anchor\" href=\"#13-一维dp数组如何初始化\"></a> 1.3 一维dp数组如何初始化</h2>\n<p>dp[0]=0：背包容量为0所背的物品的最大价值是0<br />\n其他的值都初始为0就行，因为递推公式中会赋值<br />\n不能初始化太大的值，防止取最大值的时候覆盖掉真实结果<br />\n<strong>总结</strong>：其实全部初始化为0即可</p>\n<h2 id=\"14-一维dp数组遍历顺序\"><a class=\"markdownIt-Anchor\" href=\"#14-一维dp数组遍历顺序\"></a> 1.4 一维dp数组遍历顺序</h2>\n<p><strong>只能先物品后背包</strong><br />\n如果顺序被颠倒，那么dp数组中记录的都是一个物品的数值了<br />\n<strong>倒序遍历：保证物品只放入一次</strong><br />\n看下面的例子</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; weight.size(); i++) &#123; <span class=\"hljs-comment\">// 遍历物品，二维数组的行，反复覆盖</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = bagWeight; j &gt;= weight[i]; j--) &#123; <span class=\"hljs-comment\">// j = 背包容量，也不要忘了=（背包容量等于重量时也可以加入的）</span><br>        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<span class=\"hljs-comment\">// 不断更新该行的列向量</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>为什么不能正序遍历：例子<br />\n?<br />\n<code>dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);</code><br />\n物品0的重量<strong>weight[0] = 1</strong>，价值<strong>value[0] = 15</strong><br />\n如果正序遍历，此时//  [[for 循环]]</p>\n<p>正序循环中的第二for循环的条件应该怎么写  #card #已解决</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// 先遍历物品，再遍历背包，内层for循环正序遍历</span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; weight.size(); i++) &#123; <span class=\"hljs-comment\">// 遍历物品</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = weight[i]; j &lt;= bagWeight ; j++) &#123; <span class=\"hljs-comment\">// 遍历背包容量</span><br>        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>dp[1] = dp[1 - weight[0]] + value[0] = 15<br />\ndp[2] = dp[2 - weight[0]] + value[0] = 30<br />\n此时dp[2]就已经是30了，意味着物品0，被放入了两次，所以不能正序遍历<br />\n说白了，当前dp[i]要使用上一层左侧的dp值，正序覆盖了上一层左侧的dp值，倒叙避免了覆盖</p>\n<p>倒序遍历：<br />\n<code>vector&lt;int&gt; dp(bagWeight + 1, 0);</code> 原来的初始化是0<br />\ndp[2] = dp[2 - weight[0]] + value[0] = 15</p>\n<blockquote>\n<p>倒序计算时，由于 dp 数组初始化为 0，所以 dp[2-1] 为 0，所以 dp[2] 为 15</p>\n</blockquote>\n<p>dp[1] = dp[1 - weight[0]] + value[0] = 15</p>\n<h2 id=\"15-举例推导dp数组\"><a class=\"markdownIt-Anchor\" href=\"#15-举例推导dp数组\"></a> 1.5 举例推导dp数组</h2>\n<p>一维dp，分别用物品0，物品1，物品2 来遍历背包，最终得到结果如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210110103614769.png\" alt=\"动态规划-背包问题9\" /></p>\n<h1 id=\"2-代码\"><a class=\"markdownIt-Anchor\" href=\"#2-代码\"></a> 2 代码</h1>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test_1_wei_bag_problem</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; weight = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;;<br>    <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; value = &#123;<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>&#125;;<br>    <span class=\"hljs-type\">int</span> bagWeight = <span class=\"hljs-number\">4</span>;<br><br>    <span class=\"hljs-comment\">// 初始化</span><br>    <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title function_\">dp</span><span class=\"hljs-params\">(bagWeight + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; weight.size(); i++) &#123; <span class=\"hljs-comment\">// 遍历物品</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = bagWeight; j &gt;= weight[i]; j--) &#123; <span class=\"hljs-comment\">// 遍历背包容量</span><br>            dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; dp[bagWeight] &lt;&lt; <span class=\"hljs-built_in\">endl</span>;<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> &#123;<br>    test_1_wei_bag_problem();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>一维dp 的01背包，要比二维简洁的多！ 初始化 和 遍历顺序相对简单了，<strong>空间复杂度还降了一个数量级</strong><br />\n推荐用一维数组</p>\n<h1 id=\"3-总结\"><a class=\"markdownIt-Anchor\" href=\"#3-总结\"></a> 3 总结</h1>\n<h2 id=\"31-面试问题\"><a class=\"markdownIt-Anchor\" href=\"#31-面试问题\"></a> 3.1 面试问题</h2>\n<p>要求先实现一个纯二维的01背包,如果写出来了,然后再问为什么两个for循环的嵌套顺序这么写?反过来写行不行 #card<br />\n第一种是先物品后背包的遍历，根据状态转移方程可得，当前值由该位置的上方和左上上方来确定，首先初始化了第一行和第一列的值，这种先物品后背包的方式，是从左到右的一个个行遍历赋值。遍历到<code>dp[i][j]</code>时，它的上方和左上方都赋值完毕，可以推导出来<br />\n第二种是先背包后物品的遍历，遍历方式是从上到下的一列一列的遍历赋值。遍历到<code>dp[i][j]</code>时，它的整个左部分都赋值完毕，上方也赋值了。同理可推导出来。<br />\n所以反过来写是可以的</p>\n<p>[[讲一讲01背包初始化的逻辑。]]</p>\n<p>一维数组的01背包，两个for循环的顺序反过来写行不行 #card #疑问<br />\n不行，</p>\n<p>注意以上问题都是在候选人把代码写出来的情况下才问的。</p>\n<hr />\n<p><strong>参考资料</strong><br />\n自用跳转链接：🈚<br />\n<a href=\"https://www.bilibili.com/video/BV1dZ4y1u7ZT?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">滚动数组详解_哔哩哔哩_bilibili</a></p>\n<p>[[测试deck]]</p>\n"},{"title":"13.分割等和子集","date":"2022-07-13T07:58:00.000Z","abbrlink":38902,"_content":"\n# 1 分割等和子集\n\n[力扣题目链接](https://leetcode.cn/problems/partition-equal-subset-sum/)\n\n题目难易：中等\n\n给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。\n\n注意: 每个数组中的元素不会超过 100 数组的大小不会超过 200\n\n示例 1: 输入: [1, 5, 11, 5] 输出: true 解释: 数组可以分割成 [1, 5, 5] 和 [11].\n\n示例 2: 输入: [1, 2, 3, 5] 输出: false 解释: 数组不能分割成两个元素和相等的子集.\n\n提示：\n\n-   1 <= nums.length <= 200\n-   1 <= nums[i] <= 100\n\n# 2 思路\n本题是可以用回溯暴力搜索出所有答案的，但最后超时了，也不想再优化了，放弃回溯，直接上01背包吧。\n\n只要找到集合里能够出现 sum / 2 的子集总和，就算是可以分割成两个相同元素和子集了。\n\n背包的总容量为 sum/2，每个物品的价值就是他们数组值(应该是这样咯)\n\n\n\n**只有确定了如下四点，才能把01背包问题套到本题上来。**\n-   背包的体积为sum / 2\n-   背包要放入的物品（集合里的元素）重量为 元素的数值，价值也为元素的数值(重量与价值相等)\n-   背包如果正好装满，说明找到了总和为 sum / 2 的子集。\n-   背包中每一个元素是不可重复放入。(01背包：每个物品只放一次)\n\n1.  确定dp数组以及下的含义\n01背包中，dp[j] 表示： 容量为j的背包，所背的物品最大价值为dp[j]。\n**套到本题，dp[j]表示 背包总容量是j，最大可以凑成j的子集总和为dp[j]**\n\n2.  确定递推公式\ndp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\ndp[j] = max(dp[j], dp[j - nums[i]] + nums[i]);\n\n3. dp数组如何初始化\n全部初始化为0\n```\n// 题目中说：每个数组中的元素不会超过 100，数组的大小不会超过 200\n// 总和不会大于20000，背包最大只需要其中一半，所以10001大小就可以了\nvector<int> dp(10001, 0);\n```\n\n\n4.  确定遍历顺序\n先物品在背包，for循环第二层倒序\n```c\n// 开始 01背包\nfor(int i = 0; i < nums.size(); i++) {\n    for(int j = target; j >= nums[i]; j--) { // 每一个元素一定是不可重复放入，所以从大到小遍历\n        dp[j] = max(dp[j], dp[j - nums[i]] + nums[i]);\n    }\n}\n```\n\n\n5.  举例推导dp数组\n\ndp[j]的数值一定是小于等于j的。因为dp[j]是价值，j是背包容量\n\n**如果dp[j] == j 说明，集合中的子集总和正好可以凑成总和j，即价值=容量，理解这一点很重要。**\n>因为按本题来说：价值等于背包容量\n\n用例1，输入[1,5,11,5] 为例，如图：\n\n![416.分割等和子集2](https://img-blog.csdnimg.cn/20210110104240545.png)\n\n一层一层的，从后往前赋值的\n\n最后dp[11] == 11，说明可以将这个数组分割成两个子集，使得两个子集的元素和相等。\n\n# 代码\n\n编译已通过\n```cpp\nclass Solution {\npublic:\n    bool canPartition(vector<int>& nums) {\n        int sum = 0;\n        int target;\n        vector<int> dp(10001,0);\n        for(int i = 0; i<nums.size(); i++){\n            sum += nums[i];\n        }\n        target = sum/2;\n        for (int i = 0; i < nums.size(); i++){\n            for(int j = target; j >=nums[i]; j--){\n                dp[j] = max(dp[j], dp[j-nums[i]]+nums[i]); \n            }\n        }\n        if (dp[target]==target) return true;\n        return false;\n    }\n};\n```\n\n[13.mp4](file:///Users/yibeikongqiu/Desktop/ishot视频/动态规划/13.分割等和子集.mp4)\n\n参考资料\n---\n自用跳转链接：🈚\n\n\n\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/13.分割等和子集.md","raw":"---\ntitle: 13.分割等和子集\ndate: '2022-07-13 15:58'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 动态规划\ntags:\n  - 动态规划\nabbrlink: 38902\n---\n\n# 1 分割等和子集\n\n[力扣题目链接](https://leetcode.cn/problems/partition-equal-subset-sum/)\n\n题目难易：中等\n\n给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。\n\n注意: 每个数组中的元素不会超过 100 数组的大小不会超过 200\n\n示例 1: 输入: [1, 5, 11, 5] 输出: true 解释: 数组可以分割成 [1, 5, 5] 和 [11].\n\n示例 2: 输入: [1, 2, 3, 5] 输出: false 解释: 数组不能分割成两个元素和相等的子集.\n\n提示：\n\n-   1 <= nums.length <= 200\n-   1 <= nums[i] <= 100\n\n# 2 思路\n本题是可以用回溯暴力搜索出所有答案的，但最后超时了，也不想再优化了，放弃回溯，直接上01背包吧。\n\n只要找到集合里能够出现 sum / 2 的子集总和，就算是可以分割成两个相同元素和子集了。\n\n背包的总容量为 sum/2，每个物品的价值就是他们数组值(应该是这样咯)\n\n\n\n**只有确定了如下四点，才能把01背包问题套到本题上来。**\n-   背包的体积为sum / 2\n-   背包要放入的物品（集合里的元素）重量为 元素的数值，价值也为元素的数值(重量与价值相等)\n-   背包如果正好装满，说明找到了总和为 sum / 2 的子集。\n-   背包中每一个元素是不可重复放入。(01背包：每个物品只放一次)\n\n1.  确定dp数组以及下的含义\n01背包中，dp[j] 表示： 容量为j的背包，所背的物品最大价值为dp[j]。\n**套到本题，dp[j]表示 背包总容量是j，最大可以凑成j的子集总和为dp[j]**\n\n2.  确定递推公式\ndp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\ndp[j] = max(dp[j], dp[j - nums[i]] + nums[i]);\n\n3. dp数组如何初始化\n全部初始化为0\n```\n// 题目中说：每个数组中的元素不会超过 100，数组的大小不会超过 200\n// 总和不会大于20000，背包最大只需要其中一半，所以10001大小就可以了\nvector<int> dp(10001, 0);\n```\n\n\n4.  确定遍历顺序\n先物品在背包，for循环第二层倒序\n```c\n// 开始 01背包\nfor(int i = 0; i < nums.size(); i++) {\n    for(int j = target; j >= nums[i]; j--) { // 每一个元素一定是不可重复放入，所以从大到小遍历\n        dp[j] = max(dp[j], dp[j - nums[i]] + nums[i]);\n    }\n}\n```\n\n\n5.  举例推导dp数组\n\ndp[j]的数值一定是小于等于j的。因为dp[j]是价值，j是背包容量\n\n**如果dp[j] == j 说明，集合中的子集总和正好可以凑成总和j，即价值=容量，理解这一点很重要。**\n>因为按本题来说：价值等于背包容量\n\n用例1，输入[1,5,11,5] 为例，如图：\n\n![416.分割等和子集2](https://img-blog.csdnimg.cn/20210110104240545.png)\n\n一层一层的，从后往前赋值的\n\n最后dp[11] == 11，说明可以将这个数组分割成两个子集，使得两个子集的元素和相等。\n\n# 代码\n\n编译已通过\n```cpp\nclass Solution {\npublic:\n    bool canPartition(vector<int>& nums) {\n        int sum = 0;\n        int target;\n        vector<int> dp(10001,0);\n        for(int i = 0; i<nums.size(); i++){\n            sum += nums[i];\n        }\n        target = sum/2;\n        for (int i = 0; i < nums.size(); i++){\n            for(int j = target; j >=nums[i]; j--){\n                dp[j] = max(dp[j], dp[j-nums[i]]+nums[i]); \n            }\n        }\n        if (dp[target]==target) return true;\n        return false;\n    }\n};\n```\n\n[13.mp4](file:///Users/yibeikongqiu/Desktop/ishot视频/动态规划/13.分割等和子集.mp4)\n\n参考资料\n---\n自用跳转链接：🈚\n\n\n\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/13.分割等和子集","published":1,"updated":"2022-07-28T08:48:13.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjh0050e0mg3sfoe8ht","content":"<h1 id=\"1-分割等和子集\"><a class=\"markdownIt-Anchor\" href=\"#1-分割等和子集\"></a> 1 分割等和子集</h1>\n<p><a href=\"https://leetcode.cn/problems/partition-equal-subset-sum/\">力扣题目链接</a></p>\n<p>题目难易：中等</p>\n<p>给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p>\n<p>注意: 每个数组中的元素不会超过 100 数组的大小不会超过 200</p>\n<p>示例 1: 输入: [1, 5, 11, 5] 输出: true 解释: 数组可以分割成 [1, 5, 5] 和 [11].</p>\n<p>示例&nbsp;2: 输入: [1, 2, 3, 5] 输出: false 解释: 数组不能分割成两个元素和相等的子集.</p>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= nums.length &lt;= 200</li>\n<li>1 &lt;= nums[i] &lt;= 100</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>本题是可以用回溯暴力搜索出所有答案的，但最后超时了，也不想再优化了，放弃回溯，直接上01背包吧。</p>\n<p>只要找到集合里能够出现 sum / 2 的子集总和，就算是可以分割成两个相同元素和子集了。</p>\n<p>背包的总容量为 sum/2，每个物品的价值就是他们数组值(应该是这样咯)</p>\n<p><strong>只有确定了如下四点，才能把01背包问题套到本题上来。</strong></p>\n<ul>\n<li>背包的体积为sum / 2</li>\n<li>背包要放入的物品（集合里的元素）重量为 元素的数值，价值也为元素的数值(重量与价值相等)</li>\n<li>背包如果正好装满，说明找到了总和为 sum / 2 的子集。</li>\n<li>背包中每一个元素是不可重复放入。(01背包：每个物品只放一次)</li>\n</ul>\n<ol>\n<li>\n<p>确定dp数组以及下的含义<br>\n01背包中，dp[j] 表示： 容量为j的背包，所背的物品最大价值为dp[j]。<br>\n<strong>套到本题，dp[j]表示 背包总容量是j，最大可以凑成j的子集总和为dp[j]</strong></p>\n</li>\n<li>\n<p>确定递推公式<br>\ndp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<br>\ndp[j] = max(dp[j], dp[j - nums[i]] + nums[i]);</p>\n</li>\n<li>\n<p>dp数组如何初始化<br>\n全部初始化为0</p>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 题目中说：每个数组中的元素不会超过 100，数组的大小不会超过 200</span><br><span class=\"hljs-comment\">// 总和不会大于20000，背包最大只需要其中一半，所以10001大小就可以了</span><br><span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(<span class=\"hljs-number\">10001</span>, <span class=\"hljs-number\">0</span>)</span></span>;<br></code></pre></td></tr></tbody></table></figure>\n<ol start=\"4\">\n<li>确定遍历顺序<br>\n先物品在背包，for循环第二层倒序</li>\n</ol>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// 开始 01背包</span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.size(); i++) {<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = target; j &gt;= nums[i]; j--) { <span class=\"hljs-comment\">// 每一个元素一定是不可重复放入，所以从大到小遍历</span><br>        dp[j] = max(dp[j], dp[j - nums[i]] + nums[i]);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure>\n<ol start=\"5\">\n<li>举例推导dp数组</li>\n</ol>\n<p>dp[j]的数值一定是小于等于j的。因为dp[j]是价值，j是背包容量</p>\n<p><strong>如果dp[j] == j 说明，集合中的子集总和正好可以凑成总和j，即价值=容量，理解这一点很重要。</strong></p>\n<blockquote>\n<p>因为按本题来说：价值等于背包容量</p>\n</blockquote>\n<p>用例1，输入[1,5,11,5] 为例，如图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210110104240545.png\" alt=\"416.分割等和子集2\"></p>\n<p>一层一层的，从后往前赋值的</p>\n<p>最后dp[11] == 11，说明可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p>\n<h1 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h1>\n<p>编译已通过</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">canPartition</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums)</span> </span>{<br>        <span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> target;<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(<span class=\"hljs-number\">10001</span>,<span class=\"hljs-number\">0</span>)</span></span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i&lt;nums.<span class=\"hljs-built_in\">size</span>(); i++){<br>            sum += nums[i];<br>        }<br>        target = sum/<span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>(); i++){<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = target; j &gt;=nums[i]; j--){<br>                dp[j] = <span class=\"hljs-built_in\">max</span>(dp[j], dp[j-nums[i]]+nums[i]); <br>            }<br>        }<br>        <span class=\"hljs-keyword\">if</span> (dp[target]==target) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<p>[13.mp4](file:///Users/yibeikongqiu/Desktop/ishot视频/动态规划/13.分割等和子集.mp4)</p>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h2>\n<p>自用跳转链接：🈚</p>\n","site":{"data":{}},"wordcount":1674,"excerpt":"","more":"<h1 id=\"1-分割等和子集\"><a class=\"markdownIt-Anchor\" href=\"#1-分割等和子集\"></a> 1 分割等和子集</h1>\n<p><a href=\"https://leetcode.cn/problems/partition-equal-subset-sum/\">力扣题目链接</a></p>\n<p>题目难易：中等</p>\n<p>给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p>\n<p>注意: 每个数组中的元素不会超过 100 数组的大小不会超过 200</p>\n<p>示例 1: 输入: [1, 5, 11, 5] 输出: true 解释: 数组可以分割成 [1, 5, 5] 和 [11].</p>\n<p>示例 2: 输入: [1, 2, 3, 5] 输出: false 解释: 数组不能分割成两个元素和相等的子集.</p>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= nums.length &lt;= 200</li>\n<li>1 &lt;= nums[i] &lt;= 100</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>本题是可以用回溯暴力搜索出所有答案的，但最后超时了，也不想再优化了，放弃回溯，直接上01背包吧。</p>\n<p>只要找到集合里能够出现 sum / 2 的子集总和，就算是可以分割成两个相同元素和子集了。</p>\n<p>背包的总容量为 sum/2，每个物品的价值就是他们数组值(应该是这样咯)</p>\n<p><strong>只有确定了如下四点，才能把01背包问题套到本题上来。</strong></p>\n<ul>\n<li>背包的体积为sum / 2</li>\n<li>背包要放入的物品（集合里的元素）重量为 元素的数值，价值也为元素的数值(重量与价值相等)</li>\n<li>背包如果正好装满，说明找到了总和为 sum / 2 的子集。</li>\n<li>背包中每一个元素是不可重复放入。(01背包：每个物品只放一次)</li>\n</ul>\n<ol>\n<li>\n<p>确定dp数组以及下的含义<br />\n01背包中，dp[j] 表示： 容量为j的背包，所背的物品最大价值为dp[j]。<br />\n<strong>套到本题，dp[j]表示 背包总容量是j，最大可以凑成j的子集总和为dp[j]</strong></p>\n</li>\n<li>\n<p>确定递推公式<br />\ndp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<br />\ndp[j] = max(dp[j], dp[j - nums[i]] + nums[i]);</p>\n</li>\n<li>\n<p>dp数组如何初始化<br />\n全部初始化为0</p>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 题目中说：每个数组中的元素不会超过 100，数组的大小不会超过 200</span><br><span class=\"hljs-comment\">// 总和不会大于20000，背包最大只需要其中一半，所以10001大小就可以了</span><br><span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(<span class=\"hljs-number\">10001</span>, <span class=\"hljs-number\">0</span>)</span></span>;<br></code></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>确定遍历顺序<br />\n先物品在背包，for循环第二层倒序</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// 开始 01背包</span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.size(); i++) &#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = target; j &gt;= nums[i]; j--) &#123; <span class=\"hljs-comment\">// 每一个元素一定是不可重复放入，所以从大到小遍历</span><br>        dp[j] = max(dp[j], dp[j - nums[i]] + nums[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>举例推导dp数组</li>\n</ol>\n<p>dp[j]的数值一定是小于等于j的。因为dp[j]是价值，j是背包容量</p>\n<p><strong>如果dp[j] == j 说明，集合中的子集总和正好可以凑成总和j，即价值=容量，理解这一点很重要。</strong></p>\n<blockquote>\n<p>因为按本题来说：价值等于背包容量</p>\n</blockquote>\n<p>用例1，输入[1,5,11,5] 为例，如图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210110104240545.png\" alt=\"416.分割等和子集2\" /></p>\n<p>一层一层的，从后往前赋值的</p>\n<p>最后dp[11] == 11，说明可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p>\n<h1 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h1>\n<p>编译已通过</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">canPartition</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> target;<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(<span class=\"hljs-number\">10001</span>,<span class=\"hljs-number\">0</span>)</span></span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i&lt;nums.<span class=\"hljs-built_in\">size</span>(); i++)&#123;<br>            sum += nums[i];<br>        &#125;<br>        target = sum/<span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>(); i++)&#123;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = target; j &gt;=nums[i]; j--)&#123;<br>                dp[j] = <span class=\"hljs-built_in\">max</span>(dp[j], dp[j-nums[i]]+nums[i]); <br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (dp[target]==target) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>[13.mp4](file:///Users/yibeikongqiu/Desktop/ishot视频/动态规划/13.分割等和子集.mp4)</p>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h2>\n<p>自用跳转链接：🈚</p>\n"},{"cards-deck":"source::_posts::👨🏻‍💻code::数据结构与算法::代码随想录::动态规划::14.最后一块石头的重量 II 2.md","title":"14.最后一块石头的重量 II","date":"2022-07-19T06:47:00.000Z","excerpt":"文章简介：力扣题解---1049. 最后一块石头的重量 II","abbrlink":62628,"_content":"\n# 1 11049.最后一块石头的重量 II\n\n[力扣题目链接](https://leetcode.cn/problems/last-stone-weight-ii/)\n\n题目难度：中等\n\n有一堆石头，每块石头的重量都是正整数。\n\n每一回合，从中选出任意两块石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x <= y。那么粉碎的可能结果如下：\n\n如果 x == y，那么两块石头都会被完全粉碎； 如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。 最后，最多只会剩下一块石头。返回此石头最小的可能重量。如果没有石头剩下，就返回 0。\n\n示例： 输入：[2,7,4,1,8,1] 输出：1 解释： 组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]， 组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]， 组合 2 和 1，得到 1，所以数组转化为 [1,1,1]， 组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。\n\n提示：\n\n-   1 <= stones.length <= 30\n-   1 <= stones[i] <= 1000\n\n# 2 思路\n1049.最后一块石头的重量 II 为什么能转化为 01背包问题 #card #疑问 #已解决\n自顶向下的考虑，算出所有石头的重量和，如果能分成一半一半，那说明正好可以撞完\n如果不能恰好分成一半一半，让分成的两大块尽量靠近一半。一边大一边小，相减也得到碰撞后的最小重量\n问题就变成了：创造一个sum/2的背包。在这个背包里尽量装满。\n如果背包装的满即表示能分成一半一半，也就是最后能撞完。\n如果没装完，(sum- 装的重量) - 装的重量= half<sup>+</sup>  - half<sup>-</sup> = 相撞后的重量\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220720164608.png)\n\n\n本题物品的重量为store[i]，物品的价值也为store[i]。重量和价值是一样的\n对应着01背包里的物品重量weight[i]和 物品价值value[i]。\n\n1. 确定dp[j]的含义\nj背包下最多可以装dp[j]的重量\n\n2. 递推公式\ndp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n**dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);**\n\n3. dp数组的初始化 #card #疑问\n为什么要要一半\n题目如下要求，最多重量是30000\n-   1 <= stones.length <= 30\n-   1 <= stones[i] <= 1000\n我们只需要计划总重量的一半 \ndp数组的大小为15000，都初始化为0：`vector<int> dp(15001, 0);` 从0开始，要多一位\n\n4. 遍历顺序\n先物品在背包，背包循环倒序\n\n5. 打印dp数组\n举例，输入：[2,4,1,1]，此时target = (2 + 4 + 1 + 1)/2 = 4 ，dp数组状态图如下：\n用store[1]遍历时\ndp[4] = max(dp[4], dp[4 - store[1]]+ store[1]) =max(2, 2+2)\n![1049.最后一块石头的重量II](https://img-blog.csdnimg.cn/20210121115805904.jpg)\n\n\n# 3 代码\n编译已通过\n```c\nclass Solution {\npublic:\n    int lastStoneWeightII(vector<int>& stones) {\n        int sum = 0;\n        vector<int> dp(15001,0); \n        for(int i = 0; i < stones.size(); i++){\n            sum += stones[i];\n        }\n\n        int target = sum / 2;\n        for (int i = 0; i < stones.size(); i++){\n            for (int j = target; j >= stones[i]; j--){\n                dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);\n            }\n        }\n        return (sum - dp[target]) - dp[target];\n    }\n};\n```\n\n# 4 总结\n本题与[[13.分割等和子集]]一个类型，不同之处是前者要求能装多少装多，后者要求正好装满\n\n\n\n\n\n\n\n\n\n\n\n\n**参考资料**\n自用跳转链接：🈚\n[leetcode1049 最后一块石头的重量II 题解_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1G3411E7oX?spm_id_from=333.337.search-card.all.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a)","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/14.最后一块石头的重量 II 2.md","raw":"---\ncards-deck: source::_posts::👨🏻‍💻code::数据结构与算法::代码随想录::动态规划::14.最后一块石头的重量 II 2.md\ntitle: 14.最后一块石头的重量 II\ndate: '2022-07-19 14:47'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 动态规划\nexcerpt: 文章简介：力扣题解---1049. 最后一块石头的重量 II\ntags:\n  - 动态规划\nabbrlink: 62628\n---\n\n# 1 11049.最后一块石头的重量 II\n\n[力扣题目链接](https://leetcode.cn/problems/last-stone-weight-ii/)\n\n题目难度：中等\n\n有一堆石头，每块石头的重量都是正整数。\n\n每一回合，从中选出任意两块石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x <= y。那么粉碎的可能结果如下：\n\n如果 x == y，那么两块石头都会被完全粉碎； 如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。 最后，最多只会剩下一块石头。返回此石头最小的可能重量。如果没有石头剩下，就返回 0。\n\n示例： 输入：[2,7,4,1,8,1] 输出：1 解释： 组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]， 组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]， 组合 2 和 1，得到 1，所以数组转化为 [1,1,1]， 组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。\n\n提示：\n\n-   1 <= stones.length <= 30\n-   1 <= stones[i] <= 1000\n\n# 2 思路\n1049.最后一块石头的重量 II 为什么能转化为 01背包问题 #card #疑问 #已解决\n自顶向下的考虑，算出所有石头的重量和，如果能分成一半一半，那说明正好可以撞完\n如果不能恰好分成一半一半，让分成的两大块尽量靠近一半。一边大一边小，相减也得到碰撞后的最小重量\n问题就变成了：创造一个sum/2的背包。在这个背包里尽量装满。\n如果背包装的满即表示能分成一半一半，也就是最后能撞完。\n如果没装完，(sum- 装的重量) - 装的重量= half<sup>+</sup>  - half<sup>-</sup> = 相撞后的重量\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220720164608.png)\n\n\n本题物品的重量为store[i]，物品的价值也为store[i]。重量和价值是一样的\n对应着01背包里的物品重量weight[i]和 物品价值value[i]。\n\n1. 确定dp[j]的含义\nj背包下最多可以装dp[j]的重量\n\n2. 递推公式\ndp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n**dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);**\n\n3. dp数组的初始化 #card #疑问\n为什么要要一半\n题目如下要求，最多重量是30000\n-   1 <= stones.length <= 30\n-   1 <= stones[i] <= 1000\n我们只需要计划总重量的一半 \ndp数组的大小为15000，都初始化为0：`vector<int> dp(15001, 0);` 从0开始，要多一位\n\n4. 遍历顺序\n先物品在背包，背包循环倒序\n\n5. 打印dp数组\n举例，输入：[2,4,1,1]，此时target = (2 + 4 + 1 + 1)/2 = 4 ，dp数组状态图如下：\n用store[1]遍历时\ndp[4] = max(dp[4], dp[4 - store[1]]+ store[1]) =max(2, 2+2)\n![1049.最后一块石头的重量II](https://img-blog.csdnimg.cn/20210121115805904.jpg)\n\n\n# 3 代码\n编译已通过\n```c\nclass Solution {\npublic:\n    int lastStoneWeightII(vector<int>& stones) {\n        int sum = 0;\n        vector<int> dp(15001,0); \n        for(int i = 0; i < stones.size(); i++){\n            sum += stones[i];\n        }\n\n        int target = sum / 2;\n        for (int i = 0; i < stones.size(); i++){\n            for (int j = target; j >= stones[i]; j--){\n                dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);\n            }\n        }\n        return (sum - dp[target]) - dp[target];\n    }\n};\n```\n\n# 4 总结\n本题与[[13.分割等和子集]]一个类型，不同之处是前者要求能装多少装多，后者要求正好装满\n\n\n\n\n\n\n\n\n\n\n\n\n**参考资料**\n自用跳转链接：🈚\n[leetcode1049 最后一块石头的重量II 题解_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1G3411E7oX?spm_id_from=333.337.search-card.all.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a)","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/14.最后一块石头的重量 II 2","published":1,"updated":"2022-08-08T14:48:20.803Z","_id":"cl6ku8fjh0053e0mgdngp8063","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-11049最后一块石头的重量-ii\"><a class=\"markdownIt-Anchor\" href=\"#1-11049最后一块石头的重量-ii\"></a> 1 11049.最后一块石头的重量 II</h1>\n<p><a href=\"https://leetcode.cn/problems/last-stone-weight-ii/\">力扣题目链接</a></p>\n<p>题目难度：中等</p>\n<p>有一堆石头，每块石头的重量都是正整数。</p>\n<p>每一回合，从中选出任意两块石头，然后将它们一起粉碎。假设石头的重量分别为&nbsp;x 和&nbsp;y，且&nbsp;x &lt;= y。那么粉碎的可能结果如下：</p>\n<p>如果&nbsp;x == y，那么两块石头都会被完全粉碎； 如果&nbsp;x != y，那么重量为&nbsp;x&nbsp;的石头将会完全粉碎，而重量为&nbsp;y&nbsp;的石头新重量为&nbsp;y-x。 最后，最多只会剩下一块石头。返回此石头最小的可能重量。如果没有石头剩下，就返回 0。</p>\n<p>示例： 输入：[2,7,4,1,8,1] 输出：1 解释： 组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]， 组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]， 组合 2 和 1，得到 1，所以数组转化为 [1,1,1]， 组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。</p>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= stones.length &lt;= 30</li>\n<li>1 &lt;= stones[i] &lt;= 1000</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>1049.最后一块石头的重量 II 为什么能转化为 01背包问题 #card #疑问 #已解决<br>\n自顶向下的考虑，算出所有石头的重量和，如果能分成一半一半，那说明正好可以撞完<br>\n如果不能恰好分成一半一半，让分成的两大块尽量靠近一半。一边大一边小，相减也得到碰撞后的最小重量<br>\n问题就变成了：创造一个sum/2的背包。在这个背包里尽量装满。<br>\n如果背包装的满即表示能分成一半一半，也就是最后能撞完。<br>\n如果没装完，(sum- 装的重量) - 装的重量= half<sup>+</sup>  - half<sup>-</sup> = 相撞后的重量<br>\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220720164608.png\" alt=\"\"></p>\n<p>本题物品的重量为store[i]，物品的价值也为store[i]。重量和价值是一样的<br>\n对应着01背包里的物品重量weight[i]和 物品价值value[i]。</p>\n<ol>\n<li>\n<p>确定dp[j]的含义<br>\nj背包下最多可以装dp[j]的重量</p>\n</li>\n<li>\n<p>递推公式<br>\ndp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<br>\n<strong>dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);</strong></p>\n</li>\n<li>\n<p>dp数组的初始化 #card #疑问<br>\n为什么要要一半<br>\n题目如下要求，最多重量是30000</p>\n</li>\n</ol>\n<ul>\n<li>1 &lt;= stones.length &lt;= 30</li>\n<li>1 &lt;= stones[i] &lt;= 1000<br>\n我们只需要计划总重量的一半<br>\ndp数组的大小为15000，都初始化为0：<code>vector&lt;int&gt; dp(15001, 0);</code> 从0开始，要多一位</li>\n</ul>\n<ol start=\"4\">\n<li>\n<p>遍历顺序<br>\n先物品在背包，背包循环倒序</p>\n</li>\n<li>\n<p>打印dp数组<br>\n举例，输入：[2,4,1,1]，此时target = (2 + 4 + 1 + 1)/2 = 4 ，dp数组状态图如下：<br>\n用store[1]遍历时<br>\ndp[4] = max(dp[4], dp[4 - store[1]]+ store[1]) =max(2, 2+2)<br>\n<img src=\"https://img-blog.csdnimg.cn/20210121115805904.jpg\" alt=\"1049.最后一块石头的重量II\"></p>\n</li>\n</ol>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>编译已通过</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> {</span><br>public:<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">lastStoneWeightII</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;&amp; stones)</span> {<br>        <span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title function_\">dp</span><span class=\"hljs-params\">(<span class=\"hljs-number\">15001</span>,<span class=\"hljs-number\">0</span>)</span>; <br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; stones.size(); i++){<br>            sum += stones[i];<br>        }<br><br>        <span class=\"hljs-type\">int</span> target = sum / <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; stones.size(); i++){<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = target; j &gt;= stones[i]; j--){<br>                dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);<br>            }<br>        }<br>        <span class=\"hljs-keyword\">return</span> (sum - dp[target]) - dp[target];<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<h1 id=\"4-总结\"><a class=\"markdownIt-Anchor\" href=\"#4-总结\"></a> 4 总结</h1>\n<p>本题与[[13.分割等和子集]]一个类型，不同之处是前者要求能装多少装多，后者要求正好装满</p>\n<p><strong>参考资料</strong><br>\n自用跳转链接：🈚<br>\n<a href=\"https://www.bilibili.com/video/BV1G3411E7oX?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">leetcode1049 最后一块石头的重量II 题解_哔哩哔哩_bilibili</a></p>\n","site":{"data":{}},"wordcount":1634,"more":"<h1 id=\"1-11049最后一块石头的重量-ii\"><a class=\"markdownIt-Anchor\" href=\"#1-11049最后一块石头的重量-ii\"></a> 1 11049.最后一块石头的重量 II</h1>\n<p><a href=\"https://leetcode.cn/problems/last-stone-weight-ii/\">力扣题目链接</a></p>\n<p>题目难度：中等</p>\n<p>有一堆石头，每块石头的重量都是正整数。</p>\n<p>每一回合，从中选出任意两块石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x &lt;= y。那么粉碎的可能结果如下：</p>\n<p>如果 x == y，那么两块石头都会被完全粉碎； 如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。 最后，最多只会剩下一块石头。返回此石头最小的可能重量。如果没有石头剩下，就返回 0。</p>\n<p>示例： 输入：[2,7,4,1,8,1] 输出：1 解释： 组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]， 组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]， 组合 2 和 1，得到 1，所以数组转化为 [1,1,1]， 组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。</p>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= stones.length &lt;= 30</li>\n<li>1 &lt;= stones[i] &lt;= 1000</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>1049.最后一块石头的重量 II 为什么能转化为 01背包问题 #card #疑问 #已解决<br />\n自顶向下的考虑，算出所有石头的重量和，如果能分成一半一半，那说明正好可以撞完<br />\n如果不能恰好分成一半一半，让分成的两大块尽量靠近一半。一边大一边小，相减也得到碰撞后的最小重量<br />\n问题就变成了：创造一个sum/2的背包。在这个背包里尽量装满。<br />\n如果背包装的满即表示能分成一半一半，也就是最后能撞完。<br />\n如果没装完，(sum- 装的重量) - 装的重量= half<sup>+</sup>  - half<sup>-</sup> = 相撞后的重量<br />\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220720164608.png\" alt=\"\" /></p>\n<p>本题物品的重量为store[i]，物品的价值也为store[i]。重量和价值是一样的<br />\n对应着01背包里的物品重量weight[i]和 物品价值value[i]。</p>\n<ol>\n<li>\n<p>确定dp[j]的含义<br />\nj背包下最多可以装dp[j]的重量</p>\n</li>\n<li>\n<p>递推公式<br />\ndp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<br />\n<strong>dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);</strong></p>\n</li>\n<li>\n<p>dp数组的初始化 #card #疑问<br />\n为什么要要一半<br />\n题目如下要求，最多重量是30000</p>\n</li>\n</ol>\n<ul>\n<li>1 &lt;= stones.length &lt;= 30</li>\n<li>1 &lt;= stones[i] &lt;= 1000<br />\n我们只需要计划总重量的一半<br />\ndp数组的大小为15000，都初始化为0：<code>vector&lt;int&gt; dp(15001, 0);</code> 从0开始，要多一位</li>\n</ul>\n<ol start=\"4\">\n<li>\n<p>遍历顺序<br />\n先物品在背包，背包循环倒序</p>\n</li>\n<li>\n<p>打印dp数组<br />\n举例，输入：[2,4,1,1]，此时target = (2 + 4 + 1 + 1)/2 = 4 ，dp数组状态图如下：<br />\n用store[1]遍历时<br />\ndp[4] = max(dp[4], dp[4 - store[1]]+ store[1]) =max(2, 2+2)<br />\n<img src=\"https://img-blog.csdnimg.cn/20210121115805904.jpg\" alt=\"1049.最后一块石头的重量II\" /></p>\n</li>\n</ol>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>编译已通过</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> &#123;</span><br>public:<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">lastStoneWeightII</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;&amp; stones)</span> &#123;<br>        <span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title function_\">dp</span><span class=\"hljs-params\">(<span class=\"hljs-number\">15001</span>,<span class=\"hljs-number\">0</span>)</span>; <br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; stones.size(); i++)&#123;<br>            sum += stones[i];<br>        &#125;<br><br>        <span class=\"hljs-type\">int</span> target = sum / <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; stones.size(); i++)&#123;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = target; j &gt;= stones[i]; j--)&#123;<br>                dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> (sum - dp[target]) - dp[target];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h1 id=\"4-总结\"><a class=\"markdownIt-Anchor\" href=\"#4-总结\"></a> 4 总结</h1>\n<p>本题与[[13.分割等和子集]]一个类型，不同之处是前者要求能装多少装多，后者要求正好装满</p>\n<p><strong>参考资料</strong><br />\n自用跳转链接：🈚<br />\n<a href=\"https://www.bilibili.com/video/BV1G3411E7oX?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">leetcode1049 最后一块石头的重量II 题解_哔哩哔哩_bilibili</a></p>\n"},{"cards-deck":"source::_posts::👨🏻‍💻code::数据结构与算法::代码随想录::动态规划::14.最后一块石头的重量 II.md","title":"14.最后一块石头的重量 II","date":"2022-07-19T06:47:00.000Z","excerpt":"文章简介：力扣题解---1049. 最后一块石头的重量 II","abbrlink":62628,"_content":" \n# 1 11049.最后一块石头的重量 II\n\n[力扣题目链接](https://leetcode.cn/problems/last-stone-weight-ii/)\n\n题目难度：中等\n\n有一堆石头，每块石头的重量都是正整数。\n\n每一回合，从中选出任意两块石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x <= y。那么粉碎的可能结果如下：\n\n如果 x == y，那么两块石头都会被完全粉碎； 如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。 最后，最多只会剩下一块石头。返回此石头最小的可能重量。如果没有石头剩下，就返回 0。\n\n示例： 输入：[2,7,4,1,8,1] 输出：1 解释： 组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]， 组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]， 组合 2 和 1，得到 1，所以数组转化为 [1,1,1]， 组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。\n\n提示：\n\n-   1 <= stones.length <= 30\n-   1 <= stones[i] <= 1000\n\n# 2 思路\n1049.最后一块石头的重量 II 为什么能转化为 01背包问题 #card  #已解决\n自顶向下的考虑，算出所有石头的重量和，如果能分成一半一半，那说明正好可以撞完\n如果不能恰好分成一半一半，让分成的两大块尽量靠近一半。一边大一边小，相减也得到碰撞后的最小重量\n问题就变成了：创造一个sum/2的背包。在这个背包里尽量装满。\n如果背包装的满即表示能分成一半一半，也就是最后能撞完。\n如果没装完，(sum- 装的重量) - 装的重量= half<sup>+</sup>  - half<sup>-</sup> = 相撞后的重量\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220720164608.png)\n\n\n\n\n\n本题物品的重量为store[i]，物品的价值也为store[i]。重量和价值是一样的\n对应着01背包里的物品重量weight[i]和 物品价值value[i]。\n\n1. 确定dp[j]的含义\nj背包下最多可以装dp[j]的重量\n\n2. 递推公式\ndp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n**dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);**\n\n3. dp数组的初始化 #card #疑问\n为什么要要一半\n题目如下要求，最多重量是30000\n-   1 <= stones.length <= 30\n-   1 <= stones[i] <= 1000\n我们只需要计划总重量的一半 \ndp数组的大小为15000，都初始化为0：`vector<int> dp(15001, 0);` 从0开始，要多一位\n\n\n\n4. 遍历顺序\n先物品在背包，背包循环倒序\n\n5. 打印dp数组\n举例，输入：[2,4,1,1]，此时target = (2 + 4 + 1 + 1)/2 = 4 ，dp数组状态图如下：\n用store[1]遍历时\ndp[4] = max(dp[4], dp[4 - store[1]]+ store[1]) =max(2, 2+2)\n![1049.最后一块石头的重量II](https://img-blog.csdnimg.cn/20210121115805904.jpg)\n\n\n# 3 代码\n编译已通过\n```c\nclass Solution {\npublic:\n    int lastStoneWeightII(vector<int>& stones) {\n        int sum = 0;\n        vector<int> dp(15001,0); \n        for(int i = 0; i < stones.size(); i++){\n            sum += stones[i];\n        }\n\n        int target = sum / 2;\n        for (int i = 0; i < stones.size(); i++){\n            for (int j = target; j >= stones[i]; j--){\n                dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);\n            }\n        }\n        return (sum - dp[target]) - dp[target];\n    }\n};\n```\n\n# 4 总结\n本题与[[13.分割等和子集]]一个类型，不同之处是前者要求能装多少装多，后者要求正好装满\n\n\n\n\n\n\n\n\n\n\n\n\n**参考资料**\n自用跳转链接：🈚\n[leetcode1049 最后一块石头的重量II 题解_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1G3411E7oX?spm_id_from=333.337.search-card.all.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/14.最后一块石头的重量 II.md","raw":"---\ncards-deck: source::_posts::👨🏻‍💻code::数据结构与算法::代码随想录::动态规划::14.最后一块石头的重量 II.md\ntitle: 14.最后一块石头的重量 II\ndate: '2022-07-19 14:47'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 动态规划\nexcerpt: 文章简介：力扣题解---1049. 最后一块石头的重量 II\ntags:\n  - 动态规划\nabbrlink: 62628\n\n\n---\n \n# 1 11049.最后一块石头的重量 II\n\n[力扣题目链接](https://leetcode.cn/problems/last-stone-weight-ii/)\n\n题目难度：中等\n\n有一堆石头，每块石头的重量都是正整数。\n\n每一回合，从中选出任意两块石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x <= y。那么粉碎的可能结果如下：\n\n如果 x == y，那么两块石头都会被完全粉碎； 如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。 最后，最多只会剩下一块石头。返回此石头最小的可能重量。如果没有石头剩下，就返回 0。\n\n示例： 输入：[2,7,4,1,8,1] 输出：1 解释： 组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]， 组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]， 组合 2 和 1，得到 1，所以数组转化为 [1,1,1]， 组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。\n\n提示：\n\n-   1 <= stones.length <= 30\n-   1 <= stones[i] <= 1000\n\n# 2 思路\n1049.最后一块石头的重量 II 为什么能转化为 01背包问题 #card  #已解决\n自顶向下的考虑，算出所有石头的重量和，如果能分成一半一半，那说明正好可以撞完\n如果不能恰好分成一半一半，让分成的两大块尽量靠近一半。一边大一边小，相减也得到碰撞后的最小重量\n问题就变成了：创造一个sum/2的背包。在这个背包里尽量装满。\n如果背包装的满即表示能分成一半一半，也就是最后能撞完。\n如果没装完，(sum- 装的重量) - 装的重量= half<sup>+</sup>  - half<sup>-</sup> = 相撞后的重量\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220720164608.png)\n\n\n\n\n\n本题物品的重量为store[i]，物品的价值也为store[i]。重量和价值是一样的\n对应着01背包里的物品重量weight[i]和 物品价值value[i]。\n\n1. 确定dp[j]的含义\nj背包下最多可以装dp[j]的重量\n\n2. 递推公式\ndp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n**dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);**\n\n3. dp数组的初始化 #card #疑问\n为什么要要一半\n题目如下要求，最多重量是30000\n-   1 <= stones.length <= 30\n-   1 <= stones[i] <= 1000\n我们只需要计划总重量的一半 \ndp数组的大小为15000，都初始化为0：`vector<int> dp(15001, 0);` 从0开始，要多一位\n\n\n\n4. 遍历顺序\n先物品在背包，背包循环倒序\n\n5. 打印dp数组\n举例，输入：[2,4,1,1]，此时target = (2 + 4 + 1 + 1)/2 = 4 ，dp数组状态图如下：\n用store[1]遍历时\ndp[4] = max(dp[4], dp[4 - store[1]]+ store[1]) =max(2, 2+2)\n![1049.最后一块石头的重量II](https://img-blog.csdnimg.cn/20210121115805904.jpg)\n\n\n# 3 代码\n编译已通过\n```c\nclass Solution {\npublic:\n    int lastStoneWeightII(vector<int>& stones) {\n        int sum = 0;\n        vector<int> dp(15001,0); \n        for(int i = 0; i < stones.size(); i++){\n            sum += stones[i];\n        }\n\n        int target = sum / 2;\n        for (int i = 0; i < stones.size(); i++){\n            for (int j = target; j >= stones[i]; j--){\n                dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);\n            }\n        }\n        return (sum - dp[target]) - dp[target];\n    }\n};\n```\n\n# 4 总结\n本题与[[13.分割等和子集]]一个类型，不同之处是前者要求能装多少装多，后者要求正好装满\n\n\n\n\n\n\n\n\n\n\n\n\n**参考资料**\n自用跳转链接：🈚\n[leetcode1049 最后一块石头的重量II 题解_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1G3411E7oX?spm_id_from=333.337.search-card.all.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/14.最后一块石头的重量 II","published":1,"updated":"2022-08-08T14:48:06.748Z","_id":"cl6ku8fji0056e0mgcfi2g20c","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-11049最后一块石头的重量-ii\"><a class=\"markdownIt-Anchor\" href=\"#1-11049最后一块石头的重量-ii\"></a> 1 11049.最后一块石头的重量 II</h1>\n<p><a href=\"https://leetcode.cn/problems/last-stone-weight-ii/\">力扣题目链接</a></p>\n<p>题目难度：中等</p>\n<p>有一堆石头，每块石头的重量都是正整数。</p>\n<p>每一回合，从中选出任意两块石头，然后将它们一起粉碎。假设石头的重量分别为&nbsp;x 和&nbsp;y，且&nbsp;x &lt;= y。那么粉碎的可能结果如下：</p>\n<p>如果&nbsp;x == y，那么两块石头都会被完全粉碎； 如果&nbsp;x != y，那么重量为&nbsp;x&nbsp;的石头将会完全粉碎，而重量为&nbsp;y&nbsp;的石头新重量为&nbsp;y-x。 最后，最多只会剩下一块石头。返回此石头最小的可能重量。如果没有石头剩下，就返回 0。</p>\n<p>示例： 输入：[2,7,4,1,8,1] 输出：1 解释： 组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]， 组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]， 组合 2 和 1，得到 1，所以数组转化为 [1,1,1]， 组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。</p>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= stones.length &lt;= 30</li>\n<li>1 &lt;= stones[i] &lt;= 1000</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>1049.最后一块石头的重量 II 为什么能转化为 01背包问题 #card  #已解决<br>\n自顶向下的考虑，算出所有石头的重量和，如果能分成一半一半，那说明正好可以撞完<br>\n如果不能恰好分成一半一半，让分成的两大块尽量靠近一半。一边大一边小，相减也得到碰撞后的最小重量<br>\n问题就变成了：创造一个sum/2的背包。在这个背包里尽量装满。<br>\n如果背包装的满即表示能分成一半一半，也就是最后能撞完。<br>\n如果没装完，(sum- 装的重量) - 装的重量= half<sup>+</sup>  - half<sup>-</sup> = 相撞后的重量<br>\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220720164608.png\" alt=\"\"></p>\n<p>本题物品的重量为store[i]，物品的价值也为store[i]。重量和价值是一样的<br>\n对应着01背包里的物品重量weight[i]和 物品价值value[i]。</p>\n<ol>\n<li>\n<p>确定dp[j]的含义<br>\nj背包下最多可以装dp[j]的重量</p>\n</li>\n<li>\n<p>递推公式<br>\ndp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<br>\n<strong>dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);</strong></p>\n</li>\n<li>\n<p>dp数组的初始化 #card #疑问<br>\n为什么要要一半<br>\n题目如下要求，最多重量是30000</p>\n</li>\n</ol>\n<ul>\n<li>1 &lt;= stones.length &lt;= 30</li>\n<li>1 &lt;= stones[i] &lt;= 1000<br>\n我们只需要计划总重量的一半<br>\ndp数组的大小为15000，都初始化为0：<code>vector&lt;int&gt; dp(15001, 0);</code> 从0开始，要多一位</li>\n</ul>\n<ol start=\"4\">\n<li>\n<p>遍历顺序<br>\n先物品在背包，背包循环倒序</p>\n</li>\n<li>\n<p>打印dp数组<br>\n举例，输入：[2,4,1,1]，此时target = (2 + 4 + 1 + 1)/2 = 4 ，dp数组状态图如下：<br>\n用store[1]遍历时<br>\ndp[4] = max(dp[4], dp[4 - store[1]]+ store[1]) =max(2, 2+2)<br>\n<img src=\"https://img-blog.csdnimg.cn/20210121115805904.jpg\" alt=\"1049.最后一块石头的重量II\"></p>\n</li>\n</ol>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>编译已通过</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> {</span><br>public:<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">lastStoneWeightII</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;&amp; stones)</span> {<br>        <span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title function_\">dp</span><span class=\"hljs-params\">(<span class=\"hljs-number\">15001</span>,<span class=\"hljs-number\">0</span>)</span>; <br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; stones.size(); i++){<br>            sum += stones[i];<br>        }<br><br>        <span class=\"hljs-type\">int</span> target = sum / <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; stones.size(); i++){<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = target; j &gt;= stones[i]; j--){<br>                dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);<br>            }<br>        }<br>        <span class=\"hljs-keyword\">return</span> (sum - dp[target]) - dp[target];<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<h1 id=\"4-总结\"><a class=\"markdownIt-Anchor\" href=\"#4-总结\"></a> 4 总结</h1>\n<p>本题与[[13.分割等和子集]]一个类型，不同之处是前者要求能装多少装多，后者要求正好装满</p>\n<p><strong>参考资料</strong><br>\n自用跳转链接：🈚<br>\n<a href=\"https://www.bilibili.com/video/BV1G3411E7oX?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">leetcode1049 最后一块石头的重量II 题解_哔哩哔哩_bilibili</a></p>\n","site":{"data":{}},"wordcount":1631,"more":"<h1 id=\"1-11049最后一块石头的重量-ii\"><a class=\"markdownIt-Anchor\" href=\"#1-11049最后一块石头的重量-ii\"></a> 1 11049.最后一块石头的重量 II</h1>\n<p><a href=\"https://leetcode.cn/problems/last-stone-weight-ii/\">力扣题目链接</a></p>\n<p>题目难度：中等</p>\n<p>有一堆石头，每块石头的重量都是正整数。</p>\n<p>每一回合，从中选出任意两块石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x &lt;= y。那么粉碎的可能结果如下：</p>\n<p>如果 x == y，那么两块石头都会被完全粉碎； 如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。 最后，最多只会剩下一块石头。返回此石头最小的可能重量。如果没有石头剩下，就返回 0。</p>\n<p>示例： 输入：[2,7,4,1,8,1] 输出：1 解释： 组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]， 组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]， 组合 2 和 1，得到 1，所以数组转化为 [1,1,1]， 组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。</p>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= stones.length &lt;= 30</li>\n<li>1 &lt;= stones[i] &lt;= 1000</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>1049.最后一块石头的重量 II 为什么能转化为 01背包问题 #card  #已解决<br />\n自顶向下的考虑，算出所有石头的重量和，如果能分成一半一半，那说明正好可以撞完<br />\n如果不能恰好分成一半一半，让分成的两大块尽量靠近一半。一边大一边小，相减也得到碰撞后的最小重量<br />\n问题就变成了：创造一个sum/2的背包。在这个背包里尽量装满。<br />\n如果背包装的满即表示能分成一半一半，也就是最后能撞完。<br />\n如果没装完，(sum- 装的重量) - 装的重量= half<sup>+</sup>  - half<sup>-</sup> = 相撞后的重量<br />\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220720164608.png\" alt=\"\" /></p>\n<p>本题物品的重量为store[i]，物品的价值也为store[i]。重量和价值是一样的<br />\n对应着01背包里的物品重量weight[i]和 物品价值value[i]。</p>\n<ol>\n<li>\n<p>确定dp[j]的含义<br />\nj背包下最多可以装dp[j]的重量</p>\n</li>\n<li>\n<p>递推公式<br />\ndp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<br />\n<strong>dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);</strong></p>\n</li>\n<li>\n<p>dp数组的初始化 #card #疑问<br />\n为什么要要一半<br />\n题目如下要求，最多重量是30000</p>\n</li>\n</ol>\n<ul>\n<li>1 &lt;= stones.length &lt;= 30</li>\n<li>1 &lt;= stones[i] &lt;= 1000<br />\n我们只需要计划总重量的一半<br />\ndp数组的大小为15000，都初始化为0：<code>vector&lt;int&gt; dp(15001, 0);</code> 从0开始，要多一位</li>\n</ul>\n<ol start=\"4\">\n<li>\n<p>遍历顺序<br />\n先物品在背包，背包循环倒序</p>\n</li>\n<li>\n<p>打印dp数组<br />\n举例，输入：[2,4,1,1]，此时target = (2 + 4 + 1 + 1)/2 = 4 ，dp数组状态图如下：<br />\n用store[1]遍历时<br />\ndp[4] = max(dp[4], dp[4 - store[1]]+ store[1]) =max(2, 2+2)<br />\n<img src=\"https://img-blog.csdnimg.cn/20210121115805904.jpg\" alt=\"1049.最后一块石头的重量II\" /></p>\n</li>\n</ol>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>编译已通过</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> &#123;</span><br>public:<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">lastStoneWeightII</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;&amp; stones)</span> &#123;<br>        <span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title function_\">dp</span><span class=\"hljs-params\">(<span class=\"hljs-number\">15001</span>,<span class=\"hljs-number\">0</span>)</span>; <br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; stones.size(); i++)&#123;<br>            sum += stones[i];<br>        &#125;<br><br>        <span class=\"hljs-type\">int</span> target = sum / <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; stones.size(); i++)&#123;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = target; j &gt;= stones[i]; j--)&#123;<br>                dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> (sum - dp[target]) - dp[target];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h1 id=\"4-总结\"><a class=\"markdownIt-Anchor\" href=\"#4-总结\"></a> 4 总结</h1>\n<p>本题与[[13.分割等和子集]]一个类型，不同之处是前者要求能装多少装多，后者要求正好装满</p>\n<p><strong>参考资料</strong><br />\n自用跳转链接：🈚<br />\n<a href=\"https://www.bilibili.com/video/BV1G3411E7oX?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">leetcode1049 最后一块石头的重量II 题解_哔哩哔哩_bilibili</a></p>\n"},{"title":"15.动归周总结","date":"2022-07-20T09:26:00.000Z","excerpt":"文章简介：如题","cards-deck":null,"abbrlink":47640,"_content":"\n\n\n\n\n\n\n\n\n\n\n\n**参考资料**\n---\n自用跳转链接：🈚\n\n\n也添加在11-14的文档中\n\n\n\n\n\n\n\n\n\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/15.动归周总结.md","raw":"---\ntitle: 15.动归周总结\ndate: '2022-07-20 17:26'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 动态规划\nexcerpt: 文章简介：如题\ntags:\n  - 动态规划\ncards-deck: \nabbrlink: 47640\n---\n\n\n\n\n\n\n\n\n\n\n\n\n**参考资料**\n---\n自用跳转链接：🈚\n\n\n也添加在11-14的文档中\n\n\n\n\n\n\n\n\n\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/15.动归周总结","published":1,"updated":"2022-08-04T14:43:39.707Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fji0058e0mgecx36na0","content":"<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> <strong>参考资料</strong></h2>\n<p>自用跳转链接：🈚</p>\n<p>也添加在11-14的文档中</p>\n","site":{"data":{}},"wordcount":26,"more":"<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> <strong>参考资料</strong></h2>\n<p>自用跳转链接：🈚</p>\n<p>也添加在11-14的文档中</p>\n"},{"title":"16.目标和","date":"2022-07-20T09:39:00.000Z","excerpt":"文章简介：力扣题解--- 494. 目标和","abbrlink":60439,"cards-deck":null,"_content":"\n# 1 目标和\n\n[力扣题目链接](https://leetcode.cn/problems/target-sum/)\n\n难度：中等\n\n给定一个非负整数数组，a1, a2, ..., an, 和一个目标数，S。现在你有两个符号 + 和 -。对于数组中的任意一个整数，你都可以从 + 或 -中选择一个符号添加在前面。\n\n返回可以使最终数组和为目标数 S 的所有添加符号的方法数。\n\n示例：\n\n输入：nums: [1, 1, 1, 1, 1], S: 3  \n输出：5\n\n解释：  \n-1+1+1+1+1 = 3  \n+1-1+1+1+1 = 3  \n+1+1-1+1+1 = 3  \n+1+1+1-1+1 = 3  \n+1+1+1+1-1 = 3\n\n一共有5种方法让最终目标和为3。\n\n提示：\n\n-   数组非空，且长度不会超过 20 。\n-   初始的数组的和不会超过 1000 。\n-   保证返回的最终结果能被 32 位整数存下。\n\n# 2 思路\n\n假设加法总和为x， → 减法总和 = sum - x。\n目标和 = 加法总和 - 减法总和 → S = x - (sum - x) \n→ x = (S + sum) / 2\n\n此时化为 ：就是从数组中挑几个数加起来正好等于x \n\n\n**特例判断**\n1. 假设加法和是非整数，即 (S + sum) / 2 除不尽，说明有余数，又因为加法和是整数，有余数不可能符合等号条件。所以：\n```\nif ((S + sum) % 2 == 1) return 0; // 此时没有方案\n```\n2. 同时如果 S的绝对值已经大于sum，那么也是没有方案的。\n```\nif (abs(S) > sum) return 0; // 此时没有方案\n```\n\n动归五部曲\n1. 确定dp[j]的含义\n恰好装满背包容量为j的背包，一共有dp[j]种方法\n\n2. 确定递推公式\n先记住：在**求装满背包有几种方法**的情况下，递推公式一般为： #card #疑问 \n```c\ndp[j] = dp[j] + dp[j - nums[i]];\n```\n^1659000156292\n\n\n3. dp数组的初始化\ndp[0] = 1，显然装满容量为0的背包，有1种方法，就是装0件物品。\ndp[j]其他下标对应的数值应该初始化为0，从递归公式也可以看出`dp[j] = dp[j] + dp[j - nums[i]];`，dp[j]要保证是0的初始值，才能正确的由dp[j - nums[i]]推导出来。\n\n4. 确定遍历顺序\n先物品在背包，背包for循环倒序\n\n5.  举例推导dp数组\n\n输入：nums: [1, 1, 1, 1, 1], S: 3\n\nbagSize = (S + sum) / 2 = (3 + 5) / 2 = 4\n\ndp数组状态变化如下：\n\n![494.目标和](https://img-blog.csdnimg.cn/20210125120743274.jpg)\n\n\n\n# 3 代码\n编译未通过\n```c\nclass Solution {\npublic:\n    int findTargetSumWays(vector<int>& nums, int target) {\n        int bagsize;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) sum += nums[i];\n        bagsize = (sum + target)/2;\n        vector<int> dp(bagsize + 1, 0);\n        dp[0] = 1;\n        if (abs(target) > sum) return 0; // 此时没有方案\n        if ((target + sum) % 2 == 1) return 0; // 此时没有方案\n        \n        for (int i = 0; i < nums.size(); i++){\n            for (int j = bagsize; j >= nums[i]; j--){\n                dp[j] = dp[j] + dp[j - nums[i]];\n        \n            }\n        }\n        return dp[target];\n\n    }\n};\n```\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220720234829.png)\n\n\n\n**参考资料**\n自用跳转链接：🈚\n[代码随想录](https://www.programmercarl.com/0494.%E7%9B%AE%E6%A0%87%E5%92%8C.html#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92)\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/16.目标和(装满背包有多少种方法).md","raw":"---\ntitle: 16.目标和\ndate: '2022-07-20 17:39'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 动态规划\nexcerpt: 文章简介：力扣题解--- 494. 目标和\ntags:\n  - 动态规划\nabbrlink: 60439\ncards-deck: \n---\n\n# 1 目标和\n\n[力扣题目链接](https://leetcode.cn/problems/target-sum/)\n\n难度：中等\n\n给定一个非负整数数组，a1, a2, ..., an, 和一个目标数，S。现在你有两个符号 + 和 -。对于数组中的任意一个整数，你都可以从 + 或 -中选择一个符号添加在前面。\n\n返回可以使最终数组和为目标数 S 的所有添加符号的方法数。\n\n示例：\n\n输入：nums: [1, 1, 1, 1, 1], S: 3  \n输出：5\n\n解释：  \n-1+1+1+1+1 = 3  \n+1-1+1+1+1 = 3  \n+1+1-1+1+1 = 3  \n+1+1+1-1+1 = 3  \n+1+1+1+1-1 = 3\n\n一共有5种方法让最终目标和为3。\n\n提示：\n\n-   数组非空，且长度不会超过 20 。\n-   初始的数组的和不会超过 1000 。\n-   保证返回的最终结果能被 32 位整数存下。\n\n# 2 思路\n\n假设加法总和为x， → 减法总和 = sum - x。\n目标和 = 加法总和 - 减法总和 → S = x - (sum - x) \n→ x = (S + sum) / 2\n\n此时化为 ：就是从数组中挑几个数加起来正好等于x \n\n\n**特例判断**\n1. 假设加法和是非整数，即 (S + sum) / 2 除不尽，说明有余数，又因为加法和是整数，有余数不可能符合等号条件。所以：\n```\nif ((S + sum) % 2 == 1) return 0; // 此时没有方案\n```\n2. 同时如果 S的绝对值已经大于sum，那么也是没有方案的。\n```\nif (abs(S) > sum) return 0; // 此时没有方案\n```\n\n动归五部曲\n1. 确定dp[j]的含义\n恰好装满背包容量为j的背包，一共有dp[j]种方法\n\n2. 确定递推公式\n先记住：在**求装满背包有几种方法**的情况下，递推公式一般为： #card #疑问 \n```c\ndp[j] = dp[j] + dp[j - nums[i]];\n```\n^1659000156292\n\n\n3. dp数组的初始化\ndp[0] = 1，显然装满容量为0的背包，有1种方法，就是装0件物品。\ndp[j]其他下标对应的数值应该初始化为0，从递归公式也可以看出`dp[j] = dp[j] + dp[j - nums[i]];`，dp[j]要保证是0的初始值，才能正确的由dp[j - nums[i]]推导出来。\n\n4. 确定遍历顺序\n先物品在背包，背包for循环倒序\n\n5.  举例推导dp数组\n\n输入：nums: [1, 1, 1, 1, 1], S: 3\n\nbagSize = (S + sum) / 2 = (3 + 5) / 2 = 4\n\ndp数组状态变化如下：\n\n![494.目标和](https://img-blog.csdnimg.cn/20210125120743274.jpg)\n\n\n\n# 3 代码\n编译未通过\n```c\nclass Solution {\npublic:\n    int findTargetSumWays(vector<int>& nums, int target) {\n        int bagsize;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) sum += nums[i];\n        bagsize = (sum + target)/2;\n        vector<int> dp(bagsize + 1, 0);\n        dp[0] = 1;\n        if (abs(target) > sum) return 0; // 此时没有方案\n        if ((target + sum) % 2 == 1) return 0; // 此时没有方案\n        \n        for (int i = 0; i < nums.size(); i++){\n            for (int j = bagsize; j >= nums[i]; j--){\n                dp[j] = dp[j] + dp[j - nums[i]];\n        \n            }\n        }\n        return dp[target];\n\n    }\n};\n```\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220720234829.png)\n\n\n\n**参考资料**\n自用跳转链接：🈚\n[代码随想录](https://www.programmercarl.com/0494.%E7%9B%AE%E6%A0%87%E5%92%8C.html#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92)\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/16.目标和(装满背包有多少种方法)","published":1,"updated":"2022-08-04T14:44:53.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjj005ce0mg6lpobdnj","content":"<h1 id=\"1-目标和\"><a class=\"markdownIt-Anchor\" href=\"#1-目标和\"></a> 1 目标和</h1>\n<p><a href=\"https://leetcode.cn/problems/target-sum/\">力扣题目链接</a></p>\n<p>难度：中等</p>\n<p>给定一个非负整数数组，a1, a2, …, an, 和一个目标数，S。现在你有两个符号&nbsp;+&nbsp;和&nbsp;-。对于数组中的任意一个整数，你都可以从&nbsp;+&nbsp;或&nbsp;-中选择一个符号添加在前面。</p>\n<p>返回可以使最终数组和为目标数 S 的所有添加符号的方法数。</p>\n<p>示例：</p>\n<p>输入：nums: [1, 1, 1, 1, 1], S: 3<br>\n输出：5</p>\n<p>解释：<br>\n-1+1+1+1+1 = 3<br>\n+1-1+1+1+1 = 3<br>\n+1+1-1+1+1 = 3<br>\n+1+1+1-1+1 = 3<br>\n+1+1+1+1-1 = 3</p>\n<p>一共有5种方法让最终目标和为3。</p>\n<p>提示：</p>\n<ul>\n<li>数组非空，且长度不会超过 20 。</li>\n<li>初始的数组的和不会超过 1000 。</li>\n<li>保证返回的最终结果能被 32 位整数存下。</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>假设加法总和为x， → 减法总和 = sum - x。<br>\n目标和 = 加法总和 - 减法总和 → S = x - (sum - x)<br>\n→ x = (S + sum) / 2</p>\n<p>此时化为 ：就是从数组中挑几个数加起来正好等于x</p>\n<p><strong>特例判断</strong></p>\n<ol>\n<li>假设加法和是非整数，即 (S + sum) / 2 除不尽，说明有余数，又因为加法和是整数，有余数不可能符合等号条件。所以：</li>\n</ol>\n<figure class=\"highlight apache\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">if</span> ((S + sum) % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>) return <span class=\"hljs-number\">0</span>; // 此时没有方案<br></code></pre></td></tr></tbody></table></figure>\n<ol start=\"2\">\n<li>同时如果 S的绝对值已经大于sum，那么也是没有方案的。</li>\n</ol>\n<figure class=\"highlight arcade\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">abs</span>(S) &gt; <span class=\"hljs-built_in\">sum</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 此时没有方案</span><br></code></pre></td></tr></tbody></table></figure>\n<p>动归五部曲</p>\n<ol>\n<li>\n<p>确定dp[j]的含义<br>\n恰好装满背包容量为j的背包，一共有dp[j]种方法</p>\n</li>\n<li>\n<p>确定递推公式<br>\n先记住：在<strong>求装满背包有几种方法</strong>的情况下，递推公式一般为： #card #疑问</p>\n</li>\n</ol>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">dp[j] = dp[j] + dp[j - nums[i]];<br></code></pre></td></tr></tbody></table></figure>\n<p>^1659000156292</p>\n<ol start=\"3\">\n<li>\n<p>dp数组的初始化<br>\ndp[0] = 1，显然装满容量为0的背包，有1种方法，就是装0件物品。<br>\ndp[j]其他下标对应的数值应该初始化为0，从递归公式也可以看出<code>dp[j] = dp[j] + dp[j - nums[i]];</code>，dp[j]要保证是0的初始值，才能正确的由dp[j - nums[i]]推导出来。</p>\n</li>\n<li>\n<p>确定遍历顺序<br>\n先物品在背包，背包for循环倒序</p>\n</li>\n<li>\n<p>举例推导dp数组</p>\n</li>\n</ol>\n<p>输入：nums: [1, 1, 1, 1, 1], S: 3</p>\n<p>bagSize = (S + sum) / 2 = (3 + 5) / 2 = 4</p>\n<p>dp数组状态变化如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210125120743274.jpg\" alt=\"494.目标和\"></p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>编译未通过</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> {</span><br>public:<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findTargetSumWays</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums, <span class=\"hljs-type\">int</span> target)</span> {<br>        <span class=\"hljs-type\">int</span> bagsize;<br>        <span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.size(); i++) sum += nums[i];<br>        bagsize = (sum + target)/<span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title function_\">dp</span><span class=\"hljs-params\">(bagsize + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)</span>;<br>        dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">abs</span>(target) &gt; sum) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 此时没有方案</span><br>        <span class=\"hljs-keyword\">if</span> ((target + sum) % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 此时没有方案</span><br>        <br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.size(); i++){<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = bagsize; j &gt;= nums[i]; j--){<br>                dp[j] = dp[j] + dp[j - nums[i]];<br>        <br>            }<br>        }<br>        <span class=\"hljs-keyword\">return</span> dp[target];<br><br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220720234829.png\" alt=\"\"></p>\n<p><strong>参考资料</strong><br>\n自用跳转链接：🈚<br>\n<a href=\"https://www.programmercarl.com/0494.%E7%9B%AE%E6%A0%87%E5%92%8C.html#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92\">代码随想录</a></p>\n","site":{"data":{}},"wordcount":1375,"more":"<h1 id=\"1-目标和\"><a class=\"markdownIt-Anchor\" href=\"#1-目标和\"></a> 1 目标和</h1>\n<p><a href=\"https://leetcode.cn/problems/target-sum/\">力扣题目链接</a></p>\n<p>难度：中等</p>\n<p>给定一个非负整数数组，a1, a2, …, an, 和一个目标数，S。现在你有两个符号 + 和 -。对于数组中的任意一个整数，你都可以从 + 或 -中选择一个符号添加在前面。</p>\n<p>返回可以使最终数组和为目标数 S 的所有添加符号的方法数。</p>\n<p>示例：</p>\n<p>输入：nums: [1, 1, 1, 1, 1], S: 3<br />\n输出：5</p>\n<p>解释：<br />\n-1+1+1+1+1 = 3<br />\n+1-1+1+1+1 = 3<br />\n+1+1-1+1+1 = 3<br />\n+1+1+1-1+1 = 3<br />\n+1+1+1+1-1 = 3</p>\n<p>一共有5种方法让最终目标和为3。</p>\n<p>提示：</p>\n<ul>\n<li>数组非空，且长度不会超过 20 。</li>\n<li>初始的数组的和不会超过 1000 。</li>\n<li>保证返回的最终结果能被 32 位整数存下。</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>假设加法总和为x， → 减法总和 = sum - x。<br />\n目标和 = 加法总和 - 减法总和 → S = x - (sum - x)<br />\n→ x = (S + sum) / 2</p>\n<p>此时化为 ：就是从数组中挑几个数加起来正好等于x</p>\n<p><strong>特例判断</strong></p>\n<ol>\n<li>假设加法和是非整数，即 (S + sum) / 2 除不尽，说明有余数，又因为加法和是整数，有余数不可能符合等号条件。所以：</li>\n</ol>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">if</span> ((S + sum) % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>) return <span class=\"hljs-number\">0</span>; // 此时没有方案<br></code></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>同时如果 S的绝对值已经大于sum，那么也是没有方案的。</li>\n</ol>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">abs</span>(S) &gt; <span class=\"hljs-built_in\">sum</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 此时没有方案</span><br></code></pre></td></tr></table></figure>\n<p>动归五部曲</p>\n<ol>\n<li>\n<p>确定dp[j]的含义<br />\n恰好装满背包容量为j的背包，一共有dp[j]种方法</p>\n</li>\n<li>\n<p>确定递推公式<br />\n先记住：在<strong>求装满背包有几种方法</strong>的情况下，递推公式一般为： #card #疑问</p>\n</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">dp[j] = dp[j] + dp[j - nums[i]];<br></code></pre></td></tr></table></figure>\n<p>^1659000156292</p>\n<ol start=\"3\">\n<li>\n<p>dp数组的初始化<br />\ndp[0] = 1，显然装满容量为0的背包，有1种方法，就是装0件物品。<br />\ndp[j]其他下标对应的数值应该初始化为0，从递归公式也可以看出<code>dp[j] = dp[j] + dp[j - nums[i]];</code>，dp[j]要保证是0的初始值，才能正确的由dp[j - nums[i]]推导出来。</p>\n</li>\n<li>\n<p>确定遍历顺序<br />\n先物品在背包，背包for循环倒序</p>\n</li>\n<li>\n<p>举例推导dp数组</p>\n</li>\n</ol>\n<p>输入：nums: [1, 1, 1, 1, 1], S: 3</p>\n<p>bagSize = (S + sum) / 2 = (3 + 5) / 2 = 4</p>\n<p>dp数组状态变化如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210125120743274.jpg\" alt=\"494.目标和\" /></p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>编译未通过</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> &#123;</span><br>public:<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findTargetSumWays</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums, <span class=\"hljs-type\">int</span> target)</span> &#123;<br>        <span class=\"hljs-type\">int</span> bagsize;<br>        <span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.size(); i++) sum += nums[i];<br>        bagsize = (sum + target)/<span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title function_\">dp</span><span class=\"hljs-params\">(bagsize + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)</span>;<br>        dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">abs</span>(target) &gt; sum) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 此时没有方案</span><br>        <span class=\"hljs-keyword\">if</span> ((target + sum) % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 此时没有方案</span><br>        <br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.size(); i++)&#123;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = bagsize; j &gt;= nums[i]; j--)&#123;<br>                dp[j] = dp[j] + dp[j - nums[i]];<br>        <br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> dp[target];<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220720234829.png\" alt=\"\" /></p>\n<p><strong>参考资料</strong><br />\n自用跳转链接：🈚<br />\n<a href=\"https://www.programmercarl.com/0494.%E7%9B%AE%E6%A0%87%E5%92%8C.html#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92\">代码随想录</a></p>\n"},{"title":"17.一和零","date":"2022-07-21T01:45:00.000Z","excerpt":"文章简介：力扣题解--- 474.一和零","abbrlink":31990,"_content":"# 1 474.一和零\n\n[力扣题目链接](https://leetcode.cn/problems/ones-and-zeroes/)\n\n[](https://leetcode.cn/problems/ones-and-zeroes/)\n\n[(opens new window)](https://leetcode.cn/problems/ones-and-zeroes/)\n\n给你一个二进制字符串数组 strs 和两个整数 m 和 n 。\n\n请你找出并返回 strs 的最大子集的大小，该子集中 最多 有 m 个 0 和 n 个 1 。\n\n如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。\n\n示例 1：\n\n输入：strs = [\"10\", \"0001\", \"111001\", \"1\", \"0\"], m = 5, n = 3 输出：4\n\n解释：最多有 5 个 0 和 3 个 1 的最大子集是 {\"10\",\"0001\",\"1\",\"0\"} ，因此答案是 4 。 其他满足题意但较小的子集包括 {\"0001\",\"1\"} 和 {\"10\",\"1\",\"0\"} 。{\"111001\"} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。\n\n示例 2： 输入：strs = [\"10\", \"0\", \"1\"], m = 1, n = 1 输出：2 解释：最大的子集是 {\"0\", \"1\"} ，所以答案是 2 。\n\n提示：\n\n-   1 <= strs.length <= 600\n-   1 <= strs[i].length <= 100\n-   strs[i] 仅由 '0' 和 '1' 组成\n-   1 <= m, n <= 100\n\n\n# 2 思路\n**strs 数组里的元素就是物品，每个物品都是一个！**\n**而m 和 n相当于是一个背包，两个维度的背包**。\n理解成多重背包的同学主要是把m和n混淆为物品了，感觉这是不同数量的物品，所以以为是多重背包。但本题是01背包\n\n动归五部曲\n1. 确定dp[j]含义\n`dp[i][j]`：最多有 i个0 和 j个1的strs的**最大子集的大小**为`dp[i][j]`\n两个背包，一个i，一个j\n\n2. 确定递推公式\n`dp[i][j]` 可以由前一个strs里的字符串推导出来，strs里的字符串有zeroNum个0，oneNum个1。\n\n`dp[i][j]` 就可以是 `dp[i - zeroNum][j - oneNum]` + 1。\n递推公式\ndp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n`dp[i][j] = max(dp[i][j], dp[i - zeroNum][j - oneNum] + 1);`\n对比一下就会发现，字符串的zeroNum和oneNum相当于物品的重量（weight[i]），字符串本身的个数相当于物品的价值（value[i]）。后边1 就是多了所求数组中又多一个元素\n\n3. dp数组初始化\n物品价值不会是负数，初始化为0，保证递推的时候dp[i][j]不会被初始值覆盖。\n\n4. 遍历顺序\n先物品在背包\n物品就是strs里的字符串，背包容量就是题目描述中的m和n。\n这个题是背包有两个维度，内层的for循环有两个，还是倒序遍历\n\n5. 打印dp数组\n以输入：[\"10\",\"0001\",\"111001\",\"1\",\"0\"]，m = 3，n = 3为例\n\n最后dp数组的状态如下所示：\n\n![474.一和零](https://img-blog.csdnimg.cn/20210120111201512.jpg)\n\n\n# 3 代码\n参考：[[for 循环]]\n编译未通过\n```c\nclass Solution {\npublic:\n    int findMaxForm(vector<string>& strs, int m, int n) {\n        vector<vector<int>> dp(m+1,vector<int>(n + 1, 0)) ;\n        for (string str : strs){ // 遍历改位置的字符串\n            int oneNum = 0, zeroNum = 0; // 保证到下一个位置的字符，这些one zero还会初始化为0\n            for(char c : str){ // 遍历字符串的每个字符 此时应该是str,而不是strs\n            if ( c == '0') zeroNum ++;\n            oneNum++; // 得到了该字符串的01数量\n            }\n            for(int i = m; i >= zeroNum; i--){ // 最多能装多少个1\n                for (int j = n; j >= oneNum; j--){ // 最多能装多少个0\n                    dp[i][j] = max(dp[i][j], dp[i - zeroNum][j - oneNum] + 1);\n                    cout<<dp[i][j];\n                }\n            }\n           \n            \n        }\n  \n        return dp[m][n];\n\n    }\n};\n\n```\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220721151503.png)\n\n\n\n\n\n**参考资料**\n\n[代码随想录](https://www.programmercarl.com/0474.%E4%B8%80%E5%92%8C%E9%9B%B6.html#_474-%E4%B8%80%E5%92%8C%E9%9B%B6)","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/17.一和零 2.md","raw":"---\ntitle: 17.一和零\ndate: '2022-07-21 09:45'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 动态规划\nexcerpt: 文章简介：力扣题解--- 474.一和零\ntags:\n  - 动态规划\nabbrlink: 31990\n---\n# 1 474.一和零\n\n[力扣题目链接](https://leetcode.cn/problems/ones-and-zeroes/)\n\n[](https://leetcode.cn/problems/ones-and-zeroes/)\n\n[(opens new window)](https://leetcode.cn/problems/ones-and-zeroes/)\n\n给你一个二进制字符串数组 strs 和两个整数 m 和 n 。\n\n请你找出并返回 strs 的最大子集的大小，该子集中 最多 有 m 个 0 和 n 个 1 。\n\n如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。\n\n示例 1：\n\n输入：strs = [\"10\", \"0001\", \"111001\", \"1\", \"0\"], m = 5, n = 3 输出：4\n\n解释：最多有 5 个 0 和 3 个 1 的最大子集是 {\"10\",\"0001\",\"1\",\"0\"} ，因此答案是 4 。 其他满足题意但较小的子集包括 {\"0001\",\"1\"} 和 {\"10\",\"1\",\"0\"} 。{\"111001\"} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。\n\n示例 2： 输入：strs = [\"10\", \"0\", \"1\"], m = 1, n = 1 输出：2 解释：最大的子集是 {\"0\", \"1\"} ，所以答案是 2 。\n\n提示：\n\n-   1 <= strs.length <= 600\n-   1 <= strs[i].length <= 100\n-   strs[i] 仅由 '0' 和 '1' 组成\n-   1 <= m, n <= 100\n\n\n# 2 思路\n**strs 数组里的元素就是物品，每个物品都是一个！**\n**而m 和 n相当于是一个背包，两个维度的背包**。\n理解成多重背包的同学主要是把m和n混淆为物品了，感觉这是不同数量的物品，所以以为是多重背包。但本题是01背包\n\n动归五部曲\n1. 确定dp[j]含义\n`dp[i][j]`：最多有 i个0 和 j个1的strs的**最大子集的大小**为`dp[i][j]`\n两个背包，一个i，一个j\n\n2. 确定递推公式\n`dp[i][j]` 可以由前一个strs里的字符串推导出来，strs里的字符串有zeroNum个0，oneNum个1。\n\n`dp[i][j]` 就可以是 `dp[i - zeroNum][j - oneNum]` + 1。\n递推公式\ndp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n`dp[i][j] = max(dp[i][j], dp[i - zeroNum][j - oneNum] + 1);`\n对比一下就会发现，字符串的zeroNum和oneNum相当于物品的重量（weight[i]），字符串本身的个数相当于物品的价值（value[i]）。后边1 就是多了所求数组中又多一个元素\n\n3. dp数组初始化\n物品价值不会是负数，初始化为0，保证递推的时候dp[i][j]不会被初始值覆盖。\n\n4. 遍历顺序\n先物品在背包\n物品就是strs里的字符串，背包容量就是题目描述中的m和n。\n这个题是背包有两个维度，内层的for循环有两个，还是倒序遍历\n\n5. 打印dp数组\n以输入：[\"10\",\"0001\",\"111001\",\"1\",\"0\"]，m = 3，n = 3为例\n\n最后dp数组的状态如下所示：\n\n![474.一和零](https://img-blog.csdnimg.cn/20210120111201512.jpg)\n\n\n# 3 代码\n参考：[[for 循环]]\n编译未通过\n```c\nclass Solution {\npublic:\n    int findMaxForm(vector<string>& strs, int m, int n) {\n        vector<vector<int>> dp(m+1,vector<int>(n + 1, 0)) ;\n        for (string str : strs){ // 遍历改位置的字符串\n            int oneNum = 0, zeroNum = 0; // 保证到下一个位置的字符，这些one zero还会初始化为0\n            for(char c : str){ // 遍历字符串的每个字符 此时应该是str,而不是strs\n            if ( c == '0') zeroNum ++;\n            oneNum++; // 得到了该字符串的01数量\n            }\n            for(int i = m; i >= zeroNum; i--){ // 最多能装多少个1\n                for (int j = n; j >= oneNum; j--){ // 最多能装多少个0\n                    dp[i][j] = max(dp[i][j], dp[i - zeroNum][j - oneNum] + 1);\n                    cout<<dp[i][j];\n                }\n            }\n           \n            \n        }\n  \n        return dp[m][n];\n\n    }\n};\n\n```\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220721151503.png)\n\n\n\n\n\n**参考资料**\n\n[代码随想录](https://www.programmercarl.com/0474.%E4%B8%80%E5%92%8C%E9%9B%B6.html#_474-%E4%B8%80%E5%92%8C%E9%9B%B6)","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/17.一和零 2","published":1,"updated":"2022-08-01T11:24:46.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjj005ee0mg4oc8b4ru","content":"<h1 id=\"1-474一和零\"><a class=\"markdownIt-Anchor\" href=\"#1-474一和零\"></a> 1 474.一和零</h1>\n<p><a href=\"https://leetcode.cn/problems/ones-and-zeroes/\">力扣题目链接</a></p>\n<p><a href=\"https://leetcode.cn/problems/ones-and-zeroes/\"></a></p>\n<p><a href=\"https://leetcode.cn/problems/ones-and-zeroes/\">(opens new window)</a></p>\n<p>给你一个二进制字符串数组 strs 和两个整数 m 和 n 。</p>\n<p>请你找出并返回 strs 的最大子集的大小，该子集中 最多 有 m 个 0 和 n 个 1 。</p>\n<p>如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。</p>\n<p>示例 1：</p>\n<p>输入：strs = [“10”, “0001”, “111001”, “1”, “0”], m = 5, n = 3 输出：4</p>\n<p>解释：最多有 5 个 0 和 3 个 1 的最大子集是 {“10”,“0001”,“1”,“0”} ，因此答案是 4 。 其他满足题意但较小的子集包括 {“0001”,“1”} 和 {“10”,“1”,“0”} 。{“111001”} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。</p>\n<p>示例 2： 输入：strs = [“10”, “0”, “1”], m = 1, n = 1 输出：2 解释：最大的子集是 {“0”, “1”} ，所以答案是 2 。</p>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= strs.length &lt;= 600</li>\n<li>1 &lt;= strs[i].length &lt;= 100</li>\n<li>strs[i]&nbsp;仅由&nbsp;‘0’ 和&nbsp;‘1’ 组成</li>\n<li>1 &lt;= m, n &lt;= 100</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p><strong>strs 数组里的元素就是物品，每个物品都是一个！</strong><br>\n<strong>而m 和 n相当于是一个背包，两个维度的背包</strong>。<br>\n理解成多重背包的同学主要是把m和n混淆为物品了，感觉这是不同数量的物品，所以以为是多重背包。但本题是01背包</p>\n<p>动归五部曲</p>\n<ol>\n<li>\n<p>确定dp[j]含义<br>\n<code>dp[i][j]</code>：最多有 i个0 和 j个1的strs的<strong>最大子集的大小</strong>为<code>dp[i][j]</code><br>\n两个背包，一个i，一个j</p>\n</li>\n<li>\n<p>确定递推公式<br>\n<code>dp[i][j]</code> 可以由前一个strs里的字符串推导出来，strs里的字符串有zeroNum个0，oneNum个1。</p>\n</li>\n</ol>\n<p><code>dp[i][j]</code> 就可以是 <code>dp[i - zeroNum][j - oneNum]</code> + 1。<br>\n递推公式<br>\ndp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<br>\n<code>dp[i][j] = max(dp[i][j], dp[i - zeroNum][j - oneNum] + 1);</code><br>\n对比一下就会发现，字符串的zeroNum和oneNum相当于物品的重量（weight[i]），字符串本身的个数相当于物品的价值（value[i]）。后边1 就是多了所求数组中又多一个元素</p>\n<ol start=\"3\">\n<li>\n<p>dp数组初始化<br>\n物品价值不会是负数，初始化为0，保证递推的时候dp[i][j]不会被初始值覆盖。</p>\n</li>\n<li>\n<p>遍历顺序<br>\n先物品在背包<br>\n物品就是strs里的字符串，背包容量就是题目描述中的m和n。<br>\n这个题是背包有两个维度，内层的for循环有两个，还是倒序遍历</p>\n</li>\n<li>\n<p>打印dp数组<br>\n以输入：[“10”,“0001”,“111001”,“1”,“0”]，m = 3，n = 3为例</p>\n</li>\n</ol>\n<p>最后dp数组的状态如下所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210120111201512.jpg\" alt=\"474.一和零\"></p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>参考：[[for 循环]]<br>\n编译未通过</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> {</span><br>public:<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findMaxForm</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">string</span>&gt;&amp; strs, <span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> n)</span> {<br>        <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;&gt; dp(m+<span class=\"hljs-number\">1</span>,<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;(n + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)) ;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">string</span> str : strs){ <span class=\"hljs-comment\">// 遍历改位置的字符串</span><br>            <span class=\"hljs-type\">int</span> oneNum = <span class=\"hljs-number\">0</span>, zeroNum = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 保证到下一个位置的字符，这些one zero还会初始化为0</span><br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">char</span> c : str){ <span class=\"hljs-comment\">// 遍历字符串的每个字符 此时应该是str,而不是strs</span><br>            <span class=\"hljs-keyword\">if</span> ( c == <span class=\"hljs-string\">'0'</span>) zeroNum ++;<br>            oneNum++; <span class=\"hljs-comment\">// 得到了该字符串的01数量</span><br>            }<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = m; i &gt;= zeroNum; i--){ <span class=\"hljs-comment\">// 最多能装多少个1</span><br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = n; j &gt;= oneNum; j--){ <span class=\"hljs-comment\">// 最多能装多少个0</span><br>                    dp[i][j] = max(dp[i][j], dp[i - zeroNum][j - oneNum] + <span class=\"hljs-number\">1</span>);<br>                    <span class=\"hljs-built_in\">cout</span>&lt;&lt;dp[i][j];<br>                }<br>            }<br>           <br>            <br>        }<br>  <br>        <span class=\"hljs-keyword\">return</span> dp[m][n];<br><br>    }<br>};<br><br></code></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220721151503.png\" alt=\"\"></p>\n<p><strong>参考资料</strong></p>\n<p><a href=\"https://www.programmercarl.com/0474.%E4%B8%80%E5%92%8C%E9%9B%B6.html#_474-%E4%B8%80%E5%92%8C%E9%9B%B6\">代码随想录</a></p>\n","site":{"data":{}},"wordcount":1705,"more":"<h1 id=\"1-474一和零\"><a class=\"markdownIt-Anchor\" href=\"#1-474一和零\"></a> 1 474.一和零</h1>\n<p><a href=\"https://leetcode.cn/problems/ones-and-zeroes/\">力扣题目链接</a></p>\n<p><a href=\"https://leetcode.cn/problems/ones-and-zeroes/\"></a></p>\n<p><a href=\"https://leetcode.cn/problems/ones-and-zeroes/\">(opens new window)</a></p>\n<p>给你一个二进制字符串数组 strs 和两个整数 m 和 n 。</p>\n<p>请你找出并返回 strs 的最大子集的大小，该子集中 最多 有 m 个 0 和 n 个 1 。</p>\n<p>如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。</p>\n<p>示例 1：</p>\n<p>输入：strs = [“10”, “0001”, “111001”, “1”, “0”], m = 5, n = 3 输出：4</p>\n<p>解释：最多有 5 个 0 和 3 个 1 的最大子集是 {“10”,“0001”,“1”,“0”} ，因此答案是 4 。 其他满足题意但较小的子集包括 {“0001”,“1”} 和 {“10”,“1”,“0”} 。{“111001”} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。</p>\n<p>示例 2： 输入：strs = [“10”, “0”, “1”], m = 1, n = 1 输出：2 解释：最大的子集是 {“0”, “1”} ，所以答案是 2 。</p>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= strs.length &lt;= 600</li>\n<li>1 &lt;= strs[i].length &lt;= 100</li>\n<li>strs[i] 仅由 ‘0’ 和 ‘1’ 组成</li>\n<li>1 &lt;= m, n &lt;= 100</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p><strong>strs 数组里的元素就是物品，每个物品都是一个！</strong><br />\n<strong>而m 和 n相当于是一个背包，两个维度的背包</strong>。<br />\n理解成多重背包的同学主要是把m和n混淆为物品了，感觉这是不同数量的物品，所以以为是多重背包。但本题是01背包</p>\n<p>动归五部曲</p>\n<ol>\n<li>\n<p>确定dp[j]含义<br />\n<code>dp[i][j]</code>：最多有 i个0 和 j个1的strs的<strong>最大子集的大小</strong>为<code>dp[i][j]</code><br />\n两个背包，一个i，一个j</p>\n</li>\n<li>\n<p>确定递推公式<br />\n<code>dp[i][j]</code> 可以由前一个strs里的字符串推导出来，strs里的字符串有zeroNum个0，oneNum个1。</p>\n</li>\n</ol>\n<p><code>dp[i][j]</code> 就可以是 <code>dp[i - zeroNum][j - oneNum]</code> + 1。<br />\n递推公式<br />\ndp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<br />\n<code>dp[i][j] = max(dp[i][j], dp[i - zeroNum][j - oneNum] + 1);</code><br />\n对比一下就会发现，字符串的zeroNum和oneNum相当于物品的重量（weight[i]），字符串本身的个数相当于物品的价值（value[i]）。后边1 就是多了所求数组中又多一个元素</p>\n<ol start=\"3\">\n<li>\n<p>dp数组初始化<br />\n物品价值不会是负数，初始化为0，保证递推的时候dp[i][j]不会被初始值覆盖。</p>\n</li>\n<li>\n<p>遍历顺序<br />\n先物品在背包<br />\n物品就是strs里的字符串，背包容量就是题目描述中的m和n。<br />\n这个题是背包有两个维度，内层的for循环有两个，还是倒序遍历</p>\n</li>\n<li>\n<p>打印dp数组<br />\n以输入：[“10”,“0001”,“111001”,“1”,“0”]，m = 3，n = 3为例</p>\n</li>\n</ol>\n<p>最后dp数组的状态如下所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210120111201512.jpg\" alt=\"474.一和零\" /></p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>参考：[[for 循环]]<br />\n编译未通过</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> &#123;</span><br>public:<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findMaxForm</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">string</span>&gt;&amp; strs, <span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> n)</span> &#123;<br>        <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;&gt; dp(m+<span class=\"hljs-number\">1</span>,<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;(n + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)) ;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">string</span> str : strs)&#123; <span class=\"hljs-comment\">// 遍历改位置的字符串</span><br>            <span class=\"hljs-type\">int</span> oneNum = <span class=\"hljs-number\">0</span>, zeroNum = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 保证到下一个位置的字符，这些one zero还会初始化为0</span><br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">char</span> c : str)&#123; <span class=\"hljs-comment\">// 遍历字符串的每个字符 此时应该是str,而不是strs</span><br>            <span class=\"hljs-keyword\">if</span> ( c == <span class=\"hljs-string\">&#x27;0&#x27;</span>) zeroNum ++;<br>            oneNum++; <span class=\"hljs-comment\">// 得到了该字符串的01数量</span><br>            &#125;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = m; i &gt;= zeroNum; i--)&#123; <span class=\"hljs-comment\">// 最多能装多少个1</span><br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = n; j &gt;= oneNum; j--)&#123; <span class=\"hljs-comment\">// 最多能装多少个0</span><br>                    dp[i][j] = max(dp[i][j], dp[i - zeroNum][j - oneNum] + <span class=\"hljs-number\">1</span>);<br>                    <span class=\"hljs-built_in\">cout</span>&lt;&lt;dp[i][j];<br>                &#125;<br>            &#125;<br>           <br>            <br>        &#125;<br>  <br>        <span class=\"hljs-keyword\">return</span> dp[m][n];<br><br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220721151503.png\" alt=\"\" /></p>\n<p><strong>参考资料</strong></p>\n<p><a href=\"https://www.programmercarl.com/0474.%E4%B8%80%E5%92%8C%E9%9B%B6.html#_474-%E4%B8%80%E5%92%8C%E9%9B%B6\">代码随想录</a></p>\n"},{"title":"17.一和零","date":"2022-07-21T01:45:00.000Z","excerpt":"文章简介：力扣题解--- 474.一和零","abbrlink":31990,"_content":"# 1 474.一和零\n\n[力扣题目链接](https://leetcode.cn/problems/ones-and-zeroes/)\n\n[](https://leetcode.cn/problems/ones-and-zeroes/)\n\n[(opens new window)](https://leetcode.cn/problems/ones-and-zeroes/)\n\n给你一个二进制字符串数组 strs 和两个整数 m 和 n 。\n\n请你找出并返回 strs 的最大子集的大小，该子集中 最多 有 m 个 0 和 n 个 1 。\n\n如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。\n\n示例 1：\n\n输入：strs = [\"10\", \"0001\", \"111001\", \"1\", \"0\"], m = 5, n = 3 输出：4\n\n解释：最多有 5 个 0 和 3 个 1 的最大子集是 {\"10\",\"0001\",\"1\",\"0\"} ，因此答案是 4 。 其他满足题意但较小的子集包括 {\"0001\",\"1\"} 和 {\"10\",\"1\",\"0\"} 。{\"111001\"} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。\n\n示例 2： 输入：strs = [\"10\", \"0\", \"1\"], m = 1, n = 1 输出：2 解释：最大的子集是 {\"0\", \"1\"} ，所以答案是 2 。\n\n提示：\n\n-   1 <= strs.length <= 600\n-   1 <= strs[i].length <= 100\n-   strs[i] 仅由 '0' 和 '1' 组成\n-   1 <= m, n <= 100\n\n\n# 2 思路\n**strs 数组里的元素就是物品，每个物品都是一个！**\n**而m 和 n相当于是一个背包，两个维度的背包**。\n理解成多重背包的同学主要是把m和n混淆为物品了，感觉这是不同数量的物品，所以以为是多重背包。但本题是01背包\n\n动归五部曲\n1. 确定dp[j]含义\n`dp[i][j]`：最多有 i个0 和 j个1的strs的**最大子集的大小**为`dp[i][j]`\n两个背包，一个i，一个j\n\n2. 确定递推公式\n`dp[i][j]` 可以由前一个strs里的字符串推导出来，strs里的字符串有zeroNum个0，oneNum个1。\n\n`dp[i][j]` 就可以是 `dp[i - zeroNum][j - oneNum]` + 1。\n递推公式\ndp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n`dp[i][j] = max(dp[i][j], dp[i - zeroNum][j - oneNum] + 1);`\n对比一下就会发现，字符串的zeroNum和oneNum相当于物品的重量（weight[i]），字符串本身的个数相当于物品的价值（value[i]）。后边1 就是多了所求数组中又多一个元素\n\n3. dp数组初始化\n物品价值不会是负数，初始化为0，保证递推的时候dp[i][j]不会被初始值覆盖。\n\n4. 遍历顺序\n先物品在背包\n物品就是strs里的字符串，背包容量就是题目描述中的m和n。\n这个题是背包有两个维度，内层的for循环有两个，还是倒序遍历\n\n5. 打印dp数组\n以输入：[\"10\",\"0001\",\"111001\",\"1\",\"0\"]，m = 3，n = 3为例\n\n最后dp数组的状态如下所示：\n\n![474.一和零](https://img-blog.csdnimg.cn/20210120111201512.jpg)\n\n\n# 3 代码\n参考：[[for 循环]]\n编译未通过\n```c\nclass Solution {\npublic:\n    int findMaxForm(vector<string>& strs, int m, int n) {\n        vector<vector<int>> dp(m+1,vector<int>(n + 1, 0)) ;\n        for (string str : strs){ // 遍历改位置的字符串\n            int oneNum = 0, zeroNum = 0; // 保证到下一个位置的字符，这些one zero还会初始化为0\n            for(char c : str){ // 遍历字符串的每个字符 此时应该是str,而不是strs\n            if ( c == '0') zeroNum ++;\n            oneNum++; // 得到了该字符串的01数量\n            }\n            for(int i = m; i >= zeroNum; i--){ // 最多能装多少个1\n                for (int j = n; j >= oneNum; j--){ // 最多能装多少个0\n                    dp[i][j] = max(dp[i][j], dp[i - zeroNum][j - oneNum] + 1);\n                    cout<<dp[i][j];\n                }\n            }\n           \n            \n        }\n  \n        return dp[m][n];\n\n    }\n};\n\n```\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220721151503.png)\n\n\n\n\n\n**参考资料**\n\n[代码随想录](https://www.programmercarl.com/0474.%E4%B8%80%E5%92%8C%E9%9B%B6.html#_474-%E4%B8%80%E5%92%8C%E9%9B%B6)","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/17.一和零.md","raw":"---\ntitle: 17.一和零\ndate: '2022-07-21 09:45'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 动态规划\nexcerpt: 文章简介：力扣题解--- 474.一和零\ntags:\n  - 动态规划\nabbrlink: 31990\n---\n# 1 474.一和零\n\n[力扣题目链接](https://leetcode.cn/problems/ones-and-zeroes/)\n\n[](https://leetcode.cn/problems/ones-and-zeroes/)\n\n[(opens new window)](https://leetcode.cn/problems/ones-and-zeroes/)\n\n给你一个二进制字符串数组 strs 和两个整数 m 和 n 。\n\n请你找出并返回 strs 的最大子集的大小，该子集中 最多 有 m 个 0 和 n 个 1 。\n\n如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。\n\n示例 1：\n\n输入：strs = [\"10\", \"0001\", \"111001\", \"1\", \"0\"], m = 5, n = 3 输出：4\n\n解释：最多有 5 个 0 和 3 个 1 的最大子集是 {\"10\",\"0001\",\"1\",\"0\"} ，因此答案是 4 。 其他满足题意但较小的子集包括 {\"0001\",\"1\"} 和 {\"10\",\"1\",\"0\"} 。{\"111001\"} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。\n\n示例 2： 输入：strs = [\"10\", \"0\", \"1\"], m = 1, n = 1 输出：2 解释：最大的子集是 {\"0\", \"1\"} ，所以答案是 2 。\n\n提示：\n\n-   1 <= strs.length <= 600\n-   1 <= strs[i].length <= 100\n-   strs[i] 仅由 '0' 和 '1' 组成\n-   1 <= m, n <= 100\n\n\n# 2 思路\n**strs 数组里的元素就是物品，每个物品都是一个！**\n**而m 和 n相当于是一个背包，两个维度的背包**。\n理解成多重背包的同学主要是把m和n混淆为物品了，感觉这是不同数量的物品，所以以为是多重背包。但本题是01背包\n\n动归五部曲\n1. 确定dp[j]含义\n`dp[i][j]`：最多有 i个0 和 j个1的strs的**最大子集的大小**为`dp[i][j]`\n两个背包，一个i，一个j\n\n2. 确定递推公式\n`dp[i][j]` 可以由前一个strs里的字符串推导出来，strs里的字符串有zeroNum个0，oneNum个1。\n\n`dp[i][j]` 就可以是 `dp[i - zeroNum][j - oneNum]` + 1。\n递推公式\ndp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n`dp[i][j] = max(dp[i][j], dp[i - zeroNum][j - oneNum] + 1);`\n对比一下就会发现，字符串的zeroNum和oneNum相当于物品的重量（weight[i]），字符串本身的个数相当于物品的价值（value[i]）。后边1 就是多了所求数组中又多一个元素\n\n3. dp数组初始化\n物品价值不会是负数，初始化为0，保证递推的时候dp[i][j]不会被初始值覆盖。\n\n4. 遍历顺序\n先物品在背包\n物品就是strs里的字符串，背包容量就是题目描述中的m和n。\n这个题是背包有两个维度，内层的for循环有两个，还是倒序遍历\n\n5. 打印dp数组\n以输入：[\"10\",\"0001\",\"111001\",\"1\",\"0\"]，m = 3，n = 3为例\n\n最后dp数组的状态如下所示：\n\n![474.一和零](https://img-blog.csdnimg.cn/20210120111201512.jpg)\n\n\n# 3 代码\n参考：[[for 循环]]\n编译未通过\n```c\nclass Solution {\npublic:\n    int findMaxForm(vector<string>& strs, int m, int n) {\n        vector<vector<int>> dp(m+1,vector<int>(n + 1, 0)) ;\n        for (string str : strs){ // 遍历改位置的字符串\n            int oneNum = 0, zeroNum = 0; // 保证到下一个位置的字符，这些one zero还会初始化为0\n            for(char c : str){ // 遍历字符串的每个字符 此时应该是str,而不是strs\n            if ( c == '0') zeroNum ++;\n            oneNum++; // 得到了该字符串的01数量\n            }\n            for(int i = m; i >= zeroNum; i--){ // 最多能装多少个1\n                for (int j = n; j >= oneNum; j--){ // 最多能装多少个0\n                    dp[i][j] = max(dp[i][j], dp[i - zeroNum][j - oneNum] + 1);\n                    cout<<dp[i][j];\n                }\n            }\n           \n            \n        }\n  \n        return dp[m][n];\n\n    }\n};\n\n```\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220721151503.png)\n\n\n\n\n\n**参考资料**\n\n[代码随想录](https://www.programmercarl.com/0474.%E4%B8%80%E5%92%8C%E9%9B%B6.html#_474-%E4%B8%80%E5%92%8C%E9%9B%B6)","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/17.一和零","published":1,"updated":"2022-07-28T02:53:53.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjj005ie0mg47ci7xwo","content":"<h1 id=\"1-474一和零\"><a class=\"markdownIt-Anchor\" href=\"#1-474一和零\"></a> 1 474.一和零</h1>\n<p><a href=\"https://leetcode.cn/problems/ones-and-zeroes/\">力扣题目链接</a></p>\n<p><a href=\"https://leetcode.cn/problems/ones-and-zeroes/\"></a></p>\n<p><a href=\"https://leetcode.cn/problems/ones-and-zeroes/\">(opens new window)</a></p>\n<p>给你一个二进制字符串数组 strs 和两个整数 m 和 n 。</p>\n<p>请你找出并返回 strs 的最大子集的大小，该子集中 最多 有 m 个 0 和 n 个 1 。</p>\n<p>如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。</p>\n<p>示例 1：</p>\n<p>输入：strs = [“10”, “0001”, “111001”, “1”, “0”], m = 5, n = 3 输出：4</p>\n<p>解释：最多有 5 个 0 和 3 个 1 的最大子集是 {“10”,“0001”,“1”,“0”} ，因此答案是 4 。 其他满足题意但较小的子集包括 {“0001”,“1”} 和 {“10”,“1”,“0”} 。{“111001”} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。</p>\n<p>示例 2： 输入：strs = [“10”, “0”, “1”], m = 1, n = 1 输出：2 解释：最大的子集是 {“0”, “1”} ，所以答案是 2 。</p>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= strs.length &lt;= 600</li>\n<li>1 &lt;= strs[i].length &lt;= 100</li>\n<li>strs[i]&nbsp;仅由&nbsp;‘0’ 和&nbsp;‘1’ 组成</li>\n<li>1 &lt;= m, n &lt;= 100</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p><strong>strs 数组里的元素就是物品，每个物品都是一个！</strong><br>\n<strong>而m 和 n相当于是一个背包，两个维度的背包</strong>。<br>\n理解成多重背包的同学主要是把m和n混淆为物品了，感觉这是不同数量的物品，所以以为是多重背包。但本题是01背包</p>\n<p>动归五部曲</p>\n<ol>\n<li>\n<p>确定dp[j]含义<br>\n<code>dp[i][j]</code>：最多有 i个0 和 j个1的strs的<strong>最大子集的大小</strong>为<code>dp[i][j]</code><br>\n两个背包，一个i，一个j</p>\n</li>\n<li>\n<p>确定递推公式<br>\n<code>dp[i][j]</code> 可以由前一个strs里的字符串推导出来，strs里的字符串有zeroNum个0，oneNum个1。</p>\n</li>\n</ol>\n<p><code>dp[i][j]</code> 就可以是 <code>dp[i - zeroNum][j - oneNum]</code> + 1。<br>\n递推公式<br>\ndp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<br>\n<code>dp[i][j] = max(dp[i][j], dp[i - zeroNum][j - oneNum] + 1);</code><br>\n对比一下就会发现，字符串的zeroNum和oneNum相当于物品的重量（weight[i]），字符串本身的个数相当于物品的价值（value[i]）。后边1 就是多了所求数组中又多一个元素</p>\n<ol start=\"3\">\n<li>\n<p>dp数组初始化<br>\n物品价值不会是负数，初始化为0，保证递推的时候dp[i][j]不会被初始值覆盖。</p>\n</li>\n<li>\n<p>遍历顺序<br>\n先物品在背包<br>\n物品就是strs里的字符串，背包容量就是题目描述中的m和n。<br>\n这个题是背包有两个维度，内层的for循环有两个，还是倒序遍历</p>\n</li>\n<li>\n<p>打印dp数组<br>\n以输入：[“10”,“0001”,“111001”,“1”,“0”]，m = 3，n = 3为例</p>\n</li>\n</ol>\n<p>最后dp数组的状态如下所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210120111201512.jpg\" alt=\"474.一和零\"></p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>参考：[[for 循环]]<br>\n编译未通过</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> {</span><br>public:<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findMaxForm</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">string</span>&gt;&amp; strs, <span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> n)</span> {<br>        <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;&gt; dp(m+<span class=\"hljs-number\">1</span>,<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;(n + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)) ;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">string</span> str : strs){ <span class=\"hljs-comment\">// 遍历改位置的字符串</span><br>            <span class=\"hljs-type\">int</span> oneNum = <span class=\"hljs-number\">0</span>, zeroNum = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 保证到下一个位置的字符，这些one zero还会初始化为0</span><br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">char</span> c : str){ <span class=\"hljs-comment\">// 遍历字符串的每个字符 此时应该是str,而不是strs</span><br>            <span class=\"hljs-keyword\">if</span> ( c == <span class=\"hljs-string\">'0'</span>) zeroNum ++;<br>            oneNum++; <span class=\"hljs-comment\">// 得到了该字符串的01数量</span><br>            }<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = m; i &gt;= zeroNum; i--){ <span class=\"hljs-comment\">// 最多能装多少个1</span><br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = n; j &gt;= oneNum; j--){ <span class=\"hljs-comment\">// 最多能装多少个0</span><br>                    dp[i][j] = max(dp[i][j], dp[i - zeroNum][j - oneNum] + <span class=\"hljs-number\">1</span>);<br>                    <span class=\"hljs-built_in\">cout</span>&lt;&lt;dp[i][j];<br>                }<br>            }<br>           <br>            <br>        }<br>  <br>        <span class=\"hljs-keyword\">return</span> dp[m][n];<br><br>    }<br>};<br><br></code></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220721151503.png\" alt=\"\"></p>\n<p><strong>参考资料</strong></p>\n<p><a href=\"https://www.programmercarl.com/0474.%E4%B8%80%E5%92%8C%E9%9B%B6.html#_474-%E4%B8%80%E5%92%8C%E9%9B%B6\">代码随想录</a></p>\n","site":{"data":{}},"wordcount":1705,"more":"<h1 id=\"1-474一和零\"><a class=\"markdownIt-Anchor\" href=\"#1-474一和零\"></a> 1 474.一和零</h1>\n<p><a href=\"https://leetcode.cn/problems/ones-and-zeroes/\">力扣题目链接</a></p>\n<p><a href=\"https://leetcode.cn/problems/ones-and-zeroes/\"></a></p>\n<p><a href=\"https://leetcode.cn/problems/ones-and-zeroes/\">(opens new window)</a></p>\n<p>给你一个二进制字符串数组 strs 和两个整数 m 和 n 。</p>\n<p>请你找出并返回 strs 的最大子集的大小，该子集中 最多 有 m 个 0 和 n 个 1 。</p>\n<p>如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。</p>\n<p>示例 1：</p>\n<p>输入：strs = [“10”, “0001”, “111001”, “1”, “0”], m = 5, n = 3 输出：4</p>\n<p>解释：最多有 5 个 0 和 3 个 1 的最大子集是 {“10”,“0001”,“1”,“0”} ，因此答案是 4 。 其他满足题意但较小的子集包括 {“0001”,“1”} 和 {“10”,“1”,“0”} 。{“111001”} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。</p>\n<p>示例 2： 输入：strs = [“10”, “0”, “1”], m = 1, n = 1 输出：2 解释：最大的子集是 {“0”, “1”} ，所以答案是 2 。</p>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= strs.length &lt;= 600</li>\n<li>1 &lt;= strs[i].length &lt;= 100</li>\n<li>strs[i] 仅由 ‘0’ 和 ‘1’ 组成</li>\n<li>1 &lt;= m, n &lt;= 100</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p><strong>strs 数组里的元素就是物品，每个物品都是一个！</strong><br />\n<strong>而m 和 n相当于是一个背包，两个维度的背包</strong>。<br />\n理解成多重背包的同学主要是把m和n混淆为物品了，感觉这是不同数量的物品，所以以为是多重背包。但本题是01背包</p>\n<p>动归五部曲</p>\n<ol>\n<li>\n<p>确定dp[j]含义<br />\n<code>dp[i][j]</code>：最多有 i个0 和 j个1的strs的<strong>最大子集的大小</strong>为<code>dp[i][j]</code><br />\n两个背包，一个i，一个j</p>\n</li>\n<li>\n<p>确定递推公式<br />\n<code>dp[i][j]</code> 可以由前一个strs里的字符串推导出来，strs里的字符串有zeroNum个0，oneNum个1。</p>\n</li>\n</ol>\n<p><code>dp[i][j]</code> 就可以是 <code>dp[i - zeroNum][j - oneNum]</code> + 1。<br />\n递推公式<br />\ndp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<br />\n<code>dp[i][j] = max(dp[i][j], dp[i - zeroNum][j - oneNum] + 1);</code><br />\n对比一下就会发现，字符串的zeroNum和oneNum相当于物品的重量（weight[i]），字符串本身的个数相当于物品的价值（value[i]）。后边1 就是多了所求数组中又多一个元素</p>\n<ol start=\"3\">\n<li>\n<p>dp数组初始化<br />\n物品价值不会是负数，初始化为0，保证递推的时候dp[i][j]不会被初始值覆盖。</p>\n</li>\n<li>\n<p>遍历顺序<br />\n先物品在背包<br />\n物品就是strs里的字符串，背包容量就是题目描述中的m和n。<br />\n这个题是背包有两个维度，内层的for循环有两个，还是倒序遍历</p>\n</li>\n<li>\n<p>打印dp数组<br />\n以输入：[“10”,“0001”,“111001”,“1”,“0”]，m = 3，n = 3为例</p>\n</li>\n</ol>\n<p>最后dp数组的状态如下所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210120111201512.jpg\" alt=\"474.一和零\" /></p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>参考：[[for 循环]]<br />\n编译未通过</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> &#123;</span><br>public:<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findMaxForm</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">string</span>&gt;&amp; strs, <span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> n)</span> &#123;<br>        <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;&gt; dp(m+<span class=\"hljs-number\">1</span>,<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;(n + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)) ;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">string</span> str : strs)&#123; <span class=\"hljs-comment\">// 遍历改位置的字符串</span><br>            <span class=\"hljs-type\">int</span> oneNum = <span class=\"hljs-number\">0</span>, zeroNum = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 保证到下一个位置的字符，这些one zero还会初始化为0</span><br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">char</span> c : str)&#123; <span class=\"hljs-comment\">// 遍历字符串的每个字符 此时应该是str,而不是strs</span><br>            <span class=\"hljs-keyword\">if</span> ( c == <span class=\"hljs-string\">&#x27;0&#x27;</span>) zeroNum ++;<br>            oneNum++; <span class=\"hljs-comment\">// 得到了该字符串的01数量</span><br>            &#125;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = m; i &gt;= zeroNum; i--)&#123; <span class=\"hljs-comment\">// 最多能装多少个1</span><br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = n; j &gt;= oneNum; j--)&#123; <span class=\"hljs-comment\">// 最多能装多少个0</span><br>                    dp[i][j] = max(dp[i][j], dp[i - zeroNum][j - oneNum] + <span class=\"hljs-number\">1</span>);<br>                    <span class=\"hljs-built_in\">cout</span>&lt;&lt;dp[i][j];<br>                &#125;<br>            &#125;<br>           <br>            <br>        &#125;<br>  <br>        <span class=\"hljs-keyword\">return</span> dp[m][n];<br><br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220721151503.png\" alt=\"\" /></p>\n<p><strong>参考资料</strong></p>\n<p><a href=\"https://www.programmercarl.com/0474.%E4%B8%80%E5%92%8C%E9%9B%B6.html#_474-%E4%B8%80%E5%92%8C%E9%9B%B6\">代码随想录</a></p>\n"},{"cards-deck":"source::_posts::👨🏻‍💻code::数据结构与算法::代码随想录::动态规划::18.完全背包理论基础.md","title":"18.完全背包理论基础","date":"2022-07-21T07:17:00.000Z","abbrlink":10752,"_content":"\n\n\n\n\n\n\n01背包：每个物品只有一个(即只能被添加一次)\n核心代码：先物品后背包，内层倒序(保证物品只被添加一次)\n```c\nfor(int i = 0; i < weight.size(); i++) { // 遍历物品\n    for(int j = bagWeight; j >= weight[i]; j--) { // 遍历背包容量\n        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n    }\n}\n```\n\n\n完全背包：每个物品有无数个(即可以被添加多次)\n核心代码\n```c\n// 先遍历物品，再遍历背包\nfor(int i = 0; i < weight.size(); i++) { // 遍历物品\n    for(int j = weight[i]; j <= bagWeight ; j++) { // 遍历背包容量\n        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);// j从weight[i]开始+，j- weight[]肯定是成立的\n\n    }\n}\n```\n\n\n![|500](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/oly9hwp3.bmp)\n![[18.完全背包理论基础 2022-07-21 15.39.33.excalidraw|600]]\n\n\n是否可以物品和背包的顺序颠倒 #card  #疑问\n01背包中：先物品在背包，背包for循环倒序。只能**先物品在背包**的和**倒序**的原因是，要保证每一个物品只被添加一次\n🌵\n完成背包的含义是物品有无限一个，能够被多次放入。之前的01背包中的限制条件就消失了。即可以先遍历背包后遍历物品，内层for循环也不需要倒序。 \n\n\n\n\n\n\n\n\n\n**参考资料**\n[代码随想录](https://www.programmercarl.com/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85.html#%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85)\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/18.完全背包理论基础.md","raw":"---\ncards-deck: source::_posts::👨🏻‍💻code::数据结构与算法::代码随想录::动态规划::18.完全背包理论基础.md\ntitle: 18.完全背包理论基础\ndate: '2022-07-21 15:17'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 动态规划\ntags:\n  - 动态规划\nabbrlink: 10752\n---\n\n\n\n\n\n\n\n01背包：每个物品只有一个(即只能被添加一次)\n核心代码：先物品后背包，内层倒序(保证物品只被添加一次)\n```c\nfor(int i = 0; i < weight.size(); i++) { // 遍历物品\n    for(int j = bagWeight; j >= weight[i]; j--) { // 遍历背包容量\n        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n    }\n}\n```\n\n\n完全背包：每个物品有无数个(即可以被添加多次)\n核心代码\n```c\n// 先遍历物品，再遍历背包\nfor(int i = 0; i < weight.size(); i++) { // 遍历物品\n    for(int j = weight[i]; j <= bagWeight ; j++) { // 遍历背包容量\n        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);// j从weight[i]开始+，j- weight[]肯定是成立的\n\n    }\n}\n```\n\n\n![|500](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/oly9hwp3.bmp)\n![[18.完全背包理论基础 2022-07-21 15.39.33.excalidraw|600]]\n\n\n是否可以物品和背包的顺序颠倒 #card  #疑问\n01背包中：先物品在背包，背包for循环倒序。只能**先物品在背包**的和**倒序**的原因是，要保证每一个物品只被添加一次\n🌵\n完成背包的含义是物品有无限一个，能够被多次放入。之前的01背包中的限制条件就消失了。即可以先遍历背包后遍历物品，内层for循环也不需要倒序。 \n\n\n\n\n\n\n\n\n\n**参考资料**\n[代码随想录](https://www.programmercarl.com/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85.html#%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85)\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/18.完全背包理论基础","published":1,"updated":"2022-08-08T14:50:42.994Z","_id":"cl6ku8fjk005ke0mg2fw9bm6q","comments":1,"layout":"post","photos":[],"link":"","content":"<p>01背包：每个物品只有一个(即只能被添加一次)<br>\n核心代码：先物品后背包，内层倒序(保证物品只被添加一次)</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; weight.size(); i++) { <span class=\"hljs-comment\">// 遍历物品</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = bagWeight; j &gt;= weight[i]; j--) { <span class=\"hljs-comment\">// 遍历背包容量</span><br>        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure>\n<p>完全背包：每个物品有无数个(即可以被添加多次)<br>\n核心代码</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// 先遍历物品，再遍历背包</span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; weight.size(); i++) { <span class=\"hljs-comment\">// 遍历物品</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = weight[i]; j &lt;= bagWeight ; j++) { <span class=\"hljs-comment\">// 遍历背包容量</span><br>        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<span class=\"hljs-comment\">// j从weight[i]开始+，j- weight[]肯定是成立的</span><br><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/oly9hwp3.bmp\" alt=\"|500\"><br>\n![[18.完全背包理论基础 2022-07-21 15.39.33.excalidraw|600]]</p>\n<p>是否可以物品和背包的顺序颠倒 #card  #疑问<br>\n01背包中：先物品在背包，背包for循环倒序。只能<strong>先物品在背包</strong>的和<strong>倒序</strong>的原因是，要保证每一个物品只被添加一次<br>\n🌵<br>\n完成背包的含义是物品有无限一个，能够被多次放入。之前的01背包中的限制条件就消失了。即可以先遍历背包后遍历物品，内层for循环也不需要倒序。</p>\n<p><strong>参考资料</strong><br>\n<a href=\"https://www.programmercarl.com/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85.html#%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85\">代码随想录</a></p>\n","site":{"data":{}},"wordcount":648,"excerpt":"","more":"<p>01背包：每个物品只有一个(即只能被添加一次)<br />\n核心代码：先物品后背包，内层倒序(保证物品只被添加一次)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; weight.size(); i++) &#123; <span class=\"hljs-comment\">// 遍历物品</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = bagWeight; j &gt;= weight[i]; j--) &#123; <span class=\"hljs-comment\">// 遍历背包容量</span><br>        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>完全背包：每个物品有无数个(即可以被添加多次)<br />\n核心代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">// 先遍历物品，再遍历背包</span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; weight.size(); i++) &#123; <span class=\"hljs-comment\">// 遍历物品</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = weight[i]; j &lt;= bagWeight ; j++) &#123; <span class=\"hljs-comment\">// 遍历背包容量</span><br>        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<span class=\"hljs-comment\">// j从weight[i]开始+，j- weight[]肯定是成立的</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/oly9hwp3.bmp\" alt=\"|500\" /><br />\n![[18.完全背包理论基础 2022-07-21 15.39.33.excalidraw|600]]</p>\n<p>是否可以物品和背包的顺序颠倒 #card  #疑问<br />\n01背包中：先物品在背包，背包for循环倒序。只能<strong>先物品在背包</strong>的和<strong>倒序</strong>的原因是，要保证每一个物品只被添加一次<br />\n🌵<br />\n完成背包的含义是物品有无限一个，能够被多次放入。之前的01背包中的限制条件就消失了。即可以先遍历背包后遍历物品，内层for循环也不需要倒序。</p>\n<p><strong>参考资料</strong><br />\n<a href=\"https://www.programmercarl.com/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85.html#%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85\">代码随想录</a></p>\n"},{"title":"16.目标和","date":"2022-07-20T09:39:00.000Z","excerpt":"文章简介：力扣题解--- 494. 目标和","abbrlink":60439,"_content":"\n# 1 目标和\n\n[力扣题目链接](https://leetcode.cn/problems/target-sum/)\n\n难度：中等\n\n给定一个非负整数数组，a1, a2, ..., an, 和一个目标数，S。现在你有两个符号 + 和 -。对于数组中的任意一个整数，你都可以从 + 或 -中选择一个符号添加在前面。\n\n返回可以使最终数组和为目标数 S 的所有添加符号的方法数。\n\n示例：\n\n输入：nums: [1, 1, 1, 1, 1], S: 3  \n输出：5\n\n解释：  \n-1+1+1+1+1 = 3  \n+1-1+1+1+1 = 3  \n+1+1-1+1+1 = 3  \n+1+1+1-1+1 = 3  \n+1+1+1+1-1 = 3\n\n一共有5种方法让最终目标和为3。\n\n提示：\n\n-   数组非空，且长度不会超过 20 。\n-   初始的数组的和不会超过 1000 。\n-   保证返回的最终结果能被 32 位整数存下。\n\n# 2 思路\n\n假设加法总和为x， → 减法总和 = sum - x。\n目标和 = 加法总和 - 减法总和 → S = x - (sum - x) \n→ x = (S + sum) / 2\n\n此时化为 ：就是从数组中挑几个数加起来正好等于x \n\n\n**特例判断**\n1. 假设加法和是非整数，即 (S + sum) / 2 除不尽，说明有余数，又因为加法和是整数，有余数不可能符合等号条件。所以：\n```\nif ((S + sum) % 2 == 1) return 0; // 此时没有方案\n```\n2. 同时如果 S的绝对值已经大于sum，那么也是没有方案的。\n```\nif (abs(S) > sum) return 0; // 此时没有方案\n```\n\n动归五部曲\n1. 确定dp[j]的含义\n恰好装满背包容量为j的背包，一共有dp[j]种方法\n\n2. 确定递推公式\n先记住：在**求装满背包有几种方法**的情况下，递推公式一般为： #card #疑问 \n```c\ndp[j] = dp[j] + dp[j - nums[i]];\n```\n\n\n3. dp数组的初始化\ndp[0] = 1，显然装满容量为0的背包，有1种方法，就是装0件物品。\ndp[j]其他下标对应的数值应该初始化为0，从递归公式也可以看出`dp[j] = dp[j] + dp[j - nums[i]];`，dp[j]要保证是0的初始值，才能正确的由dp[j - nums[i]]推导出来。\n\n4. 确定遍历顺序\n先物品在背包，背包for循环倒序\n\n5.  举例推导dp数组\n\n输入：nums: [1, 1, 1, 1, 1], S: 3\n\nbagSize = (S + sum) / 2 = (3 + 5) / 2 = 4\n\ndp数组状态变化如下：\n\n![494.目标和](https://img-blog.csdnimg.cn/20210125120743274.jpg)\n\n\n\n# 3 代码\n编译未通过\n```c\nclass Solution {\npublic:\n    int findTargetSumWays(vector<int>& nums, int target) {\n        int bagsize;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) sum += nums[i];\n        bagsize = (sum + target)/2;\n        vector<int> dp(bagsize + 1, 0);\n        dp[0] = 1;\n        if (abs(target) > sum) return 0; // 此时没有方案\n        if ((target + sum) % 2 == 1) return 0; // 此时没有方案\n        \n        for (int i = 0; i < nums.size(); i++){\n            for (int j = bagsize; j >= nums[i]; j--){\n                dp[j] = dp[j] + dp[j - nums[i]];\n        \n            }\n        }\n        return dp[target];\n\n    }\n};\n```\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220720234829.png)\n\n\n\n**参考资料**\n自用跳转链接：🈚\n[代码随想录](https://www.programmercarl.com/0494.%E7%9B%AE%E6%A0%87%E5%92%8C.html#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92)","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/16.目标和(装满背包有多少种方法) 2.md","raw":"---\ntitle: 16.目标和\ndate: '2022-07-20 17:39'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 动态规划\nexcerpt: 文章简介：力扣题解--- 494. 目标和\ntags:\n  - 动态规划\nabbrlink: 60439\n---\n\n# 1 目标和\n\n[力扣题目链接](https://leetcode.cn/problems/target-sum/)\n\n难度：中等\n\n给定一个非负整数数组，a1, a2, ..., an, 和一个目标数，S。现在你有两个符号 + 和 -。对于数组中的任意一个整数，你都可以从 + 或 -中选择一个符号添加在前面。\n\n返回可以使最终数组和为目标数 S 的所有添加符号的方法数。\n\n示例：\n\n输入：nums: [1, 1, 1, 1, 1], S: 3  \n输出：5\n\n解释：  \n-1+1+1+1+1 = 3  \n+1-1+1+1+1 = 3  \n+1+1-1+1+1 = 3  \n+1+1+1-1+1 = 3  \n+1+1+1+1-1 = 3\n\n一共有5种方法让最终目标和为3。\n\n提示：\n\n-   数组非空，且长度不会超过 20 。\n-   初始的数组的和不会超过 1000 。\n-   保证返回的最终结果能被 32 位整数存下。\n\n# 2 思路\n\n假设加法总和为x， → 减法总和 = sum - x。\n目标和 = 加法总和 - 减法总和 → S = x - (sum - x) \n→ x = (S + sum) / 2\n\n此时化为 ：就是从数组中挑几个数加起来正好等于x \n\n\n**特例判断**\n1. 假设加法和是非整数，即 (S + sum) / 2 除不尽，说明有余数，又因为加法和是整数，有余数不可能符合等号条件。所以：\n```\nif ((S + sum) % 2 == 1) return 0; // 此时没有方案\n```\n2. 同时如果 S的绝对值已经大于sum，那么也是没有方案的。\n```\nif (abs(S) > sum) return 0; // 此时没有方案\n```\n\n动归五部曲\n1. 确定dp[j]的含义\n恰好装满背包容量为j的背包，一共有dp[j]种方法\n\n2. 确定递推公式\n先记住：在**求装满背包有几种方法**的情况下，递推公式一般为： #card #疑问 \n```c\ndp[j] = dp[j] + dp[j - nums[i]];\n```\n\n\n3. dp数组的初始化\ndp[0] = 1，显然装满容量为0的背包，有1种方法，就是装0件物品。\ndp[j]其他下标对应的数值应该初始化为0，从递归公式也可以看出`dp[j] = dp[j] + dp[j - nums[i]];`，dp[j]要保证是0的初始值，才能正确的由dp[j - nums[i]]推导出来。\n\n4. 确定遍历顺序\n先物品在背包，背包for循环倒序\n\n5.  举例推导dp数组\n\n输入：nums: [1, 1, 1, 1, 1], S: 3\n\nbagSize = (S + sum) / 2 = (3 + 5) / 2 = 4\n\ndp数组状态变化如下：\n\n![494.目标和](https://img-blog.csdnimg.cn/20210125120743274.jpg)\n\n\n\n# 3 代码\n编译未通过\n```c\nclass Solution {\npublic:\n    int findTargetSumWays(vector<int>& nums, int target) {\n        int bagsize;\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) sum += nums[i];\n        bagsize = (sum + target)/2;\n        vector<int> dp(bagsize + 1, 0);\n        dp[0] = 1;\n        if (abs(target) > sum) return 0; // 此时没有方案\n        if ((target + sum) % 2 == 1) return 0; // 此时没有方案\n        \n        for (int i = 0; i < nums.size(); i++){\n            for (int j = bagsize; j >= nums[i]; j--){\n                dp[j] = dp[j] + dp[j - nums[i]];\n        \n            }\n        }\n        return dp[target];\n\n    }\n};\n```\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220720234829.png)\n\n\n\n**参考资料**\n自用跳转链接：🈚\n[代码随想录](https://www.programmercarl.com/0494.%E7%9B%AE%E6%A0%87%E5%92%8C.html#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92)","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/16.目标和(装满背包有多少种方法) 2","published":1,"updated":"2022-08-01T11:24:46.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjk005oe0mg9els8xjk","content":"<h1 id=\"1-目标和\"><a class=\"markdownIt-Anchor\" href=\"#1-目标和\"></a> 1 目标和</h1>\n<p><a href=\"https://leetcode.cn/problems/target-sum/\">力扣题目链接</a></p>\n<p>难度：中等</p>\n<p>给定一个非负整数数组，a1, a2, …, an, 和一个目标数，S。现在你有两个符号&nbsp;+&nbsp;和&nbsp;-。对于数组中的任意一个整数，你都可以从&nbsp;+&nbsp;或&nbsp;-中选择一个符号添加在前面。</p>\n<p>返回可以使最终数组和为目标数 S 的所有添加符号的方法数。</p>\n<p>示例：</p>\n<p>输入：nums: [1, 1, 1, 1, 1], S: 3<br>\n输出：5</p>\n<p>解释：<br>\n-1+1+1+1+1 = 3<br>\n+1-1+1+1+1 = 3<br>\n+1+1-1+1+1 = 3<br>\n+1+1+1-1+1 = 3<br>\n+1+1+1+1-1 = 3</p>\n<p>一共有5种方法让最终目标和为3。</p>\n<p>提示：</p>\n<ul>\n<li>数组非空，且长度不会超过 20 。</li>\n<li>初始的数组的和不会超过 1000 。</li>\n<li>保证返回的最终结果能被 32 位整数存下。</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>假设加法总和为x， → 减法总和 = sum - x。<br>\n目标和 = 加法总和 - 减法总和 → S = x - (sum - x)<br>\n→ x = (S + sum) / 2</p>\n<p>此时化为 ：就是从数组中挑几个数加起来正好等于x</p>\n<p><strong>特例判断</strong></p>\n<ol>\n<li>假设加法和是非整数，即 (S + sum) / 2 除不尽，说明有余数，又因为加法和是整数，有余数不可能符合等号条件。所以：</li>\n</ol>\n<figure class=\"highlight apache\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">if</span> ((S + sum) % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>) return <span class=\"hljs-number\">0</span>; // 此时没有方案<br></code></pre></td></tr></tbody></table></figure>\n<ol start=\"2\">\n<li>同时如果 S的绝对值已经大于sum，那么也是没有方案的。</li>\n</ol>\n<figure class=\"highlight arcade\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">abs</span>(S) &gt; <span class=\"hljs-built_in\">sum</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 此时没有方案</span><br></code></pre></td></tr></tbody></table></figure>\n<p>动归五部曲</p>\n<ol>\n<li>\n<p>确定dp[j]的含义<br>\n恰好装满背包容量为j的背包，一共有dp[j]种方法</p>\n</li>\n<li>\n<p>确定递推公式<br>\n先记住：在<strong>求装满背包有几种方法</strong>的情况下，递推公式一般为： #card #疑问</p>\n</li>\n</ol>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">dp[j] = dp[j] + dp[j - nums[i]];<br></code></pre></td></tr></tbody></table></figure>\n<ol start=\"3\">\n<li>\n<p>dp数组的初始化<br>\ndp[0] = 1，显然装满容量为0的背包，有1种方法，就是装0件物品。<br>\ndp[j]其他下标对应的数值应该初始化为0，从递归公式也可以看出<code>dp[j] = dp[j] + dp[j - nums[i]];</code>，dp[j]要保证是0的初始值，才能正确的由dp[j - nums[i]]推导出来。</p>\n</li>\n<li>\n<p>确定遍历顺序<br>\n先物品在背包，背包for循环倒序</p>\n</li>\n<li>\n<p>举例推导dp数组</p>\n</li>\n</ol>\n<p>输入：nums: [1, 1, 1, 1, 1], S: 3</p>\n<p>bagSize = (S + sum) / 2 = (3 + 5) / 2 = 4</p>\n<p>dp数组状态变化如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210125120743274.jpg\" alt=\"494.目标和\"></p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>编译未通过</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> {</span><br>public:<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findTargetSumWays</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums, <span class=\"hljs-type\">int</span> target)</span> {<br>        <span class=\"hljs-type\">int</span> bagsize;<br>        <span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.size(); i++) sum += nums[i];<br>        bagsize = (sum + target)/<span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title function_\">dp</span><span class=\"hljs-params\">(bagsize + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)</span>;<br>        dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">abs</span>(target) &gt; sum) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 此时没有方案</span><br>        <span class=\"hljs-keyword\">if</span> ((target + sum) % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 此时没有方案</span><br>        <br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.size(); i++){<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = bagsize; j &gt;= nums[i]; j--){<br>                dp[j] = dp[j] + dp[j - nums[i]];<br>        <br>            }<br>        }<br>        <span class=\"hljs-keyword\">return</span> dp[target];<br><br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220720234829.png\" alt=\"\"></p>\n<p><strong>参考资料</strong><br>\n自用跳转链接：🈚<br>\n<a href=\"https://www.programmercarl.com/0494.%E7%9B%AE%E6%A0%87%E5%92%8C.html#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92\">代码随想录</a></p>\n","site":{"data":{}},"wordcount":1361,"more":"<h1 id=\"1-目标和\"><a class=\"markdownIt-Anchor\" href=\"#1-目标和\"></a> 1 目标和</h1>\n<p><a href=\"https://leetcode.cn/problems/target-sum/\">力扣题目链接</a></p>\n<p>难度：中等</p>\n<p>给定一个非负整数数组，a1, a2, …, an, 和一个目标数，S。现在你有两个符号 + 和 -。对于数组中的任意一个整数，你都可以从 + 或 -中选择一个符号添加在前面。</p>\n<p>返回可以使最终数组和为目标数 S 的所有添加符号的方法数。</p>\n<p>示例：</p>\n<p>输入：nums: [1, 1, 1, 1, 1], S: 3<br />\n输出：5</p>\n<p>解释：<br />\n-1+1+1+1+1 = 3<br />\n+1-1+1+1+1 = 3<br />\n+1+1-1+1+1 = 3<br />\n+1+1+1-1+1 = 3<br />\n+1+1+1+1-1 = 3</p>\n<p>一共有5种方法让最终目标和为3。</p>\n<p>提示：</p>\n<ul>\n<li>数组非空，且长度不会超过 20 。</li>\n<li>初始的数组的和不会超过 1000 。</li>\n<li>保证返回的最终结果能被 32 位整数存下。</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>假设加法总和为x， → 减法总和 = sum - x。<br />\n目标和 = 加法总和 - 减法总和 → S = x - (sum - x)<br />\n→ x = (S + sum) / 2</p>\n<p>此时化为 ：就是从数组中挑几个数加起来正好等于x</p>\n<p><strong>特例判断</strong></p>\n<ol>\n<li>假设加法和是非整数，即 (S + sum) / 2 除不尽，说明有余数，又因为加法和是整数，有余数不可能符合等号条件。所以：</li>\n</ol>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">if</span> ((S + sum) % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>) return <span class=\"hljs-number\">0</span>; // 此时没有方案<br></code></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>同时如果 S的绝对值已经大于sum，那么也是没有方案的。</li>\n</ol>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">abs</span>(S) &gt; <span class=\"hljs-built_in\">sum</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 此时没有方案</span><br></code></pre></td></tr></table></figure>\n<p>动归五部曲</p>\n<ol>\n<li>\n<p>确定dp[j]的含义<br />\n恰好装满背包容量为j的背包，一共有dp[j]种方法</p>\n</li>\n<li>\n<p>确定递推公式<br />\n先记住：在<strong>求装满背包有几种方法</strong>的情况下，递推公式一般为： #card #疑问</p>\n</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">dp[j] = dp[j] + dp[j - nums[i]];<br></code></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>\n<p>dp数组的初始化<br />\ndp[0] = 1，显然装满容量为0的背包，有1种方法，就是装0件物品。<br />\ndp[j]其他下标对应的数值应该初始化为0，从递归公式也可以看出<code>dp[j] = dp[j] + dp[j - nums[i]];</code>，dp[j]要保证是0的初始值，才能正确的由dp[j - nums[i]]推导出来。</p>\n</li>\n<li>\n<p>确定遍历顺序<br />\n先物品在背包，背包for循环倒序</p>\n</li>\n<li>\n<p>举例推导dp数组</p>\n</li>\n</ol>\n<p>输入：nums: [1, 1, 1, 1, 1], S: 3</p>\n<p>bagSize = (S + sum) / 2 = (3 + 5) / 2 = 4</p>\n<p>dp数组状态变化如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210125120743274.jpg\" alt=\"494.目标和\" /></p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>编译未通过</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> &#123;</span><br>public:<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findTargetSumWays</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums, <span class=\"hljs-type\">int</span> target)</span> &#123;<br>        <span class=\"hljs-type\">int</span> bagsize;<br>        <span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.size(); i++) sum += nums[i];<br>        bagsize = (sum + target)/<span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title function_\">dp</span><span class=\"hljs-params\">(bagsize + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)</span>;<br>        dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">abs</span>(target) &gt; sum) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 此时没有方案</span><br>        <span class=\"hljs-keyword\">if</span> ((target + sum) % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 此时没有方案</span><br>        <br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.size(); i++)&#123;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = bagsize; j &gt;= nums[i]; j--)&#123;<br>                dp[j] = dp[j] + dp[j - nums[i]];<br>        <br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> dp[target];<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/20220720234829.png\" alt=\"\" /></p>\n<p><strong>参考资料</strong><br />\n自用跳转链接：🈚<br />\n<a href=\"https://www.programmercarl.com/0494.%E7%9B%AE%E6%A0%87%E5%92%8C.html#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92\">代码随想录</a></p>\n"},{"title":"19.零钱兑换II","date":"2022-07-21T09:04:00.000Z","excerpt":"文章简介：力扣题解--- 518. 零钱兑换 II","abbrlink":48085,"_content":"\n# 1 518零钱兑换 II\n\n[力扣题目链接](https://leetcode.cn/problems/coin-change-2/)\n\n\n难度：中等\n\n给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。\n\n示例 1:\n\n输入: amount = 5, coins = [1, 2, 5] 输出: 4 解释: 有四种方式可以凑成总金额: 5=5 5=2+2+1 5=2+1+1+1 5=1+1+1+1+1\n\n示例 2: 输入: amount = 3, coins = [2] 输出: 0 解释: 只用面额2的硬币不能凑成总金额3。\n\n示例 3: 输入: amount = 10, coins = [10] 输出: 1\n\n注意，你可以假设：\n\n-   0 <= amount (总金额) <= 5000\n-   1 <= coin (硬币面额) <= 5000\n-   硬币种类不超过 500 种\n-   结果符合 32 位符号整数\n\n# 2 思路\n\n数量无限→立即想完全背包\n本题和纯完全背包不一样，**纯完全背包是能否凑成总价值 ，而本题是要求凑成总金额的个数！**\n\n组合不强调顺序，排列强调顺序\n5 = 2 + 2 + 1\n5 = 2 + 1 + 2\n这是一种组合，都是 2 2 1。\n\n弄清排列和组合问题与遍历顺序息息相关\n\n## 2.1 动归五部曲\n1. dp[j] 的含义\n凑成总金额j的货币**组合**数为dp[j]\nj背包恰好有dp[j]种组合装满：即装满背包有几种方法\n\n2. \n\n\n\n\n\n\n**参考资料**\n[代码随想录](https://www.programmercarl.com/0518.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II.html#_518-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2-ii)\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/19.零钱兑换II.md","raw":"---\ntitle: 19.零钱兑换II\ndate: '2022-07-21 17:04'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 动态规划\nexcerpt: 文章简介：力扣题解--- 518. 零钱兑换 II\ntags:\n  - 动态规划\nabbrlink: 48085\n---\n\n# 1 518零钱兑换 II\n\n[力扣题目链接](https://leetcode.cn/problems/coin-change-2/)\n\n\n难度：中等\n\n给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。\n\n示例 1:\n\n输入: amount = 5, coins = [1, 2, 5] 输出: 4 解释: 有四种方式可以凑成总金额: 5=5 5=2+2+1 5=2+1+1+1 5=1+1+1+1+1\n\n示例 2: 输入: amount = 3, coins = [2] 输出: 0 解释: 只用面额2的硬币不能凑成总金额3。\n\n示例 3: 输入: amount = 10, coins = [10] 输出: 1\n\n注意，你可以假设：\n\n-   0 <= amount (总金额) <= 5000\n-   1 <= coin (硬币面额) <= 5000\n-   硬币种类不超过 500 种\n-   结果符合 32 位符号整数\n\n# 2 思路\n\n数量无限→立即想完全背包\n本题和纯完全背包不一样，**纯完全背包是能否凑成总价值 ，而本题是要求凑成总金额的个数！**\n\n组合不强调顺序，排列强调顺序\n5 = 2 + 2 + 1\n5 = 2 + 1 + 2\n这是一种组合，都是 2 2 1。\n\n弄清排列和组合问题与遍历顺序息息相关\n\n## 2.1 动归五部曲\n1. dp[j] 的含义\n凑成总金额j的货币**组合**数为dp[j]\nj背包恰好有dp[j]种组合装满：即装满背包有几种方法\n\n2. \n\n\n\n\n\n\n**参考资料**\n[代码随想录](https://www.programmercarl.com/0518.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II.html#_518-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2-ii)\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/19.零钱兑换II","published":1,"updated":"2022-07-28T02:53:53.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjk005qe0mg6pcy9e81","content":"<h1 id=\"1-518零钱兑换-ii\"><a class=\"markdownIt-Anchor\" href=\"#1-518零钱兑换-ii\"></a> 1 518零钱兑换 II</h1>\n<p><a href=\"https://leetcode.cn/problems/coin-change-2/\">力扣题目链接</a></p>\n<p>难度：中等</p>\n<p>给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。</p>\n<p>示例 1:</p>\n<p>输入: amount = 5, coins = [1, 2, 5] 输出: 4 解释: 有四种方式可以凑成总金额: 5=5 5=2+2+1 5=2+1+1+1 5=1+1+1+1+1</p>\n<p>示例 2: 输入: amount = 3, coins = [2] 输出: 0 解释: 只用面额2的硬币不能凑成总金额3。</p>\n<p>示例 3: 输入: amount = 10, coins = [10] 输出: 1</p>\n<p>注意，你可以假设：</p>\n<ul>\n<li>0 &lt;= amount (总金额) &lt;= 5000</li>\n<li>1 &lt;= coin (硬币面额)&nbsp;&lt;= 5000</li>\n<li>硬币种类不超过 500 种</li>\n<li>结果符合 32 位符号整数</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>数量无限→立即想完全背包<br>\n本题和纯完全背包不一样，<strong>纯完全背包是能否凑成总价值 ，而本题是要求凑成总金额的个数！</strong></p>\n<p>组合不强调顺序，排列强调顺序<br>\n5 = 2 + 2 + 1<br>\n5 = 2 + 1 + 2<br>\n这是一种组合，都是 2 2 1。</p>\n<p>弄清排列和组合问题与遍历顺序息息相关</p>\n<h2 id=\"21-动归五部曲\"><a class=\"markdownIt-Anchor\" href=\"#21-动归五部曲\"></a> 2.1 动归五部曲</h2>\n<ol>\n<li>\n<p>dp[j] 的含义<br>\n凑成总金额j的货币<strong>组合</strong>数为dp[j]<br>\nj背包恰好有dp[j]种组合装满：即装满背包有几种方法</p>\n</li>\n<li></li>\n</ol>\n<p><strong>参考资料</strong><br>\n<a href=\"https://www.programmercarl.com/0518.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II.html#_518-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2-ii\">代码随想录</a></p>\n","site":{"data":{}},"wordcount":499,"more":"<h1 id=\"1-518零钱兑换-ii\"><a class=\"markdownIt-Anchor\" href=\"#1-518零钱兑换-ii\"></a> 1 518零钱兑换 II</h1>\n<p><a href=\"https://leetcode.cn/problems/coin-change-2/\">力扣题目链接</a></p>\n<p>难度：中等</p>\n<p>给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。</p>\n<p>示例 1:</p>\n<p>输入: amount = 5, coins = [1, 2, 5] 输出: 4 解释: 有四种方式可以凑成总金额: 5=5 5=2+2+1 5=2+1+1+1 5=1+1+1+1+1</p>\n<p>示例 2: 输入: amount = 3, coins = [2] 输出: 0 解释: 只用面额2的硬币不能凑成总金额3。</p>\n<p>示例 3: 输入: amount = 10, coins = [10] 输出: 1</p>\n<p>注意，你可以假设：</p>\n<ul>\n<li>0 &lt;= amount (总金额) &lt;= 5000</li>\n<li>1 &lt;= coin (硬币面额) &lt;= 5000</li>\n<li>硬币种类不超过 500 种</li>\n<li>结果符合 32 位符号整数</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>数量无限→立即想完全背包<br />\n本题和纯完全背包不一样，<strong>纯完全背包是能否凑成总价值 ，而本题是要求凑成总金额的个数！</strong></p>\n<p>组合不强调顺序，排列强调顺序<br />\n5 = 2 + 2 + 1<br />\n5 = 2 + 1 + 2<br />\n这是一种组合，都是 2 2 1。</p>\n<p>弄清排列和组合问题与遍历顺序息息相关</p>\n<h2 id=\"21-动归五部曲\"><a class=\"markdownIt-Anchor\" href=\"#21-动归五部曲\"></a> 2.1 动归五部曲</h2>\n<ol>\n<li>\n<p>dp[j] 的含义<br />\n凑成总金额j的货币<strong>组合</strong>数为dp[j]<br />\nj背包恰好有dp[j]种组合装满：即装满背包有几种方法</p>\n</li>\n<li></li>\n</ol>\n<p><strong>参考资料</strong><br />\n<a href=\"https://www.programmercarl.com/0518.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II.html#_518-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2-ii\">代码随想录</a></p>\n"},{"title":"19.零钱兑换II","date":"2022-07-21T09:04:00.000Z","excerpt":"文章简介：力扣题解--- 518. 零钱兑换 II","abbrlink":48085,"_content":"\n# 1 518零钱兑换 II\n\n[力扣题目链接](https://leetcode.cn/problems/coin-change-2/)\n\n\n难度：中等\n\n给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。\n\n示例 1:\n\n输入: amount = 5, coins = [1, 2, 5] 输出: 4 解释: 有四种方式可以凑成总金额: 5=5 5=2+2+1 5=2+1+1+1 5=1+1+1+1+1\n\n示例 2: 输入: amount = 3, coins = [2] 输出: 0 解释: 只用面额2的硬币不能凑成总金额3。\n\n示例 3: 输入: amount = 10, coins = [10] 输出: 1\n\n注意，你可以假设：\n\n-   0 <= amount (总金额) <= 5000\n-   1 <= coin (硬币面额) <= 5000\n-   硬币种类不超过 500 种\n-   结果符合 32 位符号整数\n\n# 2 思路\n\n数量无限→立即想完全背包\n本题和纯完全背包不一样，**纯完全背包是能否凑成总价值 ，而本题是要求凑成总金额的个数！**\n\n组合不强调顺序，排列强调顺序\n5 = 2 + 2 + 1\n5 = 2 + 1 + 2\n这是一种组合，都是 2 2 1。\n\n弄清排列和组合问题与遍历顺序息息相关\n\n## 2.1 动归五部曲\n1. dp[j] 的含义\n凑成总金额j的货币**组合**数为dp[j]\nj背包恰好有dp[j]种组合装满：即装满背包有几种方法\n\n2. \n\n\n\n\n\n\n**参考资料**\n[代码随想录](https://www.programmercarl.com/0518.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II.html#_518-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2-ii)\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/19.零钱兑换II 2.md","raw":"---\ntitle: 19.零钱兑换II\ndate: '2022-07-21 17:04'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 动态规划\nexcerpt: 文章简介：力扣题解--- 518. 零钱兑换 II\ntags:\n  - 动态规划\nabbrlink: 48085\n---\n\n# 1 518零钱兑换 II\n\n[力扣题目链接](https://leetcode.cn/problems/coin-change-2/)\n\n\n难度：中等\n\n给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。\n\n示例 1:\n\n输入: amount = 5, coins = [1, 2, 5] 输出: 4 解释: 有四种方式可以凑成总金额: 5=5 5=2+2+1 5=2+1+1+1 5=1+1+1+1+1\n\n示例 2: 输入: amount = 3, coins = [2] 输出: 0 解释: 只用面额2的硬币不能凑成总金额3。\n\n示例 3: 输入: amount = 10, coins = [10] 输出: 1\n\n注意，你可以假设：\n\n-   0 <= amount (总金额) <= 5000\n-   1 <= coin (硬币面额) <= 5000\n-   硬币种类不超过 500 种\n-   结果符合 32 位符号整数\n\n# 2 思路\n\n数量无限→立即想完全背包\n本题和纯完全背包不一样，**纯完全背包是能否凑成总价值 ，而本题是要求凑成总金额的个数！**\n\n组合不强调顺序，排列强调顺序\n5 = 2 + 2 + 1\n5 = 2 + 1 + 2\n这是一种组合，都是 2 2 1。\n\n弄清排列和组合问题与遍历顺序息息相关\n\n## 2.1 动归五部曲\n1. dp[j] 的含义\n凑成总金额j的货币**组合**数为dp[j]\nj背包恰好有dp[j]种组合装满：即装满背包有几种方法\n\n2. \n\n\n\n\n\n\n**参考资料**\n[代码随想录](https://www.programmercarl.com/0518.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II.html#_518-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2-ii)\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/19.零钱兑换II 2","published":1,"updated":"2022-08-01T11:24:46.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjl005ue0mg35g51krz","content":"<h1 id=\"1-518零钱兑换-ii\"><a class=\"markdownIt-Anchor\" href=\"#1-518零钱兑换-ii\"></a> 1 518零钱兑换 II</h1>\n<p><a href=\"https://leetcode.cn/problems/coin-change-2/\">力扣题目链接</a></p>\n<p>难度：中等</p>\n<p>给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。</p>\n<p>示例 1:</p>\n<p>输入: amount = 5, coins = [1, 2, 5] 输出: 4 解释: 有四种方式可以凑成总金额: 5=5 5=2+2+1 5=2+1+1+1 5=1+1+1+1+1</p>\n<p>示例 2: 输入: amount = 3, coins = [2] 输出: 0 解释: 只用面额2的硬币不能凑成总金额3。</p>\n<p>示例 3: 输入: amount = 10, coins = [10] 输出: 1</p>\n<p>注意，你可以假设：</p>\n<ul>\n<li>0 &lt;= amount (总金额) &lt;= 5000</li>\n<li>1 &lt;= coin (硬币面额)&nbsp;&lt;= 5000</li>\n<li>硬币种类不超过 500 种</li>\n<li>结果符合 32 位符号整数</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>数量无限→立即想完全背包<br>\n本题和纯完全背包不一样，<strong>纯完全背包是能否凑成总价值 ，而本题是要求凑成总金额的个数！</strong></p>\n<p>组合不强调顺序，排列强调顺序<br>\n5 = 2 + 2 + 1<br>\n5 = 2 + 1 + 2<br>\n这是一种组合，都是 2 2 1。</p>\n<p>弄清排列和组合问题与遍历顺序息息相关</p>\n<h2 id=\"21-动归五部曲\"><a class=\"markdownIt-Anchor\" href=\"#21-动归五部曲\"></a> 2.1 动归五部曲</h2>\n<ol>\n<li>\n<p>dp[j] 的含义<br>\n凑成总金额j的货币<strong>组合</strong>数为dp[j]<br>\nj背包恰好有dp[j]种组合装满：即装满背包有几种方法</p>\n</li>\n<li></li>\n</ol>\n<p><strong>参考资料</strong><br>\n<a href=\"https://www.programmercarl.com/0518.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II.html#_518-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2-ii\">代码随想录</a></p>\n","site":{"data":{}},"wordcount":499,"more":"<h1 id=\"1-518零钱兑换-ii\"><a class=\"markdownIt-Anchor\" href=\"#1-518零钱兑换-ii\"></a> 1 518零钱兑换 II</h1>\n<p><a href=\"https://leetcode.cn/problems/coin-change-2/\">力扣题目链接</a></p>\n<p>难度：中等</p>\n<p>给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。</p>\n<p>示例 1:</p>\n<p>输入: amount = 5, coins = [1, 2, 5] 输出: 4 解释: 有四种方式可以凑成总金额: 5=5 5=2+2+1 5=2+1+1+1 5=1+1+1+1+1</p>\n<p>示例 2: 输入: amount = 3, coins = [2] 输出: 0 解释: 只用面额2的硬币不能凑成总金额3。</p>\n<p>示例 3: 输入: amount = 10, coins = [10] 输出: 1</p>\n<p>注意，你可以假设：</p>\n<ul>\n<li>0 &lt;= amount (总金额) &lt;= 5000</li>\n<li>1 &lt;= coin (硬币面额) &lt;= 5000</li>\n<li>硬币种类不超过 500 种</li>\n<li>结果符合 32 位符号整数</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>数量无限→立即想完全背包<br />\n本题和纯完全背包不一样，<strong>纯完全背包是能否凑成总价值 ，而本题是要求凑成总金额的个数！</strong></p>\n<p>组合不强调顺序，排列强调顺序<br />\n5 = 2 + 2 + 1<br />\n5 = 2 + 1 + 2<br />\n这是一种组合，都是 2 2 1。</p>\n<p>弄清排列和组合问题与遍历顺序息息相关</p>\n<h2 id=\"21-动归五部曲\"><a class=\"markdownIt-Anchor\" href=\"#21-动归五部曲\"></a> 2.1 动归五部曲</h2>\n<ol>\n<li>\n<p>dp[j] 的含义<br />\n凑成总金额j的货币<strong>组合</strong>数为dp[j]<br />\nj背包恰好有dp[j]种组合装满：即装满背包有几种方法</p>\n</li>\n<li></li>\n</ol>\n<p><strong>参考资料</strong><br />\n<a href=\"https://www.programmercarl.com/0518.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II.html#_518-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2-ii\">代码随想录</a></p>\n"},{"title":"4.使用最小花费爬楼梯","date":"2022-07-05T13:03:00.000Z","index_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207051328142.jpg","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207051328142.jpg","abbrlink":27967,"_content":"\n文章简介：LeetCode  题解—— 746. 使用最小花费爬楼梯\n<!-- more -->\n\n# 1 使用最小花费爬楼梯\n\n[力扣题目链接](https://leetcode.cn/problems/min-cost-climbing-stairs/)\n\n数组的每个下标作为一个阶梯，第 i 个阶梯对应着一个非负数的体力花费值 cost[i]（下标从 0 开始）。\n\n**每当你爬上一个阶梯你都要花费对应的体力值，一旦支付了相应的体力值，你就可以选择向上爬一个阶梯或者爬两个阶梯。**\n\n请你找出达到楼层顶部的最低花费。在开始时，你可以选择从下标为 0 或 1 的元素作为初始阶梯。\n\n示例 1：\n\n输入：cost = [10, 15, 20] 输出：15 解释：最低花费是从 cost[1] 开始，然后走两步即可到阶梯顶，一共花费 15 。  示例 2：\n >第一次不要钱，爬上了15，支付15后可以爬一层到楼顶，那我从10开始支付10爬两层不是更好吗\n \n输入：cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1] 输出：6 解释：最低花费方式是从 cost[0] 开始，逐个经过那些 1 ，跳过 cost[3] ，一共花费 6 。\n\n提示：\n\n-   cost 的长度范围是 [2, 1000]。\n-   cost[i] 将会是一个整型数据，范围为 [0, 999] 。\n\n\n\n# 2 思路\n\n\n**注意题目描述：每当你爬上一个阶梯你都要花费对应的体力值，一旦支付了相应的体力值，你就可以选择向上爬一个阶梯或者爬两个阶梯**\n\n动归五部曲\n\n<font color=#F36208>1.  确定dp数组以及下标的含义</font>\n**dp[i]的定义：到达第i个台阶所花费的最\n少体力为dp[i]**。\n注意这里认为是第一步一定是要花费：\n\tdp[0] = cost[0];\n\tdp[1] = cost[1];\n\t**dp[2] = min(dp[0], dp[1]) + cost[2];**\n<font color=#F36208>2.  确定递推公式</font>\n**可以有两个途径得到dp[i]，一个是dp[i-1] 一个是dp[i-2]**。\n>一旦支付当前下边相应的体力值，就可向上爬一个或者两个楼梯\n\n**dp[i] = min(dp[i - 1], dp[i - 2]) + cost[i];**\n爬上台阶i，可能是从 i - 1 层，i-2层爬上来的，然后在离开台阶i 又在需要花费cost[i]\n<font color=#F36208>3. dp数组初始化</font>\n题目说：可以选择从下标为 0 或 1 的元素作为初始阶梯。\n从下标0处离开需要cost[0]，下标1同理\n```cpp\nvector<int> dp(cost.size());\ndp[0] = cost[0];\ndp[1] = cost[1];\n```\n<font color=#F36208>4. 遍历顺序</font>\n因为是模拟台阶，而且dp[i]又dp[i-1]dp[i-2]推出，所以是从前到后遍历cost数组就可以了。\n**但是稍稍有点难度的动态规划，其遍历顺序并不容易确定下来**。\n<font color=#F36208>5. 举例推导dp数组</font>\n| cost  | 10  | 15  | 20  |\n| ----- | --- | --- | --- |\n| dp[i] | 10  | 15  | 30  |\n|       |     |     |     |\n![746.使用最小花费爬楼梯](https://img-blog.csdnimg.cn/2021010621363669.png)\n为什么选择最后两位的最小值呢\n?\n最后两位支付该值都可以到下一层，假设所求是第N层的最小开销，只需要计算min(谁能到N层)，到了N层后又不到下一层，所以相当于最后一步不用花费，就停止到那了，不用+cost[i]\n\n# 3 代码\n编译已通过\n```cpp\nclass Solution {\npublic:\n    int minCostClimbingStairs(vector<int>& cost) {\n        vector<int> dp(cost.size());\n        dp[0] = cost[0];\n        dp[1] = cost[1];\n        for(int i = 2; i < cost.size(); i++){// 这里不用<=，因为下标从0开始，取不到cost.size()||从第三个元素开始，下标是2\n            dp[i] = min(dp[i - 1], dp[i - 2]) + cost[i];\n        }\n        return min(dp[cost.size()-1], dp[cost.size() - 2]);\n\n    }\n};\n```\n\n\n# 4 参考资料\n[代码随想录](https://www.programmercarl.com/0746.%E4%BD%BF%E7%94%A8%E6%9C%80%E5%B0%8F%E8%8A%B1%E8%B4%B9%E7%88%AC%E6%A5%BC%E6%A2%AF.html#%E6%80%9D%E8%B7%AF)\n[Leetcode-746.使用最小花费爬楼梯_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1fq4y1T7Uo?spm_id_from=333.337.search-card.all.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n自用跳转链接：🈚\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/4.使用最小花费爬楼梯.md","raw":"---\ntitle: 4.使用最小花费爬楼梯\ndate: '2022-07-05 21:03'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 动态规划\nindex_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207051328142.jpg'\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207051328142.jpg'\ntags:\n  - 动态规划\nabbrlink: 27967\n---\n\n文章简介：LeetCode  题解—— 746. 使用最小花费爬楼梯\n<!-- more -->\n\n# 1 使用最小花费爬楼梯\n\n[力扣题目链接](https://leetcode.cn/problems/min-cost-climbing-stairs/)\n\n数组的每个下标作为一个阶梯，第 i 个阶梯对应着一个非负数的体力花费值 cost[i]（下标从 0 开始）。\n\n**每当你爬上一个阶梯你都要花费对应的体力值，一旦支付了相应的体力值，你就可以选择向上爬一个阶梯或者爬两个阶梯。**\n\n请你找出达到楼层顶部的最低花费。在开始时，你可以选择从下标为 0 或 1 的元素作为初始阶梯。\n\n示例 1：\n\n输入：cost = [10, 15, 20] 输出：15 解释：最低花费是从 cost[1] 开始，然后走两步即可到阶梯顶，一共花费 15 。  示例 2：\n >第一次不要钱，爬上了15，支付15后可以爬一层到楼顶，那我从10开始支付10爬两层不是更好吗\n \n输入：cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1] 输出：6 解释：最低花费方式是从 cost[0] 开始，逐个经过那些 1 ，跳过 cost[3] ，一共花费 6 。\n\n提示：\n\n-   cost 的长度范围是 [2, 1000]。\n-   cost[i] 将会是一个整型数据，范围为 [0, 999] 。\n\n\n\n# 2 思路\n\n\n**注意题目描述：每当你爬上一个阶梯你都要花费对应的体力值，一旦支付了相应的体力值，你就可以选择向上爬一个阶梯或者爬两个阶梯**\n\n动归五部曲\n\n<font color=#F36208>1.  确定dp数组以及下标的含义</font>\n**dp[i]的定义：到达第i个台阶所花费的最\n少体力为dp[i]**。\n注意这里认为是第一步一定是要花费：\n\tdp[0] = cost[0];\n\tdp[1] = cost[1];\n\t**dp[2] = min(dp[0], dp[1]) + cost[2];**\n<font color=#F36208>2.  确定递推公式</font>\n**可以有两个途径得到dp[i]，一个是dp[i-1] 一个是dp[i-2]**。\n>一旦支付当前下边相应的体力值，就可向上爬一个或者两个楼梯\n\n**dp[i] = min(dp[i - 1], dp[i - 2]) + cost[i];**\n爬上台阶i，可能是从 i - 1 层，i-2层爬上来的，然后在离开台阶i 又在需要花费cost[i]\n<font color=#F36208>3. dp数组初始化</font>\n题目说：可以选择从下标为 0 或 1 的元素作为初始阶梯。\n从下标0处离开需要cost[0]，下标1同理\n```cpp\nvector<int> dp(cost.size());\ndp[0] = cost[0];\ndp[1] = cost[1];\n```\n<font color=#F36208>4. 遍历顺序</font>\n因为是模拟台阶，而且dp[i]又dp[i-1]dp[i-2]推出，所以是从前到后遍历cost数组就可以了。\n**但是稍稍有点难度的动态规划，其遍历顺序并不容易确定下来**。\n<font color=#F36208>5. 举例推导dp数组</font>\n| cost  | 10  | 15  | 20  |\n| ----- | --- | --- | --- |\n| dp[i] | 10  | 15  | 30  |\n|       |     |     |     |\n![746.使用最小花费爬楼梯](https://img-blog.csdnimg.cn/2021010621363669.png)\n为什么选择最后两位的最小值呢\n?\n最后两位支付该值都可以到下一层，假设所求是第N层的最小开销，只需要计算min(谁能到N层)，到了N层后又不到下一层，所以相当于最后一步不用花费，就停止到那了，不用+cost[i]\n\n# 3 代码\n编译已通过\n```cpp\nclass Solution {\npublic:\n    int minCostClimbingStairs(vector<int>& cost) {\n        vector<int> dp(cost.size());\n        dp[0] = cost[0];\n        dp[1] = cost[1];\n        for(int i = 2; i < cost.size(); i++){// 这里不用<=，因为下标从0开始，取不到cost.size()||从第三个元素开始，下标是2\n            dp[i] = min(dp[i - 1], dp[i - 2]) + cost[i];\n        }\n        return min(dp[cost.size()-1], dp[cost.size() - 2]);\n\n    }\n};\n```\n\n\n# 4 参考资料\n[代码随想录](https://www.programmercarl.com/0746.%E4%BD%BF%E7%94%A8%E6%9C%80%E5%B0%8F%E8%8A%B1%E8%B4%B9%E7%88%AC%E6%A5%BC%E6%A2%AF.html#%E6%80%9D%E8%B7%AF)\n[Leetcode-746.使用最小花费爬楼梯_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1fq4y1T7Uo?spm_id_from=333.337.search-card.all.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n自用跳转链接：🈚\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/4.使用最小花费爬楼梯","published":1,"updated":"2022-07-12T09:02:14.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjl005we0mg7qji3qav","content":"<p>文章简介：LeetCode  题解—— 746. 使用最小花费爬楼梯</p>\n<span id=\"more\"></span>\n<h1 id=\"1-使用最小花费爬楼梯\"><a class=\"markdownIt-Anchor\" href=\"#1-使用最小花费爬楼梯\"></a> 1 使用最小花费爬楼梯</h1>\n<p><a href=\"https://leetcode.cn/problems/min-cost-climbing-stairs/\">力扣题目链接</a></p>\n<p>数组的每个下标作为一个阶梯，第 i 个阶梯对应着一个非负数的体力花费值&nbsp;cost[i]（下标从 0 开始）。</p>\n<p><strong>每当你爬上一个阶梯你都要花费对应的体力值，一旦支付了相应的体力值，你就可以选择向上爬一个阶梯或者爬两个阶梯。</strong></p>\n<p>请你找出达到楼层顶部的最低花费。在开始时，你可以选择从下标为 0 或 1 的元素作为初始阶梯。</p>\n<p>示例&nbsp;1：</p>\n<p>输入：cost = [10, 15, 20] 输出：15 解释：最低花费是从 cost[1] 开始，然后走两步即可到阶梯顶，一共花费 15 。 &nbsp;示例 2：</p>\n<blockquote>\n<p>第一次不要钱，爬上了15，支付15后可以爬一层到楼顶，那我从10开始支付10爬两层不是更好吗</p>\n</blockquote>\n<p>输入：cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1] 输出：6 解释：最低花费方式是从 cost[0] 开始，逐个经过那些 1 ，跳过 cost[3] ，一共花费 6 。</p>\n<p>提示：</p>\n<ul>\n<li>cost 的长度范围是 [2, 1000]。</li>\n<li>cost[i] 将会是一个整型数据，范围为 [0, 999] 。</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p><strong>注意题目描述：每当你爬上一个阶梯你都要花费对应的体力值，一旦支付了相应的体力值，你就可以选择向上爬一个阶梯或者爬两个阶梯</strong></p>\n<p>动归五部曲</p>\n<p><font color=\"#F36208\">1.  确定dp数组以及下标的含义</font><br>\n<strong>dp[i]的定义：到达第i个台阶所花费的最<br>\n少体力为dp[i]</strong>。<br>\n注意这里认为是第一步一定是要花费：<br>\ndp[0] = cost[0];<br>\ndp[1] = cost[1];<br>\n<strong>dp[2] = min(dp[0], dp[1]) + cost[2];</strong><br>\n<font color=\"#F36208\">2.  确定递推公式</font><br>\n<strong>可以有两个途径得到dp[i]，一个是dp[i-1] 一个是dp[i-2]</strong>。</p>\n<blockquote>\n<p>一旦支付当前下边相应的体力值，就可向上爬一个或者两个楼梯</p>\n</blockquote>\n<p><strong>dp[i] = min(dp[i - 1], dp[i - 2]) + cost[i];</strong><br>\n爬上台阶i，可能是从 i - 1 层，i-2层爬上来的，然后在离开台阶i 又在需要花费cost[i]<br>\n<font color=\"#F36208\">3. dp数组初始化</font><br>\n题目说：可以选择从下标为 0 或 1 的元素作为初始阶梯。<br>\n从下标0处离开需要cost[0]，下标1同理</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(cost.size())</span></span>;<br>dp[<span class=\"hljs-number\">0</span>] = cost[<span class=\"hljs-number\">0</span>];<br>dp[<span class=\"hljs-number\">1</span>] = cost[<span class=\"hljs-number\">1</span>];<br></code></pre></td></tr></tbody></table></figure>\n<p><font color=\"#F36208\">4. 遍历顺序</font><br>\n因为是模拟台阶，而且dp[i]又dp[i-1]dp[i-2]推出，所以是从前到后遍历cost数组就可以了。<br>\n<strong>但是稍稍有点难度的动态规划，其遍历顺序并不容易确定下来</strong>。<br>\n<font color=\"#F36208\">5. 举例推导dp数组</font></p>\n<table>\n<thead>\n<tr>\n<th>cost</th>\n<th>10</th>\n<th>15</th>\n<th>20</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dp[i]</td>\n<td>10</td>\n<td>15</td>\n<td>30</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://img-blog.csdnimg.cn/2021010621363669.png\" alt=\"746.使用最小花费爬楼梯\"><br>\n为什么选择最后两位的最小值呢<br>\n?<br>\n最后两位支付该值都可以到下一层，假设所求是第N层的最小开销，只需要计算min(谁能到N层)，到了N层后又不到下一层，所以相当于最后一步不用花费，就停止到那了，不用+cost[i]</p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>编译已通过</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">minCostClimbingStairs</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; cost)</span> </span>{<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(cost.size())</span></span>;<br>        dp[<span class=\"hljs-number\">0</span>] = cost[<span class=\"hljs-number\">0</span>];<br>        dp[<span class=\"hljs-number\">1</span>] = cost[<span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">2</span>; i &lt; cost.<span class=\"hljs-built_in\">size</span>(); i++){<span class=\"hljs-comment\">// 这里不用&lt;=，因为下标从0开始，取不到cost.size()||从第三个元素开始，下标是2</span><br>            dp[i] = <span class=\"hljs-built_in\">min</span>(dp[i - <span class=\"hljs-number\">1</span>], dp[i - <span class=\"hljs-number\">2</span>]) + cost[i];<br>        }<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">min</span>(dp[cost.<span class=\"hljs-built_in\">size</span>()<span class=\"hljs-number\">-1</span>], dp[cost.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">2</span>]);<br><br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p><a href=\"https://www.programmercarl.com/0746.%E4%BD%BF%E7%94%A8%E6%9C%80%E5%B0%8F%E8%8A%B1%E8%B4%B9%E7%88%AC%E6%A5%BC%E6%A2%AF.html#%E6%80%9D%E8%B7%AF\">代码随想录</a><br>\n<a href=\"https://www.bilibili.com/video/BV1fq4y1T7Uo?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">Leetcode-746.使用最小花费爬楼梯_哔哩哔哩_bilibili</a><br>\n自用跳转链接：🈚</p>\n","site":{"data":{}},"wordcount":1539,"excerpt":"<p>文章简介：LeetCode  题解—— 746. 使用最小花费爬楼梯</p>","more":"<h1 id=\"1-使用最小花费爬楼梯\"><a class=\"markdownIt-Anchor\" href=\"#1-使用最小花费爬楼梯\"></a> 1 使用最小花费爬楼梯</h1>\n<p><a href=\"https://leetcode.cn/problems/min-cost-climbing-stairs/\">力扣题目链接</a></p>\n<p>数组的每个下标作为一个阶梯，第 i 个阶梯对应着一个非负数的体力花费值 cost[i]（下标从 0 开始）。</p>\n<p><strong>每当你爬上一个阶梯你都要花费对应的体力值，一旦支付了相应的体力值，你就可以选择向上爬一个阶梯或者爬两个阶梯。</strong></p>\n<p>请你找出达到楼层顶部的最低花费。在开始时，你可以选择从下标为 0 或 1 的元素作为初始阶梯。</p>\n<p>示例 1：</p>\n<p>输入：cost = [10, 15, 20] 输出：15 解释：最低花费是从 cost[1] 开始，然后走两步即可到阶梯顶，一共花费 15 。  示例 2：</p>\n<blockquote>\n<p>第一次不要钱，爬上了15，支付15后可以爬一层到楼顶，那我从10开始支付10爬两层不是更好吗</p>\n</blockquote>\n<p>输入：cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1] 输出：6 解释：最低花费方式是从 cost[0] 开始，逐个经过那些 1 ，跳过 cost[3] ，一共花费 6 。</p>\n<p>提示：</p>\n<ul>\n<li>cost 的长度范围是 [2, 1000]。</li>\n<li>cost[i] 将会是一个整型数据，范围为 [0, 999] 。</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p><strong>注意题目描述：每当你爬上一个阶梯你都要花费对应的体力值，一旦支付了相应的体力值，你就可以选择向上爬一个阶梯或者爬两个阶梯</strong></p>\n<p>动归五部曲</p>\n<p><font color=#F36208>1.  确定dp数组以及下标的含义</font><br />\n<strong>dp[i]的定义：到达第i个台阶所花费的最<br />\n少体力为dp[i]</strong>。<br />\n注意这里认为是第一步一定是要花费：<br />\ndp[0] = cost[0];<br />\ndp[1] = cost[1];<br />\n<strong>dp[2] = min(dp[0], dp[1]) + cost[2];</strong><br />\n<font color=#F36208>2.  确定递推公式</font><br />\n<strong>可以有两个途径得到dp[i]，一个是dp[i-1] 一个是dp[i-2]</strong>。</p>\n<blockquote>\n<p>一旦支付当前下边相应的体力值，就可向上爬一个或者两个楼梯</p>\n</blockquote>\n<p><strong>dp[i] = min(dp[i - 1], dp[i - 2]) + cost[i];</strong><br />\n爬上台阶i，可能是从 i - 1 层，i-2层爬上来的，然后在离开台阶i 又在需要花费cost[i]<br />\n<font color=#F36208>3. dp数组初始化</font><br />\n题目说：可以选择从下标为 0 或 1 的元素作为初始阶梯。<br />\n从下标0处离开需要cost[0]，下标1同理</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(cost.size())</span></span>;<br>dp[<span class=\"hljs-number\">0</span>] = cost[<span class=\"hljs-number\">0</span>];<br>dp[<span class=\"hljs-number\">1</span>] = cost[<span class=\"hljs-number\">1</span>];<br></code></pre></td></tr></table></figure>\n<p><font color=#F36208>4. 遍历顺序</font><br />\n因为是模拟台阶，而且dp[i]又dp[i-1]dp[i-2]推出，所以是从前到后遍历cost数组就可以了。<br />\n<strong>但是稍稍有点难度的动态规划，其遍历顺序并不容易确定下来</strong>。<br />\n<font color=#F36208>5. 举例推导dp数组</font></p>\n<table>\n<thead>\n<tr>\n<th>cost</th>\n<th>10</th>\n<th>15</th>\n<th>20</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dp[i]</td>\n<td>10</td>\n<td>15</td>\n<td>30</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://img-blog.csdnimg.cn/2021010621363669.png\" alt=\"746.使用最小花费爬楼梯\" /><br />\n为什么选择最后两位的最小值呢<br />\n?<br />\n最后两位支付该值都可以到下一层，假设所求是第N层的最小开销，只需要计算min(谁能到N层)，到了N层后又不到下一层，所以相当于最后一步不用花费，就停止到那了，不用+cost[i]</p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>编译已通过</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">minCostClimbingStairs</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; cost)</span> </span>&#123;<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(cost.size())</span></span>;<br>        dp[<span class=\"hljs-number\">0</span>] = cost[<span class=\"hljs-number\">0</span>];<br>        dp[<span class=\"hljs-number\">1</span>] = cost[<span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">2</span>; i &lt; cost.<span class=\"hljs-built_in\">size</span>(); i++)&#123;<span class=\"hljs-comment\">// 这里不用&lt;=，因为下标从0开始，取不到cost.size()||从第三个元素开始，下标是2</span><br>            dp[i] = <span class=\"hljs-built_in\">min</span>(dp[i - <span class=\"hljs-number\">1</span>], dp[i - <span class=\"hljs-number\">2</span>]) + cost[i];<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">min</span>(dp[cost.<span class=\"hljs-built_in\">size</span>()<span class=\"hljs-number\">-1</span>], dp[cost.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">2</span>]);<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p><a href=\"https://www.programmercarl.com/0746.%E4%BD%BF%E7%94%A8%E6%9C%80%E5%B0%8F%E8%8A%B1%E8%B4%B9%E7%88%AC%E6%A5%BC%E6%A2%AF.html#%E6%80%9D%E8%B7%AF\">代码随想录</a><br />\n<a href=\"https://www.bilibili.com/video/BV1fq4y1T7Uo?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">Leetcode-746.使用最小花费爬楼梯_哔哩哔哩_bilibili</a><br />\n自用跳转链接：🈚</p>"},{"id":"9fc19dba-4edb-4f3d-8d7e-22b7c2462fc7","title":"2.斐波那契数","date":"2022-07-05T08:40:00.000Z","index_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207051328142.jpg","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207051328142.jpg","abbrlink":33325,"_content":"\n文章简介：LeetCode 题解 ——509. 斐波那契数\n<!-- more -->\n\n# 1 509. 斐波那契数\n[力扣题目链接](https://leetcode.cn/problems/fibonacci-number/)\n\n\n斐波那契数，通常用 F(n) 表示，形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，**后面的每一项数字都是前面两项数字的和**。也就是： F(0) = 0，F(1) = 1 F(n) = F(n - 1) + F(n - 2)，其中 n > 1 给你n ，请计算 F(n) 。\n\n示例 1：\n\n-   输入：2\n-   输出：1\n-   解释：F(2) = F(1) + F(0) = 1 + 0 = 1\n\n示例 2：\n\n-   输入：3\n-   输出：2\n-   解释：F(3) = F(2) + F(1) = 1 + 1 = 2\n\n示例 3：\n\n-   输入：4\n-   输出：3\n-   解释：F(4) = F(3) + F(2) = 2 + 1 = 3\n\n提示：\n\n-   0 <= n <= 30\n\n# 2 思路\n\n动规五部曲：\n\n这里我们要用一个一维dp数组来保存递归的结果\n\n1.  确定dp数组以及下标的含义\n\ndp[i]的定义为：第i个数的斐波那契数值是dp[i]\n\n2.  确定递推公式\n\n为什么这是一道非常简单的入门题目呢？\n\n**因为题目已经把递推公式直接给我们了：状态转移方程 dp[i] = dp[i - 1] + dp[i - 2];**\n\n3.  dp数组如何初始化\n\n**题目中把如何初始化也直接给我们了，如下：**\n\n```cpp\ndp[0] = 0;\ndp[1] = 1;\n```\n\n4.  确定遍历顺序\n\n从递归公式dp[i] = dp[i - 1] + dp[i - 2];中可以看出，dp[i]是依赖 dp[i - 1] 和 dp[i - 2]，那么遍历的顺序一定是从前到后遍历的\n\n5.  举例推导dp数组\n\n按照这个递推公式dp[i] = dp[i - 1] + dp[i - 2]，我们来推导一下，当N为10的时候，dp数组应该是如下的数列：\n\n0 1 1 2 3 5 8 13 21 34 55\n\n如果代码写出来，发现结果不对，就把dp数组打印出来看看和我们推导的数列是不是一致的。\n# 3 代码\n编译已通过\n```cpp\nclass Solution {\npublic:\n    int fib(int n) {\n        if (n < 2) return n;\n        vector<int> dp(n + 1);// 因为下标从0开始，要总长度所以+1\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++){ // 是≤，要把n也算上，因为最后输出的是n\n            dp[i] = dp[i - 1] + dp[i - 2];\n        }\n        return dp[n];// vector的返回和使用都要用[]\n\n    }\n};\n```\n\n# 4 参考资料\n\n自用跳转链接：[obsidian](obsidian://advanced-uri?vault=Documents&uid=9fc19dba-4edb-4f3d-8d7e-22b7c2462fc7)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/2.斐波那契数.md","raw":"---\nid: 9fc19dba-4edb-4f3d-8d7e-22b7c2462fc7\ntitle: 2.斐波那契数\ndate: '2022-07-05 16:40'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 动态规划\nindex_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207051328142.jpg'\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207051328142.jpg'\ntags:\n  - 动态规划\nabbrlink: 33325\n---\n\n文章简介：LeetCode 题解 ——509. 斐波那契数\n<!-- more -->\n\n# 1 509. 斐波那契数\n[力扣题目链接](https://leetcode.cn/problems/fibonacci-number/)\n\n\n斐波那契数，通常用 F(n) 表示，形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，**后面的每一项数字都是前面两项数字的和**。也就是： F(0) = 0，F(1) = 1 F(n) = F(n - 1) + F(n - 2)，其中 n > 1 给你n ，请计算 F(n) 。\n\n示例 1：\n\n-   输入：2\n-   输出：1\n-   解释：F(2) = F(1) + F(0) = 1 + 0 = 1\n\n示例 2：\n\n-   输入：3\n-   输出：2\n-   解释：F(3) = F(2) + F(1) = 1 + 1 = 2\n\n示例 3：\n\n-   输入：4\n-   输出：3\n-   解释：F(4) = F(3) + F(2) = 2 + 1 = 3\n\n提示：\n\n-   0 <= n <= 30\n\n# 2 思路\n\n动规五部曲：\n\n这里我们要用一个一维dp数组来保存递归的结果\n\n1.  确定dp数组以及下标的含义\n\ndp[i]的定义为：第i个数的斐波那契数值是dp[i]\n\n2.  确定递推公式\n\n为什么这是一道非常简单的入门题目呢？\n\n**因为题目已经把递推公式直接给我们了：状态转移方程 dp[i] = dp[i - 1] + dp[i - 2];**\n\n3.  dp数组如何初始化\n\n**题目中把如何初始化也直接给我们了，如下：**\n\n```cpp\ndp[0] = 0;\ndp[1] = 1;\n```\n\n4.  确定遍历顺序\n\n从递归公式dp[i] = dp[i - 1] + dp[i - 2];中可以看出，dp[i]是依赖 dp[i - 1] 和 dp[i - 2]，那么遍历的顺序一定是从前到后遍历的\n\n5.  举例推导dp数组\n\n按照这个递推公式dp[i] = dp[i - 1] + dp[i - 2]，我们来推导一下，当N为10的时候，dp数组应该是如下的数列：\n\n0 1 1 2 3 5 8 13 21 34 55\n\n如果代码写出来，发现结果不对，就把dp数组打印出来看看和我们推导的数列是不是一致的。\n# 3 代码\n编译已通过\n```cpp\nclass Solution {\npublic:\n    int fib(int n) {\n        if (n < 2) return n;\n        vector<int> dp(n + 1);// 因为下标从0开始，要总长度所以+1\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++){ // 是≤，要把n也算上，因为最后输出的是n\n            dp[i] = dp[i - 1] + dp[i - 2];\n        }\n        return dp[n];// vector的返回和使用都要用[]\n\n    }\n};\n```\n\n# 4 参考资料\n\n自用跳转链接：[obsidian](obsidian://advanced-uri?vault=Documents&uid=9fc19dba-4edb-4f3d-8d7e-22b7c2462fc7)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/2.斐波那契数","published":1,"updated":"2022-07-12T09:02:14.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjm0060e0mgcvp1da98","content":"<p>文章简介：LeetCode 题解 ——509. 斐波那契数</p>\n<span id=\"more\"></span>\n<h1 id=\"1-509-斐波那契数\"><a class=\"markdownIt-Anchor\" href=\"#1-509-斐波那契数\"></a> 1 509. 斐波那契数</h1>\n<p><a href=\"https://leetcode.cn/problems/fibonacci-number/\">力扣题目链接</a></p>\n<p>斐波那契数，通常用&nbsp;F(n) 表示，形成的序列称为 斐波那契数列 。该数列由&nbsp;0 和 1 开始，<strong>后面的每一项数字都是前面两项数字的和</strong>。也就是： F(0) = 0，F(1)&nbsp;= 1 F(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1 给你n ，请计算 F(n) 。</p>\n<p>示例 1：</p>\n<ul>\n<li>输入：2</li>\n<li>输出：1</li>\n<li>解释：F(2) = F(1) + F(0) = 1 + 0 = 1</li>\n</ul>\n<p>示例 2：</p>\n<ul>\n<li>输入：3</li>\n<li>输出：2</li>\n<li>解释：F(3) = F(2) + F(1) = 1 + 1 = 2</li>\n</ul>\n<p>示例 3：</p>\n<ul>\n<li>输入：4</li>\n<li>输出：3</li>\n<li>解释：F(4) = F(3) + F(2) = 2 + 1 = 3</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>0 &lt;= n &lt;= 30</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>动规五部曲：</p>\n<p>这里我们要用一个一维dp数组来保存递归的结果</p>\n<ol>\n<li>确定dp数组以及下标的含义</li>\n</ol>\n<p>dp[i]的定义为：第i个数的斐波那契数值是dp[i]</p>\n<ol start=\"2\">\n<li>确定递推公式</li>\n</ol>\n<p>为什么这是一道非常简单的入门题目呢？</p>\n<p><strong>因为题目已经把递推公式直接给我们了：状态转移方程 dp[i] = dp[i - 1] + dp[i - 2];</strong></p>\n<ol start=\"3\">\n<li>dp数组如何初始化</li>\n</ol>\n<p><strong>题目中把如何初始化也直接给我们了，如下：</strong></p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;<br>dp[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;<br></code></pre></td></tr></tbody></table></figure>\n<ol start=\"4\">\n<li>确定遍历顺序</li>\n</ol>\n<p>从递归公式dp[i] = dp[i - 1] + dp[i - 2];中可以看出，dp[i]是依赖 dp[i - 1] 和 dp[i - 2]，那么遍历的顺序一定是从前到后遍历的</p>\n<ol start=\"5\">\n<li>举例推导dp数组</li>\n</ol>\n<p>按照这个递推公式dp[i] = dp[i - 1] + dp[i - 2]，我们来推导一下，当N为10的时候，dp数组应该是如下的数列：</p>\n<p>0 1 1 2 3 5 8 13 21 34 55</p>\n<p>如果代码写出来，发现结果不对，就把dp数组打印出来看看和我们推导的数列是不是一致的。</p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>编译已通过</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">fib</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>{<br>        <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> n;<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(n + <span class=\"hljs-number\">1</span>)</span></span>;<span class=\"hljs-comment\">// 因为下标从0开始，要总长度所以+1</span><br>        dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;<br>        dp[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">2</span>; i &lt;= n; i++){ <span class=\"hljs-comment\">// 是≤，要把n也算上，因为最后输出的是n</span><br>            dp[i] = dp[i - <span class=\"hljs-number\">1</span>] + dp[i - <span class=\"hljs-number\">2</span>];<br>        }<br>        <span class=\"hljs-keyword\">return</span> dp[n];<span class=\"hljs-comment\">// vector的返回和使用都要用[]</span><br><br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p>自用跳转链接：<a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=9fc19dba-4edb-4f3d-8d7e-22b7c2462fc7\">obsidian</a></p>\n","site":{"data":{}},"wordcount":963,"excerpt":"<p>文章简介：LeetCode 题解 ——509. 斐波那契数</p>","more":"<h1 id=\"1-509-斐波那契数\"><a class=\"markdownIt-Anchor\" href=\"#1-509-斐波那契数\"></a> 1 509. 斐波那契数</h1>\n<p><a href=\"https://leetcode.cn/problems/fibonacci-number/\">力扣题目链接</a></p>\n<p>斐波那契数，通常用 F(n) 表示，形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，<strong>后面的每一项数字都是前面两项数字的和</strong>。也就是： F(0) = 0，F(1) = 1 F(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1 给你n ，请计算 F(n) 。</p>\n<p>示例 1：</p>\n<ul>\n<li>输入：2</li>\n<li>输出：1</li>\n<li>解释：F(2) = F(1) + F(0) = 1 + 0 = 1</li>\n</ul>\n<p>示例 2：</p>\n<ul>\n<li>输入：3</li>\n<li>输出：2</li>\n<li>解释：F(3) = F(2) + F(1) = 1 + 1 = 2</li>\n</ul>\n<p>示例 3：</p>\n<ul>\n<li>输入：4</li>\n<li>输出：3</li>\n<li>解释：F(4) = F(3) + F(2) = 2 + 1 = 3</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>0 &lt;= n &lt;= 30</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>动规五部曲：</p>\n<p>这里我们要用一个一维dp数组来保存递归的结果</p>\n<ol>\n<li>确定dp数组以及下标的含义</li>\n</ol>\n<p>dp[i]的定义为：第i个数的斐波那契数值是dp[i]</p>\n<ol start=\"2\">\n<li>确定递推公式</li>\n</ol>\n<p>为什么这是一道非常简单的入门题目呢？</p>\n<p><strong>因为题目已经把递推公式直接给我们了：状态转移方程 dp[i] = dp[i - 1] + dp[i - 2];</strong></p>\n<ol start=\"3\">\n<li>dp数组如何初始化</li>\n</ol>\n<p><strong>题目中把如何初始化也直接给我们了，如下：</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;<br>dp[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;<br></code></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>确定遍历顺序</li>\n</ol>\n<p>从递归公式dp[i] = dp[i - 1] + dp[i - 2];中可以看出，dp[i]是依赖 dp[i - 1] 和 dp[i - 2]，那么遍历的顺序一定是从前到后遍历的</p>\n<ol start=\"5\">\n<li>举例推导dp数组</li>\n</ol>\n<p>按照这个递推公式dp[i] = dp[i - 1] + dp[i - 2]，我们来推导一下，当N为10的时候，dp数组应该是如下的数列：</p>\n<p>0 1 1 2 3 5 8 13 21 34 55</p>\n<p>如果代码写出来，发现结果不对，就把dp数组打印出来看看和我们推导的数列是不是一致的。</p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>编译已通过</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">fib</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> n;<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(n + <span class=\"hljs-number\">1</span>)</span></span>;<span class=\"hljs-comment\">// 因为下标从0开始，要总长度所以+1</span><br>        dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;<br>        dp[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">2</span>; i &lt;= n; i++)&#123; <span class=\"hljs-comment\">// 是≤，要把n也算上，因为最后输出的是n</span><br>            dp[i] = dp[i - <span class=\"hljs-number\">1</span>] + dp[i - <span class=\"hljs-number\">2</span>];<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> dp[n];<span class=\"hljs-comment\">// vector的返回和使用都要用[]</span><br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p>自用跳转链接：<a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=9fc19dba-4edb-4f3d-8d7e-22b7c2462fc7\">obsidian</a></p>"},{"title":"3.爬楼梯","date":"2022-07-05T09:35:00.000Z","index_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207051328142.jpg","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207051328142.jpg","abbrlink":34749,"_content":"\n文章简介：LeetCode  题解——70. 爬楼梯\n<!-- more -->\n\n# 1 爬楼梯\n\n[力扣题目链接](https://leetcode.cn/problems/climbing-stairs/)\n\n假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\n\n每次你可以爬 1 或 2 个台阶。**你有多少种不同的方法**可以爬到楼顶呢？\n\n注意：给定 n 是一个正整数。\n\n示例 1：\n\n-   输入： 2\n-   输出： 2\n-   解释： 有两种方法可以爬到楼顶。\n    -   1 阶 + 1 阶\n    -   2 阶\n\n示例 2：\n\n-   输入： 3\n-   输出： 3\n-   解释： 有三种方法可以爬到楼顶。\n    -   1 阶 + 1 阶 + 1 阶\n    -   1 阶 + 2 阶\n    -   2 阶 + 1 阶\n\n# 2 思路\n第三层楼梯的状态可以由第二层楼梯 和 到第一层楼梯状态推导出来，那么就可以想到动态规划了。\n\t爬到第一层楼梯有一种方法，爬到二层楼梯有两种方法。\n\t第一层楼梯再跨两步就到第三层 ，第二层楼梯再跨一步就到第三层。\n\tdp[3] = dp[2] + dp[1] = 2+1 =3\n\n动归五部曲：\n1.  确定dp数组以及下标的含义\ndp[i]： 爬到第i层楼梯，有dp[i]种方法\n2.  确定递推公式\n首先是dp[i - 1]，上i-1层楼梯，有dp[i - 1]种方法，那么再一步跳一个台阶不就是dp[i]了么。\n还有就是dp[i - 2]，上i-2层楼梯，有dp[i - 2]种方法，那么再一步跳两个台阶不就是dp[i]了么\ndp[i] = dp[i - 1] + dp[i - 2] 。\n3. dp数组如何初始化\n不考虑dp[0]，dp[1] = 1， dp[2] = 2\n>dp[0]没有意义，i从3 开始递推\n4.  确定遍历顺序\n从递推公式dp[i] = dp[i - 1] + dp[i - 2];中可以看出，遍历顺序一定是从前向后遍历的\n5.  举推导dp数组\n举例当n为5的时候，dp table（dp数组）应该是这样的\n![70.爬楼梯](https://img-blog.csdnimg.cn/20210105202546299.png)\n>本质就是斐波那契数列，就是没有讨论dp[0] 的情况\n\n#面试\n有的题解是把dp[0]初始化为1，然后遍历的时候i从2开始遍历，这样是可以解题的，然后强行解释一波dp[0]应该等于1的含义。\n一个严谨的思考过程，应该是初始化dp[1] = 1，dp[2] = 2，然后i从3开始遍历，\n这个可以是面试的一个小问题，考察候选人对dp[i]定义的理解程度。\n\n# 3 代码\n优化一下空间复杂度\n```cpp\nclass Solution {\npublic:\n    int climbStairs(int n) {\n        if (n <= 1) return n;\n        int dp[3];\n        dp[1] = 1;\n        dp[2] = 2;\n        for (int i = 3; i <= n; i++){\n            int sum = dp[2] + dp [1];\n            dp[2] = sum;\n            dp[1] = dp[2]; \n        }\n        return dp[2];\n\n    }\n};\n```\n# 4 加强版爬楼梯\n这道题目还可以继续深化，就是一步一个台阶，两个台阶，三个台阶，直到 m个台阶，有多少种方法爬到n阶楼顶。\n```cpp\nclass Solution {\npublic:\n    int climbStairs(int n) {\n        vector<int> dp(n + 1, 0);\n        dp[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= m; j++) { // 把m换成2，就可以AC爬楼梯这道题\n                if (i - j >= 0) dp[i] += dp[i - j];\n            }\n        }\n        return dp[n];\n    }\n};\n```\n代码中m表示最多可以爬m个台阶。\n\n**以上代码不能运行哈，我主要是为了体现只要把m换成2，粘过去，就可以AC爬楼梯这道题，不信你就粘一下试试，哈哈**。\n\n**此时我就发现一个绝佳的大厂面试题**，第一道题就是单纯的爬楼梯，然后看候选人的代码实现，如果把dp[0]的定义成1了，就可以发难了，为什么dp[0]一定要初始化为1，此时可能候选人就要强行给dp[0]应该是1找各种理由。那这就是一个考察点了，对dp[i]的定义理解的不深入。\n\n我在[通过一道面试题目，讲一讲递归算法的时间复杂度！](https://programmercarl.com/%E5%89%8D%E5%BA%8F/%E9%80%9A%E8%BF%87%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%EF%BC%8C%E8%AE%B2%E4%B8%80%E8%AE%B2%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%81.html)[](https://programmercarl.com/%E5%89%8D%E5%BA%8F/%E9%80%9A%E8%BF%87%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%EF%BC%8C%E8%AE%B2%E4%B8%80%E8%AE%B2%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%81.html)\n中，以我自己面试别人的真实经历，通过求x的n次方 这么简单的题目，就可以考察候选人对算法性能以及递归的理解深度，录友们可以看看，绝对有收获！\n\n\n# 5 参考资料\n[代码随想录](https://www.programmercarl.com/0070.%E7%88%AC%E6%A5%BC%E6%A2%AF.html#%E6%80%9D%E8%B7%AF)\n自用跳转链接：🈚\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/3.爬楼梯.md","raw":"---\ntitle: 3.爬楼梯\ndate: '2022-07-05 17:35'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 动态规划\nindex_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207051328142.jpg'\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207051328142.jpg'\ntags:\n  - 动态规划\nabbrlink: 34749\n---\n\n文章简介：LeetCode  题解——70. 爬楼梯\n<!-- more -->\n\n# 1 爬楼梯\n\n[力扣题目链接](https://leetcode.cn/problems/climbing-stairs/)\n\n假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\n\n每次你可以爬 1 或 2 个台阶。**你有多少种不同的方法**可以爬到楼顶呢？\n\n注意：给定 n 是一个正整数。\n\n示例 1：\n\n-   输入： 2\n-   输出： 2\n-   解释： 有两种方法可以爬到楼顶。\n    -   1 阶 + 1 阶\n    -   2 阶\n\n示例 2：\n\n-   输入： 3\n-   输出： 3\n-   解释： 有三种方法可以爬到楼顶。\n    -   1 阶 + 1 阶 + 1 阶\n    -   1 阶 + 2 阶\n    -   2 阶 + 1 阶\n\n# 2 思路\n第三层楼梯的状态可以由第二层楼梯 和 到第一层楼梯状态推导出来，那么就可以想到动态规划了。\n\t爬到第一层楼梯有一种方法，爬到二层楼梯有两种方法。\n\t第一层楼梯再跨两步就到第三层 ，第二层楼梯再跨一步就到第三层。\n\tdp[3] = dp[2] + dp[1] = 2+1 =3\n\n动归五部曲：\n1.  确定dp数组以及下标的含义\ndp[i]： 爬到第i层楼梯，有dp[i]种方法\n2.  确定递推公式\n首先是dp[i - 1]，上i-1层楼梯，有dp[i - 1]种方法，那么再一步跳一个台阶不就是dp[i]了么。\n还有就是dp[i - 2]，上i-2层楼梯，有dp[i - 2]种方法，那么再一步跳两个台阶不就是dp[i]了么\ndp[i] = dp[i - 1] + dp[i - 2] 。\n3. dp数组如何初始化\n不考虑dp[0]，dp[1] = 1， dp[2] = 2\n>dp[0]没有意义，i从3 开始递推\n4.  确定遍历顺序\n从递推公式dp[i] = dp[i - 1] + dp[i - 2];中可以看出，遍历顺序一定是从前向后遍历的\n5.  举推导dp数组\n举例当n为5的时候，dp table（dp数组）应该是这样的\n![70.爬楼梯](https://img-blog.csdnimg.cn/20210105202546299.png)\n>本质就是斐波那契数列，就是没有讨论dp[0] 的情况\n\n#面试\n有的题解是把dp[0]初始化为1，然后遍历的时候i从2开始遍历，这样是可以解题的，然后强行解释一波dp[0]应该等于1的含义。\n一个严谨的思考过程，应该是初始化dp[1] = 1，dp[2] = 2，然后i从3开始遍历，\n这个可以是面试的一个小问题，考察候选人对dp[i]定义的理解程度。\n\n# 3 代码\n优化一下空间复杂度\n```cpp\nclass Solution {\npublic:\n    int climbStairs(int n) {\n        if (n <= 1) return n;\n        int dp[3];\n        dp[1] = 1;\n        dp[2] = 2;\n        for (int i = 3; i <= n; i++){\n            int sum = dp[2] + dp [1];\n            dp[2] = sum;\n            dp[1] = dp[2]; \n        }\n        return dp[2];\n\n    }\n};\n```\n# 4 加强版爬楼梯\n这道题目还可以继续深化，就是一步一个台阶，两个台阶，三个台阶，直到 m个台阶，有多少种方法爬到n阶楼顶。\n```cpp\nclass Solution {\npublic:\n    int climbStairs(int n) {\n        vector<int> dp(n + 1, 0);\n        dp[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= m; j++) { // 把m换成2，就可以AC爬楼梯这道题\n                if (i - j >= 0) dp[i] += dp[i - j];\n            }\n        }\n        return dp[n];\n    }\n};\n```\n代码中m表示最多可以爬m个台阶。\n\n**以上代码不能运行哈，我主要是为了体现只要把m换成2，粘过去，就可以AC爬楼梯这道题，不信你就粘一下试试，哈哈**。\n\n**此时我就发现一个绝佳的大厂面试题**，第一道题就是单纯的爬楼梯，然后看候选人的代码实现，如果把dp[0]的定义成1了，就可以发难了，为什么dp[0]一定要初始化为1，此时可能候选人就要强行给dp[0]应该是1找各种理由。那这就是一个考察点了，对dp[i]的定义理解的不深入。\n\n我在[通过一道面试题目，讲一讲递归算法的时间复杂度！](https://programmercarl.com/%E5%89%8D%E5%BA%8F/%E9%80%9A%E8%BF%87%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%EF%BC%8C%E8%AE%B2%E4%B8%80%E8%AE%B2%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%81.html)[](https://programmercarl.com/%E5%89%8D%E5%BA%8F/%E9%80%9A%E8%BF%87%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%EF%BC%8C%E8%AE%B2%E4%B8%80%E8%AE%B2%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%81.html)\n中，以我自己面试别人的真实经历，通过求x的n次方 这么简单的题目，就可以考察候选人对算法性能以及递归的理解深度，录友们可以看看，绝对有收获！\n\n\n# 5 参考资料\n[代码随想录](https://www.programmercarl.com/0070.%E7%88%AC%E6%A5%BC%E6%A2%AF.html#%E6%80%9D%E8%B7%AF)\n自用跳转链接：🈚\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/3.爬楼梯","published":1,"updated":"2022-07-12T09:02:14.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjm0062e0mg5no686wl","content":"<p>文章简介：LeetCode  题解——70. 爬楼梯</p>\n<span id=\"more\"></span>\n<h1 id=\"1-爬楼梯\"><a class=\"markdownIt-Anchor\" href=\"#1-爬楼梯\"></a> 1 爬楼梯</h1>\n<p><a href=\"https://leetcode.cn/problems/climbing-stairs/\">力扣题目链接</a></p>\n<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>\n<p>每次你可以爬 1 或 2 个台阶。<strong>你有多少种不同的方法</strong>可以爬到楼顶呢？</p>\n<p>注意：给定 n 是一个正整数。</p>\n<p>示例 1：</p>\n<ul>\n<li>输入： 2</li>\n<li>输出： 2</li>\n<li>解释： 有两种方法可以爬到楼顶。\n<ul>\n<li>1 阶 + 1 阶</li>\n<li>2 阶</li>\n</ul>\n</li>\n</ul>\n<p>示例 2：</p>\n<ul>\n<li>输入： 3</li>\n<li>输出： 3</li>\n<li>解释： 有三种方法可以爬到楼顶。\n<ul>\n<li>1 阶 + 1 阶 + 1 阶</li>\n<li>1 阶 + 2 阶</li>\n<li>2 阶 + 1 阶</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>第三层楼梯的状态可以由第二层楼梯 和 到第一层楼梯状态推导出来，那么就可以想到动态规划了。<br>\n爬到第一层楼梯有一种方法，爬到二层楼梯有两种方法。<br>\n第一层楼梯再跨两步就到第三层 ，第二层楼梯再跨一步就到第三层。<br>\ndp[3] = dp[2] + dp[1] = 2+1 =3</p>\n<p>动归五部曲：</p>\n<ol>\n<li>确定dp数组以及下标的含义<br>\ndp[i]： 爬到第i层楼梯，有dp[i]种方法</li>\n<li>确定递推公式<br>\n首先是dp[i - 1]，上i-1层楼梯，有dp[i - 1]种方法，那么再一步跳一个台阶不就是dp[i]了么。<br>\n还有就是dp[i - 2]，上i-2层楼梯，有dp[i - 2]种方法，那么再一步跳两个台阶不就是dp[i]了么<br>\ndp[i] = dp[i - 1] + dp[i - 2] 。</li>\n<li>dp数组如何初始化<br>\n不考虑dp[0]，dp[1] = 1， dp[2] = 2</li>\n</ol>\n<blockquote>\n<p>dp[0]没有意义，i从3 开始递推</p>\n</blockquote>\n<ol start=\"4\">\n<li>确定遍历顺序<br>\n从递推公式dp[i] = dp[i - 1] + dp[i - 2];中可以看出，遍历顺序一定是从前向后遍历的</li>\n<li>举推导dp数组<br>\n举例当n为5的时候，dp table（dp数组）应该是这样的<br>\n<img src=\"https://img-blog.csdnimg.cn/20210105202546299.png\" alt=\"70.爬楼梯\"></li>\n</ol>\n<blockquote>\n<p>本质就是斐波那契数列，就是没有讨论dp[0] 的情况</p>\n</blockquote>\n<p>#面试<br>\n有的题解是把dp[0]初始化为1，然后遍历的时候i从2开始遍历，这样是可以解题的，然后强行解释一波dp[0]应该等于1的含义。<br>\n一个严谨的思考过程，应该是初始化dp[1] = 1，dp[2] = 2，然后i从3开始遍历，<br>\n这个可以是面试的一个小问题，考察候选人对dp[i]定义的理解程度。</p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>优化一下空间复杂度</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">climbStairs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>{<br>        <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> n;<br>        <span class=\"hljs-type\">int</span> dp[<span class=\"hljs-number\">3</span>];<br>        dp[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;<br>        dp[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">3</span>; i &lt;= n; i++){<br>            <span class=\"hljs-type\">int</span> sum = dp[<span class=\"hljs-number\">2</span>] + dp [<span class=\"hljs-number\">1</span>];<br>            dp[<span class=\"hljs-number\">2</span>] = sum;<br>            dp[<span class=\"hljs-number\">1</span>] = dp[<span class=\"hljs-number\">2</span>]; <br>        }<br>        <span class=\"hljs-keyword\">return</span> dp[<span class=\"hljs-number\">2</span>];<br><br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<h1 id=\"4-加强版爬楼梯\"><a class=\"markdownIt-Anchor\" href=\"#4-加强版爬楼梯\"></a> 4 加强版爬楼梯</h1>\n<p>这道题目还可以继续深化，就是一步一个台阶，两个台阶，三个台阶，直到 m个台阶，有多少种方法爬到n阶楼顶。</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">climbStairs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>{<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(n + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)</span></span>;<br>        dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i++) {<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= m; j++) { <span class=\"hljs-comment\">// 把m换成2，就可以AC爬楼梯这道题</span><br>                <span class=\"hljs-keyword\">if</span> (i - j &gt;= <span class=\"hljs-number\">0</span>) dp[i] += dp[i - j];<br>            }<br>        }<br>        <span class=\"hljs-keyword\">return</span> dp[n];<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<p>代码中m表示最多可以爬m个台阶。</p>\n<p><strong>以上代码不能运行哈，我主要是为了体现只要把m换成2，粘过去，就可以AC爬楼梯这道题，不信你就粘一下试试，哈哈</strong>。</p>\n<p><strong>此时我就发现一个绝佳的大厂面试题</strong>，第一道题就是单纯的爬楼梯，然后看候选人的代码实现，如果把dp[0]的定义成1了，就可以发难了，为什么dp[0]一定要初始化为1，此时可能候选人就要强行给dp[0]应该是1找各种理由。那这就是一个考察点了，对dp[i]的定义理解的不深入。</p>\n<p>我在<a href=\"https://programmercarl.com/%E5%89%8D%E5%BA%8F/%E9%80%9A%E8%BF%87%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%EF%BC%8C%E8%AE%B2%E4%B8%80%E8%AE%B2%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%81.html\">通过一道面试题目，讲一讲递归算法的时间复杂度！</a><a href=\"https://programmercarl.com/%E5%89%8D%E5%BA%8F/%E9%80%9A%E8%BF%87%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%EF%BC%8C%E8%AE%B2%E4%B8%80%E8%AE%B2%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%81.html\"></a><br>\n中，以我自己面试别人的真实经历，通过求x的n次方 这么简单的题目，就可以考察候选人对算法性能以及递归的理解深度，录友们可以看看，绝对有收获！</p>\n<h1 id=\"5-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#5-参考资料\"></a> 5 参考资料</h1>\n<p><a href=\"https://www.programmercarl.com/0070.%E7%88%AC%E6%A5%BC%E6%A2%AF.html#%E6%80%9D%E8%B7%AF\">代码随想录</a><br>\n自用跳转链接：🈚</p>\n","site":{"data":{}},"wordcount":1635,"excerpt":"<p>文章简介：LeetCode  题解——70. 爬楼梯</p>","more":"<h1 id=\"1-爬楼梯\"><a class=\"markdownIt-Anchor\" href=\"#1-爬楼梯\"></a> 1 爬楼梯</h1>\n<p><a href=\"https://leetcode.cn/problems/climbing-stairs/\">力扣题目链接</a></p>\n<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>\n<p>每次你可以爬 1 或 2 个台阶。<strong>你有多少种不同的方法</strong>可以爬到楼顶呢？</p>\n<p>注意：给定 n 是一个正整数。</p>\n<p>示例 1：</p>\n<ul>\n<li>输入： 2</li>\n<li>输出： 2</li>\n<li>解释： 有两种方法可以爬到楼顶。\n<ul>\n<li>1 阶 + 1 阶</li>\n<li>2 阶</li>\n</ul>\n</li>\n</ul>\n<p>示例 2：</p>\n<ul>\n<li>输入： 3</li>\n<li>输出： 3</li>\n<li>解释： 有三种方法可以爬到楼顶。\n<ul>\n<li>1 阶 + 1 阶 + 1 阶</li>\n<li>1 阶 + 2 阶</li>\n<li>2 阶 + 1 阶</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>第三层楼梯的状态可以由第二层楼梯 和 到第一层楼梯状态推导出来，那么就可以想到动态规划了。<br />\n爬到第一层楼梯有一种方法，爬到二层楼梯有两种方法。<br />\n第一层楼梯再跨两步就到第三层 ，第二层楼梯再跨一步就到第三层。<br />\ndp[3] = dp[2] + dp[1] = 2+1 =3</p>\n<p>动归五部曲：</p>\n<ol>\n<li>确定dp数组以及下标的含义<br />\ndp[i]： 爬到第i层楼梯，有dp[i]种方法</li>\n<li>确定递推公式<br />\n首先是dp[i - 1]，上i-1层楼梯，有dp[i - 1]种方法，那么再一步跳一个台阶不就是dp[i]了么。<br />\n还有就是dp[i - 2]，上i-2层楼梯，有dp[i - 2]种方法，那么再一步跳两个台阶不就是dp[i]了么<br />\ndp[i] = dp[i - 1] + dp[i - 2] 。</li>\n<li>dp数组如何初始化<br />\n不考虑dp[0]，dp[1] = 1， dp[2] = 2</li>\n</ol>\n<blockquote>\n<p>dp[0]没有意义，i从3 开始递推</p>\n</blockquote>\n<ol start=\"4\">\n<li>确定遍历顺序<br />\n从递推公式dp[i] = dp[i - 1] + dp[i - 2];中可以看出，遍历顺序一定是从前向后遍历的</li>\n<li>举推导dp数组<br />\n举例当n为5的时候，dp table（dp数组）应该是这样的<br />\n<img src=\"https://img-blog.csdnimg.cn/20210105202546299.png\" alt=\"70.爬楼梯\" /></li>\n</ol>\n<blockquote>\n<p>本质就是斐波那契数列，就是没有讨论dp[0] 的情况</p>\n</blockquote>\n<p>#面试<br />\n有的题解是把dp[0]初始化为1，然后遍历的时候i从2开始遍历，这样是可以解题的，然后强行解释一波dp[0]应该等于1的含义。<br />\n一个严谨的思考过程，应该是初始化dp[1] = 1，dp[2] = 2，然后i从3开始遍历，<br />\n这个可以是面试的一个小问题，考察候选人对dp[i]定义的理解程度。</p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>优化一下空间复杂度</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">climbStairs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> n;<br>        <span class=\"hljs-type\">int</span> dp[<span class=\"hljs-number\">3</span>];<br>        dp[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;<br>        dp[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">3</span>; i &lt;= n; i++)&#123;<br>            <span class=\"hljs-type\">int</span> sum = dp[<span class=\"hljs-number\">2</span>] + dp [<span class=\"hljs-number\">1</span>];<br>            dp[<span class=\"hljs-number\">2</span>] = sum;<br>            dp[<span class=\"hljs-number\">1</span>] = dp[<span class=\"hljs-number\">2</span>]; <br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> dp[<span class=\"hljs-number\">2</span>];<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h1 id=\"4-加强版爬楼梯\"><a class=\"markdownIt-Anchor\" href=\"#4-加强版爬楼梯\"></a> 4 加强版爬楼梯</h1>\n<p>这道题目还可以继续深化，就是一步一个台阶，两个台阶，三个台阶，直到 m个台阶，有多少种方法爬到n阶楼顶。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">climbStairs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>&#123;<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(n + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)</span></span>;<br>        dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i++) &#123;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= m; j++) &#123; <span class=\"hljs-comment\">// 把m换成2，就可以AC爬楼梯这道题</span><br>                <span class=\"hljs-keyword\">if</span> (i - j &gt;= <span class=\"hljs-number\">0</span>) dp[i] += dp[i - j];<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> dp[n];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>代码中m表示最多可以爬m个台阶。</p>\n<p><strong>以上代码不能运行哈，我主要是为了体现只要把m换成2，粘过去，就可以AC爬楼梯这道题，不信你就粘一下试试，哈哈</strong>。</p>\n<p><strong>此时我就发现一个绝佳的大厂面试题</strong>，第一道题就是单纯的爬楼梯，然后看候选人的代码实现，如果把dp[0]的定义成1了，就可以发难了，为什么dp[0]一定要初始化为1，此时可能候选人就要强行给dp[0]应该是1找各种理由。那这就是一个考察点了，对dp[i]的定义理解的不深入。</p>\n<p>我在<a href=\"https://programmercarl.com/%E5%89%8D%E5%BA%8F/%E9%80%9A%E8%BF%87%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%EF%BC%8C%E8%AE%B2%E4%B8%80%E8%AE%B2%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%81.html\">通过一道面试题目，讲一讲递归算法的时间复杂度！</a><a href=\"https://programmercarl.com/%E5%89%8D%E5%BA%8F/%E9%80%9A%E8%BF%87%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%EF%BC%8C%E8%AE%B2%E4%B8%80%E8%AE%B2%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%81.html\"></a><br />\n中，以我自己面试别人的真实经历，通过求x的n次方 这么简单的题目，就可以考察候选人对算法性能以及递归的理解深度，录友们可以看看，绝对有收获！</p>\n<h1 id=\"5-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#5-参考资料\"></a> 5 参考资料</h1>\n<p><a href=\"https://www.programmercarl.com/0070.%E7%88%AC%E6%A5%BC%E6%A2%AF.html#%E6%80%9D%E8%B7%AF\">代码随想录</a><br />\n自用跳转链接：🈚</p>"},{"title":"6.不同路径","date":"2022-07-06T08:34:00.000Z","index_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207061640602.jpg","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207061640602.jpg","abbrlink":31702,"_content":"\n文章简介：LeetCode  题解——62.不同路径\n<!-- more -->\n\n# 1 62.不同路径\n\n[力扣题目链接](https://leetcode.cn/problems/unique-paths/)\n\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。\n\n机器人每次只能**向下或者向右**移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。\n\n问总共有多少条不同的路径？\n\n示例 1：\n\n![](https://img-blog.csdnimg.cn/20210110174033215.png)\n\n-   输入：m = 3, n = 7\n-   输出：28\n\n示例 2：\n\n-   输入：m = 2, n = 3\n-   输出：3\n\n解释： 从左上角开始，总共有 3 条路径可以到达右下角。\n\n1.  向右 -> 向右 -> 向下\n2.  向右 -> 向下 -> 向右\n3.  向下 -> 向右 -> 向右\n\n示例 3：\n\n-   输入：m = 7, n = 3\n-   输出：28\n\n示例 4：\n\n-   输入：m = 3, n = 3\n-   输出：6\n\n提示：\n\n-   1 <= m, n <= 100\n-   题目数据保证答案小于等于 2 * 10^9\n\n# 2 思路\n## 2.1 图论\n暂定\n## 2.2 数论\n暂定\n\n## 2.3 动态规划\n\nm✖️n：行✖️列\n按照动规五部曲来分析：\n\n**1. 确定dp数组（dp table）以及下标的含义**\n`dp[i][j]` ：表示从（0 ，0）出发，到(i, j) 有`dp[i][j]`条不同的路径。\n**2. 确定递推公式**\n机器人只能向下或向右移动\n所以`dp[i][j]`，只能有两个方向来推导出来，即`dp[i - 1][j]` 和 `dp[i][j - 1]`。(上面，左面)\n`dp[i][j] = dp[i - 1][j] + dp[i][j - 1]`，因为只能从上面或者左面过来\n**3.  dp数组的初始化**\n如何初始化呢，首先`dp[i][0]`一定都是1，因为从(0, 0)的位置到(i, 0)的路径只有一条，那么`dp[0][j]`也同理。\n所以初始化代码为：\n```\nfor (int i = 0; i < m; i++) dp[i][0] = 1;\nfor (int j = 0; j < n; j++) dp[0][j] = 1;\n```\n**4.  确定遍历顺序**\n这里要看一下递归公式`dp[i][j] = dp[i - 1][j] + dp[i][j - 1]`，`dp[i][j]`都是从其上方和左方推导而来，那么从左到右一层一层遍历就可以了。两个for循环嵌套\n\n这样就可以保证推导`dp[i][j]`的时候，`dp[i - 1][j]` 和 `dp[i][j - 1]`一定是有数值的。\n\n**5.  举例推导dp数组**\n\n如图所示：\n`dp[i][j] = dp[i - 1][j] + dp[i][j - 1]`，`dp[2][2] = dp[1][2] + dp[2][1]`，`dp[3][7] = dp[2][7] + dp[3][6]` 上面/左面\n![62.不同路径1](https://img-blog.csdnimg.cn/20201209113631392.png)\n# 3 代码\n## 3.1 二维数组解法，编译已通过\n```cpp\nclass Solution {\npublic:\n    int uniquePaths(int m, int n) {\n      vector<vector<int>> dp(m, vector<int>(n,0));\n      for(int i = 0; i < m; i++) dp[i][0] = 1;\n      for(int j = 0; j < n; j++) dp[0][j] = 1;\n      for(int i = 1; i < m; i++){ // 从(1,1)开始的\n          for (int j = 1; j < n; j++){\n              dp[i][j] = dp[i-1][j] + dp[i][j-1];\n          }\n      }\n      return dp[m-1][n-1];// 因为下标从0开始，所以-1\n    }\n};\n```\n## 3.2 一维数组\n编译已通过\n用一维数组的前提是：二维数组的第一行和第一列是相同的值，这样才能保证滚动数组的初始值是一样的\n```c\nclass Solution {\npublic:\n    int uniquePaths(int m, int n) {\n        vector<int> dp (n,1);\n        for(int i = 1; i <m; i++){// 为什么要从1开始呢，因为0行全是1(已经赋值了)，所以从第1行开始\n            for(int j = 1; j <n; j++){// 因为第一列是1，从第二列开始赋值的\n                dp[j] = dp[j] + dp[j-1];\n            }\n        }\n        return dp[n-1];// 从第0行开始的，差了一个1\n\n    }\n};\n```\n![[6.不同路径 2022-07-13 18.05.50.excalidraw|600]]\n滚动数组写法模板\n```cpp********\nvoid test_1_wei_bag_problem() {\n    vector<int> weight = {1, 3, 4};\n    vector<int> value = {15, 20, 30};\n    int bagWeight = 4;\n\n    // 初始化\n    vector<int> dp(bagWeight + 1, 0);\n    for(int i = 0; i < weight.size(); i++) { // 遍历物品\n        for(int j = bagWeight; j >= weight[i]; j--) { // 遍历背包容量\n            dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n        }\n    }\n    cout << dp[bagWeight] << endl;\n}\n\nint main() {\n    test_1_wei_bag_problem();\n}\n\n```\n\n[滚动数组详解_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1dZ4y1u7ZT?spm_id_from=333.337.search-card.all.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a) \n原理 [03:45](https://www.bilibili.com/video/BV1dZ4y1u7ZT?spm_id_from=333.337.search-card.all.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=225.736626) \n\n# 4 参考资料\n[代码随想录](https://www.programmercarl.com/0062.%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84.html#%E6%80%9D%E8%B7%AF)\n自用跳转链接：🈚\n\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/6.不同路径 2.md","raw":"---\ntitle: 6.不同路径\ndate: '2022-07-06 16:34'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 动态规划\nindex_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207061640602.jpg'\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207061640602.jpg'\ntags:\n  - 动态规划\nabbrlink: 31702\n---\n\n文章简介：LeetCode  题解——62.不同路径\n<!-- more -->\n\n# 1 62.不同路径\n\n[力扣题目链接](https://leetcode.cn/problems/unique-paths/)\n\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。\n\n机器人每次只能**向下或者向右**移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。\n\n问总共有多少条不同的路径？\n\n示例 1：\n\n![](https://img-blog.csdnimg.cn/20210110174033215.png)\n\n-   输入：m = 3, n = 7\n-   输出：28\n\n示例 2：\n\n-   输入：m = 2, n = 3\n-   输出：3\n\n解释： 从左上角开始，总共有 3 条路径可以到达右下角。\n\n1.  向右 -> 向右 -> 向下\n2.  向右 -> 向下 -> 向右\n3.  向下 -> 向右 -> 向右\n\n示例 3：\n\n-   输入：m = 7, n = 3\n-   输出：28\n\n示例 4：\n\n-   输入：m = 3, n = 3\n-   输出：6\n\n提示：\n\n-   1 <= m, n <= 100\n-   题目数据保证答案小于等于 2 * 10^9\n\n# 2 思路\n## 2.1 图论\n暂定\n## 2.2 数论\n暂定\n\n## 2.3 动态规划\n\nm✖️n：行✖️列\n按照动规五部曲来分析：\n\n**1. 确定dp数组（dp table）以及下标的含义**\n`dp[i][j]` ：表示从（0 ，0）出发，到(i, j) 有`dp[i][j]`条不同的路径。\n**2. 确定递推公式**\n机器人只能向下或向右移动\n所以`dp[i][j]`，只能有两个方向来推导出来，即`dp[i - 1][j]` 和 `dp[i][j - 1]`。(上面，左面)\n`dp[i][j] = dp[i - 1][j] + dp[i][j - 1]`，因为只能从上面或者左面过来\n**3.  dp数组的初始化**\n如何初始化呢，首先`dp[i][0]`一定都是1，因为从(0, 0)的位置到(i, 0)的路径只有一条，那么`dp[0][j]`也同理。\n所以初始化代码为：\n```\nfor (int i = 0; i < m; i++) dp[i][0] = 1;\nfor (int j = 0; j < n; j++) dp[0][j] = 1;\n```\n**4.  确定遍历顺序**\n这里要看一下递归公式`dp[i][j] = dp[i - 1][j] + dp[i][j - 1]`，`dp[i][j]`都是从其上方和左方推导而来，那么从左到右一层一层遍历就可以了。两个for循环嵌套\n\n这样就可以保证推导`dp[i][j]`的时候，`dp[i - 1][j]` 和 `dp[i][j - 1]`一定是有数值的。\n\n**5.  举例推导dp数组**\n\n如图所示：\n`dp[i][j] = dp[i - 1][j] + dp[i][j - 1]`，`dp[2][2] = dp[1][2] + dp[2][1]`，`dp[3][7] = dp[2][7] + dp[3][6]` 上面/左面\n![62.不同路径1](https://img-blog.csdnimg.cn/20201209113631392.png)\n# 3 代码\n## 3.1 二维数组解法，编译已通过\n```cpp\nclass Solution {\npublic:\n    int uniquePaths(int m, int n) {\n      vector<vector<int>> dp(m, vector<int>(n,0));\n      for(int i = 0; i < m; i++) dp[i][0] = 1;\n      for(int j = 0; j < n; j++) dp[0][j] = 1;\n      for(int i = 1; i < m; i++){ // 从(1,1)开始的\n          for (int j = 1; j < n; j++){\n              dp[i][j] = dp[i-1][j] + dp[i][j-1];\n          }\n      }\n      return dp[m-1][n-1];// 因为下标从0开始，所以-1\n    }\n};\n```\n## 3.2 一维数组\n编译已通过\n用一维数组的前提是：二维数组的第一行和第一列是相同的值，这样才能保证滚动数组的初始值是一样的\n```c\nclass Solution {\npublic:\n    int uniquePaths(int m, int n) {\n        vector<int> dp (n,1);\n        for(int i = 1; i <m; i++){// 为什么要从1开始呢，因为0行全是1(已经赋值了)，所以从第1行开始\n            for(int j = 1; j <n; j++){// 因为第一列是1，从第二列开始赋值的\n                dp[j] = dp[j] + dp[j-1];\n            }\n        }\n        return dp[n-1];// 从第0行开始的，差了一个1\n\n    }\n};\n```\n![[6.不同路径 2022-07-13 18.05.50.excalidraw|600]]\n滚动数组写法模板\n```cpp********\nvoid test_1_wei_bag_problem() {\n    vector<int> weight = {1, 3, 4};\n    vector<int> value = {15, 20, 30};\n    int bagWeight = 4;\n\n    // 初始化\n    vector<int> dp(bagWeight + 1, 0);\n    for(int i = 0; i < weight.size(); i++) { // 遍历物品\n        for(int j = bagWeight; j >= weight[i]; j--) { // 遍历背包容量\n            dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n        }\n    }\n    cout << dp[bagWeight] << endl;\n}\n\nint main() {\n    test_1_wei_bag_problem();\n}\n\n```\n\n[滚动数组详解_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1dZ4y1u7ZT?spm_id_from=333.337.search-card.all.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a) \n原理 [03:45](https://www.bilibili.com/video/BV1dZ4y1u7ZT?spm_id_from=333.337.search-card.all.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=225.736626) \n\n# 4 参考资料\n[代码随想录](https://www.programmercarl.com/0062.%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84.html#%E6%80%9D%E8%B7%AF)\n自用跳转链接：🈚\n\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/6.不同路径 2","published":1,"updated":"2022-07-19T07:01:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjn0066e0mghjgu6mh3","content":"<p>文章简介：LeetCode  题解——62.不同路径</p>\n<span id=\"more\"></span>\n<h1 id=\"1-62不同路径\"><a class=\"markdownIt-Anchor\" href=\"#1-62不同路径\"></a> 1 62.不同路径</h1>\n<p><a href=\"https://leetcode.cn/problems/unique-paths/\">力扣题目链接</a></p>\n<p>一个机器人位于一个 m x n&nbsp;网格的左上角 （起始点在下图中标记为 “Start” ）。</p>\n<p>机器人每次只能<strong>向下或者向右</strong>移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p>\n<p>问总共有多少条不同的路径？</p>\n<p>示例 1：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210110174033215.png\" alt=\"\"></p>\n<ul>\n<li>输入：m = 3, n = 7</li>\n<li>输出：28</li>\n</ul>\n<p>示例 2：</p>\n<ul>\n<li>输入：m = 2, n = 3</li>\n<li>输出：3</li>\n</ul>\n<p>解释： 从左上角开始，总共有 3 条路径可以到达右下角。</p>\n<ol>\n<li>向右 -&gt; 向右 -&gt; 向下</li>\n<li>向右 -&gt; 向下 -&gt; 向右</li>\n<li>向下 -&gt; 向右 -&gt; 向右</li>\n</ol>\n<p>示例 3：</p>\n<ul>\n<li>输入：m = 7, n = 3</li>\n<li>输出：28</li>\n</ul>\n<p>示例 4：</p>\n<ul>\n<li>输入：m = 3, n = 3</li>\n<li>输出：6</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= m, n &lt;= 100</li>\n<li>题目数据保证答案小于等于 2 * 10^9</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<h2 id=\"21-图论\"><a class=\"markdownIt-Anchor\" href=\"#21-图论\"></a> 2.1 图论</h2>\n<p>暂定</p>\n<h2 id=\"22-数论\"><a class=\"markdownIt-Anchor\" href=\"#22-数论\"></a> 2.2 数论</h2>\n<p>暂定</p>\n<h2 id=\"23-动态规划\"><a class=\"markdownIt-Anchor\" href=\"#23-动态规划\"></a> 2.3 动态规划</h2>\n<p>m✖️n：行✖️列<br>\n按照动规五部曲来分析：</p>\n<p><strong>1. 确定dp数组（dp table）以及下标的含义</strong><br>\n<code>dp[i][j]</code> ：表示从（0 ，0）出发，到(i, j) 有<code>dp[i][j]</code>条不同的路径。<br>\n<strong>2. 确定递推公式</strong><br>\n机器人只能向下或向右移动<br>\n所以<code>dp[i][j]</code>，只能有两个方向来推导出来，即<code>dp[i - 1][j]</code> 和 <code>dp[i][j - 1]</code>。(上面，左面)<br>\n<code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</code>，因为只能从上面或者左面过来<br>\n<strong>3.  dp数组的初始化</strong><br>\n如何初始化呢，首先<code>dp[i][0]</code>一定都是1，因为从(0, 0)的位置到(i, 0)的路径只有一条，那么<code>dp[0][j]</code>也同理。<br>\n所以初始化代码为：</p>\n<figure class=\"highlight apache\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; m; i++) dp[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-attribute\">for</span> (int j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) dp[<span class=\"hljs-number\">0</span>][j] = <span class=\"hljs-number\">1</span>;<br></code></pre></td></tr></tbody></table></figure>\n<p><strong>4.  确定遍历顺序</strong><br>\n这里要看一下递归公式<code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</code>，<code>dp[i][j]</code>都是从其上方和左方推导而来，那么从左到右一层一层遍历就可以了。两个for循环嵌套</p>\n<p>这样就可以保证推导<code>dp[i][j]</code>的时候，<code>dp[i - 1][j]</code> 和 <code>dp[i][j - 1]</code>一定是有数值的。</p>\n<p><strong>5.  举例推导dp数组</strong></p>\n<p>如图所示：<br>\n<code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</code>，<code>dp[2][2] = dp[1][2] + dp[2][1]</code>，<code>dp[3][7] = dp[2][7] + dp[3][6]</code> 上面/左面<br>\n<img src=\"https://img-blog.csdnimg.cn/20201209113631392.png\" alt=\"62.不同路径1\"></p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<h2 id=\"31-二维数组解法编译已通过\"><a class=\"markdownIt-Anchor\" href=\"#31-二维数组解法编译已通过\"></a> 3.1 二维数组解法，编译已通过</h2>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">uniquePaths</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> n)</span> </span>{<br>      vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">dp</span>(m, <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;(n,<span class=\"hljs-number\">0</span>));<br>      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i++) dp[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) dp[<span class=\"hljs-number\">0</span>][j] = <span class=\"hljs-number\">1</span>;<br>      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; m; i++){ <span class=\"hljs-comment\">// 从(1,1)开始的</span><br>          <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt; n; j++){<br>              dp[i][j] = dp[i<span class=\"hljs-number\">-1</span>][j] + dp[i][j<span class=\"hljs-number\">-1</span>];<br>          }<br>      }<br>      <span class=\"hljs-keyword\">return</span> dp[m<span class=\"hljs-number\">-1</span>][n<span class=\"hljs-number\">-1</span>];<span class=\"hljs-comment\">// 因为下标从0开始，所以-1</span><br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<h2 id=\"32-一维数组\"><a class=\"markdownIt-Anchor\" href=\"#32-一维数组\"></a> 3.2 一维数组</h2>\n<p>编译已通过<br>\n用一维数组的前提是：二维数组的第一行和第一列是相同的值，这样才能保证滚动数组的初始值是一样的</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> {</span><br>public:<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">uniquePaths</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> n)</span> {<br>        <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title function_\">dp</span> <span class=\"hljs-params\">(n,<span class=\"hljs-number\">1</span>)</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;m; i++){<span class=\"hljs-comment\">// 为什么要从1开始呢，因为0行全是1(已经赋值了)，所以从第1行开始</span><br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;n; j++){<span class=\"hljs-comment\">// 因为第一列是1，从第二列开始赋值的</span><br>                dp[j] = dp[j] + dp[j<span class=\"hljs-number\">-1</span>];<br>            }<br>        }<br>        <span class=\"hljs-keyword\">return</span> dp[n<span class=\"hljs-number\">-1</span>];<span class=\"hljs-comment\">// 从第0行开始的，差了一个1</span><br><br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<p>![[6.不同路径 2022-07-13 18.05.50.excalidraw|600]]<br>\n滚动数组写法模板</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp********\">void test_1_wei_bag_problem() {<br>    vector&lt;int&gt; weight = {1, 3, 4};<br>    vector&lt;int&gt; value = {15, 20, 30};<br>    int bagWeight = 4;<br><br>    // 初始化<br>    vector&lt;int&gt; dp(bagWeight + 1, 0);<br>    for(int i = 0; i &lt; weight.size(); i++) { // 遍历物品<br>        for(int j = bagWeight; j &gt;= weight[i]; j--) { // 遍历背包容量<br>            dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<br>        }<br>    }<br>    cout &lt;&lt; dp[bagWeight] &lt;&lt; endl;<br>}<br><br>int main() {<br>    test_1_wei_bag_problem();<br>}<br><br></code></pre></td></tr></tbody></table></figure>\n<p><a href=\"https://www.bilibili.com/video/BV1dZ4y1u7ZT?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">滚动数组详解_哔哩哔哩_bilibili</a><br>\n原理 <a href=\"https://www.bilibili.com/video/BV1dZ4y1u7ZT?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=225.736626\">03:45</a></p>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p><a href=\"https://www.programmercarl.com/0062.%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84.html#%E6%80%9D%E8%B7%AF\">代码随想录</a><br>\n自用跳转链接：🈚</p>\n","site":{"data":{}},"wordcount":2214,"excerpt":"<p>文章简介：LeetCode  题解——62.不同路径</p>","more":"<h1 id=\"1-62不同路径\"><a class=\"markdownIt-Anchor\" href=\"#1-62不同路径\"></a> 1 62.不同路径</h1>\n<p><a href=\"https://leetcode.cn/problems/unique-paths/\">力扣题目链接</a></p>\n<p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</p>\n<p>机器人每次只能<strong>向下或者向右</strong>移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p>\n<p>问总共有多少条不同的路径？</p>\n<p>示例 1：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210110174033215.png\" alt=\"\" /></p>\n<ul>\n<li>输入：m = 3, n = 7</li>\n<li>输出：28</li>\n</ul>\n<p>示例 2：</p>\n<ul>\n<li>输入：m = 2, n = 3</li>\n<li>输出：3</li>\n</ul>\n<p>解释： 从左上角开始，总共有 3 条路径可以到达右下角。</p>\n<ol>\n<li>向右 -&gt; 向右 -&gt; 向下</li>\n<li>向右 -&gt; 向下 -&gt; 向右</li>\n<li>向下 -&gt; 向右 -&gt; 向右</li>\n</ol>\n<p>示例 3：</p>\n<ul>\n<li>输入：m = 7, n = 3</li>\n<li>输出：28</li>\n</ul>\n<p>示例 4：</p>\n<ul>\n<li>输入：m = 3, n = 3</li>\n<li>输出：6</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= m, n &lt;= 100</li>\n<li>题目数据保证答案小于等于 2 * 10^9</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<h2 id=\"21-图论\"><a class=\"markdownIt-Anchor\" href=\"#21-图论\"></a> 2.1 图论</h2>\n<p>暂定</p>\n<h2 id=\"22-数论\"><a class=\"markdownIt-Anchor\" href=\"#22-数论\"></a> 2.2 数论</h2>\n<p>暂定</p>\n<h2 id=\"23-动态规划\"><a class=\"markdownIt-Anchor\" href=\"#23-动态规划\"></a> 2.3 动态规划</h2>\n<p>m✖️n：行✖️列<br />\n按照动规五部曲来分析：</p>\n<p><strong>1. 确定dp数组（dp table）以及下标的含义</strong><br />\n<code>dp[i][j]</code> ：表示从（0 ，0）出发，到(i, j) 有<code>dp[i][j]</code>条不同的路径。<br />\n<strong>2. 确定递推公式</strong><br />\n机器人只能向下或向右移动<br />\n所以<code>dp[i][j]</code>，只能有两个方向来推导出来，即<code>dp[i - 1][j]</code> 和 <code>dp[i][j - 1]</code>。(上面，左面)<br />\n<code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</code>，因为只能从上面或者左面过来<br />\n<strong>3.  dp数组的初始化</strong><br />\n如何初始化呢，首先<code>dp[i][0]</code>一定都是1，因为从(0, 0)的位置到(i, 0)的路径只有一条，那么<code>dp[0][j]</code>也同理。<br />\n所以初始化代码为：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; m; i++) dp[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-attribute\">for</span> (int j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) dp[<span class=\"hljs-number\">0</span>][j] = <span class=\"hljs-number\">1</span>;<br></code></pre></td></tr></table></figure>\n<p><strong>4.  确定遍历顺序</strong><br />\n这里要看一下递归公式<code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</code>，<code>dp[i][j]</code>都是从其上方和左方推导而来，那么从左到右一层一层遍历就可以了。两个for循环嵌套</p>\n<p>这样就可以保证推导<code>dp[i][j]</code>的时候，<code>dp[i - 1][j]</code> 和 <code>dp[i][j - 1]</code>一定是有数值的。</p>\n<p><strong>5.  举例推导dp数组</strong></p>\n<p>如图所示：<br />\n<code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</code>，<code>dp[2][2] = dp[1][2] + dp[2][1]</code>，<code>dp[3][7] = dp[2][7] + dp[3][6]</code> 上面/左面<br />\n<img src=\"https://img-blog.csdnimg.cn/20201209113631392.png\" alt=\"62.不同路径1\" /></p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<h2 id=\"31-二维数组解法编译已通过\"><a class=\"markdownIt-Anchor\" href=\"#31-二维数组解法编译已通过\"></a> 3.1 二维数组解法，编译已通过</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">uniquePaths</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> n)</span> </span>&#123;<br>      vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">dp</span>(m, <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;(n,<span class=\"hljs-number\">0</span>));<br>      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i++) dp[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) dp[<span class=\"hljs-number\">0</span>][j] = <span class=\"hljs-number\">1</span>;<br>      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; m; i++)&#123; <span class=\"hljs-comment\">// 从(1,1)开始的</span><br>          <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt; n; j++)&#123;<br>              dp[i][j] = dp[i<span class=\"hljs-number\">-1</span>][j] + dp[i][j<span class=\"hljs-number\">-1</span>];<br>          &#125;<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> dp[m<span class=\"hljs-number\">-1</span>][n<span class=\"hljs-number\">-1</span>];<span class=\"hljs-comment\">// 因为下标从0开始，所以-1</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h2 id=\"32-一维数组\"><a class=\"markdownIt-Anchor\" href=\"#32-一维数组\"></a> 3.2 一维数组</h2>\n<p>编译已通过<br />\n用一维数组的前提是：二维数组的第一行和第一列是相同的值，这样才能保证滚动数组的初始值是一样的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> &#123;</span><br>public:<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">uniquePaths</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> n)</span> &#123;<br>        <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title function_\">dp</span> <span class=\"hljs-params\">(n,<span class=\"hljs-number\">1</span>)</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;m; i++)&#123;<span class=\"hljs-comment\">// 为什么要从1开始呢，因为0行全是1(已经赋值了)，所以从第1行开始</span><br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;n; j++)&#123;<span class=\"hljs-comment\">// 因为第一列是1，从第二列开始赋值的</span><br>                dp[j] = dp[j] + dp[j<span class=\"hljs-number\">-1</span>];<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> dp[n<span class=\"hljs-number\">-1</span>];<span class=\"hljs-comment\">// 从第0行开始的，差了一个1</span><br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>![[6.不同路径 2022-07-13 18.05.50.excalidraw|600]]<br />\n滚动数组写法模板</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp********\">void test_1_wei_bag_problem() &#123;<br>    vector&lt;int&gt; weight = &#123;1, 3, 4&#125;;<br>    vector&lt;int&gt; value = &#123;15, 20, 30&#125;;<br>    int bagWeight = 4;<br><br>    // 初始化<br>    vector&lt;int&gt; dp(bagWeight + 1, 0);<br>    for(int i = 0; i &lt; weight.size(); i++) &#123; // 遍历物品<br>        for(int j = bagWeight; j &gt;= weight[i]; j--) &#123; // 遍历背包容量<br>            dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; dp[bagWeight] &lt;&lt; endl;<br>&#125;<br><br>int main() &#123;<br>    test_1_wei_bag_problem();<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p><a href=\"https://www.bilibili.com/video/BV1dZ4y1u7ZT?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">滚动数组详解_哔哩哔哩_bilibili</a><br />\n原理 <a href=\"https://www.bilibili.com/video/BV1dZ4y1u7ZT?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=225.736626\">03:45</a></p>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p><a href=\"https://www.programmercarl.com/0062.%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84.html#%E6%80%9D%E8%B7%AF\">代码随想录</a><br />\n自用跳转链接：🈚</p>"},{"title":"7.不同路径 II","date":"2022-07-06T09:26:00.000Z","index_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207061640602.jpg","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207061640602.jpg","abbrlink":13413,"_content":"\n文章简介：LeetCode  题解——63. 不同路径 II\n<!-- more -->\n\n# 1 63.不同路径 II\n\n[力扣题目链接](https://leetcode.cn/problems/unique-paths-ii/)\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。\n\n机器人每次**只能向下或者向右移动一步**。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\n\n现在考虑**网格中有障碍物**。那么从左上角到右下角将会有多少条不同的路径？\n\n![](https://img-blog.csdnimg.cn/20210111204901338.png)\n\n**网格中的障碍物和空位置分别用 1 和 0 来表示。**\n\n示例 1：\n\n![](https://img-blog.csdnimg.cn/20210111204939971.png)\n\n-   输入：obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\n-   输出：2 解释：\n-   3x3 网格的正中间有一个障碍物。\n-   从左上角到右下角一共有 2 条不同的路径：\n    1.  向右 -> 向右 -> 向下 -> 向下\n    2.  向下 -> 向下 -> 向右 -> 向右\n\n示例 2：\n\n![](https://img-blog.csdnimg.cn/20210111205857918.png)\n\n-   输入：obstacleGrid = [[0,1],[0,0]]\n-   输出：1\n\n提示：\n\n-   m == obstacleGrid.length\n-   n == obstacleGrid[i].length\n-   1 <= m, n <= 100\n-   obstacleGrid[i][j] 为 0 或 1\n\n\n# 2 思路\n相比[[6.不同路径]]不同的是多了障碍，遇到障碍`dp[i][j]`保持0就可以了：表示过不去\n\n两个地方需要跳过赋值\n1. 初始值(第一行第一列)，跳过有障碍的地方在赋值\n2. 递推公式中(除了第一行第一列的)，跳过有障碍的地方在赋值\n\n# 3 代码\n编译已通过\n```cpp\nclass Solution {\npublic:\n    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\n        int m = obstacleGrid.size();\n        int n = obstacleGrid[0].size();\n        vector<vector<int>> dp(m,vector<int>(n,0));\n        for(int i = 0; i < m && obstacleGrid[i][0] == 0; i++) dp[0][i] = 1;\n        for(int j = 0; j < n && obstacleGrid[0][j] == 0; j++) dp[j][0] = 1;\n        for (int i = 1; i < m; i++){\n            for(int j = 1; j < n; j++){\n                if(obstacleGrid[i][j] == 0){ // if (obstacleGrid[i][j] == 1) continue;\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1];\n                }\n            }\n        }\n        return dp[m-1][n-1];\n\n    }\n};\n```\n\n\n# 4 参考资料\n\n自用跳转链接：🈚\n\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/7.不同路径 II.md","raw":"---\ntitle: 7.不同路径 II\ndate: '2022-07-06 17:26'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 动态规划\nindex_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207061640602.jpg'\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207061640602.jpg'\ntags:\n  - 动态规划\nabbrlink: 13413\n---\n\n文章简介：LeetCode  题解——63. 不同路径 II\n<!-- more -->\n\n# 1 63.不同路径 II\n\n[力扣题目链接](https://leetcode.cn/problems/unique-paths-ii/)\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。\n\n机器人每次**只能向下或者向右移动一步**。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\n\n现在考虑**网格中有障碍物**。那么从左上角到右下角将会有多少条不同的路径？\n\n![](https://img-blog.csdnimg.cn/20210111204901338.png)\n\n**网格中的障碍物和空位置分别用 1 和 0 来表示。**\n\n示例 1：\n\n![](https://img-blog.csdnimg.cn/20210111204939971.png)\n\n-   输入：obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\n-   输出：2 解释：\n-   3x3 网格的正中间有一个障碍物。\n-   从左上角到右下角一共有 2 条不同的路径：\n    1.  向右 -> 向右 -> 向下 -> 向下\n    2.  向下 -> 向下 -> 向右 -> 向右\n\n示例 2：\n\n![](https://img-blog.csdnimg.cn/20210111205857918.png)\n\n-   输入：obstacleGrid = [[0,1],[0,0]]\n-   输出：1\n\n提示：\n\n-   m == obstacleGrid.length\n-   n == obstacleGrid[i].length\n-   1 <= m, n <= 100\n-   obstacleGrid[i][j] 为 0 或 1\n\n\n# 2 思路\n相比[[6.不同路径]]不同的是多了障碍，遇到障碍`dp[i][j]`保持0就可以了：表示过不去\n\n两个地方需要跳过赋值\n1. 初始值(第一行第一列)，跳过有障碍的地方在赋值\n2. 递推公式中(除了第一行第一列的)，跳过有障碍的地方在赋值\n\n# 3 代码\n编译已通过\n```cpp\nclass Solution {\npublic:\n    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\n        int m = obstacleGrid.size();\n        int n = obstacleGrid[0].size();\n        vector<vector<int>> dp(m,vector<int>(n,0));\n        for(int i = 0; i < m && obstacleGrid[i][0] == 0; i++) dp[0][i] = 1;\n        for(int j = 0; j < n && obstacleGrid[0][j] == 0; j++) dp[j][0] = 1;\n        for (int i = 1; i < m; i++){\n            for(int j = 1; j < n; j++){\n                if(obstacleGrid[i][j] == 0){ // if (obstacleGrid[i][j] == 1) continue;\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1];\n                }\n            }\n        }\n        return dp[m-1][n-1];\n\n    }\n};\n```\n\n\n# 4 参考资料\n\n自用跳转链接：🈚\n\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/7.不同路径 II","published":1,"updated":"2022-07-12T09:02:14.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjo0068e0mg0gswgqec","content":"<p>文章简介：LeetCode  题解——63. 不同路径 II</p>\n<span id=\"more\"></span>\n<h1 id=\"1-63不同路径-ii\"><a class=\"markdownIt-Anchor\" href=\"#1-63不同路径-ii\"></a> 1 63.不同路径 II</h1>\n<p><a href=\"https://leetcode.cn/problems/unique-paths-ii/\">力扣题目链接</a></p>\n<p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p>\n<p>机器人每次<strong>只能向下或者向右移动一步</strong>。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>\n<p>现在考虑<strong>网格中有障碍物</strong>。那么从左上角到右下角将会有多少条不同的路径？</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210111204901338.png\" alt=\"\"></p>\n<p><strong>网格中的障碍物和空位置分别用 1 和 0 来表示。</strong></p>\n<p>示例 1：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210111204939971.png\" alt=\"\"></p>\n<ul>\n<li>输入：obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]</li>\n<li>输出：2 解释：</li>\n<li>3x3 网格的正中间有一个障碍物。</li>\n<li>从左上角到右下角一共有 2 条不同的路径：\n<ol>\n<li>向右 -&gt; 向右 -&gt; 向下 -&gt; 向下</li>\n<li>向下 -&gt; 向下 -&gt; 向右 -&gt; 向右</li>\n</ol>\n</li>\n</ul>\n<p>示例 2：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210111205857918.png\" alt=\"\"></p>\n<ul>\n<li>输入：obstacleGrid = [[0,1],[0,0]]</li>\n<li>输出：1</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>m ==&nbsp;obstacleGrid.length</li>\n<li>n ==&nbsp;obstacleGrid[i].length</li>\n<li>1 &lt;= m, n &lt;= 100</li>\n<li>obstacleGrid[i][j] 为 0 或 1</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>相比[[6.不同路径]]不同的是多了障碍，遇到障碍<code>dp[i][j]</code>保持0就可以了：表示过不去</p>\n<p>两个地方需要跳过赋值</p>\n<ol>\n<li>初始值(第一行第一列)，跳过有障碍的地方在赋值</li>\n<li>递推公式中(除了第一行第一列的)，跳过有障碍的地方在赋值</li>\n</ol>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>编译已通过</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">uniquePathsWithObstacles</span><span class=\"hljs-params\">(vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt;&amp; obstacleGrid)</span> </span>{<br>        <span class=\"hljs-type\">int</span> m = obstacleGrid.<span class=\"hljs-built_in\">size</span>();<br>        <span class=\"hljs-type\">int</span> n = obstacleGrid[<span class=\"hljs-number\">0</span>].<span class=\"hljs-built_in\">size</span>();<br>        vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">dp</span>(m,<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;(n,<span class=\"hljs-number\">0</span>));<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m &amp;&amp; obstacleGrid[i][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-number\">0</span>; i++) dp[<span class=\"hljs-number\">0</span>][i] = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n &amp;&amp; obstacleGrid[<span class=\"hljs-number\">0</span>][j] == <span class=\"hljs-number\">0</span>; j++) dp[j][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; m; i++){<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt; n; j++){<br>                <span class=\"hljs-keyword\">if</span>(obstacleGrid[i][j] == <span class=\"hljs-number\">0</span>){ <span class=\"hljs-comment\">// if (obstacleGrid[i][j] == 1) continue;</span><br>                    dp[i][j] = dp[i<span class=\"hljs-number\">-1</span>][j] + dp[i][j<span class=\"hljs-number\">-1</span>];<br>                }<br>            }<br>        }<br>        <span class=\"hljs-keyword\">return</span> dp[m<span class=\"hljs-number\">-1</span>][n<span class=\"hljs-number\">-1</span>];<br><br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p>自用跳转链接：🈚</p>\n","site":{"data":{}},"wordcount":1158,"excerpt":"<p>文章简介：LeetCode  题解——63. 不同路径 II</p>","more":"<h1 id=\"1-63不同路径-ii\"><a class=\"markdownIt-Anchor\" href=\"#1-63不同路径-ii\"></a> 1 63.不同路径 II</h1>\n<p><a href=\"https://leetcode.cn/problems/unique-paths-ii/\">力扣题目链接</a></p>\n<p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p>\n<p>机器人每次<strong>只能向下或者向右移动一步</strong>。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p>\n<p>现在考虑<strong>网格中有障碍物</strong>。那么从左上角到右下角将会有多少条不同的路径？</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210111204901338.png\" alt=\"\" /></p>\n<p><strong>网格中的障碍物和空位置分别用 1 和 0 来表示。</strong></p>\n<p>示例 1：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210111204939971.png\" alt=\"\" /></p>\n<ul>\n<li>输入：obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]</li>\n<li>输出：2 解释：</li>\n<li>3x3 网格的正中间有一个障碍物。</li>\n<li>从左上角到右下角一共有 2 条不同的路径：\n<ol>\n<li>向右 -&gt; 向右 -&gt; 向下 -&gt; 向下</li>\n<li>向下 -&gt; 向下 -&gt; 向右 -&gt; 向右</li>\n</ol>\n</li>\n</ul>\n<p>示例 2：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210111205857918.png\" alt=\"\" /></p>\n<ul>\n<li>输入：obstacleGrid = [[0,1],[0,0]]</li>\n<li>输出：1</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>m == obstacleGrid.length</li>\n<li>n == obstacleGrid[i].length</li>\n<li>1 &lt;= m, n &lt;= 100</li>\n<li>obstacleGrid[i][j] 为 0 或 1</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>相比[[6.不同路径]]不同的是多了障碍，遇到障碍<code>dp[i][j]</code>保持0就可以了：表示过不去</p>\n<p>两个地方需要跳过赋值</p>\n<ol>\n<li>初始值(第一行第一列)，跳过有障碍的地方在赋值</li>\n<li>递推公式中(除了第一行第一列的)，跳过有障碍的地方在赋值</li>\n</ol>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>编译已通过</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">uniquePathsWithObstacles</span><span class=\"hljs-params\">(vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt;&amp; obstacleGrid)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> m = obstacleGrid.<span class=\"hljs-built_in\">size</span>();<br>        <span class=\"hljs-type\">int</span> n = obstacleGrid[<span class=\"hljs-number\">0</span>].<span class=\"hljs-built_in\">size</span>();<br>        vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">dp</span>(m,<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;(n,<span class=\"hljs-number\">0</span>));<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m &amp;&amp; obstacleGrid[i][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-number\">0</span>; i++) dp[<span class=\"hljs-number\">0</span>][i] = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n &amp;&amp; obstacleGrid[<span class=\"hljs-number\">0</span>][j] == <span class=\"hljs-number\">0</span>; j++) dp[j][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; m; i++)&#123;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt; n; j++)&#123;<br>                <span class=\"hljs-keyword\">if</span>(obstacleGrid[i][j] == <span class=\"hljs-number\">0</span>)&#123; <span class=\"hljs-comment\">// if (obstacleGrid[i][j] == 1) continue;</span><br>                    dp[i][j] = dp[i<span class=\"hljs-number\">-1</span>][j] + dp[i][j<span class=\"hljs-number\">-1</span>];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> dp[m<span class=\"hljs-number\">-1</span>][n<span class=\"hljs-number\">-1</span>];<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p>自用跳转链接：🈚</p>"},{"title":"8.整数拆分","date":"2022-07-06T13:06:00.000Z","index_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207061640602.jpg","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207061640602.jpg","abbrlink":5255,"_content":"\n# 1 343.整数拆分\n\n[力扣题目链接](https://leetcode.cn/problems/integer-break/)\n\n给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。\n\n示例 1:\n\n-   输入: 2\n-   输出: 1\n-   解释: 2 = 1 + 1, 1 × 1 = 1。\n\n示例 2:\n\n-   输入: 10\n-   输出: 36\n-   解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。\n-   说明: 你可以假设 n 不小于 2 且不大于 58。\n\n# 2 思路\n## 2.1 动态规划\n将数的拆分想象成块的切分\n2,3不切分，因为切分来会变小\n如果不用去写dp初始值，可以在转移方程里面再加上一个和j * i-j的最大值比较\n两个for循环是标准的动归写法\n\n1. 确定dp数组（dp table）以及下标的含义\ndp[i]：分拆数字i，可以得到的最大乘积为dp[i]。\n2. 确定递推公式\n下面这样写需要提前定义2,3不可拆定义出来他们的dp值，因为他俩不用拆是最大\ndp[i] = max({dp[i],dp[j] * dp[i-j] );\ndp[i]是随着i的值在一直变化的，max 中有dp[i]就是保证，不断变化中的值取最高的那一个\nj是切的位置，把一个数切成两部分，而这左右两部分又可以在切。也就是dp[j]，dp[i-j]，也是默认将一个数强制拆成4份以及4份以上了。\n\n或者这样，不用提前定义dp[2]，dp[3]\ndp[i] = max(dp[i], max((i - j) * j, dp[i - j] * j));\n3. dp的初始化\ndp[0] dp[1]无意义，没法拆，所以不赋值。从dp[2] = 1开始，把dp[3] = 2。\n2，3不用拆是最大的\n\n\n## 2.2 贪心算法\n数学已证明过：**每次拆成n个3，如果剩下是4，则保留4，然后相乘**\n尽量切3，最后切2，2和3是最稳定最稳定不可拆分质数\n>1，2，3不划分最大，一划分反而变小了\n# 3 代码\n## 3.1 动态规划\n编译已通过\n```cpp\nclass Solution {\npublic:\n    int integerBreak(int n) {\n        vector<int> dp(n+1,0);\n        if (n == 2) return 1;\n        if (n == 3) return 2;\n        dp[2] = 1;\n        dp[3] = 2;\n        for (int i = 4; i <= n; i++){ // 应该从数字4开始，对应的下标是5 \n            for (int j = 1; j <= i/2; j++){ // 切一半就行，另一半是对称的\n                dp[i] = max(dp[i], max(j*(i-j), j*dp[i-j])); // 后一个max中是数的相乘 和 数和上一次的最优结果相乘\n            }\n        }\n        return dp[n];\n    }\n};\n```\n编译已通过\n```cpp\nclass Solution {\npublic:\n    int integerBreak(int n) {\n        vector<int> dp(n+1);\n        if (n == 2) return 1;\n        if (n == 3) return 2;\n        // 2，3不切分，要这样赋值下面才能通过\n        dp[2] = 2;\n        dp[3] = 3;\n        for (int i = 4; i <= n; i++){\n            for (int j = 1; j <= i/2; j++){\n                dp[i] = max(dp[i], dp[j]*dp[i-j]);\n            }\n        }\n        return dp[n];\n    }\n};\n```\n如果递归公式是 dp[i] = max(dp[i], dp[i - j] * dp[j]);，就一定要这么初始化。递推公式没毛病，但初始化解释不通！\n\n虽然代码在初始位置有一个判断if (n <= 3) return 1 * (n - 1);，保证n<=3 结果是正确的，但代码后面又要给dp[1]赋值1 和 dp[2] 赋值 2，**这其实就是自相矛盾的代码，违背了dp[i]的定义！**\n\n我举这个例子，其实就说做题的严谨性，上面这个代码也可以AC，大体上一看好像也没有毛病，递推公式也说得过去，但是仅仅是恰巧过了而已\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207112130227.png)\n// 错了的原因是dp[1]是0，必须定义dp[1] = 1,另外还有其他的原因\n\n## 3.2 贪心\n编译已通过\n```cpp\nclass Solution {\npublic:\n    int integerBreak(int n) {\n        if (n == 2) return 1;\n        if (n == 3) return 2;\n        if (n == 4) return 4; // 要有 = 4的判断，不然4的没法输出\n                int result = 1;，\n        while(n > 4){\n            result *= 3;\n            n -= 3;\n        }\n        return result * n;\n    }\n};\n```\n\n\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207112032423.png)\n\n# 4 参考资料\n[LeetCode每日打卡.343.整数拆分_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1Nt4y1D7gh?spm_id_from=333.337.search-card.all.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n自用跳转链接：🈚\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/8.整数拆分.md","raw":"---\ntitle: 8.整数拆分\ndate: '2022-07-06 21:06'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 动态规划\nindex_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207061640602.jpg'\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207061640602.jpg'\ntags:\n  - 动态规划\nabbrlink: 5255\n---\n\n# 1 343.整数拆分\n\n[力扣题目链接](https://leetcode.cn/problems/integer-break/)\n\n给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。\n\n示例 1:\n\n-   输入: 2\n-   输出: 1\n-   解释: 2 = 1 + 1, 1 × 1 = 1。\n\n示例 2:\n\n-   输入: 10\n-   输出: 36\n-   解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。\n-   说明: 你可以假设 n 不小于 2 且不大于 58。\n\n# 2 思路\n## 2.1 动态规划\n将数的拆分想象成块的切分\n2,3不切分，因为切分来会变小\n如果不用去写dp初始值，可以在转移方程里面再加上一个和j * i-j的最大值比较\n两个for循环是标准的动归写法\n\n1. 确定dp数组（dp table）以及下标的含义\ndp[i]：分拆数字i，可以得到的最大乘积为dp[i]。\n2. 确定递推公式\n下面这样写需要提前定义2,3不可拆定义出来他们的dp值，因为他俩不用拆是最大\ndp[i] = max({dp[i],dp[j] * dp[i-j] );\ndp[i]是随着i的值在一直变化的，max 中有dp[i]就是保证，不断变化中的值取最高的那一个\nj是切的位置，把一个数切成两部分，而这左右两部分又可以在切。也就是dp[j]，dp[i-j]，也是默认将一个数强制拆成4份以及4份以上了。\n\n或者这样，不用提前定义dp[2]，dp[3]\ndp[i] = max(dp[i], max((i - j) * j, dp[i - j] * j));\n3. dp的初始化\ndp[0] dp[1]无意义，没法拆，所以不赋值。从dp[2] = 1开始，把dp[3] = 2。\n2，3不用拆是最大的\n\n\n## 2.2 贪心算法\n数学已证明过：**每次拆成n个3，如果剩下是4，则保留4，然后相乘**\n尽量切3，最后切2，2和3是最稳定最稳定不可拆分质数\n>1，2，3不划分最大，一划分反而变小了\n# 3 代码\n## 3.1 动态规划\n编译已通过\n```cpp\nclass Solution {\npublic:\n    int integerBreak(int n) {\n        vector<int> dp(n+1,0);\n        if (n == 2) return 1;\n        if (n == 3) return 2;\n        dp[2] = 1;\n        dp[3] = 2;\n        for (int i = 4; i <= n; i++){ // 应该从数字4开始，对应的下标是5 \n            for (int j = 1; j <= i/2; j++){ // 切一半就行，另一半是对称的\n                dp[i] = max(dp[i], max(j*(i-j), j*dp[i-j])); // 后一个max中是数的相乘 和 数和上一次的最优结果相乘\n            }\n        }\n        return dp[n];\n    }\n};\n```\n编译已通过\n```cpp\nclass Solution {\npublic:\n    int integerBreak(int n) {\n        vector<int> dp(n+1);\n        if (n == 2) return 1;\n        if (n == 3) return 2;\n        // 2，3不切分，要这样赋值下面才能通过\n        dp[2] = 2;\n        dp[3] = 3;\n        for (int i = 4; i <= n; i++){\n            for (int j = 1; j <= i/2; j++){\n                dp[i] = max(dp[i], dp[j]*dp[i-j]);\n            }\n        }\n        return dp[n];\n    }\n};\n```\n如果递归公式是 dp[i] = max(dp[i], dp[i - j] * dp[j]);，就一定要这么初始化。递推公式没毛病，但初始化解释不通！\n\n虽然代码在初始位置有一个判断if (n <= 3) return 1 * (n - 1);，保证n<=3 结果是正确的，但代码后面又要给dp[1]赋值1 和 dp[2] 赋值 2，**这其实就是自相矛盾的代码，违背了dp[i]的定义！**\n\n我举这个例子，其实就说做题的严谨性，上面这个代码也可以AC，大体上一看好像也没有毛病，递推公式也说得过去，但是仅仅是恰巧过了而已\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207112130227.png)\n// 错了的原因是dp[1]是0，必须定义dp[1] = 1,另外还有其他的原因\n\n## 3.2 贪心\n编译已通过\n```cpp\nclass Solution {\npublic:\n    int integerBreak(int n) {\n        if (n == 2) return 1;\n        if (n == 3) return 2;\n        if (n == 4) return 4; // 要有 = 4的判断，不然4的没法输出\n                int result = 1;，\n        while(n > 4){\n            result *= 3;\n            n -= 3;\n        }\n        return result * n;\n    }\n};\n```\n\n\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207112032423.png)\n\n# 4 参考资料\n[LeetCode每日打卡.343.整数拆分_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1Nt4y1D7gh?spm_id_from=333.337.search-card.all.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n自用跳转链接：🈚\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/8.整数拆分","published":1,"updated":"2022-07-12T10:02:06.510Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjo006ce0mg41u1c5jx","content":"<h1 id=\"1-343整数拆分\"><a class=\"markdownIt-Anchor\" href=\"#1-343整数拆分\"></a> 1 343.整数拆分</h1>\n<p><a href=\"https://leetcode.cn/problems/integer-break/\">力扣题目链接</a></p>\n<p>给定一个正整数&nbsp;n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。</p>\n<p>示例 1:</p>\n<ul>\n<li>输入: 2</li>\n<li>输出: 1</li>\n<li>解释: 2 = 1 + 1, 1 × 1 = 1。</li>\n</ul>\n<p>示例&nbsp;2:</p>\n<ul>\n<li>输入: 10</li>\n<li>输出: 36</li>\n<li>解释: 10 = 3 + 3 + 4, 3 ×&nbsp;3 ×&nbsp;4 = 36。</li>\n<li>说明: 你可以假设&nbsp;n&nbsp;不小于 2 且不大于 58。</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<h2 id=\"21-动态规划\"><a class=\"markdownIt-Anchor\" href=\"#21-动态规划\"></a> 2.1 动态规划</h2>\n<p>将数的拆分想象成块的切分<br>\n2,3不切分，因为切分来会变小<br>\n如果不用去写dp初始值，可以在转移方程里面再加上一个和j * i-j的最大值比较<br>\n两个for循环是标准的动归写法</p>\n<ol>\n<li>确定dp数组（dp table）以及下标的含义<br>\ndp[i]：分拆数字i，可以得到的最大乘积为dp[i]。</li>\n<li>确定递推公式<br>\n下面这样写需要提前定义2,3不可拆定义出来他们的dp值，因为他俩不用拆是最大<br>\ndp[i] = max({dp[i],dp[j] * dp[i-j] );<br>\ndp[i]是随着i的值在一直变化的，max 中有dp[i]就是保证，不断变化中的值取最高的那一个<br>\nj是切的位置，把一个数切成两部分，而这左右两部分又可以在切。也就是dp[j]，dp[i-j]，也是默认将一个数强制拆成4份以及4份以上了。</li>\n</ol>\n<p>或者这样，不用提前定义dp[2]，dp[3]<br>\ndp[i] = max(dp[i], max((i - j) * j, dp[i - j] * j));<br>\n3. dp的初始化<br>\ndp[0] dp[1]无意义，没法拆，所以不赋值。从dp[2] = 1开始，把dp[3] = 2。<br>\n2，3不用拆是最大的</p>\n<h2 id=\"22-贪心算法\"><a class=\"markdownIt-Anchor\" href=\"#22-贪心算法\"></a> 2.2 贪心算法</h2>\n<p>数学已证明过：<strong>每次拆成n个3，如果剩下是4，则保留4，然后相乘</strong><br>\n尽量切3，最后切2，2和3是最稳定最稳定不可拆分质数</p>\n<blockquote>\n<p>1，2，3不划分最大，一划分反而变小了</p>\n</blockquote>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<h2 id=\"31-动态规划\"><a class=\"markdownIt-Anchor\" href=\"#31-动态规划\"></a> 3.1 动态规划</h2>\n<p>编译已通过</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">integerBreak</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>{<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(n+<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>)</span></span>;<br>        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">3</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;<br>        dp[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">1</span>;<br>        dp[<span class=\"hljs-number\">3</span>] = <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">4</span>; i &lt;= n; i++){ <span class=\"hljs-comment\">// 应该从数字4开始，对应的下标是5 </span><br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= i/<span class=\"hljs-number\">2</span>; j++){ <span class=\"hljs-comment\">// 切一半就行，另一半是对称的</span><br>                dp[i] = <span class=\"hljs-built_in\">max</span>(dp[i], <span class=\"hljs-built_in\">max</span>(j*(i-j), j*dp[i-j])); <span class=\"hljs-comment\">// 后一个max中是数的相乘 和 数和上一次的最优结果相乘</span><br>            }<br>        }<br>        <span class=\"hljs-keyword\">return</span> dp[n];<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<p>编译已通过</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">integerBreak</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>{<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(n+<span class=\"hljs-number\">1</span>)</span></span>;<br>        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">3</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-comment\">// 2，3不切分，要这样赋值下面才能通过</span><br>        dp[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">2</span>;<br>        dp[<span class=\"hljs-number\">3</span>] = <span class=\"hljs-number\">3</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">4</span>; i &lt;= n; i++){<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= i/<span class=\"hljs-number\">2</span>; j++){<br>                dp[i] = <span class=\"hljs-built_in\">max</span>(dp[i], dp[j]*dp[i-j]);<br>            }<br>        }<br>        <span class=\"hljs-keyword\">return</span> dp[n];<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<p>如果递归公式是 dp[i] = max(dp[i], dp[i - j] * dp[j]);，就一定要这么初始化。递推公式没毛病，但初始化解释不通！</p>\n<p>虽然代码在初始位置有一个判断if (n &lt;= 3) return 1 * (n - 1);，保证n&lt;=3 结果是正确的，但代码后面又要给dp[1]赋值1 和 dp[2] 赋值 2，<strong>这其实就是自相矛盾的代码，违背了dp[i]的定义！</strong></p>\n<p>我举这个例子，其实就说做题的严谨性，上面这个代码也可以AC，大体上一看好像也没有毛病，递推公式也说得过去，但是仅仅是恰巧过了而已<br>\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207112130227.png\" alt=\"\"><br>\n// 错了的原因是dp[1]是0，必须定义dp[1] = 1,另外还有其他的原因</p>\n<h2 id=\"32-贪心\"><a class=\"markdownIt-Anchor\" href=\"#32-贪心\"></a> 3.2 贪心</h2>\n<p>编译已通过</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">integerBreak</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>{<br>        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">3</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">4</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4</span>; <span class=\"hljs-comment\">// 要有 = 4的判断，不然4的没法输出</span><br>                <span class=\"hljs-type\">int</span> result = <span class=\"hljs-number\">1</span>;，<br>        <span class=\"hljs-keyword\">while</span>(n &gt; <span class=\"hljs-number\">4</span>){<br>            result *= <span class=\"hljs-number\">3</span>;<br>            n -= <span class=\"hljs-number\">3</span>;<br>        }<br>        <span class=\"hljs-keyword\">return</span> result * n;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207112032423.png\" alt=\"\"></p>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p><a href=\"https://www.bilibili.com/video/BV1Nt4y1D7gh?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">LeetCode每日打卡.343.整数拆分_哔哩哔哩_bilibili</a><br>\n自用跳转链接：🈚</p>\n","site":{"data":{}},"wordcount":1905,"excerpt":"","more":"<h1 id=\"1-343整数拆分\"><a class=\"markdownIt-Anchor\" href=\"#1-343整数拆分\"></a> 1 343.整数拆分</h1>\n<p><a href=\"https://leetcode.cn/problems/integer-break/\">力扣题目链接</a></p>\n<p>给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。</p>\n<p>示例 1:</p>\n<ul>\n<li>输入: 2</li>\n<li>输出: 1</li>\n<li>解释: 2 = 1 + 1, 1 × 1 = 1。</li>\n</ul>\n<p>示例 2:</p>\n<ul>\n<li>输入: 10</li>\n<li>输出: 36</li>\n<li>解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。</li>\n<li>说明: 你可以假设 n 不小于 2 且不大于 58。</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<h2 id=\"21-动态规划\"><a class=\"markdownIt-Anchor\" href=\"#21-动态规划\"></a> 2.1 动态规划</h2>\n<p>将数的拆分想象成块的切分<br />\n2,3不切分，因为切分来会变小<br />\n如果不用去写dp初始值，可以在转移方程里面再加上一个和j * i-j的最大值比较<br />\n两个for循环是标准的动归写法</p>\n<ol>\n<li>确定dp数组（dp table）以及下标的含义<br />\ndp[i]：分拆数字i，可以得到的最大乘积为dp[i]。</li>\n<li>确定递推公式<br />\n下面这样写需要提前定义2,3不可拆定义出来他们的dp值，因为他俩不用拆是最大<br />\ndp[i] = max({dp[i],dp[j] * dp[i-j] );<br />\ndp[i]是随着i的值在一直变化的，max 中有dp[i]就是保证，不断变化中的值取最高的那一个<br />\nj是切的位置，把一个数切成两部分，而这左右两部分又可以在切。也就是dp[j]，dp[i-j]，也是默认将一个数强制拆成4份以及4份以上了。</li>\n</ol>\n<p>或者这样，不用提前定义dp[2]，dp[3]<br />\ndp[i] = max(dp[i], max((i - j) * j, dp[i - j] * j));<br />\n3. dp的初始化<br />\ndp[0] dp[1]无意义，没法拆，所以不赋值。从dp[2] = 1开始，把dp[3] = 2。<br />\n2，3不用拆是最大的</p>\n<h2 id=\"22-贪心算法\"><a class=\"markdownIt-Anchor\" href=\"#22-贪心算法\"></a> 2.2 贪心算法</h2>\n<p>数学已证明过：<strong>每次拆成n个3，如果剩下是4，则保留4，然后相乘</strong><br />\n尽量切3，最后切2，2和3是最稳定最稳定不可拆分质数</p>\n<blockquote>\n<p>1，2，3不划分最大，一划分反而变小了</p>\n</blockquote>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<h2 id=\"31-动态规划\"><a class=\"markdownIt-Anchor\" href=\"#31-动态规划\"></a> 3.1 动态规划</h2>\n<p>编译已通过</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">integerBreak</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>&#123;<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(n+<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>)</span></span>;<br>        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">3</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;<br>        dp[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">1</span>;<br>        dp[<span class=\"hljs-number\">3</span>] = <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">4</span>; i &lt;= n; i++)&#123; <span class=\"hljs-comment\">// 应该从数字4开始，对应的下标是5 </span><br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= i/<span class=\"hljs-number\">2</span>; j++)&#123; <span class=\"hljs-comment\">// 切一半就行，另一半是对称的</span><br>                dp[i] = <span class=\"hljs-built_in\">max</span>(dp[i], <span class=\"hljs-built_in\">max</span>(j*(i-j), j*dp[i-j])); <span class=\"hljs-comment\">// 后一个max中是数的相乘 和 数和上一次的最优结果相乘</span><br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> dp[n];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>编译已通过</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">integerBreak</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>&#123;<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(n+<span class=\"hljs-number\">1</span>)</span></span>;<br>        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">3</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-comment\">// 2，3不切分，要这样赋值下面才能通过</span><br>        dp[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">2</span>;<br>        dp[<span class=\"hljs-number\">3</span>] = <span class=\"hljs-number\">3</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">4</span>; i &lt;= n; i++)&#123;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= i/<span class=\"hljs-number\">2</span>; j++)&#123;<br>                dp[i] = <span class=\"hljs-built_in\">max</span>(dp[i], dp[j]*dp[i-j]);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> dp[n];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>如果递归公式是 dp[i] = max(dp[i], dp[i - j] * dp[j]);，就一定要这么初始化。递推公式没毛病，但初始化解释不通！</p>\n<p>虽然代码在初始位置有一个判断if (n &lt;= 3) return 1 * (n - 1);，保证n&lt;=3 结果是正确的，但代码后面又要给dp[1]赋值1 和 dp[2] 赋值 2，<strong>这其实就是自相矛盾的代码，违背了dp[i]的定义！</strong></p>\n<p>我举这个例子，其实就说做题的严谨性，上面这个代码也可以AC，大体上一看好像也没有毛病，递推公式也说得过去，但是仅仅是恰巧过了而已<br />\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207112130227.png\" alt=\"\" /><br />\n// 错了的原因是dp[1]是0，必须定义dp[1] = 1,另外还有其他的原因</p>\n<h2 id=\"32-贪心\"><a class=\"markdownIt-Anchor\" href=\"#32-贪心\"></a> 3.2 贪心</h2>\n<p>编译已通过</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">integerBreak</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">3</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">4</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4</span>; <span class=\"hljs-comment\">// 要有 = 4的判断，不然4的没法输出</span><br>                <span class=\"hljs-type\">int</span> result = <span class=\"hljs-number\">1</span>;，<br>        <span class=\"hljs-keyword\">while</span>(n &gt; <span class=\"hljs-number\">4</span>)&#123;<br>            result *= <span class=\"hljs-number\">3</span>;<br>            n -= <span class=\"hljs-number\">3</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> result * n;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207112032423.png\" alt=\"\" /></p>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p><a href=\"https://www.bilibili.com/video/BV1Nt4y1D7gh?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">LeetCode每日打卡.343.整数拆分_哔哩哔哩_bilibili</a><br />\n自用跳转链接：🈚</p>\n"},{"title":"6.不同路径","date":"2022-07-06T08:34:00.000Z","index_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207061640602.jpg","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207061640602.jpg","abbrlink":31702,"_content":"\n文章简介：LeetCode  题解——62.不同路径\n<!-- more -->\n\n# 1 62.不同路径\n\n[力扣题目链接](https://leetcode.cn/problems/unique-paths/)\n\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。\n\n机器人每次只能**向下或者向右**移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。\n\n问总共有多少条不同的路径？\n\n示例 1：\n\n![](https://img-blog.csdnimg.cn/20210110174033215.png)\n\n-   输入：m = 3, n = 7\n-   输出：28\n\n示例 2：\n\n-   输入：m = 2, n = 3\n-   输出：3\n\n解释： 从左上角开始，总共有 3 条路径可以到达右下角。\n\n1.  向右 -> 向右 -> 向下\n2.  向右 -> 向下 -> 向右\n3.  向下 -> 向右 -> 向右\n\n示例 3：\n\n-   输入：m = 7, n = 3\n-   输出：28\n\n示例 4：\n\n-   输入：m = 3, n = 3\n-   输出：6\n\n提示：\n\n-   1 <= m, n <= 100\n-   题目数据保证答案小于等于 2 * 10^9\n\n# 2 思路\n## 2.1 图论\n暂定\n## 2.2 数论\n暂定\n\n## 2.3 动态规划\n\nm✖️n：行✖️列\n按照动规五部曲来分析：\n\n**1. 确定dp数组（dp table）以及下标的含义**\n`dp[i][j]` ：表示从（0 ，0）出发，到(i, j) 有`dp[i][j]`条不同的路径。\n**2. 确定递推公式**\n机器人只能向下或向右移动\n所以`dp[i][j]`，只能有两个方向来推导出来，即`dp[i - 1][j]` 和 `dp[i][j - 1]`。(上面，左面)\n`dp[i][j] = dp[i - 1][j] + dp[i][j - 1]`，因为只能从上面或者左面过来\n**3.  dp数组的初始化**\n如何初始化呢，首先`dp[i][0]`一定都是1，因为从(0, 0)的位置到(i, 0)的路径只有一条，那么`dp[0][j]`也同理。\n所以初始化代码为：\n```\nfor (int i = 0; i < m; i++) dp[i][0] = 1;\nfor (int j = 0; j < n; j++) dp[0][j] = 1;\n```\n**4.  确定遍历顺序**\n这里要看一下递归公式`dp[i][j] = dp[i - 1][j] + dp[i][j - 1]`，`dp[i][j]`都是从其上方和左方推导而来，那么从左到右一层一层遍历就可以了。两个for循环嵌套\n\n这样就可以保证推导`dp[i][j]`的时候，`dp[i - 1][j]` 和 `dp[i][j - 1]`一定是有数值的。\n\n**5.  举例推导dp数组**\n\n如图所示：\n`dp[i][j] = dp[i - 1][j] + dp[i][j - 1]`，`dp[2][2] = dp[1][2] + dp[2][1]`，`dp[3][7] = dp[2][7] + dp[3][6]` 上面/左面\n![62.不同路径1](https://img-blog.csdnimg.cn/20201209113631392.png)\n# 3 代码\n## 3.1 二维数组解法，编译已通过\n```cpp\nclass Solution {\npublic:\n    int uniquePaths(int m, int n) {\n      vector<vector<int>> dp(m, vector<int>(n,0));\n      for(int i = 0; i < m; i++) dp[i][0] = 1;\n      for(int j = 0; j < n; j++) dp[0][j] = 1;\n      for(int i = 1; i < m; i++){ // 从(1,1)开始的\n          for (int j = 1; j < n; j++){\n              dp[i][j] = dp[i-1][j] + dp[i][j-1];\n          }\n      }\n      return dp[m-1][n-1];// 因为下标从0开始，所以-1\n    }\n};\n```\n## 3.2 一维数组\n编译已通过\n用一维数组的前提是：二维数组的第一行和第一列是相同的值，这样才能保证滚动数组的初始值是一样的\n```c\nclass Solution {\npublic:\n    int uniquePaths(int m, int n) {\n        vector<int> dp (n,1);\n        for(int i = 1; i <m; i++){// 为什么要从1开始呢，因为0行全是1(已经赋值了)，所以从第1行开始\n            for(int j = 1; j <n; j++){// 因为第一列是1，从第二列开始赋值的\n                dp[j] = dp[j] + dp[j-1];\n            }\n        }\n        return dp[n-1];// 从第0行开始的，差了一个1\n\n    }\n};\n```\n![[6.不同路径 2022-07-13 18.05.50.excalidraw|600]]\n滚动数组写法模板\n```cpp********\nvoid test_1_wei_bag_problem() {\n    vector<int> weight = {1, 3, 4};\n    vector<int> value = {15, 20, 30};\n    int bagWeight = 4;\n\n    // 初始化\n    vector<int> dp(bagWeight + 1, 0);\n    for(int i = 0; i < weight.size(); i++) { // 遍历物品\n        for(int j = bagWeight; j >= weight[i]; j--) { // 遍历背包容量\n            dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n        }\n    }\n    cout << dp[bagWeight] << endl;\n}\n\nint main() {\n    test_1_wei_bag_problem();\n}\n\n```\n\n[滚动数组详解_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1dZ4y1u7ZT?spm_id_from=333.337.search-card.all.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a) \n原理 [03:45](https://www.bilibili.com/video/BV1dZ4y1u7ZT?spm_id_from=333.337.search-card.all.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=225.736626) \n\n# 4 参考资料\n[代码随想录](https://www.programmercarl.com/0062.%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84.html#%E6%80%9D%E8%B7%AF)\n自用跳转链接：🈚\n\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/6.不同路径.md","raw":"---\ntitle: 6.不同路径\ndate: '2022-07-06 16:34'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 动态规划\nindex_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207061640602.jpg'\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207061640602.jpg'\ntags:\n  - 动态规划\nabbrlink: 31702\n---\n\n文章简介：LeetCode  题解——62.不同路径\n<!-- more -->\n\n# 1 62.不同路径\n\n[力扣题目链接](https://leetcode.cn/problems/unique-paths/)\n\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。\n\n机器人每次只能**向下或者向右**移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。\n\n问总共有多少条不同的路径？\n\n示例 1：\n\n![](https://img-blog.csdnimg.cn/20210110174033215.png)\n\n-   输入：m = 3, n = 7\n-   输出：28\n\n示例 2：\n\n-   输入：m = 2, n = 3\n-   输出：3\n\n解释： 从左上角开始，总共有 3 条路径可以到达右下角。\n\n1.  向右 -> 向右 -> 向下\n2.  向右 -> 向下 -> 向右\n3.  向下 -> 向右 -> 向右\n\n示例 3：\n\n-   输入：m = 7, n = 3\n-   输出：28\n\n示例 4：\n\n-   输入：m = 3, n = 3\n-   输出：6\n\n提示：\n\n-   1 <= m, n <= 100\n-   题目数据保证答案小于等于 2 * 10^9\n\n# 2 思路\n## 2.1 图论\n暂定\n## 2.2 数论\n暂定\n\n## 2.3 动态规划\n\nm✖️n：行✖️列\n按照动规五部曲来分析：\n\n**1. 确定dp数组（dp table）以及下标的含义**\n`dp[i][j]` ：表示从（0 ，0）出发，到(i, j) 有`dp[i][j]`条不同的路径。\n**2. 确定递推公式**\n机器人只能向下或向右移动\n所以`dp[i][j]`，只能有两个方向来推导出来，即`dp[i - 1][j]` 和 `dp[i][j - 1]`。(上面，左面)\n`dp[i][j] = dp[i - 1][j] + dp[i][j - 1]`，因为只能从上面或者左面过来\n**3.  dp数组的初始化**\n如何初始化呢，首先`dp[i][0]`一定都是1，因为从(0, 0)的位置到(i, 0)的路径只有一条，那么`dp[0][j]`也同理。\n所以初始化代码为：\n```\nfor (int i = 0; i < m; i++) dp[i][0] = 1;\nfor (int j = 0; j < n; j++) dp[0][j] = 1;\n```\n**4.  确定遍历顺序**\n这里要看一下递归公式`dp[i][j] = dp[i - 1][j] + dp[i][j - 1]`，`dp[i][j]`都是从其上方和左方推导而来，那么从左到右一层一层遍历就可以了。两个for循环嵌套\n\n这样就可以保证推导`dp[i][j]`的时候，`dp[i - 1][j]` 和 `dp[i][j - 1]`一定是有数值的。\n\n**5.  举例推导dp数组**\n\n如图所示：\n`dp[i][j] = dp[i - 1][j] + dp[i][j - 1]`，`dp[2][2] = dp[1][2] + dp[2][1]`，`dp[3][7] = dp[2][7] + dp[3][6]` 上面/左面\n![62.不同路径1](https://img-blog.csdnimg.cn/20201209113631392.png)\n# 3 代码\n## 3.1 二维数组解法，编译已通过\n```cpp\nclass Solution {\npublic:\n    int uniquePaths(int m, int n) {\n      vector<vector<int>> dp(m, vector<int>(n,0));\n      for(int i = 0; i < m; i++) dp[i][0] = 1;\n      for(int j = 0; j < n; j++) dp[0][j] = 1;\n      for(int i = 1; i < m; i++){ // 从(1,1)开始的\n          for (int j = 1; j < n; j++){\n              dp[i][j] = dp[i-1][j] + dp[i][j-1];\n          }\n      }\n      return dp[m-1][n-1];// 因为下标从0开始，所以-1\n    }\n};\n```\n## 3.2 一维数组\n编译已通过\n用一维数组的前提是：二维数组的第一行和第一列是相同的值，这样才能保证滚动数组的初始值是一样的\n```c\nclass Solution {\npublic:\n    int uniquePaths(int m, int n) {\n        vector<int> dp (n,1);\n        for(int i = 1; i <m; i++){// 为什么要从1开始呢，因为0行全是1(已经赋值了)，所以从第1行开始\n            for(int j = 1; j <n; j++){// 因为第一列是1，从第二列开始赋值的\n                dp[j] = dp[j] + dp[j-1];\n            }\n        }\n        return dp[n-1];// 从第0行开始的，差了一个1\n\n    }\n};\n```\n![[6.不同路径 2022-07-13 18.05.50.excalidraw|600]]\n滚动数组写法模板\n```cpp********\nvoid test_1_wei_bag_problem() {\n    vector<int> weight = {1, 3, 4};\n    vector<int> value = {15, 20, 30};\n    int bagWeight = 4;\n\n    // 初始化\n    vector<int> dp(bagWeight + 1, 0);\n    for(int i = 0; i < weight.size(); i++) { // 遍历物品\n        for(int j = bagWeight; j >= weight[i]; j--) { // 遍历背包容量\n            dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n        }\n    }\n    cout << dp[bagWeight] << endl;\n}\n\nint main() {\n    test_1_wei_bag_problem();\n}\n\n```\n\n[滚动数组详解_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1dZ4y1u7ZT?spm_id_from=333.337.search-card.all.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a) \n原理 [03:45](https://www.bilibili.com/video/BV1dZ4y1u7ZT?spm_id_from=333.337.search-card.all.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=225.736626) \n\n# 4 参考资料\n[代码随想录](https://www.programmercarl.com/0062.%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84.html#%E6%80%9D%E8%B7%AF)\n自用跳转链接：🈚\n\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/6.不同路径","published":1,"updated":"2022-07-19T07:01:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjo006ee0mgfln5hhcr","content":"<p>文章简介：LeetCode  题解——62.不同路径</p>\n<span id=\"more\"></span>\n<h1 id=\"1-62不同路径\"><a class=\"markdownIt-Anchor\" href=\"#1-62不同路径\"></a> 1 62.不同路径</h1>\n<p><a href=\"https://leetcode.cn/problems/unique-paths/\">力扣题目链接</a></p>\n<p>一个机器人位于一个 m x n&nbsp;网格的左上角 （起始点在下图中标记为 “Start” ）。</p>\n<p>机器人每次只能<strong>向下或者向右</strong>移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p>\n<p>问总共有多少条不同的路径？</p>\n<p>示例 1：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210110174033215.png\" alt=\"\"></p>\n<ul>\n<li>输入：m = 3, n = 7</li>\n<li>输出：28</li>\n</ul>\n<p>示例 2：</p>\n<ul>\n<li>输入：m = 2, n = 3</li>\n<li>输出：3</li>\n</ul>\n<p>解释： 从左上角开始，总共有 3 条路径可以到达右下角。</p>\n<ol>\n<li>向右 -&gt; 向右 -&gt; 向下</li>\n<li>向右 -&gt; 向下 -&gt; 向右</li>\n<li>向下 -&gt; 向右 -&gt; 向右</li>\n</ol>\n<p>示例 3：</p>\n<ul>\n<li>输入：m = 7, n = 3</li>\n<li>输出：28</li>\n</ul>\n<p>示例 4：</p>\n<ul>\n<li>输入：m = 3, n = 3</li>\n<li>输出：6</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= m, n &lt;= 100</li>\n<li>题目数据保证答案小于等于 2 * 10^9</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<h2 id=\"21-图论\"><a class=\"markdownIt-Anchor\" href=\"#21-图论\"></a> 2.1 图论</h2>\n<p>暂定</p>\n<h2 id=\"22-数论\"><a class=\"markdownIt-Anchor\" href=\"#22-数论\"></a> 2.2 数论</h2>\n<p>暂定</p>\n<h2 id=\"23-动态规划\"><a class=\"markdownIt-Anchor\" href=\"#23-动态规划\"></a> 2.3 动态规划</h2>\n<p>m✖️n：行✖️列<br>\n按照动规五部曲来分析：</p>\n<p><strong>1. 确定dp数组（dp table）以及下标的含义</strong><br>\n<code>dp[i][j]</code> ：表示从（0 ，0）出发，到(i, j) 有<code>dp[i][j]</code>条不同的路径。<br>\n<strong>2. 确定递推公式</strong><br>\n机器人只能向下或向右移动<br>\n所以<code>dp[i][j]</code>，只能有两个方向来推导出来，即<code>dp[i - 1][j]</code> 和 <code>dp[i][j - 1]</code>。(上面，左面)<br>\n<code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</code>，因为只能从上面或者左面过来<br>\n<strong>3.  dp数组的初始化</strong><br>\n如何初始化呢，首先<code>dp[i][0]</code>一定都是1，因为从(0, 0)的位置到(i, 0)的路径只有一条，那么<code>dp[0][j]</code>也同理。<br>\n所以初始化代码为：</p>\n<figure class=\"highlight apache\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; m; i++) dp[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-attribute\">for</span> (int j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) dp[<span class=\"hljs-number\">0</span>][j] = <span class=\"hljs-number\">1</span>;<br></code></pre></td></tr></tbody></table></figure>\n<p><strong>4.  确定遍历顺序</strong><br>\n这里要看一下递归公式<code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</code>，<code>dp[i][j]</code>都是从其上方和左方推导而来，那么从左到右一层一层遍历就可以了。两个for循环嵌套</p>\n<p>这样就可以保证推导<code>dp[i][j]</code>的时候，<code>dp[i - 1][j]</code> 和 <code>dp[i][j - 1]</code>一定是有数值的。</p>\n<p><strong>5.  举例推导dp数组</strong></p>\n<p>如图所示：<br>\n<code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</code>，<code>dp[2][2] = dp[1][2] + dp[2][1]</code>，<code>dp[3][7] = dp[2][7] + dp[3][6]</code> 上面/左面<br>\n<img src=\"https://img-blog.csdnimg.cn/20201209113631392.png\" alt=\"62.不同路径1\"></p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<h2 id=\"31-二维数组解法编译已通过\"><a class=\"markdownIt-Anchor\" href=\"#31-二维数组解法编译已通过\"></a> 3.1 二维数组解法，编译已通过</h2>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">uniquePaths</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> n)</span> </span>{<br>      vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">dp</span>(m, <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;(n,<span class=\"hljs-number\">0</span>));<br>      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i++) dp[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) dp[<span class=\"hljs-number\">0</span>][j] = <span class=\"hljs-number\">1</span>;<br>      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; m; i++){ <span class=\"hljs-comment\">// 从(1,1)开始的</span><br>          <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt; n; j++){<br>              dp[i][j] = dp[i<span class=\"hljs-number\">-1</span>][j] + dp[i][j<span class=\"hljs-number\">-1</span>];<br>          }<br>      }<br>      <span class=\"hljs-keyword\">return</span> dp[m<span class=\"hljs-number\">-1</span>][n<span class=\"hljs-number\">-1</span>];<span class=\"hljs-comment\">// 因为下标从0开始，所以-1</span><br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<h2 id=\"32-一维数组\"><a class=\"markdownIt-Anchor\" href=\"#32-一维数组\"></a> 3.2 一维数组</h2>\n<p>编译已通过<br>\n用一维数组的前提是：二维数组的第一行和第一列是相同的值，这样才能保证滚动数组的初始值是一样的</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> {</span><br>public:<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">uniquePaths</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> n)</span> {<br>        <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title function_\">dp</span> <span class=\"hljs-params\">(n,<span class=\"hljs-number\">1</span>)</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;m; i++){<span class=\"hljs-comment\">// 为什么要从1开始呢，因为0行全是1(已经赋值了)，所以从第1行开始</span><br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;n; j++){<span class=\"hljs-comment\">// 因为第一列是1，从第二列开始赋值的</span><br>                dp[j] = dp[j] + dp[j<span class=\"hljs-number\">-1</span>];<br>            }<br>        }<br>        <span class=\"hljs-keyword\">return</span> dp[n<span class=\"hljs-number\">-1</span>];<span class=\"hljs-comment\">// 从第0行开始的，差了一个1</span><br><br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<p>![[6.不同路径 2022-07-13 18.05.50.excalidraw|600]]<br>\n滚动数组写法模板</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp********\">void test_1_wei_bag_problem() {<br>    vector&lt;int&gt; weight = {1, 3, 4};<br>    vector&lt;int&gt; value = {15, 20, 30};<br>    int bagWeight = 4;<br><br>    // 初始化<br>    vector&lt;int&gt; dp(bagWeight + 1, 0);<br>    for(int i = 0; i &lt; weight.size(); i++) { // 遍历物品<br>        for(int j = bagWeight; j &gt;= weight[i]; j--) { // 遍历背包容量<br>            dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<br>        }<br>    }<br>    cout &lt;&lt; dp[bagWeight] &lt;&lt; endl;<br>}<br><br>int main() {<br>    test_1_wei_bag_problem();<br>}<br><br></code></pre></td></tr></tbody></table></figure>\n<p><a href=\"https://www.bilibili.com/video/BV1dZ4y1u7ZT?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">滚动数组详解_哔哩哔哩_bilibili</a><br>\n原理 <a href=\"https://www.bilibili.com/video/BV1dZ4y1u7ZT?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=225.736626\">03:45</a></p>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p><a href=\"https://www.programmercarl.com/0062.%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84.html#%E6%80%9D%E8%B7%AF\">代码随想录</a><br>\n自用跳转链接：🈚</p>\n","site":{"data":{}},"wordcount":2214,"excerpt":"<p>文章简介：LeetCode  题解——62.不同路径</p>","more":"<h1 id=\"1-62不同路径\"><a class=\"markdownIt-Anchor\" href=\"#1-62不同路径\"></a> 1 62.不同路径</h1>\n<p><a href=\"https://leetcode.cn/problems/unique-paths/\">力扣题目链接</a></p>\n<p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</p>\n<p>机器人每次只能<strong>向下或者向右</strong>移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p>\n<p>问总共有多少条不同的路径？</p>\n<p>示例 1：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210110174033215.png\" alt=\"\" /></p>\n<ul>\n<li>输入：m = 3, n = 7</li>\n<li>输出：28</li>\n</ul>\n<p>示例 2：</p>\n<ul>\n<li>输入：m = 2, n = 3</li>\n<li>输出：3</li>\n</ul>\n<p>解释： 从左上角开始，总共有 3 条路径可以到达右下角。</p>\n<ol>\n<li>向右 -&gt; 向右 -&gt; 向下</li>\n<li>向右 -&gt; 向下 -&gt; 向右</li>\n<li>向下 -&gt; 向右 -&gt; 向右</li>\n</ol>\n<p>示例 3：</p>\n<ul>\n<li>输入：m = 7, n = 3</li>\n<li>输出：28</li>\n</ul>\n<p>示例 4：</p>\n<ul>\n<li>输入：m = 3, n = 3</li>\n<li>输出：6</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= m, n &lt;= 100</li>\n<li>题目数据保证答案小于等于 2 * 10^9</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<h2 id=\"21-图论\"><a class=\"markdownIt-Anchor\" href=\"#21-图论\"></a> 2.1 图论</h2>\n<p>暂定</p>\n<h2 id=\"22-数论\"><a class=\"markdownIt-Anchor\" href=\"#22-数论\"></a> 2.2 数论</h2>\n<p>暂定</p>\n<h2 id=\"23-动态规划\"><a class=\"markdownIt-Anchor\" href=\"#23-动态规划\"></a> 2.3 动态规划</h2>\n<p>m✖️n：行✖️列<br />\n按照动规五部曲来分析：</p>\n<p><strong>1. 确定dp数组（dp table）以及下标的含义</strong><br />\n<code>dp[i][j]</code> ：表示从（0 ，0）出发，到(i, j) 有<code>dp[i][j]</code>条不同的路径。<br />\n<strong>2. 确定递推公式</strong><br />\n机器人只能向下或向右移动<br />\n所以<code>dp[i][j]</code>，只能有两个方向来推导出来，即<code>dp[i - 1][j]</code> 和 <code>dp[i][j - 1]</code>。(上面，左面)<br />\n<code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</code>，因为只能从上面或者左面过来<br />\n<strong>3.  dp数组的初始化</strong><br />\n如何初始化呢，首先<code>dp[i][0]</code>一定都是1，因为从(0, 0)的位置到(i, 0)的路径只有一条，那么<code>dp[0][j]</code>也同理。<br />\n所以初始化代码为：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &lt; m; i++) dp[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-attribute\">for</span> (int j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) dp[<span class=\"hljs-number\">0</span>][j] = <span class=\"hljs-number\">1</span>;<br></code></pre></td></tr></table></figure>\n<p><strong>4.  确定遍历顺序</strong><br />\n这里要看一下递归公式<code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</code>，<code>dp[i][j]</code>都是从其上方和左方推导而来，那么从左到右一层一层遍历就可以了。两个for循环嵌套</p>\n<p>这样就可以保证推导<code>dp[i][j]</code>的时候，<code>dp[i - 1][j]</code> 和 <code>dp[i][j - 1]</code>一定是有数值的。</p>\n<p><strong>5.  举例推导dp数组</strong></p>\n<p>如图所示：<br />\n<code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</code>，<code>dp[2][2] = dp[1][2] + dp[2][1]</code>，<code>dp[3][7] = dp[2][7] + dp[3][6]</code> 上面/左面<br />\n<img src=\"https://img-blog.csdnimg.cn/20201209113631392.png\" alt=\"62.不同路径1\" /></p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<h2 id=\"31-二维数组解法编译已通过\"><a class=\"markdownIt-Anchor\" href=\"#31-二维数组解法编译已通过\"></a> 3.1 二维数组解法，编译已通过</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">uniquePaths</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> n)</span> </span>&#123;<br>      vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">dp</span>(m, <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;(n,<span class=\"hljs-number\">0</span>));<br>      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i++) dp[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) dp[<span class=\"hljs-number\">0</span>][j] = <span class=\"hljs-number\">1</span>;<br>      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; m; i++)&#123; <span class=\"hljs-comment\">// 从(1,1)开始的</span><br>          <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt; n; j++)&#123;<br>              dp[i][j] = dp[i<span class=\"hljs-number\">-1</span>][j] + dp[i][j<span class=\"hljs-number\">-1</span>];<br>          &#125;<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> dp[m<span class=\"hljs-number\">-1</span>][n<span class=\"hljs-number\">-1</span>];<span class=\"hljs-comment\">// 因为下标从0开始，所以-1</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h2 id=\"32-一维数组\"><a class=\"markdownIt-Anchor\" href=\"#32-一维数组\"></a> 3.2 一维数组</h2>\n<p>编译已通过<br />\n用一维数组的前提是：二维数组的第一行和第一列是相同的值，这样才能保证滚动数组的初始值是一样的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> &#123;</span><br>public:<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">uniquePaths</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> n)</span> &#123;<br>        <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title function_\">dp</span> <span class=\"hljs-params\">(n,<span class=\"hljs-number\">1</span>)</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;m; i++)&#123;<span class=\"hljs-comment\">// 为什么要从1开始呢，因为0行全是1(已经赋值了)，所以从第1行开始</span><br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;n; j++)&#123;<span class=\"hljs-comment\">// 因为第一列是1，从第二列开始赋值的</span><br>                dp[j] = dp[j] + dp[j<span class=\"hljs-number\">-1</span>];<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> dp[n<span class=\"hljs-number\">-1</span>];<span class=\"hljs-comment\">// 从第0行开始的，差了一个1</span><br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>![[6.不同路径 2022-07-13 18.05.50.excalidraw|600]]<br />\n滚动数组写法模板</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp********\">void test_1_wei_bag_problem() &#123;<br>    vector&lt;int&gt; weight = &#123;1, 3, 4&#125;;<br>    vector&lt;int&gt; value = &#123;15, 20, 30&#125;;<br>    int bagWeight = 4;<br><br>    // 初始化<br>    vector&lt;int&gt; dp(bagWeight + 1, 0);<br>    for(int i = 0; i &lt; weight.size(); i++) &#123; // 遍历物品<br>        for(int j = bagWeight; j &gt;= weight[i]; j--) &#123; // 遍历背包容量<br>            dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; dp[bagWeight] &lt;&lt; endl;<br>&#125;<br><br>int main() &#123;<br>    test_1_wei_bag_problem();<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p><a href=\"https://www.bilibili.com/video/BV1dZ4y1u7ZT?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">滚动数组详解_哔哩哔哩_bilibili</a><br />\n原理 <a href=\"https://www.bilibili.com/video/BV1dZ4y1u7ZT?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=225.736626\">03:45</a></p>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p><a href=\"https://www.programmercarl.com/0062.%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84.html#%E6%80%9D%E8%B7%AF\">代码随想录</a><br />\n自用跳转链接：🈚</p>"},{"title":"9.不同的二叉搜索树","date":"2022-07-12T02:29:00.000Z","index_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207061640602.jpg","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207061640602.jpg","abbrlink":45809,"_content":"\n文章简介：LeetCode  题解——96.不同的二叉搜索树\n<!-- more -->\n\n\n# 1 96.不同的二叉搜索树\n\n[力扣题目链接](https://leetcode.cn/problems/unique-binary-search-trees/)\n\n\n给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121031374.png)\n# 2 思路\n\n[[二叉搜索树]]\n\n\n\n五部曲\n1.  确定dp数组（dp table）以及下标的含义\n**dp[i] ： 1到i为节点组成的二叉搜索树的个数为dp[i]**。\n\n2.  确定递推公式\n dp[i] += dp[以j为头结点左子树节点数量] * dp[以j为头结点右子树节点数量]\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121051970.png)\n\ndp[3]，就是 元素1为头结点搜索树的数量 + 元素2为头结点搜索树的数量 + 元素3为头结点搜索树的数量\n所以是**求和**\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121103402.png)\n\n3. dp数组如何初始化\n从定义上来讲，空节点也是一棵二叉树，也是一棵二叉搜索树\ndp[0] = 1\n从递归公式上来讲，dp[以j为头结点左子树节点数量] * dp[以j为头结点右子树节点数量] 中以j为头结点左子树节点数量为0，也需要dp[以j为头结点左子树节点数量] = 1， 否则乘法的结果就都变成0了。\n\n4.  确定遍历顺序\n顺序遍历\ndp[i] += dp[j - 1] * dp[i - j]可以看出，**节点数为i的状态是依靠 i之前节点数的状态**。\n\n5.  举例推导dp数组\nn为5时候的dp数组状态如图：\n\n![96.不同的二叉搜索树3](https://img-blog.csdnimg.cn/20210107093253987.png)\n[[vector]]\n# 3 代码\n\n编译已通过\n```cpp\nclass Solution {\npublic:\n    int numTrees(int n) {\n        vector<int> dp(n+1);\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        dp[0]=1;\n        dp[1]=1;\n        dp[2]=2;\n        for(int i = 3; i <= n; i++){ // 从3开始赋值,如果没有上面的if就会 i = 3  ，i <= 1，就错了\n            for (int j = 1; j <= i; j++){// j从第二个数开始才能划分左右部分，所以是1\n                dp[i] += dp[j - 1] * dp[i - j];\n            }\n        }\n        return dp[n];\n    }\n};\n```\n\n\n# 4 参考资料\n[leetcode96题 不同的二叉搜索树_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1Qf4y1K72t?spm_id_from=333.337.search-card.all.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n[代码随想录](https://www.programmercarl.com/0096.%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html#%E6%80%9D%E8%B7%AF)\n自用跳转链接：🈚\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/9.不同的二叉搜索树.md","raw":"---\ntitle: 9.不同的二叉搜索树\ndate: '2022-07-12 10:29'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 动态规划\nindex_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207061640602.jpg'\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207061640602.jpg'\ntags:\n  - 动态规划\nabbrlink: 45809\n---\n\n文章简介：LeetCode  题解——96.不同的二叉搜索树\n<!-- more -->\n\n\n# 1 96.不同的二叉搜索树\n\n[力扣题目链接](https://leetcode.cn/problems/unique-binary-search-trees/)\n\n\n给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121031374.png)\n# 2 思路\n\n[[二叉搜索树]]\n\n\n\n五部曲\n1.  确定dp数组（dp table）以及下标的含义\n**dp[i] ： 1到i为节点组成的二叉搜索树的个数为dp[i]**。\n\n2.  确定递推公式\n dp[i] += dp[以j为头结点左子树节点数量] * dp[以j为头结点右子树节点数量]\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121051970.png)\n\ndp[3]，就是 元素1为头结点搜索树的数量 + 元素2为头结点搜索树的数量 + 元素3为头结点搜索树的数量\n所以是**求和**\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121103402.png)\n\n3. dp数组如何初始化\n从定义上来讲，空节点也是一棵二叉树，也是一棵二叉搜索树\ndp[0] = 1\n从递归公式上来讲，dp[以j为头结点左子树节点数量] * dp[以j为头结点右子树节点数量] 中以j为头结点左子树节点数量为0，也需要dp[以j为头结点左子树节点数量] = 1， 否则乘法的结果就都变成0了。\n\n4.  确定遍历顺序\n顺序遍历\ndp[i] += dp[j - 1] * dp[i - j]可以看出，**节点数为i的状态是依靠 i之前节点数的状态**。\n\n5.  举例推导dp数组\nn为5时候的dp数组状态如图：\n\n![96.不同的二叉搜索树3](https://img-blog.csdnimg.cn/20210107093253987.png)\n[[vector]]\n# 3 代码\n\n编译已通过\n```cpp\nclass Solution {\npublic:\n    int numTrees(int n) {\n        vector<int> dp(n+1);\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        dp[0]=1;\n        dp[1]=1;\n        dp[2]=2;\n        for(int i = 3; i <= n; i++){ // 从3开始赋值,如果没有上面的if就会 i = 3  ，i <= 1，就错了\n            for (int j = 1; j <= i; j++){// j从第二个数开始才能划分左右部分，所以是1\n                dp[i] += dp[j - 1] * dp[i - j];\n            }\n        }\n        return dp[n];\n    }\n};\n```\n\n\n# 4 参考资料\n[leetcode96题 不同的二叉搜索树_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1Qf4y1K72t?spm_id_from=333.337.search-card.all.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n[代码随想录](https://www.programmercarl.com/0096.%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html#%E6%80%9D%E8%B7%AF)\n自用跳转链接：🈚\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/9.不同的二叉搜索树","published":1,"updated":"2022-07-12T09:02:14.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjp006ie0mg45j22he5","content":"<p>文章简介：LeetCode  题解——96.不同的二叉搜索树</p>\n<span id=\"more\"></span>\n<h1 id=\"1-96不同的二叉搜索树\"><a class=\"markdownIt-Anchor\" href=\"#1-96不同的二叉搜索树\"></a> 1 96.不同的二叉搜索树</h1>\n<p><a href=\"https://leetcode.cn/problems/unique-binary-search-trees/\">力扣题目链接</a></p>\n<p>给定一个整数 n，求以 1 … n 为节点组成的二叉搜索树有多少种？<br>\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121031374.png\" alt=\"\"></p>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>[[二叉搜索树]]</p>\n<p>五部曲</p>\n<ol>\n<li>\n<p>确定dp数组（dp table）以及下标的含义<br>\n<strong>dp[i] ： 1到i为节点组成的二叉搜索树的个数为dp[i]</strong>。</p>\n</li>\n<li>\n<p>确定递推公式<br>\ndp[i] += dp[以j为头结点左子树节点数量] * dp[以j为头结点右子树节点数量]<br>\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121051970.png\" alt=\"\"></p>\n</li>\n</ol>\n<p>dp[3]，就是 元素1为头结点搜索树的数量 + 元素2为头结点搜索树的数量 + 元素3为头结点搜索树的数量<br>\n所以是<strong>求和</strong><br>\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121103402.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>\n<p>dp数组如何初始化<br>\n从定义上来讲，空节点也是一棵二叉树，也是一棵二叉搜索树<br>\ndp[0] = 1<br>\n从递归公式上来讲，dp[以j为头结点左子树节点数量] * dp[以j为头结点右子树节点数量] 中以j为头结点左子树节点数量为0，也需要dp[以j为头结点左子树节点数量] = 1， 否则乘法的结果就都变成0了。</p>\n</li>\n<li>\n<p>确定遍历顺序<br>\n顺序遍历<br>\ndp[i] += dp[j - 1] * dp[i - j]可以看出，<strong>节点数为i的状态是依靠 i之前节点数的状态</strong>。</p>\n</li>\n<li>\n<p>举例推导dp数组<br>\nn为5时候的dp数组状态如图：</p>\n</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/20210107093253987.png\" alt=\"96.不同的二叉搜索树3\"><br>\n[[vector]]</p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>编译已通过</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">numTrees</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>{<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(n+<span class=\"hljs-number\">1</span>)</span></span>;<br>        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;<br>        dp[<span class=\"hljs-number\">0</span>]=<span class=\"hljs-number\">1</span>;<br>        dp[<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">1</span>;<br>        dp[<span class=\"hljs-number\">2</span>]=<span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">3</span>; i &lt;= n; i++){ <span class=\"hljs-comment\">// 从3开始赋值,如果没有上面的if就会 i = 3  ，i &lt;= 1，就错了</span><br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= i; j++){<span class=\"hljs-comment\">// j从第二个数开始才能划分左右部分，所以是1</span><br>                dp[i] += dp[j - <span class=\"hljs-number\">1</span>] * dp[i - j];<br>            }<br>        }<br>        <span class=\"hljs-keyword\">return</span> dp[n];<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p><a href=\"https://www.bilibili.com/video/BV1Qf4y1K72t?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">leetcode96题 不同的二叉搜索树_哔哩哔哩_bilibili</a><br>\n<a href=\"https://www.programmercarl.com/0096.%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html#%E6%80%9D%E8%B7%AF\">代码随想录</a><br>\n自用跳转链接：🈚</p>\n","site":{"data":{}},"wordcount":867,"excerpt":"<p>文章简介：LeetCode  题解——96.不同的二叉搜索树</p>","more":"<h1 id=\"1-96不同的二叉搜索树\"><a class=\"markdownIt-Anchor\" href=\"#1-96不同的二叉搜索树\"></a> 1 96.不同的二叉搜索树</h1>\n<p><a href=\"https://leetcode.cn/problems/unique-binary-search-trees/\">力扣题目链接</a></p>\n<p>给定一个整数 n，求以 1 … n 为节点组成的二叉搜索树有多少种？<br />\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121031374.png\" alt=\"\" /></p>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>[[二叉搜索树]]</p>\n<p>五部曲</p>\n<ol>\n<li>\n<p>确定dp数组（dp table）以及下标的含义<br />\n<strong>dp[i] ： 1到i为节点组成的二叉搜索树的个数为dp[i]</strong>。</p>\n</li>\n<li>\n<p>确定递推公式<br />\ndp[i] += dp[以j为头结点左子树节点数量] * dp[以j为头结点右子树节点数量]<br />\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121051970.png\" alt=\"\" /></p>\n</li>\n</ol>\n<p>dp[3]，就是 元素1为头结点搜索树的数量 + 元素2为头结点搜索树的数量 + 元素3为头结点搜索树的数量<br />\n所以是<strong>求和</strong><br />\n<img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207121103402.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>\n<p>dp数组如何初始化<br />\n从定义上来讲，空节点也是一棵二叉树，也是一棵二叉搜索树<br />\ndp[0] = 1<br />\n从递归公式上来讲，dp[以j为头结点左子树节点数量] * dp[以j为头结点右子树节点数量] 中以j为头结点左子树节点数量为0，也需要dp[以j为头结点左子树节点数量] = 1， 否则乘法的结果就都变成0了。</p>\n</li>\n<li>\n<p>确定遍历顺序<br />\n顺序遍历<br />\ndp[i] += dp[j - 1] * dp[i - j]可以看出，<strong>节点数为i的状态是依靠 i之前节点数的状态</strong>。</p>\n</li>\n<li>\n<p>举例推导dp数组<br />\nn为5时候的dp数组状态如图：</p>\n</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/20210107093253987.png\" alt=\"96.不同的二叉搜索树3\" /><br />\n[[vector]]</p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>编译已通过</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">numTrees</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>&#123;<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">dp</span><span class=\"hljs-params\">(n+<span class=\"hljs-number\">1</span>)</span></span>;<br>        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;<br>        dp[<span class=\"hljs-number\">0</span>]=<span class=\"hljs-number\">1</span>;<br>        dp[<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">1</span>;<br>        dp[<span class=\"hljs-number\">2</span>]=<span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">3</span>; i &lt;= n; i++)&#123; <span class=\"hljs-comment\">// 从3开始赋值,如果没有上面的if就会 i = 3  ，i &lt;= 1，就错了</span><br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= i; j++)&#123;<span class=\"hljs-comment\">// j从第二个数开始才能划分左右部分，所以是1</span><br>                dp[i] += dp[j - <span class=\"hljs-number\">1</span>] * dp[i - j];<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> dp[n];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p><a href=\"https://www.bilibili.com/video/BV1Qf4y1K72t?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">leetcode96题 不同的二叉搜索树_哔哩哔哩_bilibili</a><br />\n<a href=\"https://www.programmercarl.com/0096.%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html#%E6%80%9D%E8%B7%AF\">代码随想录</a><br />\n自用跳转链接：🈚</p>"},{"abbrlink":1,"_content":"\n\n\n\n# 1 贪心算法的题目大纲\n![贪心算法大纲](https://code-thinking-1253855093.file.myqcloud.com/pics/20210917104315.png)\n# 2 什么是贪心算法\n\n局部最优推出全局最优\neg：一堆钱里只能拿10张，如何拿到最大。每一次都拿的最大(局部最优)→总共拿的最大(全局最优)\n\n# 3 什么时候用贪心算法\n看到题目时，感受到能够：**局部最优→全局最优，且想不到反例**。就试一试贪心.\n感觉贪心算法更看直觉能不能用\n\n# 4 贪心算法的套路\n\n1. 将总问题划分为子问题\n2. 找到合适的最优解法\n3. 对子问题进行最优求解\n4. 将子问题堆积成总问题\n\n实际上解题没有这么细，因为贪心算法还与其他知识联合在一起\n\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/1.贪心算法理论基础.md","raw":"---\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 贪心算法\nabbrlink: 1\n---\n\n\n\n\n# 1 贪心算法的题目大纲\n![贪心算法大纲](https://code-thinking-1253855093.file.myqcloud.com/pics/20210917104315.png)\n# 2 什么是贪心算法\n\n局部最优推出全局最优\neg：一堆钱里只能拿10张，如何拿到最大。每一次都拿的最大(局部最优)→总共拿的最大(全局最优)\n\n# 3 什么时候用贪心算法\n看到题目时，感受到能够：**局部最优→全局最优，且想不到反例**。就试一试贪心.\n感觉贪心算法更看直觉能不能用\n\n# 4 贪心算法的套路\n\n1. 将总问题划分为子问题\n2. 找到合适的最优解法\n3. 对子问题进行最优求解\n4. 将子问题堆积成总问题\n\n实际上解题没有这么细，因为贪心算法还与其他知识联合在一起\n\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/1.贪心算法理论基础","published":1,"date":"2022-05-27T01:25:46.000Z","updated":"2022-07-12T09:02:14.290Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjp006ke0mgdml36v3i","content":"<h1 id=\"1-贪心算法的题目大纲\"><a class=\"markdownIt-Anchor\" href=\"#1-贪心算法的题目大纲\"></a> 1 贪心算法的题目大纲</h1>\n<p><img src=\"https://code-thinking-1253855093.file.myqcloud.com/pics/20210917104315.png\" alt=\"贪心算法大纲\"></p>\n<h1 id=\"2-什么是贪心算法\"><a class=\"markdownIt-Anchor\" href=\"#2-什么是贪心算法\"></a> 2 什么是贪心算法</h1>\n<p>局部最优推出全局最优<br>\neg：一堆钱里只能拿10张，如何拿到最大。每一次都拿的最大(局部最优)→总共拿的最大(全局最优)</p>\n<h1 id=\"3-什么时候用贪心算法\"><a class=\"markdownIt-Anchor\" href=\"#3-什么时候用贪心算法\"></a> 3 什么时候用贪心算法</h1>\n<p>看到题目时，感受到能够：<strong>局部最优→全局最优，且想不到反例</strong>。就试一试贪心.<br>\n感觉贪心算法更看直觉能不能用</p>\n<h1 id=\"4-贪心算法的套路\"><a class=\"markdownIt-Anchor\" href=\"#4-贪心算法的套路\"></a> 4 贪心算法的套路</h1>\n<ol>\n<li>将总问题划分为子问题</li>\n<li>找到合适的最优解法</li>\n<li>对子问题进行最优求解</li>\n<li>将子问题堆积成总问题</li>\n</ol>\n<p>实际上解题没有这么细，因为贪心算法还与其他知识联合在一起</p>\n","site":{"data":{}},"wordcount":211,"excerpt":"","more":"<h1 id=\"1-贪心算法的题目大纲\"><a class=\"markdownIt-Anchor\" href=\"#1-贪心算法的题目大纲\"></a> 1 贪心算法的题目大纲</h1>\n<p><img src=\"https://code-thinking-1253855093.file.myqcloud.com/pics/20210917104315.png\" alt=\"贪心算法大纲\" /></p>\n<h1 id=\"2-什么是贪心算法\"><a class=\"markdownIt-Anchor\" href=\"#2-什么是贪心算法\"></a> 2 什么是贪心算法</h1>\n<p>局部最优推出全局最优<br />\neg：一堆钱里只能拿10张，如何拿到最大。每一次都拿的最大(局部最优)→总共拿的最大(全局最优)</p>\n<h1 id=\"3-什么时候用贪心算法\"><a class=\"markdownIt-Anchor\" href=\"#3-什么时候用贪心算法\"></a> 3 什么时候用贪心算法</h1>\n<p>看到题目时，感受到能够：<strong>局部最优→全局最优，且想不到反例</strong>。就试一试贪心.<br />\n感觉贪心算法更看直觉能不能用</p>\n<h1 id=\"4-贪心算法的套路\"><a class=\"markdownIt-Anchor\" href=\"#4-贪心算法的套路\"></a> 4 贪心算法的套路</h1>\n<ol>\n<li>将总问题划分为子问题</li>\n<li>找到合适的最优解法</li>\n<li>对子问题进行最优求解</li>\n<li>将子问题堆积成总问题</li>\n</ol>\n<p>实际上解题没有这么细，因为贪心算法还与其他知识联合在一起</p>\n"},{"title":"14.根据身高重建队列","abbrlink":21392,"date":"2022-06-07T03:22:25.000Z","_content":"# 1 406.根据身高重建队列\n\n[力扣题目链接](https://leetcode-cn.com/problems/queue-reconstruction-by-height/)\n\n假设有打乱顺序的一群人站成一个队列，数组 people 表示队列中一些人的属性（不一定按顺序）。每个 people[i] = [hi, ki] 表示第 i 个人的身高为 hi ，前面 正好 有 ki 个身高大于或等于 hi 的人。\n\n请你重新构造并返回输入数组 people 所表示的队列。返回的队列应该格式化为数组 queue ，其中 queue[j] = [hj, kj] 是队列中第 j 个人的属性（queue[0] 是排在队列前面的人）。\n\n示例 1：\n\n-   输入：people = [ [7,0],[4,4],[7,1],[5,0],[6,1],[5,2] ]\n-   输出：[ [5,0],[7,0],[5,2],[6,1],[4,4],[7,1] ]\n-   解释：\n    -   编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。\n    -   编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。\n    -   编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。\n    -   编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。\n    -   编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。\n    -   编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。\n    -   因此 [ [5,0],[7,0],[5,2],[6,1],[4,4],[7,1] ] 是重新构造后的队列。\n\n示例 2：\n\n-   输入：people = [ [6,0],[5,0],[4,0],[3,2],[2,2],[1,4] ]\n-   输出：[ [4,0],[5,0],[2,2],[3,2],[1,4],[6,0] ]\n\n提示：\n\n-   1 <= people.length <= 2000\n-   0 <= hi <= 10^6\n-   0 <= ki < people.length\n\n题目数据确保队列可以被重建\n\n\n# 2 思路\n\n本题有两个维度，h和k，看到这种题目一定要想如何确定一个维度，然后在按照另一个维度重新排列。\n**如果两个维度一起考虑一定会顾此失彼**\n\n先按身高h来排序(从大到小)，身高相同的k小的站前面\n在按k的大小进行**插入**操作，后序插入节点也不会影响前面已经插入的节点，最终按照k的规则完成了队列。\n![406.根据身高重建队列|800](https://img-blog.csdnimg.cn/20201216201851982.png)\n插入的过程：\n\n-   插入[7,0]：[ [7,0] ]// 插入0下标\n-   插入[7,1]：[ [7,0],[7,1] ]// 插入1下标\n-   插入[6,1]：[ [7,0],[6,1],[7,1] ]// 插入1下标\n-   插入[5,0]：[ [5,0],[7,0],[6,1],[7,1] ]// 插入0下标\n-   插入[5,2]：[ [5,0],[7,0],[5,2],[6,1],[7,1] ]// 插入2下标\n-   插入[4,4]：[ [5,0],[7,0],[5,2],[6,1],[4,4],[7,1] ]// 插入4下标\n\n\n如果先按k来排序，会发现k的排列不符合条件，身高也不符合条件，两个维度一个也没确定下来\n\n在按照身高从大到小排序后：\n**局部最优：优先按身高高的people的k来插入。插入操作过后的people满足队列属性**\n**全局最优：最后都做完插入操作，整个队列满足题目队列属性**\n\n### 2.1.1 关联知识点\n[[vector]]，[[sort函数]]，[[insert函数]]\n\n\n\n\n# 3 代码\n[[14.根据身高重建队列(carl链表).mp4]]\n[[14.根据身高重建队列(carl vector).mp4]]\n[[14.根据身高重建队列(carl 排序).mp4]]\n\nvector的代码看懂了\n\n排序完的people： [ [7,0], [7,1], [6,1], [5,0], [5,2]，[4,4] ]\n`people[i][1]`：eg `people[2][1]`=1：第二元素的第一个位置的值即{7, 1}中的1\n\n自写,编译已通过\n```cpp\n\n// 版本一\nclass Solution {\npublic:\n    static bool cmp(const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) return a[1] < b[1]; // 没看懂，看视频：传进来的是数组eg[7,0]\n        return a[0] > b[0];\n    }\n    vector<vector<int>> reconstructQueue(vector<vector<int>>& people){\n        sort(people.begin(), people.end(), cmp);\n        vector<vector<int>> que;\n        for (int i = 0; i < people.size(); i++){\n            int position = people[i][1]; // 要放到for循环里边\n            que.insert(que.begin() + position, people[i]);// 要插入的是que里，不要成people.begin()\n        }\n        return que;\n      }   \n};\n\n```\n\n链表的代码没看懂  #疑问\n\n\n[[科研材料总结]]\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/14.根据身高重建队列.md","raw":"---\ntitle: 14.根据身高重建队列\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 贪心算法\ntags:\n  - 贪心算法\nabbrlink: 21392\ndate: 2022-06-07 11:22:25\n---\n# 1 406.根据身高重建队列\n\n[力扣题目链接](https://leetcode-cn.com/problems/queue-reconstruction-by-height/)\n\n假设有打乱顺序的一群人站成一个队列，数组 people 表示队列中一些人的属性（不一定按顺序）。每个 people[i] = [hi, ki] 表示第 i 个人的身高为 hi ，前面 正好 有 ki 个身高大于或等于 hi 的人。\n\n请你重新构造并返回输入数组 people 所表示的队列。返回的队列应该格式化为数组 queue ，其中 queue[j] = [hj, kj] 是队列中第 j 个人的属性（queue[0] 是排在队列前面的人）。\n\n示例 1：\n\n-   输入：people = [ [7,0],[4,4],[7,1],[5,0],[6,1],[5,2] ]\n-   输出：[ [5,0],[7,0],[5,2],[6,1],[4,4],[7,1] ]\n-   解释：\n    -   编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。\n    -   编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。\n    -   编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。\n    -   编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。\n    -   编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。\n    -   编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。\n    -   因此 [ [5,0],[7,0],[5,2],[6,1],[4,4],[7,1] ] 是重新构造后的队列。\n\n示例 2：\n\n-   输入：people = [ [6,0],[5,0],[4,0],[3,2],[2,2],[1,4] ]\n-   输出：[ [4,0],[5,0],[2,2],[3,2],[1,4],[6,0] ]\n\n提示：\n\n-   1 <= people.length <= 2000\n-   0 <= hi <= 10^6\n-   0 <= ki < people.length\n\n题目数据确保队列可以被重建\n\n\n# 2 思路\n\n本题有两个维度，h和k，看到这种题目一定要想如何确定一个维度，然后在按照另一个维度重新排列。\n**如果两个维度一起考虑一定会顾此失彼**\n\n先按身高h来排序(从大到小)，身高相同的k小的站前面\n在按k的大小进行**插入**操作，后序插入节点也不会影响前面已经插入的节点，最终按照k的规则完成了队列。\n![406.根据身高重建队列|800](https://img-blog.csdnimg.cn/20201216201851982.png)\n插入的过程：\n\n-   插入[7,0]：[ [7,0] ]// 插入0下标\n-   插入[7,1]：[ [7,0],[7,1] ]// 插入1下标\n-   插入[6,1]：[ [7,0],[6,1],[7,1] ]// 插入1下标\n-   插入[5,0]：[ [5,0],[7,0],[6,1],[7,1] ]// 插入0下标\n-   插入[5,2]：[ [5,0],[7,0],[5,2],[6,1],[7,1] ]// 插入2下标\n-   插入[4,4]：[ [5,0],[7,0],[5,2],[6,1],[4,4],[7,1] ]// 插入4下标\n\n\n如果先按k来排序，会发现k的排列不符合条件，身高也不符合条件，两个维度一个也没确定下来\n\n在按照身高从大到小排序后：\n**局部最优：优先按身高高的people的k来插入。插入操作过后的people满足队列属性**\n**全局最优：最后都做完插入操作，整个队列满足题目队列属性**\n\n### 2.1.1 关联知识点\n[[vector]]，[[sort函数]]，[[insert函数]]\n\n\n\n\n# 3 代码\n[[14.根据身高重建队列(carl链表).mp4]]\n[[14.根据身高重建队列(carl vector).mp4]]\n[[14.根据身高重建队列(carl 排序).mp4]]\n\nvector的代码看懂了\n\n排序完的people： [ [7,0], [7,1], [6,1], [5,0], [5,2]，[4,4] ]\n`people[i][1]`：eg `people[2][1]`=1：第二元素的第一个位置的值即{7, 1}中的1\n\n自写,编译已通过\n```cpp\n\n// 版本一\nclass Solution {\npublic:\n    static bool cmp(const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) return a[1] < b[1]; // 没看懂，看视频：传进来的是数组eg[7,0]\n        return a[0] > b[0];\n    }\n    vector<vector<int>> reconstructQueue(vector<vector<int>>& people){\n        sort(people.begin(), people.end(), cmp);\n        vector<vector<int>> que;\n        for (int i = 0; i < people.size(); i++){\n            int position = people[i][1]; // 要放到for循环里边\n            que.insert(que.begin() + position, people[i]);// 要插入的是que里，不要成people.begin()\n        }\n        return que;\n      }   \n};\n\n```\n\n链表的代码没看懂  #疑问\n\n\n[[科研材料总结]]\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/14.根据身高重建队列","published":1,"updated":"2022-07-12T09:02:14.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjp006ne0mg71ime785","content":"<h1 id=\"1-406根据身高重建队列\"><a class=\"markdownIt-Anchor\" href=\"#1-406根据身高重建队列\"></a> 1 406.根据身高重建队列</h1>\n<p><a href=\"https://leetcode-cn.com/problems/queue-reconstruction-by-height/\">力扣题目链接</a></p>\n<p>假设有打乱顺序的一群人站成一个队列，数组 people 表示队列中一些人的属性（不一定按顺序）。每个 people[i] = [hi, ki] 表示第 i 个人的身高为 hi ，前面 正好 有 ki 个身高大于或等于 hi 的人。</p>\n<p>请你重新构造并返回输入数组&nbsp;people 所表示的队列。返回的队列应该格式化为数组 queue ，其中 queue[j] = [hj, kj] 是队列中第 j 个人的属性（queue[0] 是排在队列前面的人）。</p>\n<p>示例 1：</p>\n<ul>\n<li>输入：people = [ [7,0],[4,4],[7,1],[5,0],[6,1],[5,2] ]</li>\n<li>输出：[ [5,0],[7,0],[5,2],[6,1],[4,4],[7,1] ]</li>\n<li>解释：\n<ul>\n<li>编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。</li>\n<li>编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。</li>\n<li>编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。</li>\n<li>编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。</li>\n<li>编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。</li>\n<li>编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。</li>\n<li>因此 [ [5,0],[7,0],[5,2],[6,1],[4,4],[7,1] ] 是重新构造后的队列。</li>\n</ul>\n</li>\n</ul>\n<p>示例 2：</p>\n<ul>\n<li>输入：people = [ [6,0],[5,0],[4,0],[3,2],[2,2],[1,4] ]</li>\n<li>输出：[ [4,0],[5,0],[2,2],[3,2],[1,4],[6,0] ]</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= people.length &lt;= 2000</li>\n<li>0 &lt;= hi &lt;= 10^6</li>\n<li>0 &lt;= ki &lt; people.length</li>\n</ul>\n<p>题目数据确保队列可以被重建</p>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>本题有两个维度，h和k，看到这种题目一定要想如何确定一个维度，然后在按照另一个维度重新排列。<br>\n<strong>如果两个维度一起考虑一定会顾此失彼</strong></p>\n<p>先按身高h来排序(从大到小)，身高相同的k小的站前面<br>\n在按k的大小进行<strong>插入</strong>操作，后序插入节点也不会影响前面已经插入的节点，最终按照k的规则完成了队列。<br>\n<img src=\"https://img-blog.csdnimg.cn/20201216201851982.png\" alt=\"406.根据身高重建队列|800\"><br>\n插入的过程：</p>\n<ul>\n<li>插入[7,0]：[ [7,0] ]// 插入0下标</li>\n<li>插入[7,1]：[ [7,0],[7,1] ]// 插入1下标</li>\n<li>插入[6,1]：[ [7,0],[6,1],[7,1] ]// 插入1下标</li>\n<li>插入[5,0]：[ [5,0],[7,0],[6,1],[7,1] ]// 插入0下标</li>\n<li>插入[5,2]：[ [5,0],[7,0],[5,2],[6,1],[7,1] ]// 插入2下标</li>\n<li>插入[4,4]：[ [5,0],[7,0],[5,2],[6,1],[4,4],[7,1] ]// 插入4下标</li>\n</ul>\n<p>如果先按k来排序，会发现k的排列不符合条件，身高也不符合条件，两个维度一个也没确定下来</p>\n<p>在按照身高从大到小排序后：<br>\n<strong>局部最优：优先按身高高的people的k来插入。插入操作过后的people满足队列属性</strong><br>\n<strong>全局最优：最后都做完插入操作，整个队列满足题目队列属性</strong></p>\n<h3 id=\"211-关联知识点\"><a class=\"markdownIt-Anchor\" href=\"#211-关联知识点\"></a> 2.1.1 关联知识点</h3>\n<p>[[vector]]，[[sort函数]]，[[insert函数]]</p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>[[14.根据身高重建队列(carl链表).mp4]]<br>\n[[14.根据身高重建队列(carl vector).mp4]]<br>\n[[14.根据身高重建队列(carl 排序).mp4]]</p>\n<p>vector的代码看懂了</p>\n<p>排序完的people： [ [7,0], [7,1], [6,1], [5,0], [5,2]，[4,4] ]<br>\n<code>people[i][1]</code>：eg <code>people[2][1]</code>=1：第二元素的第一个位置的值即{7, 1}中的1</p>\n<p>自写,编译已通过</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><br><span class=\"hljs-comment\">// 版本一</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; a, <span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; b)</span> </span>{<br>        <span class=\"hljs-keyword\">if</span> (a[<span class=\"hljs-number\">0</span>] == b[<span class=\"hljs-number\">0</span>]) <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">1</span>] &lt; b[<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 没看懂，看视频：传进来的是数组eg[7,0]</span><br>        <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">0</span>] &gt; b[<span class=\"hljs-number\">0</span>];<br>    }<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">reconstructQueue</span>(vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt;&amp; people){<br>        <span class=\"hljs-built_in\">sort</span>(people.<span class=\"hljs-built_in\">begin</span>(), people.<span class=\"hljs-built_in\">end</span>(), cmp);<br>        vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; que;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; people.<span class=\"hljs-built_in\">size</span>(); i++){<br>            <span class=\"hljs-type\">int</span> position = people[i][<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 要放到for循环里边</span><br>            que.<span class=\"hljs-built_in\">insert</span>(que.<span class=\"hljs-built_in\">begin</span>() + position, people[i]);<span class=\"hljs-comment\">// 要插入的是que里，不要成people.begin()</span><br>        }<br>        <span class=\"hljs-keyword\">return</span> que;<br>      }   <br>};<br><br></code></pre></td></tr></tbody></table></figure>\n<p>链表的代码没看懂  #疑问</p>\n<p>[[科研材料总结]]</p>\n","site":{"data":{}},"wordcount":2083,"excerpt":"","more":"<h1 id=\"1-406根据身高重建队列\"><a class=\"markdownIt-Anchor\" href=\"#1-406根据身高重建队列\"></a> 1 406.根据身高重建队列</h1>\n<p><a href=\"https://leetcode-cn.com/problems/queue-reconstruction-by-height/\">力扣题目链接</a></p>\n<p>假设有打乱顺序的一群人站成一个队列，数组 people 表示队列中一些人的属性（不一定按顺序）。每个 people[i] = [hi, ki] 表示第 i 个人的身高为 hi ，前面 正好 有 ki 个身高大于或等于 hi 的人。</p>\n<p>请你重新构造并返回输入数组 people 所表示的队列。返回的队列应该格式化为数组 queue ，其中 queue[j] = [hj, kj] 是队列中第 j 个人的属性（queue[0] 是排在队列前面的人）。</p>\n<p>示例 1：</p>\n<ul>\n<li>输入：people = [ [7,0],[4,4],[7,1],[5,0],[6,1],[5,2] ]</li>\n<li>输出：[ [5,0],[7,0],[5,2],[6,1],[4,4],[7,1] ]</li>\n<li>解释：\n<ul>\n<li>编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。</li>\n<li>编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。</li>\n<li>编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。</li>\n<li>编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。</li>\n<li>编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。</li>\n<li>编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。</li>\n<li>因此 [ [5,0],[7,0],[5,2],[6,1],[4,4],[7,1] ] 是重新构造后的队列。</li>\n</ul>\n</li>\n</ul>\n<p>示例 2：</p>\n<ul>\n<li>输入：people = [ [6,0],[5,0],[4,0],[3,2],[2,2],[1,4] ]</li>\n<li>输出：[ [4,0],[5,0],[2,2],[3,2],[1,4],[6,0] ]</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= people.length &lt;= 2000</li>\n<li>0 &lt;= hi &lt;= 10^6</li>\n<li>0 &lt;= ki &lt; people.length</li>\n</ul>\n<p>题目数据确保队列可以被重建</p>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>本题有两个维度，h和k，看到这种题目一定要想如何确定一个维度，然后在按照另一个维度重新排列。<br />\n<strong>如果两个维度一起考虑一定会顾此失彼</strong></p>\n<p>先按身高h来排序(从大到小)，身高相同的k小的站前面<br />\n在按k的大小进行<strong>插入</strong>操作，后序插入节点也不会影响前面已经插入的节点，最终按照k的规则完成了队列。<br />\n<img src=\"https://img-blog.csdnimg.cn/20201216201851982.png\" alt=\"406.根据身高重建队列|800\" /><br />\n插入的过程：</p>\n<ul>\n<li>插入[7,0]：[ [7,0] ]// 插入0下标</li>\n<li>插入[7,1]：[ [7,0],[7,1] ]// 插入1下标</li>\n<li>插入[6,1]：[ [7,0],[6,1],[7,1] ]// 插入1下标</li>\n<li>插入[5,0]：[ [5,0],[7,0],[6,1],[7,1] ]// 插入0下标</li>\n<li>插入[5,2]：[ [5,0],[7,0],[5,2],[6,1],[7,1] ]// 插入2下标</li>\n<li>插入[4,4]：[ [5,0],[7,0],[5,2],[6,1],[4,4],[7,1] ]// 插入4下标</li>\n</ul>\n<p>如果先按k来排序，会发现k的排列不符合条件，身高也不符合条件，两个维度一个也没确定下来</p>\n<p>在按照身高从大到小排序后：<br />\n<strong>局部最优：优先按身高高的people的k来插入。插入操作过后的people满足队列属性</strong><br />\n<strong>全局最优：最后都做完插入操作，整个队列满足题目队列属性</strong></p>\n<h3 id=\"211-关联知识点\"><a class=\"markdownIt-Anchor\" href=\"#211-关联知识点\"></a> 2.1.1 关联知识点</h3>\n<p>[[vector]]，[[sort函数]]，[[insert函数]]</p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>[[14.根据身高重建队列(carl链表).mp4]]<br />\n[[14.根据身高重建队列(carl vector).mp4]]<br />\n[[14.根据身高重建队列(carl 排序).mp4]]</p>\n<p>vector的代码看懂了</p>\n<p>排序完的people： [ [7,0], [7,1], [6,1], [5,0], [5,2]，[4,4] ]<br />\n<code>people[i][1]</code>：eg <code>people[2][1]</code>=1：第二元素的第一个位置的值即{7, 1}中的1</p>\n<p>自写,编译已通过</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><br><span class=\"hljs-comment\">// 版本一</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; a, <span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; b)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (a[<span class=\"hljs-number\">0</span>] == b[<span class=\"hljs-number\">0</span>]) <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">1</span>] &lt; b[<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 没看懂，看视频：传进来的是数组eg[7,0]</span><br>        <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">0</span>] &gt; b[<span class=\"hljs-number\">0</span>];<br>    &#125;<br>    vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">reconstructQueue</span>(vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt;&amp; people)&#123;<br>        <span class=\"hljs-built_in\">sort</span>(people.<span class=\"hljs-built_in\">begin</span>(), people.<span class=\"hljs-built_in\">end</span>(), cmp);<br>        vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; que;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; people.<span class=\"hljs-built_in\">size</span>(); i++)&#123;<br>            <span class=\"hljs-type\">int</span> position = people[i][<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 要放到for循环里边</span><br>            que.<span class=\"hljs-built_in\">insert</span>(que.<span class=\"hljs-built_in\">begin</span>() + position, people[i]);<span class=\"hljs-comment\">// 要插入的是que里，不要成people.begin()</span><br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> que;<br>      &#125;   <br>&#125;;<br><br></code></pre></td></tr></table></figure>\n<p>链表的代码没看懂  #疑问</p>\n<p>[[科研材料总结]]</p>\n"},{"title":"12.分发糖果","abbrlink":43465,"date":"2022-06-06T07:33:32.000Z","_content":"# 1 分发糖果\n\n[力扣题目链接](https://leetcode-cn.com/problems/candy/)\n\n\n\n\n老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。\n\n你需要按照以下要求，帮助老师给这些孩子分发糖果：\n\n-   每个孩子至少分配到 1 个糖果。\n-   相邻的孩子中，评分高的孩子必须获得更多的糖果。\n\n那么这样下来，老师至少需要准备多少颗糖果呢？\n\n示例 1:\n\n-   输入: [1,0,2]\n-   输出: 5\n-   解释: 你可以分别给这三个孩子分发 2、1、2 颗糖果。\n\n示例 2:\n\n-   输入: [1,2,2]\n-   输出: 4\n-   解释: 你可以分别给这三个孩子分发 1、2、1 颗糖果。第三个孩子只得到 1 颗糖果，这已满足上述两个条件。\n\n# 2 思路\n先比较每一个孩子的右边或者左边，**如果两边一起考虑一定会顾此失彼**。\n\nrate：评分；candyVec：糖果个数\n\n**右边**：从前往后遍历\n局部最优：如果右比左大，右边孩子就多一个糖果。\n全局最优：总体中评分高的右孩子比左孩子多一个糖果\n![135.分发糖果|700](https://img-blog.csdnimg.cn/20201117114916878.png)\n**左边**：从后往前遍历\n局部最优：如果左比右大，左边孩子就多一个糖果。\n全局最优：总体中评分高的左孩子比右孩子多一个糖果\n#flashcards/代码随想录 \n为什么不能从前往后遍历\n?\n因为如果继续从前向后遍历，就无法利用上一次得出的candyVec的数组了\n<!--SR:!2022-07-31,27,250-->\n\neg：\n![135.分发糖果1|700](https://img-blog.csdnimg.cn/20201117115658791.png)\n如果是图中这样的话，就没必要用max函数了啊 #疑问 \n\n# 3 代码\n\n自写代码已通过，没有用max函数\n\n```cpp\nclass Solution {\npublic:\n    int candy(vector<int>& ratings){\n        vector<int> candyVec(ratings.size(), 1);\n        for (int i = 0; i < ratings.size(); i++){\n            if(ratings[i+1] > ratings[i]) {\n            candyVec[i+1] = candyVec[i]+1;\n            }\n       }\n\n       for (int i = ratings.size() - 2; i >= 0; i-- ) { // 从倒数第二位置开始比\n        if (ratings[i] > ratings[i+1]){\n            candyVec[i] = candyVec[i+1]+1;\n            }\n       }\n       int result = 0;\n       for (int a : candyVec) result += a; // 分号后边只需要变量名就行\n       return result;\n    }\n};\n\n```\n\n参考资料\n[[for 循环]]\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/12.分发糖果.md","raw":"---\ntitle: 12.分发糖果\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 贪心算法\ntags:\n  - 贪心算法\nabbrlink: 43465\ndate: 2022-06-06 15:33:32\n---\n# 1 分发糖果\n\n[力扣题目链接](https://leetcode-cn.com/problems/candy/)\n\n\n\n\n老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。\n\n你需要按照以下要求，帮助老师给这些孩子分发糖果：\n\n-   每个孩子至少分配到 1 个糖果。\n-   相邻的孩子中，评分高的孩子必须获得更多的糖果。\n\n那么这样下来，老师至少需要准备多少颗糖果呢？\n\n示例 1:\n\n-   输入: [1,0,2]\n-   输出: 5\n-   解释: 你可以分别给这三个孩子分发 2、1、2 颗糖果。\n\n示例 2:\n\n-   输入: [1,2,2]\n-   输出: 4\n-   解释: 你可以分别给这三个孩子分发 1、2、1 颗糖果。第三个孩子只得到 1 颗糖果，这已满足上述两个条件。\n\n# 2 思路\n先比较每一个孩子的右边或者左边，**如果两边一起考虑一定会顾此失彼**。\n\nrate：评分；candyVec：糖果个数\n\n**右边**：从前往后遍历\n局部最优：如果右比左大，右边孩子就多一个糖果。\n全局最优：总体中评分高的右孩子比左孩子多一个糖果\n![135.分发糖果|700](https://img-blog.csdnimg.cn/20201117114916878.png)\n**左边**：从后往前遍历\n局部最优：如果左比右大，左边孩子就多一个糖果。\n全局最优：总体中评分高的左孩子比右孩子多一个糖果\n#flashcards/代码随想录 \n为什么不能从前往后遍历\n?\n因为如果继续从前向后遍历，就无法利用上一次得出的candyVec的数组了\n<!--SR:!2022-07-31,27,250-->\n\neg：\n![135.分发糖果1|700](https://img-blog.csdnimg.cn/20201117115658791.png)\n如果是图中这样的话，就没必要用max函数了啊 #疑问 \n\n# 3 代码\n\n自写代码已通过，没有用max函数\n\n```cpp\nclass Solution {\npublic:\n    int candy(vector<int>& ratings){\n        vector<int> candyVec(ratings.size(), 1);\n        for (int i = 0; i < ratings.size(); i++){\n            if(ratings[i+1] > ratings[i]) {\n            candyVec[i+1] = candyVec[i]+1;\n            }\n       }\n\n       for (int i = ratings.size() - 2; i >= 0; i-- ) { // 从倒数第二位置开始比\n        if (ratings[i] > ratings[i+1]){\n            candyVec[i] = candyVec[i+1]+1;\n            }\n       }\n       int result = 0;\n       for (int a : candyVec) result += a; // 分号后边只需要变量名就行\n       return result;\n    }\n};\n\n```\n\n参考资料\n[[for 循环]]\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/12.分发糖果","published":1,"updated":"2022-07-12T09:02:14.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjp006qe0mgb52bbnz7","content":"<h1 id=\"1-分发糖果\"><a class=\"markdownIt-Anchor\" href=\"#1-分发糖果\"></a> 1 分发糖果</h1>\n<p><a href=\"https://leetcode-cn.com/problems/candy/\">力扣题目链接</a></p>\n<p>老师想给孩子们分发糖果，有 N&nbsp;个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。</p>\n<p>你需要按照以下要求，帮助老师给这些孩子分发糖果：</p>\n<ul>\n<li>每个孩子至少分配到 1 个糖果。</li>\n<li>相邻的孩子中，评分高的孩子必须获得更多的糖果。</li>\n</ul>\n<p>那么这样下来，老师至少需要准备多少颗糖果呢？</p>\n<p>示例&nbsp;1:</p>\n<ul>\n<li>输入: [1,0,2]</li>\n<li>输出: 5</li>\n<li>解释: 你可以分别给这三个孩子分发 2、1、2 颗糖果。</li>\n</ul>\n<p>示例&nbsp;2:</p>\n<ul>\n<li>输入: [1,2,2]</li>\n<li>输出: 4</li>\n<li>解释: 你可以分别给这三个孩子分发 1、2、1 颗糖果。第三个孩子只得到 1 颗糖果，这已满足上述两个条件。</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>先比较每一个孩子的右边或者左边，<strong>如果两边一起考虑一定会顾此失彼</strong>。</p>\n<p>rate：评分；candyVec：糖果个数</p>\n<p><strong>右边</strong>：从前往后遍历<br>\n局部最优：如果右比左大，右边孩子就多一个糖果。<br>\n全局最优：总体中评分高的右孩子比左孩子多一个糖果<br>\n<img src=\"https://img-blog.csdnimg.cn/20201117114916878.png\" alt=\"135.分发糖果|700\"><br>\n<strong>左边</strong>：从后往前遍历<br>\n局部最优：如果左比右大，左边孩子就多一个糖果。<br>\n全局最优：总体中评分高的左孩子比右孩子多一个糖果<br>\n#flashcards/代码随想录<br>\n为什么不能从前往后遍历<br>\n?<br>\n因为如果继续从前向后遍历，就无法利用上一次得出的candyVec的数组了</p>\n<!--SR:!2022-07-31,27,250-->\n<p>eg：<br>\n<img src=\"https://img-blog.csdnimg.cn/20201117115658791.png\" alt=\"135.分发糖果1|700\"><br>\n如果是图中这样的话，就没必要用max函数了啊 #疑问</p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>自写代码已通过，没有用max函数</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">candy</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; ratings)</span></span>{<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">candyVec</span><span class=\"hljs-params\">(ratings.size(), <span class=\"hljs-number\">1</span>)</span></span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; ratings.<span class=\"hljs-built_in\">size</span>(); i++){<br>            <span class=\"hljs-keyword\">if</span>(ratings[i+<span class=\"hljs-number\">1</span>] &gt; ratings[i]) {<br>            candyVec[i+<span class=\"hljs-number\">1</span>] = candyVec[i]+<span class=\"hljs-number\">1</span>;<br>            }<br>       }<br><br>       <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = ratings.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">2</span>; i &gt;= <span class=\"hljs-number\">0</span>; i-- ) { <span class=\"hljs-comment\">// 从倒数第二位置开始比</span><br>        <span class=\"hljs-keyword\">if</span> (ratings[i] &gt; ratings[i+<span class=\"hljs-number\">1</span>]){<br>            candyVec[i] = candyVec[i+<span class=\"hljs-number\">1</span>]+<span class=\"hljs-number\">1</span>;<br>            }<br>       }<br>       <span class=\"hljs-type\">int</span> result = <span class=\"hljs-number\">0</span>;<br>       <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> a : candyVec) result += a; <span class=\"hljs-comment\">// 分号后边只需要变量名就行</span><br>       <span class=\"hljs-keyword\">return</span> result;<br>    }<br>};<br><br></code></pre></td></tr></tbody></table></figure>\n<p>参考资料<br>\n[[for 循环]]</p>\n","site":{"data":{}},"wordcount":1020,"excerpt":"","more":"<h1 id=\"1-分发糖果\"><a class=\"markdownIt-Anchor\" href=\"#1-分发糖果\"></a> 1 分发糖果</h1>\n<p><a href=\"https://leetcode-cn.com/problems/candy/\">力扣题目链接</a></p>\n<p>老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。</p>\n<p>你需要按照以下要求，帮助老师给这些孩子分发糖果：</p>\n<ul>\n<li>每个孩子至少分配到 1 个糖果。</li>\n<li>相邻的孩子中，评分高的孩子必须获得更多的糖果。</li>\n</ul>\n<p>那么这样下来，老师至少需要准备多少颗糖果呢？</p>\n<p>示例 1:</p>\n<ul>\n<li>输入: [1,0,2]</li>\n<li>输出: 5</li>\n<li>解释: 你可以分别给这三个孩子分发 2、1、2 颗糖果。</li>\n</ul>\n<p>示例 2:</p>\n<ul>\n<li>输入: [1,2,2]</li>\n<li>输出: 4</li>\n<li>解释: 你可以分别给这三个孩子分发 1、2、1 颗糖果。第三个孩子只得到 1 颗糖果，这已满足上述两个条件。</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>先比较每一个孩子的右边或者左边，<strong>如果两边一起考虑一定会顾此失彼</strong>。</p>\n<p>rate：评分；candyVec：糖果个数</p>\n<p><strong>右边</strong>：从前往后遍历<br />\n局部最优：如果右比左大，右边孩子就多一个糖果。<br />\n全局最优：总体中评分高的右孩子比左孩子多一个糖果<br />\n<img src=\"https://img-blog.csdnimg.cn/20201117114916878.png\" alt=\"135.分发糖果|700\" /><br />\n<strong>左边</strong>：从后往前遍历<br />\n局部最优：如果左比右大，左边孩子就多一个糖果。<br />\n全局最优：总体中评分高的左孩子比右孩子多一个糖果<br />\n#flashcards/代码随想录<br />\n为什么不能从前往后遍历<br />\n?<br />\n因为如果继续从前向后遍历，就无法利用上一次得出的candyVec的数组了</p>\n<!--SR:!2022-07-31,27,250-->\n<p>eg：<br />\n<img src=\"https://img-blog.csdnimg.cn/20201117115658791.png\" alt=\"135.分发糖果1|700\" /><br />\n如果是图中这样的话，就没必要用max函数了啊 #疑问</p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>自写代码已通过，没有用max函数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">candy</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; ratings)</span></span>&#123;<br>        <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">candyVec</span><span class=\"hljs-params\">(ratings.size(), <span class=\"hljs-number\">1</span>)</span></span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; ratings.<span class=\"hljs-built_in\">size</span>(); i++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(ratings[i+<span class=\"hljs-number\">1</span>] &gt; ratings[i]) &#123;<br>            candyVec[i+<span class=\"hljs-number\">1</span>] = candyVec[i]+<span class=\"hljs-number\">1</span>;<br>            &#125;<br>       &#125;<br><br>       <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = ratings.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">2</span>; i &gt;= <span class=\"hljs-number\">0</span>; i-- ) &#123; <span class=\"hljs-comment\">// 从倒数第二位置开始比</span><br>        <span class=\"hljs-keyword\">if</span> (ratings[i] &gt; ratings[i+<span class=\"hljs-number\">1</span>])&#123;<br>            candyVec[i] = candyVec[i+<span class=\"hljs-number\">1</span>]+<span class=\"hljs-number\">1</span>;<br>            &#125;<br>       &#125;<br>       <span class=\"hljs-type\">int</span> result = <span class=\"hljs-number\">0</span>;<br>       <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> a : candyVec) result += a; <span class=\"hljs-comment\">// 分号后边只需要变量名就行</span><br>       <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>\n<p>参考资料<br />\n[[for 循环]]</p>\n"},{"title":"13.柠檬水找零","abbrlink":52728,"date":"2022-06-06T07:32:08.000Z","_content":"# 1 860.柠檬水找零\n\n[力扣题目链接](https://leetcode-cn.com/problems/lemonade-change/)\n\n在柠檬水摊上，每一杯柠檬水的售价为 5 美元。\n\n顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。\n\n每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。\n\n注意，一开始你手头没有任何零钱。\n\n如果你能给每位顾客正确找零，返回 true ，否则返回 false 。\n\n示例 1：\n\n-   输入：[5,5,5,10,20]\n-   输出：true\n-   解释：\n    -   前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。\n    -   第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。\n    -   第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。\n    -   由于所有客户都得到了正确的找零，所以我们输出 true。\n\n示例 2：\n\n-   输入：[5,5,10]\n-   输出：true\n\n示例 3：\n\n-   输入：[10,10]\n-   输出：false\n\n示例 4：\n\n-   输入：[5,5,10,10,20]\n-   输出：false\n-   解释：\n    -   前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。\n    -   对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。\n    -   对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。\n    -   由于不是每位顾客都得到了正确的找零，所以答案是 false。\n\n提示：\n\n-   0 <= bills.length <= 10000\n-   bills[i] 不是 5 就是 10 或是 20\n\n# 2 思路\n\n有如下三种情况：\n-   情况一：账单是5，直接收下。\n-   情况二：账单是10，消耗一个5，增加一个10\n-   情况三：账单是20，优先消耗一个10和一个5，如果不够，再消耗三个5\n用新型for循环 for (int bill : bills)，逐一对元素进行判断就行[[for 循环]]\n\n\n账单是20的情况，为什么要优先消耗一个10和一个5呢？\n**因为美元10只能给账单20找零，而美元5可以给账单10和账单20找零，美元5更万能！**\n\n局部最优：逐一对元素进行判断\n全局最优：完成全部账单的找零\n\n# 3 代码\n自写，已编译成功\n```cpp\nclass Solution {\npublic:\n    bool lemonadeChange(vector<int>& bills) {\n        int five = 0, ten = 0, twenty = 0;\n        for (int bill : bills) { // 顺序遍历数组,先从第一个元素开始\n            if (bill == 5){\n                five ++;\n            }\n            // else return false; 不需要这行代码因为5肯定能收\n\n            if (bill == 10){\n                if (five > 0) {\n                    five--;\n                    ten++;\n                }\n            else return false;    \n            }\n\n            if(bill == 20){\n                if (ten > 0 && five > 0){\n                    ten--;\n                    five--;\n                }\n                else if ( five >= 3){ // 一定要用else if 下边也用else，这样这三个函数才能成为整体\n                    five -= 3;\n                }\n                else  return false;\n            }\n        }\n             return true; // 放在整体for循环外\n    }\n};\n\n```\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/13.柠檬水找零.md","raw":"---\ntitle: 13.柠檬水找零\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 贪心算法\ntags:\n  - 贪心算法\nabbrlink: 52728\ndate: 2022-06-06 15:32:08\n---\n# 1 860.柠檬水找零\n\n[力扣题目链接](https://leetcode-cn.com/problems/lemonade-change/)\n\n在柠檬水摊上，每一杯柠檬水的售价为 5 美元。\n\n顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。\n\n每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。\n\n注意，一开始你手头没有任何零钱。\n\n如果你能给每位顾客正确找零，返回 true ，否则返回 false 。\n\n示例 1：\n\n-   输入：[5,5,5,10,20]\n-   输出：true\n-   解释：\n    -   前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。\n    -   第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。\n    -   第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。\n    -   由于所有客户都得到了正确的找零，所以我们输出 true。\n\n示例 2：\n\n-   输入：[5,5,10]\n-   输出：true\n\n示例 3：\n\n-   输入：[10,10]\n-   输出：false\n\n示例 4：\n\n-   输入：[5,5,10,10,20]\n-   输出：false\n-   解释：\n    -   前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。\n    -   对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。\n    -   对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。\n    -   由于不是每位顾客都得到了正确的找零，所以答案是 false。\n\n提示：\n\n-   0 <= bills.length <= 10000\n-   bills[i] 不是 5 就是 10 或是 20\n\n# 2 思路\n\n有如下三种情况：\n-   情况一：账单是5，直接收下。\n-   情况二：账单是10，消耗一个5，增加一个10\n-   情况三：账单是20，优先消耗一个10和一个5，如果不够，再消耗三个5\n用新型for循环 for (int bill : bills)，逐一对元素进行判断就行[[for 循环]]\n\n\n账单是20的情况，为什么要优先消耗一个10和一个5呢？\n**因为美元10只能给账单20找零，而美元5可以给账单10和账单20找零，美元5更万能！**\n\n局部最优：逐一对元素进行判断\n全局最优：完成全部账单的找零\n\n# 3 代码\n自写，已编译成功\n```cpp\nclass Solution {\npublic:\n    bool lemonadeChange(vector<int>& bills) {\n        int five = 0, ten = 0, twenty = 0;\n        for (int bill : bills) { // 顺序遍历数组,先从第一个元素开始\n            if (bill == 5){\n                five ++;\n            }\n            // else return false; 不需要这行代码因为5肯定能收\n\n            if (bill == 10){\n                if (five > 0) {\n                    five--;\n                    ten++;\n                }\n            else return false;    \n            }\n\n            if(bill == 20){\n                if (ten > 0 && five > 0){\n                    ten--;\n                    five--;\n                }\n                else if ( five >= 3){ // 一定要用else if 下边也用else，这样这三个函数才能成为整体\n                    five -= 3;\n                }\n                else  return false;\n            }\n        }\n             return true; // 放在整体for循环外\n    }\n};\n\n```\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/13.柠檬水找零","published":1,"updated":"2022-07-12T09:02:14.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjq006te0mgdavc8n5x","content":"<h1 id=\"1-860柠檬水找零\"><a class=\"markdownIt-Anchor\" href=\"#1-860柠檬水找零\"></a> 1 860.柠檬水找零</h1>\n<p><a href=\"https://leetcode-cn.com/problems/lemonade-change/\">力扣题目链接</a></p>\n<p>在柠檬水摊上，每一杯柠檬水的售价为&nbsp;5&nbsp;美元。</p>\n<p>顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。</p>\n<p>每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。</p>\n<p>注意，一开始你手头没有任何零钱。</p>\n<p>如果你能给每位顾客正确找零，返回&nbsp;true&nbsp;，否则返回 false&nbsp;。</p>\n<p>示例 1：</p>\n<ul>\n<li>输入：[5,5,5,10,20]</li>\n<li>输出：true</li>\n<li>解释：\n<ul>\n<li>前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。</li>\n<li>第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。</li>\n<li>第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。</li>\n<li>由于所有客户都得到了正确的找零，所以我们输出 true。</li>\n</ul>\n</li>\n</ul>\n<p>示例 2：</p>\n<ul>\n<li>输入：[5,5,10]</li>\n<li>输出：true</li>\n</ul>\n<p>示例 3：</p>\n<ul>\n<li>输入：[10,10]</li>\n<li>输出：false</li>\n</ul>\n<p>示例 4：</p>\n<ul>\n<li>输入：[5,5,10,10,20]</li>\n<li>输出：false</li>\n<li>解释：\n<ul>\n<li>前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。</li>\n<li>对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。</li>\n<li>对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。</li>\n<li>由于不是每位顾客都得到了正确的找零，所以答案是 false。</li>\n</ul>\n</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>0 &lt;= bills.length &lt;= 10000</li>\n<li>bills[i]&nbsp;不是&nbsp;5&nbsp;就是&nbsp;10&nbsp;或是&nbsp;20</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>有如下三种情况：</p>\n<ul>\n<li>情况一：账单是5，直接收下。</li>\n<li>情况二：账单是10，消耗一个5，增加一个10</li>\n<li>情况三：账单是20，优先消耗一个10和一个5，如果不够，再消耗三个5<br>\n用新型for循环 for (int bill : bills)，逐一对元素进行判断就行[[for 循环]]</li>\n</ul>\n<p>账单是20的情况，为什么要优先消耗一个10和一个5呢？<br>\n<strong>因为美元10只能给账单20找零，而美元5可以给账单10和账单20找零，美元5更万能！</strong></p>\n<p>局部最优：逐一对元素进行判断<br>\n全局最优：完成全部账单的找零</p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>自写，已编译成功</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">lemonadeChange</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; bills)</span> </span>{<br>        <span class=\"hljs-type\">int</span> five = <span class=\"hljs-number\">0</span>, ten = <span class=\"hljs-number\">0</span>, twenty = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> bill : bills) { <span class=\"hljs-comment\">// 顺序遍历数组,先从第一个元素开始</span><br>            <span class=\"hljs-keyword\">if</span> (bill == <span class=\"hljs-number\">5</span>){<br>                five ++;<br>            }<br>            <span class=\"hljs-comment\">// else return false; 不需要这行代码因为5肯定能收</span><br><br>            <span class=\"hljs-keyword\">if</span> (bill == <span class=\"hljs-number\">10</span>){<br>                <span class=\"hljs-keyword\">if</span> (five &gt; <span class=\"hljs-number\">0</span>) {<br>                    five--;<br>                    ten++;<br>                }<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;    <br>            }<br><br>            <span class=\"hljs-keyword\">if</span>(bill == <span class=\"hljs-number\">20</span>){<br>                <span class=\"hljs-keyword\">if</span> (ten &gt; <span class=\"hljs-number\">0</span> &amp;&amp; five &gt; <span class=\"hljs-number\">0</span>){<br>                    ten--;<br>                    five--;<br>                }<br>                <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ( five &gt;= <span class=\"hljs-number\">3</span>){ <span class=\"hljs-comment\">// 一定要用else if 下边也用else，这样这三个函数才能成为整体</span><br>                    five -= <span class=\"hljs-number\">3</span>;<br>                }<br>                <span class=\"hljs-keyword\">else</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>            }<br>        }<br>             <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// 放在整体for循环外</span><br>    }<br>};<br><br></code></pre></td></tr></tbody></table></figure>\n","site":{"data":{}},"wordcount":1361,"excerpt":"","more":"<h1 id=\"1-860柠檬水找零\"><a class=\"markdownIt-Anchor\" href=\"#1-860柠檬水找零\"></a> 1 860.柠檬水找零</h1>\n<p><a href=\"https://leetcode-cn.com/problems/lemonade-change/\">力扣题目链接</a></p>\n<p>在柠檬水摊上，每一杯柠檬水的售价为 5 美元。</p>\n<p>顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。</p>\n<p>每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。</p>\n<p>注意，一开始你手头没有任何零钱。</p>\n<p>如果你能给每位顾客正确找零，返回 true ，否则返回 false 。</p>\n<p>示例 1：</p>\n<ul>\n<li>输入：[5,5,5,10,20]</li>\n<li>输出：true</li>\n<li>解释：\n<ul>\n<li>前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。</li>\n<li>第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。</li>\n<li>第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。</li>\n<li>由于所有客户都得到了正确的找零，所以我们输出 true。</li>\n</ul>\n</li>\n</ul>\n<p>示例 2：</p>\n<ul>\n<li>输入：[5,5,10]</li>\n<li>输出：true</li>\n</ul>\n<p>示例 3：</p>\n<ul>\n<li>输入：[10,10]</li>\n<li>输出：false</li>\n</ul>\n<p>示例 4：</p>\n<ul>\n<li>输入：[5,5,10,10,20]</li>\n<li>输出：false</li>\n<li>解释：\n<ul>\n<li>前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。</li>\n<li>对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。</li>\n<li>对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。</li>\n<li>由于不是每位顾客都得到了正确的找零，所以答案是 false。</li>\n</ul>\n</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>0 &lt;= bills.length &lt;= 10000</li>\n<li>bills[i] 不是 5 就是 10 或是 20</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>有如下三种情况：</p>\n<ul>\n<li>情况一：账单是5，直接收下。</li>\n<li>情况二：账单是10，消耗一个5，增加一个10</li>\n<li>情况三：账单是20，优先消耗一个10和一个5，如果不够，再消耗三个5<br />\n用新型for循环 for (int bill : bills)，逐一对元素进行判断就行[[for 循环]]</li>\n</ul>\n<p>账单是20的情况，为什么要优先消耗一个10和一个5呢？<br />\n<strong>因为美元10只能给账单20找零，而美元5可以给账单10和账单20找零，美元5更万能！</strong></p>\n<p>局部最优：逐一对元素进行判断<br />\n全局最优：完成全部账单的找零</p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>自写，已编译成功</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">lemonadeChange</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; bills)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> five = <span class=\"hljs-number\">0</span>, ten = <span class=\"hljs-number\">0</span>, twenty = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> bill : bills) &#123; <span class=\"hljs-comment\">// 顺序遍历数组,先从第一个元素开始</span><br>            <span class=\"hljs-keyword\">if</span> (bill == <span class=\"hljs-number\">5</span>)&#123;<br>                five ++;<br>            &#125;<br>            <span class=\"hljs-comment\">// else return false; 不需要这行代码因为5肯定能收</span><br><br>            <span class=\"hljs-keyword\">if</span> (bill == <span class=\"hljs-number\">10</span>)&#123;<br>                <span class=\"hljs-keyword\">if</span> (five &gt; <span class=\"hljs-number\">0</span>) &#123;<br>                    five--;<br>                    ten++;<br>                &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;    <br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span>(bill == <span class=\"hljs-number\">20</span>)&#123;<br>                <span class=\"hljs-keyword\">if</span> (ten &gt; <span class=\"hljs-number\">0</span> &amp;&amp; five &gt; <span class=\"hljs-number\">0</span>)&#123;<br>                    ten--;<br>                    five--;<br>                &#125;<br>                <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ( five &gt;= <span class=\"hljs-number\">3</span>)&#123; <span class=\"hljs-comment\">// 一定要用else if 下边也用else，这样这三个函数才能成为整体</span><br>                    five -= <span class=\"hljs-number\">3</span>;<br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>            &#125;<br>        &#125;<br>             <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// 放在整体for循环外</span><br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>\n"},{"id":"6ef3123b-213a-456b-adba-e26f4a9b2215","title":"18.无重叠区间","date":"2022-06-10T03:56:00.000Z","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206200917436.jpg","abbrlink":34584,"_content":"\n文章简介：\n力扣题解：435. 无重叠区间\n<!-- more -->\n# 1 无重叠区间\n\n[力扣题目链接](https://leetcode-cn.com/problems/non-overlapping-intervals/)\n\n\n给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。\n>返回需要移除的区间个数(交叉区间 = 总个数-非交叉区间的个数)\n\n\n注意: 可以认为区间的终点总是大于它的起点。 区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。\n\n示例 1:\n\n-   输入: [ [1,2], [2,3], [3,4], [1,3] ]\n-   输出: 1\n-   解释: 移除 [1,3] 后，剩下的区间没有重叠。\n\n示例 2:\n\n-   输入: [ [1,2], [1,2], [1,2] ]\n-   输出: 2\n-   解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。\n\n示例 3:\n\n-   输入: [ [1,2], [2,3] ]\n-   输出: 0\n-   解释: 你不需要移除任何区间，因为它们已经是无重叠的了。\n\n\n\n\n\n\n# 2 思路\n\n**按照右边界排序，从左向右记录非交叉区间的个数。最后用区间总数减去非交叉区间的个数就是需要移除的区间个数了**。\n\n从左向右遍历，优先选择右边界小的数组(因为右边界越小，留给下一个区间的空间就越大)\n>![|600](https://s1.vika.cn/space/2022/06/10/6830dccb02804260a38ac29d8641f9f8)\n\n\n\n**局部最优**：优先选右边界小的区间，所以从左向右遍历，留给下一个区间的空间大一些，从而尽量避免交叉。\n**全局最优**：选取最多的非交叉区间。\n![435.无重叠区间|600](https://img-blog.csdnimg.cn/20201221201553618.png)\n>选择1就把2，3pass了，选择4就把5pass了\n\n# 3 代码\n\n## 3.1 carl\n### 3.1.1 解法1\n自写代码已通过\n\n```cpp\nclass Solution {\nprivate:\nstatic bool cmp (const vector<int>& a,const vector<int>& b){\n    return a[1] < b[1];// 按右边界排序\n}\npublic:\n    int eraseOverlapIntervals(vector<vector<int>>& intervals) {\n        if (intervals.size() == 0) return 0;\n        sort(intervals.begin(), intervals.end(),cmp);\n        int count = 1; //记录非交叉区间的个数\n        int end = intervals[0][1]; // 记录第一个区间的尾部\n        for(int i = 1; i < intervals.size(); i++){\n            if(end <= intervals[i][0]){// 如果头尾没有重合，即不重叠\n                end = intervals[i][1]; // 更新end为下一个没有重合的尾部，不断for循环在\n                count++;// 记录不重合的个数\n            }\n        } \n        return intervals.size() - count; \n\n    }\n};\n```\n### 3.1.2 解法2：利用[[17.用最少数量的箭引爆气球]]\n弓箭的数量就相当于是**非交叉区间**的数量(因为交叉区间可以用一支箭射爆)，\n只要把弓箭那道题目代码里射爆气球的判断条件加个等号（认为[0，1]，[1，2]不是相邻区间），然后用总区间数减去弓箭数量 就是要移除的区间数量了\n```cpp\nclass Solution {\npublic:\n    // 按照区间左边界从大到小排序\n    static bool cmp (const vector<int>& a, const vector<int>& b) {\n        return a[0] < b[0];\n    }\n    int eraseOverlapIntervals(vector<vector<int>>& intervals) {\n        if (intervals.size() == 0) return 0;\n        sort(intervals.begin(), intervals.end(), cmp);\n\n        int result = 1;\n        for (int i = 1; i < intervals.size(); i++) {\n            if (intervals[i][0] >= intervals[i - 1][1]) { // 需要要把> 改成 >= 就可以了\n                result++; // 需要一支箭\n            }\n            else {\n                intervals[i][1] = min(intervals[i - 1][1], intervals[i][1]); // 更新重叠气球最小右边界\n            }\n        }\n        return intervals.size() - result;\n    }\n};\n```\n\n# 4 参考资料\n[代码随想录](https://www.programmercarl.com/0435.%E6%97%A0%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4.html)\n[Leetcode  Python版每日一题（20201231）：435. 无重叠区间（想想罗志祥会怎么做）哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1Uh41117SZ?spm_id_from=333.337.search-card.all.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n\n\n自用跳转连接：<a class=\"btn\" href=\"http://localhost:4000/2022/06/10/18.wu-chong-die-qu-jian/\" title=\"title\">blog</a> <a class=\"btn\" href=\"obsidian://advanced-uri?vault=Documents&uid=6ef3123b-213a-456b-adba-e26f4a9b2215\" title=\"title\">ob</a>\n\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/18.无重叠区间.md","raw":"---\nid: 6ef3123b-213a-456b-adba-e26f4a9b2215\ntitle: 18.无重叠区间\ndate: '2022-06-10 11:56'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 贪心算法\ntags:\n  - 贪心算法\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206200917436.jpg'\nabbrlink: 34584\n---\n\n文章简介：\n力扣题解：435. 无重叠区间\n<!-- more -->\n# 1 无重叠区间\n\n[力扣题目链接](https://leetcode-cn.com/problems/non-overlapping-intervals/)\n\n\n给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。\n>返回需要移除的区间个数(交叉区间 = 总个数-非交叉区间的个数)\n\n\n注意: 可以认为区间的终点总是大于它的起点。 区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。\n\n示例 1:\n\n-   输入: [ [1,2], [2,3], [3,4], [1,3] ]\n-   输出: 1\n-   解释: 移除 [1,3] 后，剩下的区间没有重叠。\n\n示例 2:\n\n-   输入: [ [1,2], [1,2], [1,2] ]\n-   输出: 2\n-   解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。\n\n示例 3:\n\n-   输入: [ [1,2], [2,3] ]\n-   输出: 0\n-   解释: 你不需要移除任何区间，因为它们已经是无重叠的了。\n\n\n\n\n\n\n# 2 思路\n\n**按照右边界排序，从左向右记录非交叉区间的个数。最后用区间总数减去非交叉区间的个数就是需要移除的区间个数了**。\n\n从左向右遍历，优先选择右边界小的数组(因为右边界越小，留给下一个区间的空间就越大)\n>![|600](https://s1.vika.cn/space/2022/06/10/6830dccb02804260a38ac29d8641f9f8)\n\n\n\n**局部最优**：优先选右边界小的区间，所以从左向右遍历，留给下一个区间的空间大一些，从而尽量避免交叉。\n**全局最优**：选取最多的非交叉区间。\n![435.无重叠区间|600](https://img-blog.csdnimg.cn/20201221201553618.png)\n>选择1就把2，3pass了，选择4就把5pass了\n\n# 3 代码\n\n## 3.1 carl\n### 3.1.1 解法1\n自写代码已通过\n\n```cpp\nclass Solution {\nprivate:\nstatic bool cmp (const vector<int>& a,const vector<int>& b){\n    return a[1] < b[1];// 按右边界排序\n}\npublic:\n    int eraseOverlapIntervals(vector<vector<int>>& intervals) {\n        if (intervals.size() == 0) return 0;\n        sort(intervals.begin(), intervals.end(),cmp);\n        int count = 1; //记录非交叉区间的个数\n        int end = intervals[0][1]; // 记录第一个区间的尾部\n        for(int i = 1; i < intervals.size(); i++){\n            if(end <= intervals[i][0]){// 如果头尾没有重合，即不重叠\n                end = intervals[i][1]; // 更新end为下一个没有重合的尾部，不断for循环在\n                count++;// 记录不重合的个数\n            }\n        } \n        return intervals.size() - count; \n\n    }\n};\n```\n### 3.1.2 解法2：利用[[17.用最少数量的箭引爆气球]]\n弓箭的数量就相当于是**非交叉区间**的数量(因为交叉区间可以用一支箭射爆)，\n只要把弓箭那道题目代码里射爆气球的判断条件加个等号（认为[0，1]，[1，2]不是相邻区间），然后用总区间数减去弓箭数量 就是要移除的区间数量了\n```cpp\nclass Solution {\npublic:\n    // 按照区间左边界从大到小排序\n    static bool cmp (const vector<int>& a, const vector<int>& b) {\n        return a[0] < b[0];\n    }\n    int eraseOverlapIntervals(vector<vector<int>>& intervals) {\n        if (intervals.size() == 0) return 0;\n        sort(intervals.begin(), intervals.end(), cmp);\n\n        int result = 1;\n        for (int i = 1; i < intervals.size(); i++) {\n            if (intervals[i][0] >= intervals[i - 1][1]) { // 需要要把> 改成 >= 就可以了\n                result++; // 需要一支箭\n            }\n            else {\n                intervals[i][1] = min(intervals[i - 1][1], intervals[i][1]); // 更新重叠气球最小右边界\n            }\n        }\n        return intervals.size() - result;\n    }\n};\n```\n\n# 4 参考资料\n[代码随想录](https://www.programmercarl.com/0435.%E6%97%A0%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4.html)\n[Leetcode  Python版每日一题（20201231）：435. 无重叠区间（想想罗志祥会怎么做）哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1Uh41117SZ?spm_id_from=333.337.search-card.all.click&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n\n\n自用跳转连接：<a class=\"btn\" href=\"http://localhost:4000/2022/06/10/18.wu-chong-die-qu-jian/\" title=\"title\">blog</a> <a class=\"btn\" href=\"obsidian://advanced-uri?vault=Documents&uid=6ef3123b-213a-456b-adba-e26f4a9b2215\" title=\"title\">ob</a>\n\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/18.无重叠区间","published":1,"updated":"2022-07-12T09:02:14.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjq006we0mgbkho1pst","content":"<p>文章简介：<br>\n力扣题解：435. 无重叠区间</p>\n<span id=\"more\"></span>\n<h1 id=\"1-无重叠区间\"><a class=\"markdownIt-Anchor\" href=\"#1-无重叠区间\"></a> 1 无重叠区间</h1>\n<p><a href=\"https://leetcode-cn.com/problems/non-overlapping-intervals/\">力扣题目链接</a></p>\n<p>给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。</p>\n<blockquote>\n<p>返回需要移除的区间个数(交叉区间 = 总个数-非交叉区间的个数)</p>\n</blockquote>\n<p>注意: 可以认为区间的终点总是大于它的起点。 区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。</p>\n<p>示例 1:</p>\n<ul>\n<li>输入: [ [1,2], [2,3], [3,4], [1,3] ]</li>\n<li>输出: 1</li>\n<li>解释: 移除 [1,3] 后，剩下的区间没有重叠。</li>\n</ul>\n<p>示例 2:</p>\n<ul>\n<li>输入: [ [1,2], [1,2], [1,2] ]</li>\n<li>输出: 2</li>\n<li>解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。</li>\n</ul>\n<p>示例 3:</p>\n<ul>\n<li>输入: [ [1,2], [2,3] ]</li>\n<li>输出: 0</li>\n<li>解释: 你不需要移除任何区间，因为它们已经是无重叠的了。</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p><strong>按照右边界排序，从左向右记录非交叉区间的个数。最后用区间总数减去非交叉区间的个数就是需要移除的区间个数了</strong>。</p>\n<p>从左向右遍历，优先选择右边界小的数组(因为右边界越小，留给下一个区间的空间就越大)</p>\n<blockquote>\n<p><img src=\"https://s1.vika.cn/space/2022/06/10/6830dccb02804260a38ac29d8641f9f8\" alt=\"|600\"></p>\n</blockquote>\n<p><strong>局部最优</strong>：优先选右边界小的区间，所以从左向右遍历，留给下一个区间的空间大一些，从而尽量避免交叉。<br>\n<strong>全局最优</strong>：选取最多的非交叉区间。<br>\n<img src=\"https://img-blog.csdnimg.cn/20201221201553618.png\" alt=\"435.无重叠区间|600\"></p>\n<blockquote>\n<p>选择1就把2，3pass了，选择4就把5pass了</p>\n</blockquote>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<h2 id=\"31-carl\"><a class=\"markdownIt-Anchor\" href=\"#31-carl\"></a> 3.1 carl</h2>\n<h3 id=\"311-解法1\"><a class=\"markdownIt-Anchor\" href=\"#311-解法1\"></a> 3.1.1 解法1</h3>\n<p>自写代码已通过</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">private</span>:<br><span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; a,<span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; b)</span></span>{<br>    <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">1</span>] &lt; b[<span class=\"hljs-number\">1</span>];<span class=\"hljs-comment\">// 按右边界排序</span><br>}<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">eraseOverlapIntervals</span><span class=\"hljs-params\">(vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt;&amp; intervals)</span> </span>{<br>        <span class=\"hljs-keyword\">if</span> (intervals.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">sort</span>(intervals.<span class=\"hljs-built_in\">begin</span>(), intervals.<span class=\"hljs-built_in\">end</span>(),cmp);<br>        <span class=\"hljs-type\">int</span> count = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">//记录非交叉区间的个数</span><br>        <span class=\"hljs-type\">int</span> end = intervals[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 记录第一个区间的尾部</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; intervals.<span class=\"hljs-built_in\">size</span>(); i++){<br>            <span class=\"hljs-keyword\">if</span>(end &lt;= intervals[i][<span class=\"hljs-number\">0</span>]){<span class=\"hljs-comment\">// 如果头尾没有重合，即不重叠</span><br>                end = intervals[i][<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 更新end为下一个没有重合的尾部，不断for循环在</span><br>                count++;<span class=\"hljs-comment\">// 记录不重合的个数</span><br>            }<br>        } <br>        <span class=\"hljs-keyword\">return</span> intervals.<span class=\"hljs-built_in\">size</span>() - count; <br><br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<h3 id=\"312-解法2利用17用最少数量的箭引爆气球\"><a class=\"markdownIt-Anchor\" href=\"#312-解法2利用17用最少数量的箭引爆气球\"></a> 3.1.2 解法2：利用[[17.用最少数量的箭引爆气球]]</h3>\n<p>弓箭的数量就相当于是<strong>非交叉区间</strong>的数量(因为交叉区间可以用一支箭射爆)，<br>\n只要把弓箭那道题目代码里射爆气球的判断条件加个等号（认为[0，1]，[1，2]不是相邻区间），然后用总区间数减去弓箭数量 就是要移除的区间数量了</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-comment\">// 按照区间左边界从大到小排序</span><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; a, <span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; b)</span> </span>{<br>        <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">0</span>] &lt; b[<span class=\"hljs-number\">0</span>];<br>    }<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">eraseOverlapIntervals</span><span class=\"hljs-params\">(vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt;&amp; intervals)</span> </span>{<br>        <span class=\"hljs-keyword\">if</span> (intervals.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">sort</span>(intervals.<span class=\"hljs-built_in\">begin</span>(), intervals.<span class=\"hljs-built_in\">end</span>(), cmp);<br><br>        <span class=\"hljs-type\">int</span> result = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; intervals.<span class=\"hljs-built_in\">size</span>(); i++) {<br>            <span class=\"hljs-keyword\">if</span> (intervals[i][<span class=\"hljs-number\">0</span>] &gt;= intervals[i - <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]) { <span class=\"hljs-comment\">// 需要要把&gt; 改成 &gt;= 就可以了</span><br>                result++; <span class=\"hljs-comment\">// 需要一支箭</span><br>            }<br>            <span class=\"hljs-keyword\">else</span> {<br>                intervals[i][<span class=\"hljs-number\">1</span>] = <span class=\"hljs-built_in\">min</span>(intervals[i - <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>], intervals[i][<span class=\"hljs-number\">1</span>]); <span class=\"hljs-comment\">// 更新重叠气球最小右边界</span><br>            }<br>        }<br>        <span class=\"hljs-keyword\">return</span> intervals.<span class=\"hljs-built_in\">size</span>() - result;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p><a href=\"https://www.programmercarl.com/0435.%E6%97%A0%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4.html\">代码随想录</a><br>\n<a href=\"https://www.bilibili.com/video/BV1Uh41117SZ?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">Leetcode  Python版每日一题（20201231）：435. 无重叠区间（想想罗志祥会怎么做）哔哩哔哩_bilibili</a></p>\n<p>自用跳转连接：<a class=\"btn\" href=\"http://localhost:4000/2022/06/10/18.wu-chong-die-qu-jian/\" title=\"title\">blog</a> <a class=\"btn\" href=\"obsidian://advanced-uri?vault=Documents&amp;uid=6ef3123b-213a-456b-adba-e26f4a9b2215\" title=\"title\">ob</a></p>\n","site":{"data":{}},"wordcount":1952,"excerpt":"<p>文章简介：<br>\n力扣题解：435. 无重叠区间</p>","more":"<h1 id=\"1-无重叠区间\"><a class=\"markdownIt-Anchor\" href=\"#1-无重叠区间\"></a> 1 无重叠区间</h1>\n<p><a href=\"https://leetcode-cn.com/problems/non-overlapping-intervals/\">力扣题目链接</a></p>\n<p>给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。</p>\n<blockquote>\n<p>返回需要移除的区间个数(交叉区间 = 总个数-非交叉区间的个数)</p>\n</blockquote>\n<p>注意: 可以认为区间的终点总是大于它的起点。 区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。</p>\n<p>示例 1:</p>\n<ul>\n<li>输入: [ [1,2], [2,3], [3,4], [1,3] ]</li>\n<li>输出: 1</li>\n<li>解释: 移除 [1,3] 后，剩下的区间没有重叠。</li>\n</ul>\n<p>示例 2:</p>\n<ul>\n<li>输入: [ [1,2], [1,2], [1,2] ]</li>\n<li>输出: 2</li>\n<li>解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。</li>\n</ul>\n<p>示例 3:</p>\n<ul>\n<li>输入: [ [1,2], [2,3] ]</li>\n<li>输出: 0</li>\n<li>解释: 你不需要移除任何区间，因为它们已经是无重叠的了。</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p><strong>按照右边界排序，从左向右记录非交叉区间的个数。最后用区间总数减去非交叉区间的个数就是需要移除的区间个数了</strong>。</p>\n<p>从左向右遍历，优先选择右边界小的数组(因为右边界越小，留给下一个区间的空间就越大)</p>\n<blockquote>\n<p><img src=\"https://s1.vika.cn/space/2022/06/10/6830dccb02804260a38ac29d8641f9f8\" alt=\"|600\" /></p>\n</blockquote>\n<p><strong>局部最优</strong>：优先选右边界小的区间，所以从左向右遍历，留给下一个区间的空间大一些，从而尽量避免交叉。<br />\n<strong>全局最优</strong>：选取最多的非交叉区间。<br />\n<img src=\"https://img-blog.csdnimg.cn/20201221201553618.png\" alt=\"435.无重叠区间|600\" /></p>\n<blockquote>\n<p>选择1就把2，3pass了，选择4就把5pass了</p>\n</blockquote>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<h2 id=\"31-carl\"><a class=\"markdownIt-Anchor\" href=\"#31-carl\"></a> 3.1 carl</h2>\n<h3 id=\"311-解法1\"><a class=\"markdownIt-Anchor\" href=\"#311-解法1\"></a> 3.1.1 解法1</h3>\n<p>自写代码已通过</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">private</span>:<br><span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; a,<span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; b)</span></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">1</span>] &lt; b[<span class=\"hljs-number\">1</span>];<span class=\"hljs-comment\">// 按右边界排序</span><br>&#125;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">eraseOverlapIntervals</span><span class=\"hljs-params\">(vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt;&amp; intervals)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (intervals.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">sort</span>(intervals.<span class=\"hljs-built_in\">begin</span>(), intervals.<span class=\"hljs-built_in\">end</span>(),cmp);<br>        <span class=\"hljs-type\">int</span> count = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">//记录非交叉区间的个数</span><br>        <span class=\"hljs-type\">int</span> end = intervals[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 记录第一个区间的尾部</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; intervals.<span class=\"hljs-built_in\">size</span>(); i++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(end &lt;= intervals[i][<span class=\"hljs-number\">0</span>])&#123;<span class=\"hljs-comment\">// 如果头尾没有重合，即不重叠</span><br>                end = intervals[i][<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 更新end为下一个没有重合的尾部，不断for循环在</span><br>                count++;<span class=\"hljs-comment\">// 记录不重合的个数</span><br>            &#125;<br>        &#125; <br>        <span class=\"hljs-keyword\">return</span> intervals.<span class=\"hljs-built_in\">size</span>() - count; <br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h3 id=\"312-解法2利用17用最少数量的箭引爆气球\"><a class=\"markdownIt-Anchor\" href=\"#312-解法2利用17用最少数量的箭引爆气球\"></a> 3.1.2 解法2：利用[[17.用最少数量的箭引爆气球]]</h3>\n<p>弓箭的数量就相当于是<strong>非交叉区间</strong>的数量(因为交叉区间可以用一支箭射爆)，<br />\n只要把弓箭那道题目代码里射爆气球的判断条件加个等号（认为[0，1]，[1，2]不是相邻区间），然后用总区间数减去弓箭数量 就是要移除的区间数量了</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-comment\">// 按照区间左边界从大到小排序</span><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; a, <span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; b)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">0</span>] &lt; b[<span class=\"hljs-number\">0</span>];<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">eraseOverlapIntervals</span><span class=\"hljs-params\">(vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt;&amp; intervals)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (intervals.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">sort</span>(intervals.<span class=\"hljs-built_in\">begin</span>(), intervals.<span class=\"hljs-built_in\">end</span>(), cmp);<br><br>        <span class=\"hljs-type\">int</span> result = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; intervals.<span class=\"hljs-built_in\">size</span>(); i++) &#123;<br>            <span class=\"hljs-keyword\">if</span> (intervals[i][<span class=\"hljs-number\">0</span>] &gt;= intervals[i - <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]) &#123; <span class=\"hljs-comment\">// 需要要把&gt; 改成 &gt;= 就可以了</span><br>                result++; <span class=\"hljs-comment\">// 需要一支箭</span><br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> &#123;<br>                intervals[i][<span class=\"hljs-number\">1</span>] = <span class=\"hljs-built_in\">min</span>(intervals[i - <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>], intervals[i][<span class=\"hljs-number\">1</span>]); <span class=\"hljs-comment\">// 更新重叠气球最小右边界</span><br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> intervals.<span class=\"hljs-built_in\">size</span>() - result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p><a href=\"https://www.programmercarl.com/0435.%E6%97%A0%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4.html\">代码随想录</a><br />\n<a href=\"https://www.bilibili.com/video/BV1Uh41117SZ?spm_id_from=333.337.search-card.all.click&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">Leetcode  Python版每日一题（20201231）：435. 无重叠区间（想想罗志祥会怎么做）哔哩哔哩_bilibili</a></p>\n<p>自用跳转连接：<a class=\"btn\" href=\"http://localhost:4000/2022/06/10/18.wu-chong-die-qu-jian/\" title=\"title\">blog</a> <a class=\"btn\" href=\"obsidian://advanced-uri?vault=Documents&uid=6ef3123b-213a-456b-adba-e26f4a9b2215\" title=\"title\">ob</a></p>"},{"id":"13b04b05-d8f9-4a57-a909-3b6b3af97825","title":"19.划分字母区间","date":"2022-06-15T01:21:00.000Z","abbrlink":22082,"_content":"\n文章简介\n\t力扣题解：763.划分字母区间\n<!-- more -->\n\n# 1 763.划分字母区间\n\n[力扣题目链接](https://leetcode-cn.com/problems/partition-labels/)\n\n字符串 S 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。返回一个表示每个字符串片段的长度的列表。\n\n示例：\n\n-   输入：S = \"ababcbacadefegdehijhklij\"\n-   输出：[9,7,8] 解释： 划分结果为 \"ababcbaca\", \"defegde\", \"hijhklij\"。 每个字母最多出现在一个片段中。 像 \"ababcbacadefegde\", \"hijhklij\" 的划分是错误的，因为划分的片段数较少。\n\n提示：\n\n-   S的长度在[1, 500]之间。\n-   S只包含小写字母 'a' 到 'z' 。\n\n# 2 思路\n\n总共分为两步：\n\n-   统计每一个字符最后出现的位置\n-   从头遍历字符，并更新字符的最远出现下标，如果找到字符最远出现位置下标和当前下标相等了，则找到了分割点\n![763.划分字母区间|900](https://img-blog.csdnimg.cn/20201222191924417.png)\n# 3 代码\n## 3.1 carl断点调试\n[19.划分字母区间(carl).MP4](file:///Users/yibeikongqiu/Desktop/ishot视频/贪心算法/19.划分字母区间(carl).mp4)\n\t以后可以监听几个变量：S[i]，right - left +1\n\t[[c++中 - ‘0’ 以及 -'a' 的相减操作解释]]\n\tS = \"**a**babcbac**a**defegdehijhklij\"\n\t[00:12](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/19.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4(carl).mp4#t=12.709769) \n\t\tS = \"a==b==abcbacadefegdehijhklij\"，相当于将b对应1，这个数存在了hash里\n\t\thash[S[1] - 'a'] = 1，即hash[2] = 1\n\t[01:03](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/19.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4(carl).mp4#t=63.222835) \n\t\tS = \"==**a**==babcbac==**a**==defegdehijhklij\"\n\t\t将每一个字母的所对应的下标值放到了hash数组里了，相同字母的是更新的，因为 S[1] - 'a'= S[9] - 'a' = 0 (第一个区间)\n\t[01:10](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/19.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4(carl).mp4#t=70.392045) \n\t\t此使 right = max(0, 8)，之道i 到下标8才会进入if 循环语句，它在下标8之前一直在比较有没有比8更大值，有的话说明第一个分割点更远\n\t[01:53](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/19.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4(carl).mp4#t=113.069755)\n\t\t到达第一分割点下标8(i = 8)处，开始push_back结果，并且更新下一个区间\n\t\tright  - left + 1  = 8-0+1= 9 第一个区间相当于：尾 - 头 + 1\n\t\t下个区间要在更新一下头即left = i+1 = 9\n\t\t\n\t\n\n\n\n\n\n\n### 3.1.1 代码\n\n自写 编译已通过\n```cpp\nclass Solution {\npublic:\n    vector<int> partitionLabels(string S) {\n       int hash[27] = {0};// 数组初始化必须是列表，不能是单纯的0\n       //int hash[S.size()] = {0}; // S.size 可变动的，错误：可变大小的对象可能未初始化\n\n       //hash数组中写入每个字母的所对应的最远下标值\n       //因每个字母的S[i] - 'a'是不变的，所以可以一直更新最远下标\n       for (int i = 0; i < S.size(); i++){\n           hash[S[i] - 'a'] = i;\n       }\n       int right = 0;\n       int left = 0;\n       vector<int> result; // vector 能够不断往里加数据\n       // 不断的找分割区间\n       for (int i = 0; i < S.size(); i++){\n           right = max (right, hash[S[i] - 'a']); // 确定区间的尾部 不是hash[i], 是每个字母对应的最远下标\n           if(i == right){\n               result.push_back(right - left +1); // 返回是字符串的长度所以+1\n               left = i + 1; // 更新下一个区间头部，现在i是上一区间的尾，所以下个头部为 i+1\n           }\n       }\n       return result;\n    }\n};\n```\n\n\n\n\n\n# 4 参考资料\n\n[代码随想录](https://www.programmercarl.com/0763.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4.html#%E6%80%9D%E8%B7%AF)\n自用跳转链接：[ob](obsidian://advanced-uri?vault=Documents&uid=13b04b05-d8f9-4a57-a909-3b6b3af97825)，[blog](http://localhost:4000/2022/06/15/19.hua-fen-zi-mu-qu-jian/)\n\n\n\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/19.划分字母区间.md","raw":"---\nid: 13b04b05-d8f9-4a57-a909-3b6b3af97825\ntitle: 19.划分字母区间\ndate: '2022-06-15 09:21'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 贪心算法\ntags:\n  - 贪心算法\nabbrlink: 22082\n---\n\n文章简介\n\t力扣题解：763.划分字母区间\n<!-- more -->\n\n# 1 763.划分字母区间\n\n[力扣题目链接](https://leetcode-cn.com/problems/partition-labels/)\n\n字符串 S 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。返回一个表示每个字符串片段的长度的列表。\n\n示例：\n\n-   输入：S = \"ababcbacadefegdehijhklij\"\n-   输出：[9,7,8] 解释： 划分结果为 \"ababcbaca\", \"defegde\", \"hijhklij\"。 每个字母最多出现在一个片段中。 像 \"ababcbacadefegde\", \"hijhklij\" 的划分是错误的，因为划分的片段数较少。\n\n提示：\n\n-   S的长度在[1, 500]之间。\n-   S只包含小写字母 'a' 到 'z' 。\n\n# 2 思路\n\n总共分为两步：\n\n-   统计每一个字符最后出现的位置\n-   从头遍历字符，并更新字符的最远出现下标，如果找到字符最远出现位置下标和当前下标相等了，则找到了分割点\n![763.划分字母区间|900](https://img-blog.csdnimg.cn/20201222191924417.png)\n# 3 代码\n## 3.1 carl断点调试\n[19.划分字母区间(carl).MP4](file:///Users/yibeikongqiu/Desktop/ishot视频/贪心算法/19.划分字母区间(carl).mp4)\n\t以后可以监听几个变量：S[i]，right - left +1\n\t[[c++中 - ‘0’ 以及 -'a' 的相减操作解释]]\n\tS = \"**a**babcbac**a**defegdehijhklij\"\n\t[00:12](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/19.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4(carl).mp4#t=12.709769) \n\t\tS = \"a==b==abcbacadefegdehijhklij\"，相当于将b对应1，这个数存在了hash里\n\t\thash[S[1] - 'a'] = 1，即hash[2] = 1\n\t[01:03](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/19.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4(carl).mp4#t=63.222835) \n\t\tS = \"==**a**==babcbac==**a**==defegdehijhklij\"\n\t\t将每一个字母的所对应的下标值放到了hash数组里了，相同字母的是更新的，因为 S[1] - 'a'= S[9] - 'a' = 0 (第一个区间)\n\t[01:10](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/19.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4(carl).mp4#t=70.392045) \n\t\t此使 right = max(0, 8)，之道i 到下标8才会进入if 循环语句，它在下标8之前一直在比较有没有比8更大值，有的话说明第一个分割点更远\n\t[01:53](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/19.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4(carl).mp4#t=113.069755)\n\t\t到达第一分割点下标8(i = 8)处，开始push_back结果，并且更新下一个区间\n\t\tright  - left + 1  = 8-0+1= 9 第一个区间相当于：尾 - 头 + 1\n\t\t下个区间要在更新一下头即left = i+1 = 9\n\t\t\n\t\n\n\n\n\n\n\n### 3.1.1 代码\n\n自写 编译已通过\n```cpp\nclass Solution {\npublic:\n    vector<int> partitionLabels(string S) {\n       int hash[27] = {0};// 数组初始化必须是列表，不能是单纯的0\n       //int hash[S.size()] = {0}; // S.size 可变动的，错误：可变大小的对象可能未初始化\n\n       //hash数组中写入每个字母的所对应的最远下标值\n       //因每个字母的S[i] - 'a'是不变的，所以可以一直更新最远下标\n       for (int i = 0; i < S.size(); i++){\n           hash[S[i] - 'a'] = i;\n       }\n       int right = 0;\n       int left = 0;\n       vector<int> result; // vector 能够不断往里加数据\n       // 不断的找分割区间\n       for (int i = 0; i < S.size(); i++){\n           right = max (right, hash[S[i] - 'a']); // 确定区间的尾部 不是hash[i], 是每个字母对应的最远下标\n           if(i == right){\n               result.push_back(right - left +1); // 返回是字符串的长度所以+1\n               left = i + 1; // 更新下一个区间头部，现在i是上一区间的尾，所以下个头部为 i+1\n           }\n       }\n       return result;\n    }\n};\n```\n\n\n\n\n\n# 4 参考资料\n\n[代码随想录](https://www.programmercarl.com/0763.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4.html#%E6%80%9D%E8%B7%AF)\n自用跳转链接：[ob](obsidian://advanced-uri?vault=Documents&uid=13b04b05-d8f9-4a57-a909-3b6b3af97825)，[blog](http://localhost:4000/2022/06/15/19.hua-fen-zi-mu-qu-jian/)\n\n\n\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/19.划分字母区间","published":1,"updated":"2022-07-12T09:02:14.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjq006ze0mg6t3cd0lg","content":"<p>文章简介<br>\n力扣题解：763.划分字母区间</p>\n<span id=\"more\"></span>\n<h1 id=\"1-763划分字母区间\"><a class=\"markdownIt-Anchor\" href=\"#1-763划分字母区间\"></a> 1 763.划分字母区间</h1>\n<p><a href=\"https://leetcode-cn.com/problems/partition-labels/\">力扣题目链接</a></p>\n<p>字符串 S 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。返回一个表示每个字符串片段的长度的列表。</p>\n<p>示例：</p>\n<ul>\n<li>输入：S = “ababcbacadefegdehijhklij”</li>\n<li>输出：[9,7,8] 解释： 划分结果为 “ababcbaca”, “defegde”, “hijhklij”。 每个字母最多出现在一个片段中。 像 “ababcbacadefegde”, “hijhklij” 的划分是错误的，因为划分的片段数较少。</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>S的长度在[1, 500]之间。</li>\n<li>S只包含小写字母 ‘a’ 到 ‘z’ 。</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>总共分为两步：</p>\n<ul>\n<li>统计每一个字符最后出现的位置</li>\n<li>从头遍历字符，并更新字符的最远出现下标，如果找到字符最远出现位置下标和当前下标相等了，则找到了分割点<br>\n<img src=\"https://img-blog.csdnimg.cn/20201222191924417.png\" alt=\"763.划分字母区间|900\"></li>\n</ul>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<h2 id=\"31-carl断点调试\"><a class=\"markdownIt-Anchor\" href=\"#31-carl断点调试\"></a> 3.1 carl断点调试</h2>\n<p>[19.划分字母区间(carl).MP4](file:///Users/yibeikongqiu/Desktop/ishot视频/贪心算法/19.划分字母区间(carl).mp4)<br>\n以后可以监听几个变量：S[i]，right - left +1<br>\n[[c++中 - ‘0’ 以及 -‘a’ 的相减操作解释]]<br>\nS = “<strong>a</strong>babcbac<strong>a</strong>defegdehijhklij”<br>\n[00:12](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/19.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4(carl).mp4#t=12.709769)<br>\nS = “a<mark>b</mark>abcbacadefegdehijhklij”，相当于将b对应1，这个数存在了hash里<br>\nhash[S[1] - ‘a’] =&nbsp;1，即hash[2] = 1<br>\n[01:03](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/19.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4(carl).mp4#t=63.222835)<br>\nS = “==<strong>a</strong><mark>babcbac</mark><strong>a</strong>==defegdehijhklij”<br>\n将每一个字母的所对应的下标值放到了hash数组里了，相同字母的是更新的，因为 S[1] - ‘a’=&nbsp;S[9] - ‘a’ = 0 (第一个区间)<br>\n[01:10](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/19.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4(carl).mp4#t=70.392045)<br>\n此使 right = max(0, 8)，之道i 到下标8才会进入if 循环语句，它在下标8之前一直在比较有没有比8更大值，有的话说明第一个分割点更远<br>\n[01:53](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/19.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4(carl).mp4#t=113.069755)<br>\n到达第一分割点下标8(i =&nbsp;8)处，开始push_back结果，并且更新下一个区间<br>\nright  - left + 1  = 8-0+1= 9 第一个区间相当于：尾 - 头 + 1<br>\n下个区间要在更新一下头即left = i+1 =&nbsp;9</p>\n<h3 id=\"311-代码\"><a class=\"markdownIt-Anchor\" href=\"#311-代码\"></a> 3.1.1 代码</h3>\n<p>自写 编译已通过</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">partitionLabels</span><span class=\"hljs-params\">(string S)</span> </span>{<br>       <span class=\"hljs-type\">int</span> hash[<span class=\"hljs-number\">27</span>] = {<span class=\"hljs-number\">0</span>};<span class=\"hljs-comment\">// 数组初始化必须是列表，不能是单纯的0</span><br>       <span class=\"hljs-comment\">//int hash[S.size()] = {0}; // S.size 可变动的，错误：可变大小的对象可能未初始化</span><br><br>       <span class=\"hljs-comment\">//hash数组中写入每个字母的所对应的最远下标值</span><br>       <span class=\"hljs-comment\">//因每个字母的S[i] - 'a'是不变的，所以可以一直更新最远下标</span><br>       <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; S.<span class=\"hljs-built_in\">size</span>(); i++){<br>           hash[S[i] - <span class=\"hljs-string\">'a'</span>] = i;<br>       }<br>       <span class=\"hljs-type\">int</span> right = <span class=\"hljs-number\">0</span>;<br>       <span class=\"hljs-type\">int</span> left = <span class=\"hljs-number\">0</span>;<br>       vector&lt;<span class=\"hljs-type\">int</span>&gt; result; <span class=\"hljs-comment\">// vector 能够不断往里加数据</span><br>       <span class=\"hljs-comment\">// 不断的找分割区间</span><br>       <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; S.<span class=\"hljs-built_in\">size</span>(); i++){<br>           right = <span class=\"hljs-built_in\">max</span> (right, hash[S[i] - <span class=\"hljs-string\">'a'</span>]); <span class=\"hljs-comment\">// 确定区间的尾部 不是hash[i], 是每个字母对应的最远下标</span><br>           <span class=\"hljs-keyword\">if</span>(i == right){<br>               result.<span class=\"hljs-built_in\">push_back</span>(right - left +<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 返回是字符串的长度所以+1</span><br>               left = i + <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 更新下一个区间头部，现在i是上一区间的尾，所以下个头部为 i+1</span><br>           }<br>       }<br>       <span class=\"hljs-keyword\">return</span> result;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p><a href=\"https://www.programmercarl.com/0763.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4.html#%E6%80%9D%E8%B7%AF\">代码随想录</a><br>\n自用跳转链接：<a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=13b04b05-d8f9-4a57-a909-3b6b3af97825\">ob</a>，<a href=\"http://localhost:4000/2022/06/15/19.hua-fen-zi-mu-qu-jian/\">blog</a></p>\n","site":{"data":{}},"wordcount":2340,"excerpt":"<p>文章简介<br>\n力扣题解：763.划分字母区间</p>","more":"<h1 id=\"1-763划分字母区间\"><a class=\"markdownIt-Anchor\" href=\"#1-763划分字母区间\"></a> 1 763.划分字母区间</h1>\n<p><a href=\"https://leetcode-cn.com/problems/partition-labels/\">力扣题目链接</a></p>\n<p>字符串 S 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。返回一个表示每个字符串片段的长度的列表。</p>\n<p>示例：</p>\n<ul>\n<li>输入：S = “ababcbacadefegdehijhklij”</li>\n<li>输出：[9,7,8] 解释： 划分结果为 “ababcbaca”, “defegde”, “hijhklij”。 每个字母最多出现在一个片段中。 像 “ababcbacadefegde”, “hijhklij” 的划分是错误的，因为划分的片段数较少。</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>S的长度在[1, 500]之间。</li>\n<li>S只包含小写字母 ‘a’ 到 ‘z’ 。</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>总共分为两步：</p>\n<ul>\n<li>统计每一个字符最后出现的位置</li>\n<li>从头遍历字符，并更新字符的最远出现下标，如果找到字符最远出现位置下标和当前下标相等了，则找到了分割点<br />\n<img src=\"https://img-blog.csdnimg.cn/20201222191924417.png\" alt=\"763.划分字母区间|900\" /></li>\n</ul>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<h2 id=\"31-carl断点调试\"><a class=\"markdownIt-Anchor\" href=\"#31-carl断点调试\"></a> 3.1 carl断点调试</h2>\n<p>[19.划分字母区间(carl).MP4](file:///Users/yibeikongqiu/Desktop/ishot视频/贪心算法/19.划分字母区间(carl).mp4)<br />\n以后可以监听几个变量：S[i]，right - left +1<br />\n[[c++中 - ‘0’ 以及 -‘a’ 的相减操作解释]]<br />\nS = “<strong>a</strong>babcbac<strong>a</strong>defegdehijhklij”<br />\n[00:12](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/19.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4(carl).mp4#t=12.709769)<br />\nS = “a<mark>b</mark>abcbacadefegdehijhklij”，相当于将b对应1，这个数存在了hash里<br />\nhash[S[1] - ‘a’] = 1，即hash[2] = 1<br />\n[01:03](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/19.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4(carl).mp4#t=63.222835)<br />\nS = “==<strong>a</strong><mark>babcbac</mark><strong>a</strong>==defegdehijhklij”<br />\n将每一个字母的所对应的下标值放到了hash数组里了，相同字母的是更新的，因为 S[1] - ‘a’= S[9] - ‘a’ = 0 (第一个区间)<br />\n[01:10](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/19.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4(carl).mp4#t=70.392045)<br />\n此使 right = max(0, 8)，之道i 到下标8才会进入if 循环语句，它在下标8之前一直在比较有没有比8更大值，有的话说明第一个分割点更远<br />\n[01:53](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/19.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4(carl).mp4#t=113.069755)<br />\n到达第一分割点下标8(i = 8)处，开始push_back结果，并且更新下一个区间<br />\nright  - left + 1  = 8-0+1= 9 第一个区间相当于：尾 - 头 + 1<br />\n下个区间要在更新一下头即left = i+1 = 9</p>\n<h3 id=\"311-代码\"><a class=\"markdownIt-Anchor\" href=\"#311-代码\"></a> 3.1.1 代码</h3>\n<p>自写 编译已通过</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">partitionLabels</span><span class=\"hljs-params\">(string S)</span> </span>&#123;<br>       <span class=\"hljs-type\">int</span> hash[<span class=\"hljs-number\">27</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<span class=\"hljs-comment\">// 数组初始化必须是列表，不能是单纯的0</span><br>       <span class=\"hljs-comment\">//int hash[S.size()] = &#123;0&#125;; // S.size 可变动的，错误：可变大小的对象可能未初始化</span><br><br>       <span class=\"hljs-comment\">//hash数组中写入每个字母的所对应的最远下标值</span><br>       <span class=\"hljs-comment\">//因每个字母的S[i] - &#x27;a&#x27;是不变的，所以可以一直更新最远下标</span><br>       <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; S.<span class=\"hljs-built_in\">size</span>(); i++)&#123;<br>           hash[S[i] - <span class=\"hljs-string\">&#x27;a&#x27;</span>] = i;<br>       &#125;<br>       <span class=\"hljs-type\">int</span> right = <span class=\"hljs-number\">0</span>;<br>       <span class=\"hljs-type\">int</span> left = <span class=\"hljs-number\">0</span>;<br>       vector&lt;<span class=\"hljs-type\">int</span>&gt; result; <span class=\"hljs-comment\">// vector 能够不断往里加数据</span><br>       <span class=\"hljs-comment\">// 不断的找分割区间</span><br>       <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; S.<span class=\"hljs-built_in\">size</span>(); i++)&#123;<br>           right = <span class=\"hljs-built_in\">max</span> (right, hash[S[i] - <span class=\"hljs-string\">&#x27;a&#x27;</span>]); <span class=\"hljs-comment\">// 确定区间的尾部 不是hash[i], 是每个字母对应的最远下标</span><br>           <span class=\"hljs-keyword\">if</span>(i == right)&#123;<br>               result.<span class=\"hljs-built_in\">push_back</span>(right - left +<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 返回是字符串的长度所以+1</span><br>               left = i + <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 更新下一个区间头部，现在i是上一区间的尾，所以下个头部为 i+1</span><br>           &#125;<br>       &#125;<br>       <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p><a href=\"https://www.programmercarl.com/0763.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4.html#%E6%80%9D%E8%B7%AF\">代码随想录</a><br />\n自用跳转链接：<a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=13b04b05-d8f9-4a57-a909-3b6b3af97825\">ob</a>，<a href=\"http://localhost:4000/2022/06/15/19.hua-fen-zi-mu-qu-jian/\">blog</a></p>"},{"id":"ae2b0ee3-99ee-4a44-906e-5a2a66bf5f40","title":"17.用最少数量的箭引爆气球","date":"2022-06-10T02:00:00.000Z","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206200917436.jpg","abbrlink":2006,"_content":"**文章简介**：\n\t力扣题解：452用最少数量的箭引爆气球\n<!-- more -->\n\n# 1 452用最少数量的箭引爆气球\n\n[力扣题目链接](https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/)\n\n\n在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以纵坐标并不重要，因此只要知道开始和结束的横坐标就足够了。开始坐标总是小于结束坐标。\n\n一支弓箭可以沿着 x 轴从不同点完全垂直地射出。在坐标 x 处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend， 且满足  xstart ≤ x ≤ xend，则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。\n\n给你一个数组 points ，其中 points [i] = [xstart,xend] ，**返回引爆所有气球所必须射出的最小弓箭数。**\n\n示例 1：\n\n-   输入：points = [ [10,16],[2,8],[1,6],[7,12] ]\n-   输出：2\n-   解释：对于该样例，x = 6 可以射爆 [2,8],[1,6] 两个气球，以及 x = 11 射爆另外两个气球\n\n示例 2：\n\n-   输入：points = [ [1,2],[3,4],[5,6],[7,8] ]\n-   输出：4\n\n示例 3：\n\n-   输入：points = [ [1,2],[2,3],[3,4],[4,5] ]\n-   输出：2\n\n示例 4：\n\n-   输入：points = [ [1,2] ]\n-   输出：1\n\n示例 5：\n\n-   输入：points = [ [2,3],[2,3] ]\n-   输出：1\n\n提示：\n\n-   0 <= points.length <= 10^4\n-   points[i].length == 2\n-   -2^31 <= xstart < xend <= 2^31 - 1\n\n\n# 2 思路\n## 2.1 b站参考视频及笔记\n[看了三天动画，我拿到阿里研发offer，贪心算法，射击气球 LeetCode 452_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV12y4y1k7B5/?spm_id_from=333.788.recommend_more_video.1&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n![](https://s1.vika.cn/space/2022/06/10/3141cfabb0c94275b7edf999b4b5197f)\n\n从这里开始看即可\n\n[09:04](https://www.bilibili.com/video/BV12y4y1k7B5/?spm_id_from=333.788.recommend_more_video.1&vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=544.080526)\n\n先按左端点先排好序\n不用管左端点，**只关心右端点就行**，因为只在右端点射击就行了\n记录射击区间为第一个数组区间：[一左，一右]，**其实只关心右端点就行了**\n\n\n\n如果第二个数组的**左端点**==小于==第一个数组的**右端点**(两个数组有重叠部分)\n说明第二个数组在射击区间内，同时将射击区间更新为：[二左，一右] (重叠部分)，右端点无变化\n\n[10:17](https://www.bilibili.com/video/BV12y4y1k7B5/?spm_id_from=333.788.recommend_more_video.1&vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=617.733348)\n如果第二数组的右端点==小于==第一个数组的右端点 (说明要缩小射击区间)\n射击区间为：[一左，二右]\n\n  \n如果第二数组的左端点大于第一个数组的**右端点**(两个数组**没有**重叠部分)，箭数+1(需要另一支箭才可以射完)\n更新射击区间为：[二左，二右] (第二个数组区间)\n\n\n[12:45代码结果](https://www.bilibili.com/video/BV12y4y1k7B5/?spm_id_from=333.788.recommend_more_video.1&vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=765.508572)\n\n\n\n\n\n\n## 2.2 代码随想录\n**局部最优**：当气球出现重叠，一起射，所用弓箭最少。\n\n**全局最优**：把所有气球射爆所用弓箭最少。\n>按照气球的起始位置排序，从前向后遍历气球数组，靠左尽可能让气球重复，重复的用一个箭射\n\n**如果气球重叠了，重叠气球中最小右边界， 之前的区间一定需要一个弓箭**\n\n可以看出首先第一组重叠气球，一定是需要一个箭， \n气球3的**左边界大于**了第一组重叠气球的**最小右边界**，所以再需要一支箭来射气球3了。\n>此时箭数+1\n\n![https://img-blog.csdnimg.cn/20201123101929791.png](https://img-blog.csdnimg.cn/20201123101929791.png)\n\n```cpp\nclass Solution {\n\nprivate:\n\n    static bool cmp(const vector<int>& a, const vector<int>& b) {\n\n        return a[0] < b[0];\n\n    }\n\npublic:\n\n    int findMinArrowShots(vector<vector<int>>& points) {\n\n        if (points.size() == 0) return 0;\n\n        sort(points.begin(), points.end(), cmp);\n\n        int result = 1; // points 不为空至少需要一支箭\n\n        for (int i = 1; i < points.size(); i++) {\n\n            if (points[i][0] > points[i - 1][1]) {  // 气球i和气球i-1不挨着，注意这里不是>=\n\t\t\t//points: {{1, 6}, {2, 8}, {7, 12}, {10, 16}} if (points[i][0] > points[i - 1][1])\n\t\t\t//eg：points[1][0] > points[0][1]：第二个元素的第0号位置 >第一个元素的第1号位置 2>6 (if 语句跳过)看图更容易懂\n                result++; // 需要一支箭\n\n            }\n\n            else {  // 气球i和气球i-1挨着\n\n                points[i][1] = min(points[i - 1][1], points[i][1]); // 更新重叠气球最小右边界\n\n            }\n\n        }\n\n        return result;\n\n    }\n\n};\n\n```\n\n\n\n\n\n\n# 3 代码\n图解\n![|700](https://s1.vika.cn/space/2022/06/10/a494349688e74c7ebe4ce80e4b26d1bc)\n\n\n\n\n## 3.1 自写编译已通过(b站三天动画版)\n```cpp\nclass Solution {\nprivate:\nstatic bool cmp (const vector<int>& a, const vector<int>& b){\n    return a[0] < b[0];// 从小到大排序\n}\n\npublic:\n    int findMinArrowShots(vector<vector<int>>& points) {\n        if(points.size() == 0) return 0;\n        sort(points.begin(), points.end(), cmp);\n        int arrow = 1;\n        int rarrow = points[0][1]; // 射击区间的右端点\n        for (int i = 1; i < points.size(); i++){\n            if (points[i][0] <= rarrow){ // 有重叠部分，这里必须小于等于因为也要找到挨着但不重叠的，最后是用射击右端点来判别的\n                if(points[i][1] < rarrow){ // 如果第二数组的右端点比第一个数组的右端点小，就缩小射击区间\n                rarrow = points[i][1]; // 更新右端点\n                }\n            }\n            else {\n                rarrow = points[i][1];\n                arrow ++;\n            }\n        }\n        return arrow;\n\n    }\n};\n```\n\n## 3.2 自写编译已通过(carl) 推荐\n\n```cpp\nclass Solution {\nprivate:\nstatic bool cmp (const vector<int>& a, const vector<int>& b){\n    return a[0] < b[0];// 从小到大排序\n}\n\npublic:\n    int findMinArrowShots(vector<vector<int>>& points) {\n        if(points.size() == 0) return 0;\n        sort(points.begin(), points.end(), cmp);\n        int arrow = 1;// 有气球至少需要一个箭\n        for(int i = 1; i < points.size(); i++){\n        // 如果有重叠或者挨着就可以用一支箭射爆(因为射爆的区间是大区间，重叠的是子区间),右边界就是射爆的位置\n            if (points[i][0] <= points[i-1][1]){// 2的左边界比1的右边界小说明重叠了\n                    points[i][1] = min (points[i-1][1],points[i][1]); // 更新右边界与(变成重叠区间)，与下一个比,看下一个的位置是否在重叠区间内，不在则需要另外的箭\n                }\n\n            else arrow++;\n            } \n\n\n            return arrow;\n            \n        }\n   \n};\n```\n\n\n\n# 4 参考资料\n[代码随想录](https://www.programmercarl.com/0452.%E7%94%A8%E6%9C%80%E5%B0%91%E6%95%B0%E9%87%8F%E7%9A%84%E7%AE%AD%E5%BC%95%E7%88%86%E6%B0%94%E7%90%83.html)\n[看了三天动画，我拿到阿里研发offer，贪心算法，射击气球 LeetCode 452_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV12y4y1k7B5/?spm_id_from=333.788.recommend_more_video.1&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n自用跳转链接：[ob](obsidian://advanced-uri?vault=Documents&uid=ae2b0ee3-99ee-4a44-906e-5a2a66bf5f40)，[blog](http://localhost:4000/2022/06/10/17.yong-zui-shao-shu-liang-de-jian-yin-bao-qi-qiu/)\n\n\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/17.用最少数量的箭引爆气球.md","raw":"---\nid: ae2b0ee3-99ee-4a44-906e-5a2a66bf5f40\ntitle: 17.用最少数量的箭引爆气球\ndate: '2022-06-10 10:00'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 贪心算法\ntags:\n  - 贪心算法\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206200917436.jpg'\nabbrlink: 2006\n---\n**文章简介**：\n\t力扣题解：452用最少数量的箭引爆气球\n<!-- more -->\n\n# 1 452用最少数量的箭引爆气球\n\n[力扣题目链接](https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/)\n\n\n在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以纵坐标并不重要，因此只要知道开始和结束的横坐标就足够了。开始坐标总是小于结束坐标。\n\n一支弓箭可以沿着 x 轴从不同点完全垂直地射出。在坐标 x 处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend， 且满足  xstart ≤ x ≤ xend，则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。\n\n给你一个数组 points ，其中 points [i] = [xstart,xend] ，**返回引爆所有气球所必须射出的最小弓箭数。**\n\n示例 1：\n\n-   输入：points = [ [10,16],[2,8],[1,6],[7,12] ]\n-   输出：2\n-   解释：对于该样例，x = 6 可以射爆 [2,8],[1,6] 两个气球，以及 x = 11 射爆另外两个气球\n\n示例 2：\n\n-   输入：points = [ [1,2],[3,4],[5,6],[7,8] ]\n-   输出：4\n\n示例 3：\n\n-   输入：points = [ [1,2],[2,3],[3,4],[4,5] ]\n-   输出：2\n\n示例 4：\n\n-   输入：points = [ [1,2] ]\n-   输出：1\n\n示例 5：\n\n-   输入：points = [ [2,3],[2,3] ]\n-   输出：1\n\n提示：\n\n-   0 <= points.length <= 10^4\n-   points[i].length == 2\n-   -2^31 <= xstart < xend <= 2^31 - 1\n\n\n# 2 思路\n## 2.1 b站参考视频及笔记\n[看了三天动画，我拿到阿里研发offer，贪心算法，射击气球 LeetCode 452_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV12y4y1k7B5/?spm_id_from=333.788.recommend_more_video.1&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n![](https://s1.vika.cn/space/2022/06/10/3141cfabb0c94275b7edf999b4b5197f)\n\n从这里开始看即可\n\n[09:04](https://www.bilibili.com/video/BV12y4y1k7B5/?spm_id_from=333.788.recommend_more_video.1&vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=544.080526)\n\n先按左端点先排好序\n不用管左端点，**只关心右端点就行**，因为只在右端点射击就行了\n记录射击区间为第一个数组区间：[一左，一右]，**其实只关心右端点就行了**\n\n\n\n如果第二个数组的**左端点**==小于==第一个数组的**右端点**(两个数组有重叠部分)\n说明第二个数组在射击区间内，同时将射击区间更新为：[二左，一右] (重叠部分)，右端点无变化\n\n[10:17](https://www.bilibili.com/video/BV12y4y1k7B5/?spm_id_from=333.788.recommend_more_video.1&vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=617.733348)\n如果第二数组的右端点==小于==第一个数组的右端点 (说明要缩小射击区间)\n射击区间为：[一左，二右]\n\n  \n如果第二数组的左端点大于第一个数组的**右端点**(两个数组**没有**重叠部分)，箭数+1(需要另一支箭才可以射完)\n更新射击区间为：[二左，二右] (第二个数组区间)\n\n\n[12:45代码结果](https://www.bilibili.com/video/BV12y4y1k7B5/?spm_id_from=333.788.recommend_more_video.1&vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=765.508572)\n\n\n\n\n\n\n## 2.2 代码随想录\n**局部最优**：当气球出现重叠，一起射，所用弓箭最少。\n\n**全局最优**：把所有气球射爆所用弓箭最少。\n>按照气球的起始位置排序，从前向后遍历气球数组，靠左尽可能让气球重复，重复的用一个箭射\n\n**如果气球重叠了，重叠气球中最小右边界， 之前的区间一定需要一个弓箭**\n\n可以看出首先第一组重叠气球，一定是需要一个箭， \n气球3的**左边界大于**了第一组重叠气球的**最小右边界**，所以再需要一支箭来射气球3了。\n>此时箭数+1\n\n![https://img-blog.csdnimg.cn/20201123101929791.png](https://img-blog.csdnimg.cn/20201123101929791.png)\n\n```cpp\nclass Solution {\n\nprivate:\n\n    static bool cmp(const vector<int>& a, const vector<int>& b) {\n\n        return a[0] < b[0];\n\n    }\n\npublic:\n\n    int findMinArrowShots(vector<vector<int>>& points) {\n\n        if (points.size() == 0) return 0;\n\n        sort(points.begin(), points.end(), cmp);\n\n        int result = 1; // points 不为空至少需要一支箭\n\n        for (int i = 1; i < points.size(); i++) {\n\n            if (points[i][0] > points[i - 1][1]) {  // 气球i和气球i-1不挨着，注意这里不是>=\n\t\t\t//points: {{1, 6}, {2, 8}, {7, 12}, {10, 16}} if (points[i][0] > points[i - 1][1])\n\t\t\t//eg：points[1][0] > points[0][1]：第二个元素的第0号位置 >第一个元素的第1号位置 2>6 (if 语句跳过)看图更容易懂\n                result++; // 需要一支箭\n\n            }\n\n            else {  // 气球i和气球i-1挨着\n\n                points[i][1] = min(points[i - 1][1], points[i][1]); // 更新重叠气球最小右边界\n\n            }\n\n        }\n\n        return result;\n\n    }\n\n};\n\n```\n\n\n\n\n\n\n# 3 代码\n图解\n![|700](https://s1.vika.cn/space/2022/06/10/a494349688e74c7ebe4ce80e4b26d1bc)\n\n\n\n\n## 3.1 自写编译已通过(b站三天动画版)\n```cpp\nclass Solution {\nprivate:\nstatic bool cmp (const vector<int>& a, const vector<int>& b){\n    return a[0] < b[0];// 从小到大排序\n}\n\npublic:\n    int findMinArrowShots(vector<vector<int>>& points) {\n        if(points.size() == 0) return 0;\n        sort(points.begin(), points.end(), cmp);\n        int arrow = 1;\n        int rarrow = points[0][1]; // 射击区间的右端点\n        for (int i = 1; i < points.size(); i++){\n            if (points[i][0] <= rarrow){ // 有重叠部分，这里必须小于等于因为也要找到挨着但不重叠的，最后是用射击右端点来判别的\n                if(points[i][1] < rarrow){ // 如果第二数组的右端点比第一个数组的右端点小，就缩小射击区间\n                rarrow = points[i][1]; // 更新右端点\n                }\n            }\n            else {\n                rarrow = points[i][1];\n                arrow ++;\n            }\n        }\n        return arrow;\n\n    }\n};\n```\n\n## 3.2 自写编译已通过(carl) 推荐\n\n```cpp\nclass Solution {\nprivate:\nstatic bool cmp (const vector<int>& a, const vector<int>& b){\n    return a[0] < b[0];// 从小到大排序\n}\n\npublic:\n    int findMinArrowShots(vector<vector<int>>& points) {\n        if(points.size() == 0) return 0;\n        sort(points.begin(), points.end(), cmp);\n        int arrow = 1;// 有气球至少需要一个箭\n        for(int i = 1; i < points.size(); i++){\n        // 如果有重叠或者挨着就可以用一支箭射爆(因为射爆的区间是大区间，重叠的是子区间),右边界就是射爆的位置\n            if (points[i][0] <= points[i-1][1]){// 2的左边界比1的右边界小说明重叠了\n                    points[i][1] = min (points[i-1][1],points[i][1]); // 更新右边界与(变成重叠区间)，与下一个比,看下一个的位置是否在重叠区间内，不在则需要另外的箭\n                }\n\n            else arrow++;\n            } \n\n\n            return arrow;\n            \n        }\n   \n};\n```\n\n\n\n# 4 参考资料\n[代码随想录](https://www.programmercarl.com/0452.%E7%94%A8%E6%9C%80%E5%B0%91%E6%95%B0%E9%87%8F%E7%9A%84%E7%AE%AD%E5%BC%95%E7%88%86%E6%B0%94%E7%90%83.html)\n[看了三天动画，我拿到阿里研发offer，贪心算法，射击气球 LeetCode 452_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV12y4y1k7B5/?spm_id_from=333.788.recommend_more_video.1&vd_source=f2340d96e99780a96b50d8096ffaaf1a)\n自用跳转链接：[ob](obsidian://advanced-uri?vault=Documents&uid=ae2b0ee3-99ee-4a44-906e-5a2a66bf5f40)，[blog](http://localhost:4000/2022/06/10/17.yong-zui-shao-shu-liang-de-jian-yin-bao-qi-qiu/)\n\n\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/17.用最少数量的箭引爆气球","published":1,"updated":"2022-07-12T09:02:14.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjr0072e0mgf16i7bfy","content":"<p><strong>文章简介</strong>：<br>\n力扣题解：452用最少数量的箭引爆气球</p>\n<span id=\"more\"></span>\n<h1 id=\"1-452用最少数量的箭引爆气球\"><a class=\"markdownIt-Anchor\" href=\"#1-452用最少数量的箭引爆气球\"></a> 1 452用最少数量的箭引爆气球</h1>\n<p><a href=\"https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/\">力扣题目链接</a></p>\n<p>在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以纵坐标并不重要，因此只要知道开始和结束的横坐标就足够了。开始坐标总是小于结束坐标。</p>\n<p>一支弓箭可以沿着 x 轴从不同点完全垂直地射出。在坐标 x 处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend， 且满足 &nbsp;xstart&nbsp;≤ x ≤ xend，则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。</p>\n<p>给你一个数组 points ，其中 points [i] = [xstart,xend] ，<strong>返回引爆所有气球所必须射出的最小弓箭数。</strong></p>\n<p>示例 1：</p>\n<ul>\n<li>输入：points = [ [10,16],[2,8],[1,6],[7,12] ]</li>\n<li>输出：2</li>\n<li>解释：对于该样例，x = 6 可以射爆 [2,8],[1,6] 两个气球，以及 x = 11 射爆另外两个气球</li>\n</ul>\n<p>示例 2：</p>\n<ul>\n<li>输入：points = [ [1,2],[3,4],[5,6],[7,8] ]</li>\n<li>输出：4</li>\n</ul>\n<p>示例 3：</p>\n<ul>\n<li>输入：points = [ [1,2],[2,3],[3,4],[4,5] ]</li>\n<li>输出：2</li>\n</ul>\n<p>示例 4：</p>\n<ul>\n<li>输入：points = [ [1,2] ]</li>\n<li>输出：1</li>\n</ul>\n<p>示例 5：</p>\n<ul>\n<li>输入：points = [ [2,3],[2,3] ]</li>\n<li>输出：1</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>0 &lt;= points.length &lt;= 10^4</li>\n<li>points[i].length == 2</li>\n<li>-2^31 &lt;= xstart &lt;&nbsp;xend &lt;= 2^31 - 1</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<h2 id=\"21-b站参考视频及笔记\"><a class=\"markdownIt-Anchor\" href=\"#21-b站参考视频及笔记\"></a> 2.1 b站参考视频及笔记</h2>\n<p><a href=\"https://www.bilibili.com/video/BV12y4y1k7B5/?spm_id_from=333.788.recommend_more_video.1&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">看了三天动画，我拿到阿里研发offer，贪心算法，射击气球 LeetCode 452_哔哩哔哩_bilibili</a><br>\n<img src=\"https://s1.vika.cn/space/2022/06/10/3141cfabb0c94275b7edf999b4b5197f\" alt=\"\"></p>\n<p>从这里开始看即可</p>\n<p><a href=\"https://www.bilibili.com/video/BV12y4y1k7B5/?spm_id_from=333.788.recommend_more_video.1&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=544.080526\">09:04</a></p>\n<p>先按左端点先排好序<br>\n不用管左端点，<strong>只关心右端点就行</strong>，因为只在右端点射击就行了<br>\n记录射击区间为第一个数组区间：[一左，一右]，<strong>其实只关心右端点就行了</strong></p>\n<p>如果第二个数组的<strong>左端点</strong><mark>小于</mark>第一个数组的<strong>右端点</strong>(两个数组有重叠部分)<br>\n说明第二个数组在射击区间内，同时将射击区间更新为：[二左，一右] (重叠部分)，右端点无变化</p>\n<p><a href=\"https://www.bilibili.com/video/BV12y4y1k7B5/?spm_id_from=333.788.recommend_more_video.1&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=617.733348\">10:17</a><br>\n如果第二数组的右端点<mark>小于</mark>第一个数组的右端点 (说明要缩小射击区间)<br>\n射击区间为：[一左，二右]</p>\n<p>如果第二数组的左端点大于第一个数组的<strong>右端点</strong>(两个数组<strong>没有</strong>重叠部分)，箭数+1(需要另一支箭才可以射完)<br>\n更新射击区间为：[二左，二右] (第二个数组区间)</p>\n<p><a href=\"https://www.bilibili.com/video/BV12y4y1k7B5/?spm_id_from=333.788.recommend_more_video.1&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=765.508572\">12:45代码结果</a></p>\n<h2 id=\"22-代码随想录\"><a class=\"markdownIt-Anchor\" href=\"#22-代码随想录\"></a> 2.2 代码随想录</h2>\n<p><strong>局部最优</strong>：当气球出现重叠，一起射，所用弓箭最少。</p>\n<p><strong>全局最优</strong>：把所有气球射爆所用弓箭最少。</p>\n<blockquote>\n<p>按照气球的起始位置排序，从前向后遍历气球数组，靠左尽可能让气球重复，重复的用一个箭射</p>\n</blockquote>\n<p><strong>如果气球重叠了，重叠气球中最小右边界， 之前的区间一定需要一个弓箭</strong></p>\n<p>可以看出首先第一组重叠气球，一定是需要一个箭，<br>\n气球3的<strong>左边界大于</strong>了第一组重叠气球的<strong>最小右边界</strong>，所以再需要一支箭来射气球3了。</p>\n<blockquote>\n<p>此时箭数+1</p>\n</blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/20201123101929791.png\" alt=\"https://img-blog.csdnimg.cn/20201123101929791.png\"></p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span>&nbsp;<span class=\"hljs-title class_\">Solution</span>&nbsp;{<br><br><span class=\"hljs-keyword\">private</span>:<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\"><span class=\"hljs-type\">static</span>&nbsp;<span class=\"hljs-type\">bool</span>&nbsp;<span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span>&nbsp;vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp;&nbsp;a,&nbsp;<span class=\"hljs-type\">const</span>&nbsp;vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp;&nbsp;b)</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;a[<span class=\"hljs-number\">0</span>]&nbsp;&lt;&nbsp;b[<span class=\"hljs-number\">0</span>];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br><span class=\"hljs-keyword\">public</span>:<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\"><span class=\"hljs-type\">int</span>&nbsp;<span class=\"hljs-title\">findMinArrowShots</span><span class=\"hljs-params\">(vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt;&amp;&nbsp;points)</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">if</span>&nbsp;(points.<span class=\"hljs-built_in\">size</span>()&nbsp;==&nbsp;<span class=\"hljs-number\">0</span>)&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;<span class=\"hljs-number\">0</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-built_in\">sort</span>(points.<span class=\"hljs-built_in\">begin</span>(),&nbsp;points.<span class=\"hljs-built_in\">end</span>(),&nbsp;cmp);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-type\">int</span>&nbsp;result&nbsp;=&nbsp;<span class=\"hljs-number\">1</span>;&nbsp;<span class=\"hljs-comment\">//&nbsp;points&nbsp;不为空至少需要一支箭</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">for</span>&nbsp;(<span class=\"hljs-type\">int</span>&nbsp;i&nbsp;=&nbsp;<span class=\"hljs-number\">1</span>;&nbsp;i&nbsp;&lt;&nbsp;points.<span class=\"hljs-built_in\">size</span>();&nbsp;i++)&nbsp;{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">if</span>&nbsp;(points[i][<span class=\"hljs-number\">0</span>]&nbsp;&gt;&nbsp;points[i&nbsp;-&nbsp;<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>])&nbsp;{&nbsp;&nbsp;<span class=\"hljs-comment\">//&nbsp;气球i和气球i-1不挨着，注意这里不是&gt;=</span><br>\t\t\t<span class=\"hljs-comment\">//points: {{1, 6}, {2, 8}, {7, 12}, {10, 16}} if (points[i][0] &gt; points[i - 1][1])</span><br>\t\t\t<span class=\"hljs-comment\">//eg：points[1][0] &gt; points[0][1]：第二个元素的第0号位置 &gt;第一个元素的第1号位置 2&gt;6 (if 语句跳过)看图更容易懂</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result++;&nbsp;<span class=\"hljs-comment\">//&nbsp;需要一支箭</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">else</span>&nbsp;{&nbsp;&nbsp;<span class=\"hljs-comment\">//&nbsp;气球i和气球i-1挨着</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i][<span class=\"hljs-number\">1</span>]&nbsp;=&nbsp;<span class=\"hljs-built_in\">min</span>(points[i&nbsp;-&nbsp;<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>],&nbsp;points[i][<span class=\"hljs-number\">1</span>]);&nbsp;<span class=\"hljs-comment\">//&nbsp;更新重叠气球最小右边界</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;result;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>};<br><br></code></pre></td></tr></tbody></table></figure>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>图解<br>\n<img src=\"https://s1.vika.cn/space/2022/06/10/a494349688e74c7ebe4ce80e4b26d1bc\" alt=\"|700\"></p>\n<h2 id=\"31-自写编译已通过b站三天动画版\"><a class=\"markdownIt-Anchor\" href=\"#31-自写编译已通过b站三天动画版\"></a> 3.1 自写编译已通过(b站三天动画版)</h2>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">private</span>:<br><span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; a, <span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; b)</span></span>{<br>    <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">0</span>] &lt; b[<span class=\"hljs-number\">0</span>];<span class=\"hljs-comment\">// 从小到大排序</span><br>}<br><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">findMinArrowShots</span><span class=\"hljs-params\">(vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt;&amp; points)</span> </span>{<br>        <span class=\"hljs-keyword\">if</span>(points.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">sort</span>(points.<span class=\"hljs-built_in\">begin</span>(), points.<span class=\"hljs-built_in\">end</span>(), cmp);<br>        <span class=\"hljs-type\">int</span> arrow = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-type\">int</span> rarrow = points[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 射击区间的右端点</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; points.<span class=\"hljs-built_in\">size</span>(); i++){<br>            <span class=\"hljs-keyword\">if</span> (points[i][<span class=\"hljs-number\">0</span>] &lt;= rarrow){ <span class=\"hljs-comment\">// 有重叠部分，这里必须小于等于因为也要找到挨着但不重叠的，最后是用射击右端点来判别的</span><br>                <span class=\"hljs-keyword\">if</span>(points[i][<span class=\"hljs-number\">1</span>] &lt; rarrow){ <span class=\"hljs-comment\">// 如果第二数组的右端点比第一个数组的右端点小，就缩小射击区间</span><br>                rarrow = points[i][<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 更新右端点</span><br>                }<br>            }<br>            <span class=\"hljs-keyword\">else</span> {<br>                rarrow = points[i][<span class=\"hljs-number\">1</span>];<br>                arrow ++;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">return</span> arrow;<br><br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<h2 id=\"32-自写编译已通过carl-推荐\"><a class=\"markdownIt-Anchor\" href=\"#32-自写编译已通过carl-推荐\"></a> 3.2 自写编译已通过(carl) 推荐</h2>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">private</span>:<br><span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; a, <span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; b)</span></span>{<br>    <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">0</span>] &lt; b[<span class=\"hljs-number\">0</span>];<span class=\"hljs-comment\">// 从小到大排序</span><br>}<br><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">findMinArrowShots</span><span class=\"hljs-params\">(vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt;&amp; points)</span> </span>{<br>        <span class=\"hljs-keyword\">if</span>(points.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">sort</span>(points.<span class=\"hljs-built_in\">begin</span>(), points.<span class=\"hljs-built_in\">end</span>(), cmp);<br>        <span class=\"hljs-type\">int</span> arrow = <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">// 有气球至少需要一个箭</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; points.<span class=\"hljs-built_in\">size</span>(); i++){<br>        <span class=\"hljs-comment\">// 如果有重叠或者挨着就可以用一支箭射爆(因为射爆的区间是大区间，重叠的是子区间),右边界就是射爆的位置</span><br>            <span class=\"hljs-keyword\">if</span> (points[i][<span class=\"hljs-number\">0</span>] &lt;= points[i<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">1</span>]){<span class=\"hljs-comment\">// 2的左边界比1的右边界小说明重叠了</span><br>                    points[i][<span class=\"hljs-number\">1</span>] = <span class=\"hljs-built_in\">min</span> (points[i<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">1</span>],points[i][<span class=\"hljs-number\">1</span>]); <span class=\"hljs-comment\">// 更新右边界与(变成重叠区间)，与下一个比,看下一个的位置是否在重叠区间内，不在则需要另外的箭</span><br>                }<br><br>            <span class=\"hljs-keyword\">else</span> arrow++;<br>            } <br><br><br>            <span class=\"hljs-keyword\">return</span> arrow;<br>            <br>        }<br>   <br>};<br></code></pre></td></tr></tbody></table></figure>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p><a href=\"https://www.programmercarl.com/0452.%E7%94%A8%E6%9C%80%E5%B0%91%E6%95%B0%E9%87%8F%E7%9A%84%E7%AE%AD%E5%BC%95%E7%88%86%E6%B0%94%E7%90%83.html\">代码随想录</a><br>\n<a href=\"https://www.bilibili.com/video/BV12y4y1k7B5/?spm_id_from=333.788.recommend_more_video.1&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">看了三天动画，我拿到阿里研发offer，贪心算法，射击气球 LeetCode 452_哔哩哔哩_bilibili</a><br>\n自用跳转链接：<a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=ae2b0ee3-99ee-4a44-906e-5a2a66bf5f40\">ob</a>，<a href=\"http://localhost:4000/2022/06/10/17.yong-zui-shao-shu-liang-de-jian-yin-bao-qi-qiu/\">blog</a></p>\n","site":{"data":{}},"wordcount":3483,"excerpt":"<p><strong>文章简介</strong>：<br>\n力扣题解：452用最少数量的箭引爆气球</p>","more":"<h1 id=\"1-452用最少数量的箭引爆气球\"><a class=\"markdownIt-Anchor\" href=\"#1-452用最少数量的箭引爆气球\"></a> 1 452用最少数量的箭引爆气球</h1>\n<p><a href=\"https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/\">力扣题目链接</a></p>\n<p>在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以纵坐标并不重要，因此只要知道开始和结束的横坐标就足够了。开始坐标总是小于结束坐标。</p>\n<p>一支弓箭可以沿着 x 轴从不同点完全垂直地射出。在坐标 x 处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend， 且满足  xstart ≤ x ≤ xend，则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。</p>\n<p>给你一个数组 points ，其中 points [i] = [xstart,xend] ，<strong>返回引爆所有气球所必须射出的最小弓箭数。</strong></p>\n<p>示例 1：</p>\n<ul>\n<li>输入：points = [ [10,16],[2,8],[1,6],[7,12] ]</li>\n<li>输出：2</li>\n<li>解释：对于该样例，x = 6 可以射爆 [2,8],[1,6] 两个气球，以及 x = 11 射爆另外两个气球</li>\n</ul>\n<p>示例 2：</p>\n<ul>\n<li>输入：points = [ [1,2],[3,4],[5,6],[7,8] ]</li>\n<li>输出：4</li>\n</ul>\n<p>示例 3：</p>\n<ul>\n<li>输入：points = [ [1,2],[2,3],[3,4],[4,5] ]</li>\n<li>输出：2</li>\n</ul>\n<p>示例 4：</p>\n<ul>\n<li>输入：points = [ [1,2] ]</li>\n<li>输出：1</li>\n</ul>\n<p>示例 5：</p>\n<ul>\n<li>输入：points = [ [2,3],[2,3] ]</li>\n<li>输出：1</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>0 &lt;= points.length &lt;= 10^4</li>\n<li>points[i].length == 2</li>\n<li>-2^31 &lt;= xstart &lt; xend &lt;= 2^31 - 1</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<h2 id=\"21-b站参考视频及笔记\"><a class=\"markdownIt-Anchor\" href=\"#21-b站参考视频及笔记\"></a> 2.1 b站参考视频及笔记</h2>\n<p><a href=\"https://www.bilibili.com/video/BV12y4y1k7B5/?spm_id_from=333.788.recommend_more_video.1&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">看了三天动画，我拿到阿里研发offer，贪心算法，射击气球 LeetCode 452_哔哩哔哩_bilibili</a><br />\n<img src=\"https://s1.vika.cn/space/2022/06/10/3141cfabb0c94275b7edf999b4b5197f\" alt=\"\" /></p>\n<p>从这里开始看即可</p>\n<p><a href=\"https://www.bilibili.com/video/BV12y4y1k7B5/?spm_id_from=333.788.recommend_more_video.1&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=544.080526\">09:04</a></p>\n<p>先按左端点先排好序<br />\n不用管左端点，<strong>只关心右端点就行</strong>，因为只在右端点射击就行了<br />\n记录射击区间为第一个数组区间：[一左，一右]，<strong>其实只关心右端点就行了</strong></p>\n<p>如果第二个数组的<strong>左端点</strong><mark>小于</mark>第一个数组的<strong>右端点</strong>(两个数组有重叠部分)<br />\n说明第二个数组在射击区间内，同时将射击区间更新为：[二左，一右] (重叠部分)，右端点无变化</p>\n<p><a href=\"https://www.bilibili.com/video/BV12y4y1k7B5/?spm_id_from=333.788.recommend_more_video.1&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=617.733348\">10:17</a><br />\n如果第二数组的右端点<mark>小于</mark>第一个数组的右端点 (说明要缩小射击区间)<br />\n射击区间为：[一左，二右]</p>\n<p>如果第二数组的左端点大于第一个数组的<strong>右端点</strong>(两个数组<strong>没有</strong>重叠部分)，箭数+1(需要另一支箭才可以射完)<br />\n更新射击区间为：[二左，二右] (第二个数组区间)</p>\n<p><a href=\"https://www.bilibili.com/video/BV12y4y1k7B5/?spm_id_from=333.788.recommend_more_video.1&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a#t=765.508572\">12:45代码结果</a></p>\n<h2 id=\"22-代码随想录\"><a class=\"markdownIt-Anchor\" href=\"#22-代码随想录\"></a> 2.2 代码随想录</h2>\n<p><strong>局部最优</strong>：当气球出现重叠，一起射，所用弓箭最少。</p>\n<p><strong>全局最优</strong>：把所有气球射爆所用弓箭最少。</p>\n<blockquote>\n<p>按照气球的起始位置排序，从前向后遍历气球数组，靠左尽可能让气球重复，重复的用一个箭射</p>\n</blockquote>\n<p><strong>如果气球重叠了，重叠气球中最小右边界， 之前的区间一定需要一个弓箭</strong></p>\n<p>可以看出首先第一组重叠气球，一定是需要一个箭，<br />\n气球3的<strong>左边界大于</strong>了第一组重叠气球的<strong>最小右边界</strong>，所以再需要一支箭来射气球3了。</p>\n<blockquote>\n<p>此时箭数+1</p>\n</blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/20201123101929791.png\" alt=\"https://img-blog.csdnimg.cn/20201123101929791.png\" /></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><br><span class=\"hljs-keyword\">private</span>:<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; a, <span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; b)</span> </span>&#123;<br><br>        <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">0</span>] &lt; b[<span class=\"hljs-number\">0</span>];<br><br>    &#125;<br><br><span class=\"hljs-keyword\">public</span>:<br><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">findMinArrowShots</span><span class=\"hljs-params\">(vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt;&amp; points)</span> </span>&#123;<br><br>        <span class=\"hljs-keyword\">if</span> (points.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br><br>        <span class=\"hljs-built_in\">sort</span>(points.<span class=\"hljs-built_in\">begin</span>(), points.<span class=\"hljs-built_in\">end</span>(), cmp);<br><br>        <span class=\"hljs-type\">int</span> result = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// points 不为空至少需要一支箭</span><br><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; points.<span class=\"hljs-built_in\">size</span>(); i++) &#123;<br><br>            <span class=\"hljs-keyword\">if</span> (points[i][<span class=\"hljs-number\">0</span>] &gt; points[i - <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]) &#123;  <span class=\"hljs-comment\">// 气球i和气球i-1不挨着，注意这里不是&gt;=</span><br>\t\t\t<span class=\"hljs-comment\">//points: &#123;&#123;1, 6&#125;, &#123;2, 8&#125;, &#123;7, 12&#125;, &#123;10, 16&#125;&#125; if (points[i][0] &gt; points[i - 1][1])</span><br>\t\t\t<span class=\"hljs-comment\">//eg：points[1][0] &gt; points[0][1]：第二个元素的第0号位置 &gt;第一个元素的第1号位置 2&gt;6 (if 语句跳过)看图更容易懂</span><br>                result++; <span class=\"hljs-comment\">// 需要一支箭</span><br><br>            &#125;<br><br>            <span class=\"hljs-keyword\">else</span> &#123;  <span class=\"hljs-comment\">// 气球i和气球i-1挨着</span><br><br>                points[i][<span class=\"hljs-number\">1</span>] = <span class=\"hljs-built_in\">min</span>(points[i - <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>], points[i][<span class=\"hljs-number\">1</span>]); <span class=\"hljs-comment\">// 更新重叠气球最小右边界</span><br><br>            &#125;<br><br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> result;<br><br>    &#125;<br><br>&#125;;<br><br></code></pre></td></tr></table></figure>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>图解<br />\n<img src=\"https://s1.vika.cn/space/2022/06/10/a494349688e74c7ebe4ce80e4b26d1bc\" alt=\"|700\" /></p>\n<h2 id=\"31-自写编译已通过b站三天动画版\"><a class=\"markdownIt-Anchor\" href=\"#31-自写编译已通过b站三天动画版\"></a> 3.1 自写编译已通过(b站三天动画版)</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">private</span>:<br><span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; a, <span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; b)</span></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">0</span>] &lt; b[<span class=\"hljs-number\">0</span>];<span class=\"hljs-comment\">// 从小到大排序</span><br>&#125;<br><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">findMinArrowShots</span><span class=\"hljs-params\">(vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt;&amp; points)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(points.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">sort</span>(points.<span class=\"hljs-built_in\">begin</span>(), points.<span class=\"hljs-built_in\">end</span>(), cmp);<br>        <span class=\"hljs-type\">int</span> arrow = <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-type\">int</span> rarrow = points[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 射击区间的右端点</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; points.<span class=\"hljs-built_in\">size</span>(); i++)&#123;<br>            <span class=\"hljs-keyword\">if</span> (points[i][<span class=\"hljs-number\">0</span>] &lt;= rarrow)&#123; <span class=\"hljs-comment\">// 有重叠部分，这里必须小于等于因为也要找到挨着但不重叠的，最后是用射击右端点来判别的</span><br>                <span class=\"hljs-keyword\">if</span>(points[i][<span class=\"hljs-number\">1</span>] &lt; rarrow)&#123; <span class=\"hljs-comment\">// 如果第二数组的右端点比第一个数组的右端点小，就缩小射击区间</span><br>                rarrow = points[i][<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 更新右端点</span><br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> &#123;<br>                rarrow = points[i][<span class=\"hljs-number\">1</span>];<br>                arrow ++;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> arrow;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h2 id=\"32-自写编译已通过carl-推荐\"><a class=\"markdownIt-Anchor\" href=\"#32-自写编译已通过carl-推荐\"></a> 3.2 自写编译已通过(carl) 推荐</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">private</span>:<br><span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; a, <span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; b)</span></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">0</span>] &lt; b[<span class=\"hljs-number\">0</span>];<span class=\"hljs-comment\">// 从小到大排序</span><br>&#125;<br><br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">findMinArrowShots</span><span class=\"hljs-params\">(vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt;&amp; points)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(points.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">sort</span>(points.<span class=\"hljs-built_in\">begin</span>(), points.<span class=\"hljs-built_in\">end</span>(), cmp);<br>        <span class=\"hljs-type\">int</span> arrow = <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">// 有气球至少需要一个箭</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; points.<span class=\"hljs-built_in\">size</span>(); i++)&#123;<br>        <span class=\"hljs-comment\">// 如果有重叠或者挨着就可以用一支箭射爆(因为射爆的区间是大区间，重叠的是子区间),右边界就是射爆的位置</span><br>            <span class=\"hljs-keyword\">if</span> (points[i][<span class=\"hljs-number\">0</span>] &lt;= points[i<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">1</span>])&#123;<span class=\"hljs-comment\">// 2的左边界比1的右边界小说明重叠了</span><br>                    points[i][<span class=\"hljs-number\">1</span>] = <span class=\"hljs-built_in\">min</span> (points[i<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">1</span>],points[i][<span class=\"hljs-number\">1</span>]); <span class=\"hljs-comment\">// 更新右边界与(变成重叠区间)，与下一个比,看下一个的位置是否在重叠区间内，不在则需要另外的箭</span><br>                &#125;<br><br>            <span class=\"hljs-keyword\">else</span> arrow++;<br>            &#125; <br><br><br>            <span class=\"hljs-keyword\">return</span> arrow;<br>            <br>        &#125;<br>   <br>&#125;;<br></code></pre></td></tr></table></figure>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p><a href=\"https://www.programmercarl.com/0452.%E7%94%A8%E6%9C%80%E5%B0%91%E6%95%B0%E9%87%8F%E7%9A%84%E7%AE%AD%E5%BC%95%E7%88%86%E6%B0%94%E7%90%83.html\">代码随想录</a><br />\n<a href=\"https://www.bilibili.com/video/BV12y4y1k7B5/?spm_id_from=333.788.recommend_more_video.1&amp;vd_source=f2340d96e99780a96b50d8096ffaaf1a\">看了三天动画，我拿到阿里研发offer，贪心算法，射击气球 LeetCode 452_哔哩哔哩_bilibili</a><br />\n自用跳转链接：<a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=ae2b0ee3-99ee-4a44-906e-5a2a66bf5f40\">ob</a>，<a href=\"http://localhost:4000/2022/06/10/17.yong-zui-shao-shu-liang-de-jian-yin-bao-qi-qiu/\">blog</a></p>"},{"id":"88f96891-7092-4c04-a067-349995d05800","title":"20.合并区间","date":"2022-06-16T02:17:00.000Z","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206200917436.jpg","abbrlink":14697,"_content":"\n文章简介\n\t力扣题解： 56. 合并区间\n<!-- more -->\n\n\n\n# 1 56. 合并区间\n\n[力扣题目链接](https://leetcode-cn.com/problems/merge-intervals/)\n\n给出一个区间的集合，请合并所有重叠的区间。\n\n示例 1:\n\n-   输入: intervals = [ [1,3],[2,6],[8,10],[15,18] ]\n-   输出: [ [1,6],[8,10],[15,18] ]\n-   解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].\n\n示例 2:\n\n-   输入: intervals = [ [1,4],[4,5] ]\n-   输出: [ [1,5] ]\n-   解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。\n-   注意：输入类型已于2019年4月15日更改。 请重置默认代码定义以获取新方法签名。\n\n提示：\n\n-   intervals[ i ]  [0] <= intervals[ i ]  [ 1 ]\n\n# 2 思路\n\n左边界排序后\n局部最优：每次合并都取**最大的右边界**，这样就可以合并更多的区间了\n整体最优：合并所有重叠的区间。\n排序后：intervals[i]的左边界在intervals[i - 1]左边界和右边界的范围内，一定有重叠(包含或者交集)！\n>第二个数组的头如果小于第一个数组的尾，那么一定有重复\n![56.合并区间](https://img-blog.csdnimg.cn/20201223200632791.png)\n\n\n\n## 2.1 排序\n按左边界排序\n```cpp\nstatic bool cmp (const vector<int>& a, const vector<int>& b) {\n        return a[0] < b[0];\n    }\n```\n\n## 2.2 判断是否重叠 +合并区间\n### 2.2.1 是否重叠\nfor循环中判断重叠\n第二个数组的头小于第一个数组的尾即为重叠\n`intervals[i][0] <= intervals[i - 1][1]`\n定义出来两个数组的头和尾，这样下边写的更简洁\n```cpp\n// 下标从1开始，因为要比较：intervals[i][0] <= intervals[i - 1][1]\nint start = intervals[i - 1][0]; // 初始区间的左边界\nint end = intervals[i - 1][1];   // 初始区间的右边界\n```\n### 2.2.2 合并区间\n用[[while 循环]]合并区间：while循环是if 和 for 循环的结合体\n比较第一个数组和第二数组的尾部谁更大，更新数组的尾部就行\n同时要控制i的增加，如果合并了，那么进行一次i++, 出去while 循环后，for又进行一次i++，这样就控制了跳过了合并区间👉🏻[[20.合并区间#^hcnuf7]]\n```cpp\nint end = intervals[i - 1][1];\nend = max(end, intervals[i][1]); // 比较第一个数组和第二数组的尾部\n```\n整体代码\n```cpp\n  for (int i = 1; i < length; i++) { // 判断重叠\n            int start = intervals[i - 1][0];    // 初始为i-1区间的左边界\n            int end = intervals[i - 1][1];      // 初始i-1区间的右边界\n            while (i < length && intervals[i][0] <= end) { // 合并区间\n                end = max(end, intervals[i][1]);    // 不断更新右区间\n                if (i == length - 1) flag = true;   // 最后一个区间也合并了\n                i++;                                // 继续合并下一个区间\n            }\n```\n\n\n\n\n## 2.3 放入result结果集\n取合并区间的头和尾作为一个新的数组加入到result数组中，`result.push_back({start, end});`\n如果没有合并就把原数组加入result\n\n**注意**：\n还要单独判断最后一个数组是否合并了，如果合并了，正常加入就如result就行\n如果没合并要单独的把最后一个数组加入result\n\n\n# 3 代码\n## 3.1 代码随想录断点调试\ncarl\n[20.合并区间(carl).mp4](file:///Users/yibeikongqiu/Desktop/ishot视频/贪心算法/20.合并区间(carl).mp4)\n\t[00:19](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/20.%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4(carl).mp4#t=19.133532) ：i++\n\t\t如果合并了第二区间，那么自然i不能从第二个区间在开始，要从第三个位置开始，while循环中有个i++，到了for循环中还有个i++, i到时候等于3，就跳过了合并的区间在开始\n\t[00:29](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/20.%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4(carl).mp4#t=29.228653)：此时i 等于3，从合并区间的下个区间在开始进行 ^hcnuf7\n\n\n\n\n\n## 3.2 carl 自写\n编译通过\n\n```cpp\nclass Solution {\npublic:\n    static bool cmp (const vector<int>& a, const vector<int>& b){\n        return a[0] < b[0];// 只比较左位置，所以不用二维数组\n    }\n\n        vector<vector<int>> result;\n        vector<vector<int>> merge(vector<vector<int>>& intervals) {\n        if(intervals.size() == 0) return result;// 此时result为空\n        int length = intervals.size();\n        bool flag = false; // 不要定义在for循环中\n\n        for (int i = 1; i < length; i++){\n            int start = intervals[i - 1][0];\n            int end = intervals[i - 1][1];\n            while (i < length && intervals[i][0] <= end){ // 不要忘记=，“=”是头尾相等\n                end = max(end, intervals[i][1]);\n                if (i == length - 1) flag = true;\n                i++;\n            }\n            result.push_back ({start,end}); // 如果没合并就是单独的，如果合并了也更新了。\n                                            // 每一次的循环都在加入result数组，所以在for循环中\n        }\n        if(flag == false) {\n            result.push_back({intervals[length-1][0],intervals[length-1][1]});\n        }\n        return result;\n    }\n};\n```\n\n\n\n\n# 4 参考资料\n[代码随想录](https://www.programmercarl.com/0056.%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4.html#%E6%80%9D%E8%B7%AF)\n<sub>自用跳转链接</sub>：[ob](obsidian://advanced-uri?vault=Documents&uid=88f96891-7092-4c04-a067-349995d05800)，[blog](http://localhost:4000/2022/06/16/20.he-bing-qu-jian/)\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/20.合并区间.md","raw":"---\nid: 88f96891-7092-4c04-a067-349995d05800\ntitle: 20.合并区间\ndate: '2022-06-16 10:17'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 贪心算法\ntags:\n  - 贪心算法\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206200917436.jpg'\nabbrlink: 14697\n---\n\n文章简介\n\t力扣题解： 56. 合并区间\n<!-- more -->\n\n\n\n# 1 56. 合并区间\n\n[力扣题目链接](https://leetcode-cn.com/problems/merge-intervals/)\n\n给出一个区间的集合，请合并所有重叠的区间。\n\n示例 1:\n\n-   输入: intervals = [ [1,3],[2,6],[8,10],[15,18] ]\n-   输出: [ [1,6],[8,10],[15,18] ]\n-   解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].\n\n示例 2:\n\n-   输入: intervals = [ [1,4],[4,5] ]\n-   输出: [ [1,5] ]\n-   解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。\n-   注意：输入类型已于2019年4月15日更改。 请重置默认代码定义以获取新方法签名。\n\n提示：\n\n-   intervals[ i ]  [0] <= intervals[ i ]  [ 1 ]\n\n# 2 思路\n\n左边界排序后\n局部最优：每次合并都取**最大的右边界**，这样就可以合并更多的区间了\n整体最优：合并所有重叠的区间。\n排序后：intervals[i]的左边界在intervals[i - 1]左边界和右边界的范围内，一定有重叠(包含或者交集)！\n>第二个数组的头如果小于第一个数组的尾，那么一定有重复\n![56.合并区间](https://img-blog.csdnimg.cn/20201223200632791.png)\n\n\n\n## 2.1 排序\n按左边界排序\n```cpp\nstatic bool cmp (const vector<int>& a, const vector<int>& b) {\n        return a[0] < b[0];\n    }\n```\n\n## 2.2 判断是否重叠 +合并区间\n### 2.2.1 是否重叠\nfor循环中判断重叠\n第二个数组的头小于第一个数组的尾即为重叠\n`intervals[i][0] <= intervals[i - 1][1]`\n定义出来两个数组的头和尾，这样下边写的更简洁\n```cpp\n// 下标从1开始，因为要比较：intervals[i][0] <= intervals[i - 1][1]\nint start = intervals[i - 1][0]; // 初始区间的左边界\nint end = intervals[i - 1][1];   // 初始区间的右边界\n```\n### 2.2.2 合并区间\n用[[while 循环]]合并区间：while循环是if 和 for 循环的结合体\n比较第一个数组和第二数组的尾部谁更大，更新数组的尾部就行\n同时要控制i的增加，如果合并了，那么进行一次i++, 出去while 循环后，for又进行一次i++，这样就控制了跳过了合并区间👉🏻[[20.合并区间#^hcnuf7]]\n```cpp\nint end = intervals[i - 1][1];\nend = max(end, intervals[i][1]); // 比较第一个数组和第二数组的尾部\n```\n整体代码\n```cpp\n  for (int i = 1; i < length; i++) { // 判断重叠\n            int start = intervals[i - 1][0];    // 初始为i-1区间的左边界\n            int end = intervals[i - 1][1];      // 初始i-1区间的右边界\n            while (i < length && intervals[i][0] <= end) { // 合并区间\n                end = max(end, intervals[i][1]);    // 不断更新右区间\n                if (i == length - 1) flag = true;   // 最后一个区间也合并了\n                i++;                                // 继续合并下一个区间\n            }\n```\n\n\n\n\n## 2.3 放入result结果集\n取合并区间的头和尾作为一个新的数组加入到result数组中，`result.push_back({start, end});`\n如果没有合并就把原数组加入result\n\n**注意**：\n还要单独判断最后一个数组是否合并了，如果合并了，正常加入就如result就行\n如果没合并要单独的把最后一个数组加入result\n\n\n# 3 代码\n## 3.1 代码随想录断点调试\ncarl\n[20.合并区间(carl).mp4](file:///Users/yibeikongqiu/Desktop/ishot视频/贪心算法/20.合并区间(carl).mp4)\n\t[00:19](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/20.%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4(carl).mp4#t=19.133532) ：i++\n\t\t如果合并了第二区间，那么自然i不能从第二个区间在开始，要从第三个位置开始，while循环中有个i++，到了for循环中还有个i++, i到时候等于3，就跳过了合并的区间在开始\n\t[00:29](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/20.%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4(carl).mp4#t=29.228653)：此时i 等于3，从合并区间的下个区间在开始进行 ^hcnuf7\n\n\n\n\n\n## 3.2 carl 自写\n编译通过\n\n```cpp\nclass Solution {\npublic:\n    static bool cmp (const vector<int>& a, const vector<int>& b){\n        return a[0] < b[0];// 只比较左位置，所以不用二维数组\n    }\n\n        vector<vector<int>> result;\n        vector<vector<int>> merge(vector<vector<int>>& intervals) {\n        if(intervals.size() == 0) return result;// 此时result为空\n        int length = intervals.size();\n        bool flag = false; // 不要定义在for循环中\n\n        for (int i = 1; i < length; i++){\n            int start = intervals[i - 1][0];\n            int end = intervals[i - 1][1];\n            while (i < length && intervals[i][0] <= end){ // 不要忘记=，“=”是头尾相等\n                end = max(end, intervals[i][1]);\n                if (i == length - 1) flag = true;\n                i++;\n            }\n            result.push_back ({start,end}); // 如果没合并就是单独的，如果合并了也更新了。\n                                            // 每一次的循环都在加入result数组，所以在for循环中\n        }\n        if(flag == false) {\n            result.push_back({intervals[length-1][0],intervals[length-1][1]});\n        }\n        return result;\n    }\n};\n```\n\n\n\n\n# 4 参考资料\n[代码随想录](https://www.programmercarl.com/0056.%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4.html#%E6%80%9D%E8%B7%AF)\n<sub>自用跳转链接</sub>：[ob](obsidian://advanced-uri?vault=Documents&uid=88f96891-7092-4c04-a067-349995d05800)，[blog](http://localhost:4000/2022/06/16/20.he-bing-qu-jian/)\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/20.合并区间","published":1,"updated":"2022-08-04T15:27:06.864Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjr0075e0mg4s8x7abe","content":"<p>文章简介<br>\n力扣题解： 56. 合并区间</p>\n<span id=\"more\"></span>\n<h1 id=\"1-56-合并区间\"><a class=\"markdownIt-Anchor\" href=\"#1-56-合并区间\"></a> 1 56. 合并区间</h1>\n<p><a href=\"https://leetcode-cn.com/problems/merge-intervals/\">力扣题目链接</a></p>\n<p>给出一个区间的集合，请合并所有重叠的区间。</p>\n<p>示例 1:</p>\n<ul>\n<li>输入: intervals = [ [1,3],[2,6],[8,10],[15,18] ]</li>\n<li>输出: [ [1,6],[8,10],[15,18] ]</li>\n<li>解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</li>\n</ul>\n<p>示例&nbsp;2:</p>\n<ul>\n<li>输入: intervals = [ [1,4],[4,5] ]</li>\n<li>输出: [ [1,5] ]</li>\n<li>解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。</li>\n<li>注意：输入类型已于2019年4月15日更改。 请重置默认代码定义以获取新方法签名。</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>intervals[ i ]  [0] &lt;= intervals[ i ]  [ 1 ]</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>左边界排序后<br>\n局部最优：每次合并都取<strong>最大的右边界</strong>，这样就可以合并更多的区间了<br>\n整体最优：合并所有重叠的区间。<br>\n排序后：intervals[i]的左边界在intervals[i - 1]左边界和右边界的范围内，一定有重叠(包含或者交集)！</p>\n<blockquote>\n<p>第二个数组的头如果小于第一个数组的尾，那么一定有重复<br>\n<img src=\"https://img-blog.csdnimg.cn/20201223200632791.png\" alt=\"56.合并区间\"></p>\n</blockquote>\n<h2 id=\"21-排序\"><a class=\"markdownIt-Anchor\" href=\"#21-排序\"></a> 2.1 排序</h2>\n<p>按左边界排序</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; a, <span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; b)</span> </span>{<br>        <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">0</span>] &lt; b[<span class=\"hljs-number\">0</span>];<br>    }<br></code></pre></td></tr></tbody></table></figure>\n<h2 id=\"22-判断是否重叠-合并区间\"><a class=\"markdownIt-Anchor\" href=\"#22-判断是否重叠-合并区间\"></a> 2.2 判断是否重叠 +合并区间</h2>\n<h3 id=\"221-是否重叠\"><a class=\"markdownIt-Anchor\" href=\"#221-是否重叠\"></a> 2.2.1 是否重叠</h3>\n<p>for循环中判断重叠<br>\n第二个数组的头小于第一个数组的尾即为重叠<br>\n<code>intervals[i][0] &lt;= intervals[i - 1][1]</code><br>\n定义出来两个数组的头和尾，这样下边写的更简洁</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 下标从1开始，因为要比较：intervals[i][0] &lt;= intervals[i - 1][1]</span><br><span class=\"hljs-type\">int</span> start = intervals[i - <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]; <span class=\"hljs-comment\">// 初始区间的左边界</span><br><span class=\"hljs-type\">int</span> end = intervals[i - <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>];   <span class=\"hljs-comment\">// 初始区间的右边界</span><br></code></pre></td></tr></tbody></table></figure>\n<h3 id=\"222-合并区间\"><a class=\"markdownIt-Anchor\" href=\"#222-合并区间\"></a> 2.2.2 合并区间</h3>\n<p>用[[while 循环]]合并区间：while循环是if 和 for 循环的结合体<br>\n比较第一个数组和第二数组的尾部谁更大，更新数组的尾部就行<br>\n同时要控制i的增加，如果合并了，那么进行一次i++, 出去while 循环后，for又进行一次i++，这样就控制了跳过了合并区间👉🏻[[20.合并区间#^hcnuf7]]</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">int</span> end = intervals[i - <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>];<br>end = <span class=\"hljs-built_in\">max</span>(end, intervals[i][<span class=\"hljs-number\">1</span>]); <span class=\"hljs-comment\">// 比较第一个数组和第二数组的尾部</span><br></code></pre></td></tr></tbody></table></figure>\n<p>整体代码</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; length; i++) { <span class=\"hljs-comment\">// 判断重叠</span><br>          <span class=\"hljs-type\">int</span> start = intervals[i - <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>];    <span class=\"hljs-comment\">// 初始为i-1区间的左边界</span><br>          <span class=\"hljs-type\">int</span> end = intervals[i - <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>];      <span class=\"hljs-comment\">// 初始i-1区间的右边界</span><br>          <span class=\"hljs-keyword\">while</span> (i &lt; length &amp;&amp; intervals[i][<span class=\"hljs-number\">0</span>] &lt;= end) { <span class=\"hljs-comment\">// 合并区间</span><br>              end = <span class=\"hljs-built_in\">max</span>(end, intervals[i][<span class=\"hljs-number\">1</span>]);    <span class=\"hljs-comment\">// 不断更新右区间</span><br>              <span class=\"hljs-keyword\">if</span> (i == length - <span class=\"hljs-number\">1</span>) flag = <span class=\"hljs-literal\">true</span>;   <span class=\"hljs-comment\">// 最后一个区间也合并了</span><br>              i++;                                <span class=\"hljs-comment\">// 继续合并下一个区间</span><br>          }<br></code></pre></td></tr></tbody></table></figure>\n<h2 id=\"23-放入result结果集\"><a class=\"markdownIt-Anchor\" href=\"#23-放入result结果集\"></a> 2.3 放入result结果集</h2>\n<p>取合并区间的头和尾作为一个新的数组加入到result数组中，<code>result.push_back({start, end});</code><br>\n如果没有合并就把原数组加入result</p>\n<p><strong>注意</strong>：<br>\n还要单独判断最后一个数组是否合并了，如果合并了，正常加入就如result就行<br>\n如果没合并要单独的把最后一个数组加入result</p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<h2 id=\"31-代码随想录断点调试\"><a class=\"markdownIt-Anchor\" href=\"#31-代码随想录断点调试\"></a> 3.1 代码随想录断点调试</h2>\n<p>carl<br>\n[20.合并区间(carl).mp4](file:///Users/yibeikongqiu/Desktop/ishot视频/贪心算法/20.合并区间(carl).mp4)<br>\n[00:19](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/20.%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4(carl).mp4#t=19.133532) ：i++<br>\n如果合并了第二区间，那么自然i不能从第二个区间在开始，要从第三个位置开始，while循环中有个i++，到了for循环中还有个i++, i到时候等于3，就跳过了合并的区间在开始<br>\n[00:29](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/20.%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4(carl).mp4#t=29.228653)：此时i 等于3，从合并区间的下个区间在开始进行 ^hcnuf7</p>\n<h2 id=\"32-carl-自写\"><a class=\"markdownIt-Anchor\" href=\"#32-carl-自写\"></a> 3.2 carl 自写</h2>\n<p>编译通过</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; a, <span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; b)</span></span>{<br>        <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">0</span>] &lt; b[<span class=\"hljs-number\">0</span>];<span class=\"hljs-comment\">// 只比较左位置，所以不用二维数组</span><br>    }<br><br>        vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; result;<br>        vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">merge</span>(vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt;&amp; intervals) {<br>        <span class=\"hljs-keyword\">if</span>(intervals.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> result;<span class=\"hljs-comment\">// 此时result为空</span><br>        <span class=\"hljs-type\">int</span> length = intervals.<span class=\"hljs-built_in\">size</span>();<br>        <span class=\"hljs-type\">bool</span> flag = <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// 不要定义在for循环中</span><br><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; length; i++){<br>            <span class=\"hljs-type\">int</span> start = intervals[i - <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-type\">int</span> end = intervals[i - <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>];<br>            <span class=\"hljs-keyword\">while</span> (i &lt; length &amp;&amp; intervals[i][<span class=\"hljs-number\">0</span>] &lt;= end){ <span class=\"hljs-comment\">// 不要忘记=，“=”是头尾相等</span><br>                end = <span class=\"hljs-built_in\">max</span>(end, intervals[i][<span class=\"hljs-number\">1</span>]);<br>                <span class=\"hljs-keyword\">if</span> (i == length - <span class=\"hljs-number\">1</span>) flag = <span class=\"hljs-literal\">true</span>;<br>                i++;<br>            }<br>            result.<span class=\"hljs-built_in\">push_back</span> ({start,end}); <span class=\"hljs-comment\">// 如果没合并就是单独的，如果合并了也更新了。</span><br>                                            <span class=\"hljs-comment\">// 每一次的循环都在加入result数组，所以在for循环中</span><br>        }<br>        <span class=\"hljs-keyword\">if</span>(flag == <span class=\"hljs-literal\">false</span>) {<br>            result.<span class=\"hljs-built_in\">push_back</span>({intervals[length<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">0</span>],intervals[length<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">1</span>]});<br>        }<br>        <span class=\"hljs-keyword\">return</span> result;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p><a href=\"https://www.programmercarl.com/0056.%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4.html#%E6%80%9D%E8%B7%AF\">代码随想录</a><br>\n<sub>自用跳转链接</sub>：<a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=88f96891-7092-4c04-a067-349995d05800\">ob</a>，<a href=\"http://localhost:4000/2022/06/16/20.he-bing-qu-jian/\">blog</a></p>\n","site":{"data":{}},"wordcount":2951,"excerpt":"<p>文章简介<br>\n力扣题解： 56. 合并区间</p>","more":"<h1 id=\"1-56-合并区间\"><a class=\"markdownIt-Anchor\" href=\"#1-56-合并区间\"></a> 1 56. 合并区间</h1>\n<p><a href=\"https://leetcode-cn.com/problems/merge-intervals/\">力扣题目链接</a></p>\n<p>给出一个区间的集合，请合并所有重叠的区间。</p>\n<p>示例 1:</p>\n<ul>\n<li>输入: intervals = [ [1,3],[2,6],[8,10],[15,18] ]</li>\n<li>输出: [ [1,6],[8,10],[15,18] ]</li>\n<li>解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</li>\n</ul>\n<p>示例 2:</p>\n<ul>\n<li>输入: intervals = [ [1,4],[4,5] ]</li>\n<li>输出: [ [1,5] ]</li>\n<li>解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。</li>\n<li>注意：输入类型已于2019年4月15日更改。 请重置默认代码定义以获取新方法签名。</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>intervals[ i ]  [0] &lt;= intervals[ i ]  [ 1 ]</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>左边界排序后<br />\n局部最优：每次合并都取<strong>最大的右边界</strong>，这样就可以合并更多的区间了<br />\n整体最优：合并所有重叠的区间。<br />\n排序后：intervals[i]的左边界在intervals[i - 1]左边界和右边界的范围内，一定有重叠(包含或者交集)！</p>\n<blockquote>\n<p>第二个数组的头如果小于第一个数组的尾，那么一定有重复<br />\n<img src=\"https://img-blog.csdnimg.cn/20201223200632791.png\" alt=\"56.合并区间\" /></p>\n</blockquote>\n<h2 id=\"21-排序\"><a class=\"markdownIt-Anchor\" href=\"#21-排序\"></a> 2.1 排序</h2>\n<p>按左边界排序</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; a, <span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; b)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">0</span>] &lt; b[<span class=\"hljs-number\">0</span>];<br>    &#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"22-判断是否重叠-合并区间\"><a class=\"markdownIt-Anchor\" href=\"#22-判断是否重叠-合并区间\"></a> 2.2 判断是否重叠 +合并区间</h2>\n<h3 id=\"221-是否重叠\"><a class=\"markdownIt-Anchor\" href=\"#221-是否重叠\"></a> 2.2.1 是否重叠</h3>\n<p>for循环中判断重叠<br />\n第二个数组的头小于第一个数组的尾即为重叠<br />\n<code>intervals[i][0] &lt;= intervals[i - 1][1]</code><br />\n定义出来两个数组的头和尾，这样下边写的更简洁</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 下标从1开始，因为要比较：intervals[i][0] &lt;= intervals[i - 1][1]</span><br><span class=\"hljs-type\">int</span> start = intervals[i - <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]; <span class=\"hljs-comment\">// 初始区间的左边界</span><br><span class=\"hljs-type\">int</span> end = intervals[i - <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>];   <span class=\"hljs-comment\">// 初始区间的右边界</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"222-合并区间\"><a class=\"markdownIt-Anchor\" href=\"#222-合并区间\"></a> 2.2.2 合并区间</h3>\n<p>用[[while 循环]]合并区间：while循环是if 和 for 循环的结合体<br />\n比较第一个数组和第二数组的尾部谁更大，更新数组的尾部就行<br />\n同时要控制i的增加，如果合并了，那么进行一次i++, 出去while 循环后，for又进行一次i++，这样就控制了跳过了合并区间👉🏻[[20.合并区间#^hcnuf7]]</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">int</span> end = intervals[i - <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>];<br>end = <span class=\"hljs-built_in\">max</span>(end, intervals[i][<span class=\"hljs-number\">1</span>]); <span class=\"hljs-comment\">// 比较第一个数组和第二数组的尾部</span><br></code></pre></td></tr></table></figure>\n<p>整体代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; length; i++) &#123; <span class=\"hljs-comment\">// 判断重叠</span><br>          <span class=\"hljs-type\">int</span> start = intervals[i - <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>];    <span class=\"hljs-comment\">// 初始为i-1区间的左边界</span><br>          <span class=\"hljs-type\">int</span> end = intervals[i - <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>];      <span class=\"hljs-comment\">// 初始i-1区间的右边界</span><br>          <span class=\"hljs-keyword\">while</span> (i &lt; length &amp;&amp; intervals[i][<span class=\"hljs-number\">0</span>] &lt;= end) &#123; <span class=\"hljs-comment\">// 合并区间</span><br>              end = <span class=\"hljs-built_in\">max</span>(end, intervals[i][<span class=\"hljs-number\">1</span>]);    <span class=\"hljs-comment\">// 不断更新右区间</span><br>              <span class=\"hljs-keyword\">if</span> (i == length - <span class=\"hljs-number\">1</span>) flag = <span class=\"hljs-literal\">true</span>;   <span class=\"hljs-comment\">// 最后一个区间也合并了</span><br>              i++;                                <span class=\"hljs-comment\">// 继续合并下一个区间</span><br>          &#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"23-放入result结果集\"><a class=\"markdownIt-Anchor\" href=\"#23-放入result结果集\"></a> 2.3 放入result结果集</h2>\n<p>取合并区间的头和尾作为一个新的数组加入到result数组中，<code>result.push_back(&#123;start, end&#125;);</code><br />\n如果没有合并就把原数组加入result</p>\n<p><strong>注意</strong>：<br />\n还要单独判断最后一个数组是否合并了，如果合并了，正常加入就如result就行<br />\n如果没合并要单独的把最后一个数组加入result</p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<h2 id=\"31-代码随想录断点调试\"><a class=\"markdownIt-Anchor\" href=\"#31-代码随想录断点调试\"></a> 3.1 代码随想录断点调试</h2>\n<p>carl<br />\n[20.合并区间(carl).mp4](file:///Users/yibeikongqiu/Desktop/ishot视频/贪心算法/20.合并区间(carl).mp4)<br />\n[00:19](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/20.%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4(carl).mp4#t=19.133532) ：i++<br />\n如果合并了第二区间，那么自然i不能从第二个区间在开始，要从第三个位置开始，while循环中有个i++，到了for循环中还有个i++, i到时候等于3，就跳过了合并的区间在开始<br />\n[00:29](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/20.%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4(carl).mp4#t=29.228653)：此时i 等于3，从合并区间的下个区间在开始进行 ^hcnuf7</p>\n<h2 id=\"32-carl-自写\"><a class=\"markdownIt-Anchor\" href=\"#32-carl-自写\"></a> 3.2 carl 自写</h2>\n<p>编译通过</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; a, <span class=\"hljs-type\">const</span> vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; b)</span></span>&#123;<br>        <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">0</span>] &lt; b[<span class=\"hljs-number\">0</span>];<span class=\"hljs-comment\">// 只比较左位置，所以不用二维数组</span><br>    &#125;<br><br>        vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; result;<br>        vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">merge</span>(vector&lt;vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt;&amp; intervals) &#123;<br>        <span class=\"hljs-keyword\">if</span>(intervals.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> result;<span class=\"hljs-comment\">// 此时result为空</span><br>        <span class=\"hljs-type\">int</span> length = intervals.<span class=\"hljs-built_in\">size</span>();<br>        <span class=\"hljs-type\">bool</span> flag = <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// 不要定义在for循环中</span><br><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; length; i++)&#123;<br>            <span class=\"hljs-type\">int</span> start = intervals[i - <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-type\">int</span> end = intervals[i - <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>];<br>            <span class=\"hljs-keyword\">while</span> (i &lt; length &amp;&amp; intervals[i][<span class=\"hljs-number\">0</span>] &lt;= end)&#123; <span class=\"hljs-comment\">// 不要忘记=，“=”是头尾相等</span><br>                end = <span class=\"hljs-built_in\">max</span>(end, intervals[i][<span class=\"hljs-number\">1</span>]);<br>                <span class=\"hljs-keyword\">if</span> (i == length - <span class=\"hljs-number\">1</span>) flag = <span class=\"hljs-literal\">true</span>;<br>                i++;<br>            &#125;<br>            result.<span class=\"hljs-built_in\">push_back</span> (&#123;start,end&#125;); <span class=\"hljs-comment\">// 如果没合并就是单独的，如果合并了也更新了。</span><br>                                            <span class=\"hljs-comment\">// 每一次的循环都在加入result数组，所以在for循环中</span><br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(flag == <span class=\"hljs-literal\">false</span>) &#123;<br>            result.<span class=\"hljs-built_in\">push_back</span>(&#123;intervals[length<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">0</span>],intervals[length<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">1</span>]&#125;);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p><a href=\"https://www.programmercarl.com/0056.%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4.html#%E6%80%9D%E8%B7%AF\">代码随想录</a><br />\n<sub>自用跳转链接</sub>：<a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=88f96891-7092-4c04-a067-349995d05800\">ob</a>，<a href=\"http://localhost:4000/2022/06/16/20.he-bing-qu-jian/\">blog</a></p>"},{"id":"49dde99d-8015-4224-9c0b-96d9d0dae41a","title":"22.单调递增的数字","date":"2022-07-03T12:57:00.000Z","index_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206240956178.jpg","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206200917436.jpg","abbrlink":17411,"_content":"\n文章简介\n\t力扣题解： 738.单调递增的数字\n<!-- more -->\n# 1 738.单调递增的数字\n\n[力扣题目链接](https://leetcode.cn/problems/monotone-increasing-digits/)\n\n给定一个非负整数 N，找出小于或等于 N 的最大的**整数**，同时这个整数需要满足其**各个位数上**的数字是单调递增。\n\n（当且仅当每**个相邻位数上的数字 x 和 y 满足 x <= y** 时，我们称这个整数是单调递增的。）\n\n示例 1:\n\n-   输入: N = 10\n-   输出: 9\n\n示例 2:\n\n-   输入: N = 1234\n-   输出: 1234\n\n示例 3:\n\n-   输入: N = 332\n-   输出: 299\n\n说明: N 是在 [0, 10^9] 范围内的一个整数。\n\n\n# 2 思路\n\n找≤ N，的最大单增的整数\n如果不递增，就把除最后一位每一位都减1，这样保证了减过数比原数小。然后在把除了第一个位(因为第一个位最大不能变，变了会使得比原来的数大)，后边的位数全部令为9，这样就得到了最大的整数。\n代码：一旦出现strNum[i - 1] > strNum[i]的情况（非单调递增），首先想让strNum[i - 1]--，然后strNum[i]给为9\n\n例如 \n332 → 222→299\n753 → 643 → 699\n\n## 2.1 断点调试\n \n[22.单调递增的数字(carl:332).mp4](file:///Users/yibeikongqiu/Desktop/ishot视频/贪心算法/22.单调递增的数字(carl).mp4)  \n[00:07](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/22.%E5%8D%95%E8%B0%83%E9%80%92%E5%A2%9E%E7%9A%84%E6%95%B0%E5%AD%97(carl).mp4#t=7.519521) 前一个数大于后一个数则让前一个数减1\n>从后往前遍历，for (i = num.size () - 1; i > 0; i--) [[for 循环]]\n\nflag至少是1，因为i 不会取到0。这样就报证了至少从第二个2数开始赋9，直到到最后一个数\n\n\n[00:10](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/22.%E5%8D%95%E8%B0%83%E9%80%92%E5%A2%9E%E7%9A%84%E6%95%B0%E5%AD%97(carl).mp4#t=10.337641) 只需要减1的原因是：让他的每一个位都比原来的数小，在把除了第一个位(因为第一个位最大)，后边的位数全部令为9，这样就得到了最大的整数\n\n\n[22.单调递增的数字(carl/1234)](file:///Users/yibeikongqiu/Desktop/ishot视频/贪心算法/22.单调递增的数字(carl:1234).mp4)  \n\t1234 本身都是递增的，所以第一个for循环会跳过，第二for循环也不会执行\n\n\n# 3 代码\n```cpp\nclass Solution {\npublic:\n    int monotoneIncreasingDigits(int n) {\n        string strNum = to_string(n);\n        int flag = strNum.size() ;\n        for (int i = strNum.size() - 1; i > 0; i--){\n            if (strNum[i - 1]> strNum[i]){\n                flag = i;\n                strNum[i-1]--;\n            }\n        }\n        for (int i = flag; i < strNum.size(); i++){\n            strNum[i] = '9';\n        }\n        return stoi (strNum);\n    }\n};\n```\n\nstoi函数 #flashcards/代码随想录 \n?\n将数字字符串转为数字：\"2147482\" → 2147482\n<!--SR:!2022-07-07,3,250-->\n\n# 4 参考资料\n[代码随想录](https://www.programmercarl.com/0738.%E5%8D%95%E8%B0%83%E9%80%92%E5%A2%9E%E7%9A%84%E6%95%B0%E5%AD%97.html#%E6%9A%B4%E5%8A%9B%E8%A7%A3%E6%B3%95)\n自用跳转连接：[ob](obsidian://advanced-uri?vault=Documents&uid=49dde99d-8015-4224-9c0b-96d9d0dae41a)， [blog]()","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/22.单调递增的数字.md","raw":"---\nid: 49dde99d-8015-4224-9c0b-96d9d0dae41a\ntitle: 22.单调递增的数字\ndate: '2022-07-03 20:57'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 贪心算法\ntags:\n  - 贪心算法\nindex_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206240956178.jpg'\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202206200917436.jpg'\nabbrlink: 17411\n---\n\n文章简介\n\t力扣题解： 738.单调递增的数字\n<!-- more -->\n# 1 738.单调递增的数字\n\n[力扣题目链接](https://leetcode.cn/problems/monotone-increasing-digits/)\n\n给定一个非负整数 N，找出小于或等于 N 的最大的**整数**，同时这个整数需要满足其**各个位数上**的数字是单调递增。\n\n（当且仅当每**个相邻位数上的数字 x 和 y 满足 x <= y** 时，我们称这个整数是单调递增的。）\n\n示例 1:\n\n-   输入: N = 10\n-   输出: 9\n\n示例 2:\n\n-   输入: N = 1234\n-   输出: 1234\n\n示例 3:\n\n-   输入: N = 332\n-   输出: 299\n\n说明: N 是在 [0, 10^9] 范围内的一个整数。\n\n\n# 2 思路\n\n找≤ N，的最大单增的整数\n如果不递增，就把除最后一位每一位都减1，这样保证了减过数比原数小。然后在把除了第一个位(因为第一个位最大不能变，变了会使得比原来的数大)，后边的位数全部令为9，这样就得到了最大的整数。\n代码：一旦出现strNum[i - 1] > strNum[i]的情况（非单调递增），首先想让strNum[i - 1]--，然后strNum[i]给为9\n\n例如 \n332 → 222→299\n753 → 643 → 699\n\n## 2.1 断点调试\n \n[22.单调递增的数字(carl:332).mp4](file:///Users/yibeikongqiu/Desktop/ishot视频/贪心算法/22.单调递增的数字(carl).mp4)  \n[00:07](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/22.%E5%8D%95%E8%B0%83%E9%80%92%E5%A2%9E%E7%9A%84%E6%95%B0%E5%AD%97(carl).mp4#t=7.519521) 前一个数大于后一个数则让前一个数减1\n>从后往前遍历，for (i = num.size () - 1; i > 0; i--) [[for 循环]]\n\nflag至少是1，因为i 不会取到0。这样就报证了至少从第二个2数开始赋9，直到到最后一个数\n\n\n[00:10](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/22.%E5%8D%95%E8%B0%83%E9%80%92%E5%A2%9E%E7%9A%84%E6%95%B0%E5%AD%97(carl).mp4#t=10.337641) 只需要减1的原因是：让他的每一个位都比原来的数小，在把除了第一个位(因为第一个位最大)，后边的位数全部令为9，这样就得到了最大的整数\n\n\n[22.单调递增的数字(carl/1234)](file:///Users/yibeikongqiu/Desktop/ishot视频/贪心算法/22.单调递增的数字(carl:1234).mp4)  \n\t1234 本身都是递增的，所以第一个for循环会跳过，第二for循环也不会执行\n\n\n# 3 代码\n```cpp\nclass Solution {\npublic:\n    int monotoneIncreasingDigits(int n) {\n        string strNum = to_string(n);\n        int flag = strNum.size() ;\n        for (int i = strNum.size() - 1; i > 0; i--){\n            if (strNum[i - 1]> strNum[i]){\n                flag = i;\n                strNum[i-1]--;\n            }\n        }\n        for (int i = flag; i < strNum.size(); i++){\n            strNum[i] = '9';\n        }\n        return stoi (strNum);\n    }\n};\n```\n\nstoi函数 #flashcards/代码随想录 \n?\n将数字字符串转为数字：\"2147482\" → 2147482\n<!--SR:!2022-07-07,3,250-->\n\n# 4 参考资料\n[代码随想录](https://www.programmercarl.com/0738.%E5%8D%95%E8%B0%83%E9%80%92%E5%A2%9E%E7%9A%84%E6%95%B0%E5%AD%97.html#%E6%9A%B4%E5%8A%9B%E8%A7%A3%E6%B3%95)\n自用跳转连接：[ob](obsidian://advanced-uri?vault=Documents&uid=49dde99d-8015-4224-9c0b-96d9d0dae41a)， [blog]()","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/22.单调递增的数字","published":1,"updated":"2022-07-12T09:02:14.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fjr0078e0mg77s67dq5","content":"<p>文章简介<br>\n力扣题解： 738.单调递增的数字</p>\n<span id=\"more\"></span>\n<h1 id=\"1-738单调递增的数字\"><a class=\"markdownIt-Anchor\" href=\"#1-738单调递增的数字\"></a> 1 738.单调递增的数字</h1>\n<p><a href=\"https://leetcode.cn/problems/monotone-increasing-digits/\">力扣题目链接</a></p>\n<p>给定一个非负整数&nbsp;N，找出小于或等于&nbsp;N&nbsp;的最大的<strong>整数</strong>，同时这个整数需要满足其<strong>各个位数上</strong>的数字是单调递增。</p>\n<p>（当且仅当每<strong>个相邻位数上的数字&nbsp;x&nbsp;和&nbsp;y&nbsp;满足&nbsp;x &lt;= y</strong>&nbsp;时，我们称这个整数是单调递增的。）</p>\n<p>示例 1:</p>\n<ul>\n<li>输入: N = 10</li>\n<li>输出: 9</li>\n</ul>\n<p>示例 2:</p>\n<ul>\n<li>输入: N = 1234</li>\n<li>输出: 1234</li>\n</ul>\n<p>示例 3:</p>\n<ul>\n<li>输入: N = 332</li>\n<li>输出: 299</li>\n</ul>\n<p>说明: N&nbsp;是在&nbsp;[0, 10^9]&nbsp;范围内的一个整数。</p>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>找≤ N，的最大单增的整数<br>\n如果不递增，就把除最后一位每一位都减1，这样保证了减过数比原数小。然后在把除了第一个位(因为第一个位最大不能变，变了会使得比原来的数大)，后边的位数全部令为9，这样就得到了最大的整数。<br>\n代码：一旦出现strNum[i - 1] &gt; strNum[i]的情况（非单调递增），首先想让strNum[i - 1]–，然后strNum[i]给为9</p>\n<p>例如<br>\n332 → 222→299<br>\n753 → 643 → 699</p>\n<h2 id=\"21-断点调试\"><a class=\"markdownIt-Anchor\" href=\"#21-断点调试\"></a> 2.1 断点调试</h2>\n<p>[22.单调递增的数字(carl:332).mp4](file:///Users/yibeikongqiu/Desktop/ishot视频/贪心算法/22.单调递增的数字(carl).mp4)<br>\n[00:07](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/22.%E5%8D%95%E8%B0%83%E9%80%92%E5%A2%9E%E7%9A%84%E6%95%B0%E5%AD%97(carl).mp4#t=7.519521) 前一个数大于后一个数则让前一个数减1</p>\n<blockquote>\n<p>从后往前遍历，for (i = num.size () - 1; i &gt; 0; i–) [[for 循环]]</p>\n</blockquote>\n<p>flag至少是1，因为i 不会取到0。这样就报证了至少从第二个2数开始赋9，直到到最后一个数</p>\n<p>[00:10](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/22.%E5%8D%95%E8%B0%83%E9%80%92%E5%A2%9E%E7%9A%84%E6%95%B0%E5%AD%97(carl).mp4#t=10.337641) 只需要减1的原因是：让他的每一个位都比原来的数小，在把除了第一个位(因为第一个位最大)，后边的位数全部令为9，这样就得到了最大的整数</p>\n<p>[22.单调递增的数字(carl/1234)](file:///Users/yibeikongqiu/Desktop/ishot视频/贪心算法/22.单调递增的数字(carl:1234).mp4)<br>\n1234 本身都是递增的，所以第一个for循环会跳过，第二for循环也不会执行</p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">monotoneIncreasingDigits</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>{<br>        string strNum = <span class=\"hljs-built_in\">to_string</span>(n);<br>        <span class=\"hljs-type\">int</span> flag = strNum.<span class=\"hljs-built_in\">size</span>() ;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = strNum.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; i &gt; <span class=\"hljs-number\">0</span>; i--){<br>            <span class=\"hljs-keyword\">if</span> (strNum[i - <span class=\"hljs-number\">1</span>]&gt; strNum[i]){<br>                flag = i;<br>                strNum[i<span class=\"hljs-number\">-1</span>]--;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = flag; i &lt; strNum.<span class=\"hljs-built_in\">size</span>(); i++){<br>            strNum[i] = <span class=\"hljs-string\">'9'</span>;<br>        }<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">stoi</span> (strNum);<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<p>stoi函数 #flashcards/代码随想录<br>\n?<br>\n将数字字符串转为数字：“2147482” → 2147482</p>\n<!--SR:!2022-07-07,3,250-->\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p><a href=\"https://www.programmercarl.com/0738.%E5%8D%95%E8%B0%83%E9%80%92%E5%A2%9E%E7%9A%84%E6%95%B0%E5%AD%97.html#%E6%9A%B4%E5%8A%9B%E8%A7%A3%E6%B3%95\">代码随想录</a><br>\n自用跳转连接：<a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=49dde99d-8015-4224-9c0b-96d9d0dae41a\">ob</a>， <a href=\"\">blog</a></p>\n","site":{"data":{}},"wordcount":1641,"excerpt":"<p>文章简介<br>\n力扣题解： 738.单调递增的数字</p>","more":"<h1 id=\"1-738单调递增的数字\"><a class=\"markdownIt-Anchor\" href=\"#1-738单调递增的数字\"></a> 1 738.单调递增的数字</h1>\n<p><a href=\"https://leetcode.cn/problems/monotone-increasing-digits/\">力扣题目链接</a></p>\n<p>给定一个非负整数 N，找出小于或等于 N 的最大的<strong>整数</strong>，同时这个整数需要满足其<strong>各个位数上</strong>的数字是单调递增。</p>\n<p>（当且仅当每<strong>个相邻位数上的数字 x 和 y 满足 x &lt;= y</strong> 时，我们称这个整数是单调递增的。）</p>\n<p>示例 1:</p>\n<ul>\n<li>输入: N = 10</li>\n<li>输出: 9</li>\n</ul>\n<p>示例 2:</p>\n<ul>\n<li>输入: N = 1234</li>\n<li>输出: 1234</li>\n</ul>\n<p>示例 3:</p>\n<ul>\n<li>输入: N = 332</li>\n<li>输出: 299</li>\n</ul>\n<p>说明: N 是在 [0, 10^9] 范围内的一个整数。</p>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>找≤ N，的最大单增的整数<br />\n如果不递增，就把除最后一位每一位都减1，这样保证了减过数比原数小。然后在把除了第一个位(因为第一个位最大不能变，变了会使得比原来的数大)，后边的位数全部令为9，这样就得到了最大的整数。<br />\n代码：一旦出现strNum[i - 1] &gt; strNum[i]的情况（非单调递增），首先想让strNum[i - 1]–，然后strNum[i]给为9</p>\n<p>例如<br />\n332 → 222→299<br />\n753 → 643 → 699</p>\n<h2 id=\"21-断点调试\"><a class=\"markdownIt-Anchor\" href=\"#21-断点调试\"></a> 2.1 断点调试</h2>\n<p>[22.单调递增的数字(carl:332).mp4](file:///Users/yibeikongqiu/Desktop/ishot视频/贪心算法/22.单调递增的数字(carl).mp4)<br />\n[00:07](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/22.%E5%8D%95%E8%B0%83%E9%80%92%E5%A2%9E%E7%9A%84%E6%95%B0%E5%AD%97(carl).mp4#t=7.519521) 前一个数大于后一个数则让前一个数减1</p>\n<blockquote>\n<p>从后往前遍历，for (i = num.size () - 1; i &gt; 0; i–) [[for 循环]]</p>\n</blockquote>\n<p>flag至少是1，因为i 不会取到0。这样就报证了至少从第二个2数开始赋9，直到到最后一个数</p>\n<p>[00:10](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/22.%E5%8D%95%E8%B0%83%E9%80%92%E5%A2%9E%E7%9A%84%E6%95%B0%E5%AD%97(carl).mp4#t=10.337641) 只需要减1的原因是：让他的每一个位都比原来的数小，在把除了第一个位(因为第一个位最大)，后边的位数全部令为9，这样就得到了最大的整数</p>\n<p>[22.单调递增的数字(carl/1234)](file:///Users/yibeikongqiu/Desktop/ishot视频/贪心算法/22.单调递增的数字(carl:1234).mp4)<br />\n1234 本身都是递增的，所以第一个for循环会跳过，第二for循环也不会执行</p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">monotoneIncreasingDigits</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>&#123;<br>        string strNum = <span class=\"hljs-built_in\">to_string</span>(n);<br>        <span class=\"hljs-type\">int</span> flag = strNum.<span class=\"hljs-built_in\">size</span>() ;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = strNum.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; i &gt; <span class=\"hljs-number\">0</span>; i--)&#123;<br>            <span class=\"hljs-keyword\">if</span> (strNum[i - <span class=\"hljs-number\">1</span>]&gt; strNum[i])&#123;<br>                flag = i;<br>                strNum[i<span class=\"hljs-number\">-1</span>]--;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = flag; i &lt; strNum.<span class=\"hljs-built_in\">size</span>(); i++)&#123;<br>            strNum[i] = <span class=\"hljs-string\">&#x27;9&#x27;</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">stoi</span> (strNum);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>stoi函数 #flashcards/代码随想录<br />\n?<br />\n将数字字符串转为数字：“2147482” → 2147482</p>\n<!--SR:!2022-07-07,3,250-->\n<h1 id=\"4-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#4-参考资料\"></a> 4 参考资料</h1>\n<p><a href=\"https://www.programmercarl.com/0738.%E5%8D%95%E8%B0%83%E9%80%92%E5%A2%9E%E7%9A%84%E6%95%B0%E5%AD%97.html#%E6%9A%B4%E5%8A%9B%E8%A7%A3%E6%B3%95\">代码随想录</a><br />\n自用跳转连接：<a href=\"obsidian://advanced-uri?vault=Documents&amp;uid=49dde99d-8015-4224-9c0b-96d9d0dae41a\">ob</a>， <a href=\"\">blog</a></p>"},{"title":"23.买卖股票的最佳时机含手续费","date":"2022-07-04T09:04:00.000Z","index_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207041948383.jpg","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207041948383.jpg","abbrlink":9689,"_content":"\n文章简介\n\t力扣题解：714. 买卖股票的最佳时机含手续费\n<!-- more -->\n\n# 1 买卖股票的最佳时机含手续费\n\n[力扣题目链接](https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/)\n\n给定一个整数数组 prices，其中第 i 个元素代表了第 i 天的股票价格 ；非负整数 fee 代表了交易股票的手续费用。\n\n你可以无限次地完成交易，但是你每笔交易都需要付手续费。**如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。**\n\n**返回获得利润的最大值。**\n\n注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。\n>相当于买入和卖出\n\n示例 1: 输入: prices = [1, 3, 2, 8, 4, 9], fee = 2 输出: 8\n\n解释: 能够达到的最大利润: 在此处买入 prices[0] = 1 在此处卖出 prices[3] = 8 在此处买入 prices[4] = 4 在此处卖出 prices[5] = 9 总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8.\n\n注意:\n\n-   0 < prices.length <= 50000.\n-   0 < prices[i] < 50000.\n-   0 <= fee < 50000.\n\n# 2 思路\n## 2.1 [[6. 买卖股票的最佳时机II]]\n![[6. 买卖股票的最佳时机II#2 思路]]\n与 6的区别是多了个手续费\n有了手续费，就要关系什么时候买卖了，因为计算所获得利润，需要考虑买卖利润可能不足以手续费的情况。\n用贪心策略，就是最低值买，最高值（减去手续费还盈利）就卖。\n\n找到两个点\n-   买入日期：其实很好想，遇到更低点就记录一下。\n-   卖出日期：这个就不好算了，但也没有必要算出准确的卖出日期，只要当前价格大于（最低价格+手续费），就可以收获利润，至于准确的卖出日期，就是连续收获利润区间里的最后一天（并不需要计算是具体哪一天）。\n\n做收获利润操作的时候其实有三种情况：\n-   情况一：收获利润的这一天并不是收获利润区间里的最后一天（**不是真正的卖出，相当于持有股票**），所以后面要继续收获利润。\n-   情况二：前一天是收获利润区间里的最后一天（相当于真正的卖出了），今天要重新记录最小价格了。\n-   情况三：不作操作，保持原有状态（买入，卖出，不买不卖）\n### 2.1.1 思路总结\n1. 不断的寻找最低点，在最低点时买入\n2. 寻找有利润的时候买入，更新下一次的买入位置在循环卖出\n3. 对所有利润加和\n\n## 2.2 断点调试\n\n\n[23.买卖股票的最佳时机含手续费](file:///Users/yibeikongqiu/Desktop/ishot视频/贪心算法/23.买卖股票的最佳时机含手续费.mp4)\n\n\n[00:10](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/23.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%E5%90%AB%E6%89%8B%E7%BB%AD%E8%B4%B9.mp4#t=10.471542) 情况三：现在的价格不是最低的，并且卖出的话亏本\n \n[00:28](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/23.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%E5%90%AB%E6%89%8B%E7%BB%AD%E8%B4%B9.mp4#t=28.795416) \n#疑问 #已解决 \n为什么要minPrice = prices[i]- fee呢，如果去掉了- fee 则结果不对\n~~因为在该下标处已经交过了一次手续费，不需要在交了？？？~~\n\n输入：prices = [1,3,7,5,10,3], fee = 3\n输出：6\n相当于：1时买入，10时卖出(10-1-3 = 6)\n并不是：1时买入，7时卖出，5时买入，10时卖出(7-1-3  +  10 - 5 -3 = 5)\nminprice = price[i] - fee  有正利润就假装卖了，先收集利润，- fee 的作用是如果后边的还有利润更高的，则这次其实是不卖的\neg：7时有正利润的先收集起来(7-1-3=3)\n但此时的minPrice = 7-3  = 4， 4是后边的最小的，接下来的利润是10-4-3= 3 \n总利润就是3+3 = 6，而不是像上边计算的5，这个作用就是，看似在7处卖了，实际没卖，最后是在10的位置卖的\n\n# 3 代码\n编译已通过\n```cpp\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices, int fee) {\n        int result = 0;\n        int minPrice = prices[0];\n        for(int i = 1; i < prices.size(); i++){\n            if (prices[i] < minPrice) minPrice = prices[i];\n            if (prices[i] > minPrice && prices[i] - minPrice - fee < 0) continue;\n            if (prices[i] - minPrice - fee > 0){\n                result += prices[i] -minPrice - fee;\n                minPrice = prices[i] - fee; \n            }\n        }\n        return result;\n    }\n};\n```\n\n\n# 4 知识点\n[[continue]]\n\n\n# 5 参考资料\n自用跳转连接：[ob]()， [blog]()\n\n\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/23.买卖股票的最佳时机含手续费.md","raw":"---\ntitle: 23.买卖股票的最佳时机含手续费\ndate: '2022-07-04 17:04'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 贪心算法\ntags:\n  - 贪心算法\nindex_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207041948383.jpg'\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207041948383.jpg'\nabbrlink: 9689\n---\n\n文章简介\n\t力扣题解：714. 买卖股票的最佳时机含手续费\n<!-- more -->\n\n# 1 买卖股票的最佳时机含手续费\n\n[力扣题目链接](https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/)\n\n给定一个整数数组 prices，其中第 i 个元素代表了第 i 天的股票价格 ；非负整数 fee 代表了交易股票的手续费用。\n\n你可以无限次地完成交易，但是你每笔交易都需要付手续费。**如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。**\n\n**返回获得利润的最大值。**\n\n注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。\n>相当于买入和卖出\n\n示例 1: 输入: prices = [1, 3, 2, 8, 4, 9], fee = 2 输出: 8\n\n解释: 能够达到的最大利润: 在此处买入 prices[0] = 1 在此处卖出 prices[3] = 8 在此处买入 prices[4] = 4 在此处卖出 prices[5] = 9 总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8.\n\n注意:\n\n-   0 < prices.length <= 50000.\n-   0 < prices[i] < 50000.\n-   0 <= fee < 50000.\n\n# 2 思路\n## 2.1 [[6. 买卖股票的最佳时机II]]\n![[6. 买卖股票的最佳时机II#2 思路]]\n与 6的区别是多了个手续费\n有了手续费，就要关系什么时候买卖了，因为计算所获得利润，需要考虑买卖利润可能不足以手续费的情况。\n用贪心策略，就是最低值买，最高值（减去手续费还盈利）就卖。\n\n找到两个点\n-   买入日期：其实很好想，遇到更低点就记录一下。\n-   卖出日期：这个就不好算了，但也没有必要算出准确的卖出日期，只要当前价格大于（最低价格+手续费），就可以收获利润，至于准确的卖出日期，就是连续收获利润区间里的最后一天（并不需要计算是具体哪一天）。\n\n做收获利润操作的时候其实有三种情况：\n-   情况一：收获利润的这一天并不是收获利润区间里的最后一天（**不是真正的卖出，相当于持有股票**），所以后面要继续收获利润。\n-   情况二：前一天是收获利润区间里的最后一天（相当于真正的卖出了），今天要重新记录最小价格了。\n-   情况三：不作操作，保持原有状态（买入，卖出，不买不卖）\n### 2.1.1 思路总结\n1. 不断的寻找最低点，在最低点时买入\n2. 寻找有利润的时候买入，更新下一次的买入位置在循环卖出\n3. 对所有利润加和\n\n## 2.2 断点调试\n\n\n[23.买卖股票的最佳时机含手续费](file:///Users/yibeikongqiu/Desktop/ishot视频/贪心算法/23.买卖股票的最佳时机含手续费.mp4)\n\n\n[00:10](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/23.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%E5%90%AB%E6%89%8B%E7%BB%AD%E8%B4%B9.mp4#t=10.471542) 情况三：现在的价格不是最低的，并且卖出的话亏本\n \n[00:28](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/23.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%E5%90%AB%E6%89%8B%E7%BB%AD%E8%B4%B9.mp4#t=28.795416) \n#疑问 #已解决 \n为什么要minPrice = prices[i]- fee呢，如果去掉了- fee 则结果不对\n~~因为在该下标处已经交过了一次手续费，不需要在交了？？？~~\n\n输入：prices = [1,3,7,5,10,3], fee = 3\n输出：6\n相当于：1时买入，10时卖出(10-1-3 = 6)\n并不是：1时买入，7时卖出，5时买入，10时卖出(7-1-3  +  10 - 5 -3 = 5)\nminprice = price[i] - fee  有正利润就假装卖了，先收集利润，- fee 的作用是如果后边的还有利润更高的，则这次其实是不卖的\neg：7时有正利润的先收集起来(7-1-3=3)\n但此时的minPrice = 7-3  = 4， 4是后边的最小的，接下来的利润是10-4-3= 3 \n总利润就是3+3 = 6，而不是像上边计算的5，这个作用就是，看似在7处卖了，实际没卖，最后是在10的位置卖的\n\n# 3 代码\n编译已通过\n```cpp\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices, int fee) {\n        int result = 0;\n        int minPrice = prices[0];\n        for(int i = 1; i < prices.size(); i++){\n            if (prices[i] < minPrice) minPrice = prices[i];\n            if (prices[i] > minPrice && prices[i] - minPrice - fee < 0) continue;\n            if (prices[i] - minPrice - fee > 0){\n                result += prices[i] -minPrice - fee;\n                minPrice = prices[i] - fee; \n            }\n        }\n        return result;\n    }\n};\n```\n\n\n# 4 知识点\n[[continue]]\n\n\n# 5 参考资料\n自用跳转连接：[ob]()， [blog]()\n\n\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/23.买卖股票的最佳时机含手续费","published":1,"updated":"2022-08-04T15:27:06.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fkf00ive0mgbuffh17a","content":"<p>文章简介<br>\n力扣题解：714. 买卖股票的最佳时机含手续费</p>\n<span id=\"more\"></span>\n<h1 id=\"1-买卖股票的最佳时机含手续费\"><a class=\"markdownIt-Anchor\" href=\"#1-买卖股票的最佳时机含手续费\"></a> 1 买卖股票的最佳时机含手续费</h1>\n<p><a href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/\">力扣题目链接</a></p>\n<p>给定一个整数数组&nbsp;prices，其中第&nbsp;i&nbsp;个元素代表了第&nbsp;i&nbsp;天的股票价格 ；非负整数&nbsp;fee 代表了交易股票的手续费用。</p>\n<p>你可以无限次地完成交易，但是你每笔交易都需要付手续费。<strong>如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。</strong></p>\n<p><strong>返回获得利润的最大值。</strong></p>\n<p>注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。</p>\n<blockquote>\n<p>相当于买入和卖出</p>\n</blockquote>\n<p>示例 1: 输入: prices = [1, 3, 2, 8, 4, 9], fee = 2 输出: 8</p>\n<p>解释: 能够达到的最大利润: 在此处买入&nbsp;prices[0] = 1 在此处卖出 prices[3] = 8 在此处买入 prices[4] = 4 在此处卖出 prices[5] = 9 总利润:&nbsp;((8 - 1) - 2) + ((9 - 4) - 2) = 8.</p>\n<p>注意:</p>\n<ul>\n<li>0 &lt; prices.length &lt;= 50000.</li>\n<li>0 &lt; prices[i] &lt; 50000.</li>\n<li>0 &lt;= fee &lt; 50000.</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<h2 id=\"21-6-买卖股票的最佳时机ii\"><a class=\"markdownIt-Anchor\" href=\"#21-6-买卖股票的最佳时机ii\"></a> 2.1 [[6. 买卖股票的最佳时机II]]</h2>\n<p>![[6. 买卖股票的最佳时机II#2 思路]]<br>\n与 6的区别是多了个手续费<br>\n有了手续费，就要关系什么时候买卖了，因为计算所获得利润，需要考虑买卖利润可能不足以手续费的情况。<br>\n用贪心策略，就是最低值买，最高值（减去手续费还盈利）就卖。</p>\n<p>找到两个点</p>\n<ul>\n<li>买入日期：其实很好想，遇到更低点就记录一下。</li>\n<li>卖出日期：这个就不好算了，但也没有必要算出准确的卖出日期，只要当前价格大于（最低价格+手续费），就可以收获利润，至于准确的卖出日期，就是连续收获利润区间里的最后一天（并不需要计算是具体哪一天）。</li>\n</ul>\n<p>做收获利润操作的时候其实有三种情况：</p>\n<ul>\n<li>情况一：收获利润的这一天并不是收获利润区间里的最后一天（<strong>不是真正的卖出，相当于持有股票</strong>），所以后面要继续收获利润。</li>\n<li>情况二：前一天是收获利润区间里的最后一天（相当于真正的卖出了），今天要重新记录最小价格了。</li>\n<li>情况三：不作操作，保持原有状态（买入，卖出，不买不卖）</li>\n</ul>\n<h3 id=\"211-思路总结\"><a class=\"markdownIt-Anchor\" href=\"#211-思路总结\"></a> 2.1.1 思路总结</h3>\n<ol>\n<li>不断的寻找最低点，在最低点时买入</li>\n<li>寻找有利润的时候买入，更新下一次的买入位置在循环卖出</li>\n<li>对所有利润加和</li>\n</ol>\n<h2 id=\"22-断点调试\"><a class=\"markdownIt-Anchor\" href=\"#22-断点调试\"></a> 2.2 断点调试</h2>\n<p>[23.买卖股票的最佳时机含手续费](file:///Users/yibeikongqiu/Desktop/ishot视频/贪心算法/23.买卖股票的最佳时机含手续费.mp4)</p>\n<p>[00:10](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/23.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%E5%90%AB%E6%89%8B%E7%BB%AD%E8%B4%B9.mp4#t=10.471542) 情况三：现在的价格不是最低的，并且卖出的话亏本</p>\n<p>[00:28](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/23.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%E5%90%AB%E6%89%8B%E7%BB%AD%E8%B4%B9.mp4#t=28.795416)<br>\n#疑问 #已解决<br>\n为什么要minPrice = prices[i]- fee呢，如果去掉了- fee 则结果不对<br>\n<s>因为在该下标处已经交过了一次手续费，不需要在交了？？？</s></p>\n<p>输入：prices = [1,3,7,5,10,3], fee = 3<br>\n输出：6<br>\n相当于：1时买入，10时卖出(10-1-3 = 6)<br>\n并不是：1时买入，7时卖出，5时买入，10时卖出(7-1-3  +  10 - 5 -3 = 5)<br>\nminprice = price[i] - fee  有正利润就假装卖了，先收集利润，- fee 的作用是如果后边的还有利润更高的，则这次其实是不卖的<br>\neg：7时有正利润的先收集起来(7-1-3=3)<br>\n但此时的minPrice = 7-3  =&nbsp;4， 4是后边的最小的，接下来的利润是10-4-3= 3<br>\n总利润就是3+3 = 6，而不是像上边计算的5，这个作用就是，看似在7处卖了，实际没卖，最后是在10的位置卖的</p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>编译已通过</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">maxProfit</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; prices, <span class=\"hljs-type\">int</span> fee)</span> </span>{<br>        <span class=\"hljs-type\">int</span> result = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> minPrice = prices[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i =&nbsp;<span class=\"hljs-number\">1</span>; i &lt; prices.<span class=\"hljs-built_in\">size</span>(); i++){<br>            <span class=\"hljs-keyword\">if</span> (prices[i] &lt; minPrice) minPrice = prices[i];<br>            <span class=\"hljs-keyword\">if</span> (prices[i] &gt; minPrice &amp;&amp; prices[i] - minPrice - fee &lt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">continue</span>;<br>            <span class=\"hljs-keyword\">if</span> (prices[i] - minPrice - fee &gt; <span class=\"hljs-number\">0</span>){<br>                result += prices[i] -minPrice - fee;<br>                minPrice = prices[i] - fee; <br>            }<br>        }<br>        <span class=\"hljs-keyword\">return</span> result;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<h1 id=\"4-知识点\"><a class=\"markdownIt-Anchor\" href=\"#4-知识点\"></a> 4 知识点</h1>\n<p>[[continue]]</p>\n<h1 id=\"5-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#5-参考资料\"></a> 5 参考资料</h1>\n<p>自用跳转连接：<a href=\"\">ob</a>， <a href=\"\">blog</a></p>\n","site":{"data":{}},"wordcount":2325,"excerpt":"<p>文章简介<br>\n力扣题解：714. 买卖股票的最佳时机含手续费</p>","more":"<h1 id=\"1-买卖股票的最佳时机含手续费\"><a class=\"markdownIt-Anchor\" href=\"#1-买卖股票的最佳时机含手续费\"></a> 1 买卖股票的最佳时机含手续费</h1>\n<p><a href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/\">力扣题目链接</a></p>\n<p>给定一个整数数组 prices，其中第 i 个元素代表了第 i 天的股票价格 ；非负整数 fee 代表了交易股票的手续费用。</p>\n<p>你可以无限次地完成交易，但是你每笔交易都需要付手续费。<strong>如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。</strong></p>\n<p><strong>返回获得利润的最大值。</strong></p>\n<p>注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。</p>\n<blockquote>\n<p>相当于买入和卖出</p>\n</blockquote>\n<p>示例 1: 输入: prices = [1, 3, 2, 8, 4, 9], fee = 2 输出: 8</p>\n<p>解释: 能够达到的最大利润: 在此处买入 prices[0] = 1 在此处卖出 prices[3] = 8 在此处买入 prices[4] = 4 在此处卖出 prices[5] = 9 总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8.</p>\n<p>注意:</p>\n<ul>\n<li>0 &lt; prices.length &lt;= 50000.</li>\n<li>0 &lt; prices[i] &lt; 50000.</li>\n<li>0 &lt;= fee &lt; 50000.</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<h2 id=\"21-6-买卖股票的最佳时机ii\"><a class=\"markdownIt-Anchor\" href=\"#21-6-买卖股票的最佳时机ii\"></a> 2.1 [[6. 买卖股票的最佳时机II]]</h2>\n<p>![[6. 买卖股票的最佳时机II#2 思路]]<br />\n与 6的区别是多了个手续费<br />\n有了手续费，就要关系什么时候买卖了，因为计算所获得利润，需要考虑买卖利润可能不足以手续费的情况。<br />\n用贪心策略，就是最低值买，最高值（减去手续费还盈利）就卖。</p>\n<p>找到两个点</p>\n<ul>\n<li>买入日期：其实很好想，遇到更低点就记录一下。</li>\n<li>卖出日期：这个就不好算了，但也没有必要算出准确的卖出日期，只要当前价格大于（最低价格+手续费），就可以收获利润，至于准确的卖出日期，就是连续收获利润区间里的最后一天（并不需要计算是具体哪一天）。</li>\n</ul>\n<p>做收获利润操作的时候其实有三种情况：</p>\n<ul>\n<li>情况一：收获利润的这一天并不是收获利润区间里的最后一天（<strong>不是真正的卖出，相当于持有股票</strong>），所以后面要继续收获利润。</li>\n<li>情况二：前一天是收获利润区间里的最后一天（相当于真正的卖出了），今天要重新记录最小价格了。</li>\n<li>情况三：不作操作，保持原有状态（买入，卖出，不买不卖）</li>\n</ul>\n<h3 id=\"211-思路总结\"><a class=\"markdownIt-Anchor\" href=\"#211-思路总结\"></a> 2.1.1 思路总结</h3>\n<ol>\n<li>不断的寻找最低点，在最低点时买入</li>\n<li>寻找有利润的时候买入，更新下一次的买入位置在循环卖出</li>\n<li>对所有利润加和</li>\n</ol>\n<h2 id=\"22-断点调试\"><a class=\"markdownIt-Anchor\" href=\"#22-断点调试\"></a> 2.2 断点调试</h2>\n<p>[23.买卖股票的最佳时机含手续费](file:///Users/yibeikongqiu/Desktop/ishot视频/贪心算法/23.买卖股票的最佳时机含手续费.mp4)</p>\n<p>[00:10](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/23.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%E5%90%AB%E6%89%8B%E7%BB%AD%E8%B4%B9.mp4#t=10.471542) 情况三：现在的价格不是最低的，并且卖出的话亏本</p>\n<p>[00:28](file:///Users/yibeikongqiu/Desktop/ishot%E8%A7%86%E9%A2%91/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/23.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%E5%90%AB%E6%89%8B%E7%BB%AD%E8%B4%B9.mp4#t=28.795416)<br />\n#疑问 #已解决<br />\n为什么要minPrice = prices[i]- fee呢，如果去掉了- fee 则结果不对<br />\n<s>因为在该下标处已经交过了一次手续费，不需要在交了？？？</s></p>\n<p>输入：prices = [1,3,7,5,10,3], fee = 3<br />\n输出：6<br />\n相当于：1时买入，10时卖出(10-1-3 = 6)<br />\n并不是：1时买入，7时卖出，5时买入，10时卖出(7-1-3  +  10 - 5 -3 = 5)<br />\nminprice = price[i] - fee  有正利润就假装卖了，先收集利润，- fee 的作用是如果后边的还有利润更高的，则这次其实是不卖的<br />\neg：7时有正利润的先收集起来(7-1-3=3)<br />\n但此时的minPrice = 7-3  = 4， 4是后边的最小的，接下来的利润是10-4-3= 3<br />\n总利润就是3+3 = 6，而不是像上边计算的5，这个作用就是，看似在7处卖了，实际没卖，最后是在10的位置卖的</p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>编译已通过</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">maxProfit</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; prices, <span class=\"hljs-type\">int</span> fee)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> result = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> minPrice = prices[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; prices.<span class=\"hljs-built_in\">size</span>(); i++)&#123;<br>            <span class=\"hljs-keyword\">if</span> (prices[i] &lt; minPrice) minPrice = prices[i];<br>            <span class=\"hljs-keyword\">if</span> (prices[i] &gt; minPrice &amp;&amp; prices[i] - minPrice - fee &lt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">continue</span>;<br>            <span class=\"hljs-keyword\">if</span> (prices[i] - minPrice - fee &gt; <span class=\"hljs-number\">0</span>)&#123;<br>                result += prices[i] -minPrice - fee;<br>                minPrice = prices[i] - fee; <br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h1 id=\"4-知识点\"><a class=\"markdownIt-Anchor\" href=\"#4-知识点\"></a> 4 知识点</h1>\n<p>[[continue]]</p>\n<h1 id=\"5-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#5-参考资料\"></a> 5 参考资料</h1>\n<p>自用跳转连接：<a href=\"\">ob</a>， <a href=\"\">blog</a></p>"},{"title":"24.监控二叉树","date":"2022-07-05T06:12:00.000Z","index_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207041948383.jpg","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207041948383.jpg","abbrlink":43575,"_content":"\n文章简介：968.监控二叉树\n<!-- more -->\n\n# 1 968.监控二叉树\n\n[力扣题目链接](https://leetcode.cn/problems/binary-tree-cameras/)\n\n给定一个二叉树，我们在树的节点上安装摄像头。\n\n节点上的每个摄影头都可以监视其父对象、自身及其直接子对象。\n\n计算监控树的所有节点所需的最小摄像头数量。\n\n示例 1：\n\n![](https://img-blog.csdnimg.cn/20201229175736596.png)\n\n-   输入：[0,0,null,0,0]\n-   输出：1\n-   解释：如图所示，一台摄像头足以监控所有节点。\n\n示例 2：\n\n![](https://img-blog.csdnimg.cn/2020122917584449.png)\n\n-   输入：[0,0,null,0,null,0,null,null,0]\n-   输出：2\n-   解释：需要至少两个摄像头来监视树的所有节点。 上图显示了摄像头放置的有效位置之一。\n\n提示：\n\n-   给定树的节点数的范围是 [1, 1000]。\n-   **每个节点的值都是 0**。\n\n# 2 思路\n摄像头放在叶子节点的父节点位置，才能充分利用摄像头的覆盖面积。\n\n为什么不从头结点开始看起呢，为啥要从叶子节点看呢\n?\n因为头结点放不放摄像头也就省下一个摄像头， 叶子节点放不放摄像头省下了的摄像头数量是指数阶别的。\n**局部最优：让叶子节点的父节点安摄像头，所用摄像头最少，\n整体最优：全部摄像头数量所用最少！**\n\n大体思路就是：从低到上，先给叶子节点父节点放个摄像头，然后隔两个节点放一个摄像头，直至到二叉树头结点\n\n每个节点可能有几种状态：\n有如下三种：\n\n-   该节点无覆盖\n-   本节点有摄像头\n-   本节点有覆盖\n\n我们分别有三个数字来表示：\n\n-   0：该节点无覆盖\n-   1：本节点有摄像头\n-   2：本节点有覆盖\n\n\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207051425661.png)\n\n\n# 3 参考资料\n[代码随想录](https://www.programmercarl.com/0968.%E7%9B%91%E6%8E%A7%E4%BA%8C%E5%8F%89%E6%A0%91.html#%E6%80%9D%E8%B7%AF)\n自用跳转连接：🈚️\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/24.监控二叉树.md","raw":"---\ntitle: 24.监控二叉树\ndate: '2022-07-05 14:12'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 贪心算法\nindex_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207041948383.jpg'\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207041948383.jpg'\ntags: 贪心算法\nabbrlink: 43575\n---\n\n文章简介：968.监控二叉树\n<!-- more -->\n\n# 1 968.监控二叉树\n\n[力扣题目链接](https://leetcode.cn/problems/binary-tree-cameras/)\n\n给定一个二叉树，我们在树的节点上安装摄像头。\n\n节点上的每个摄影头都可以监视其父对象、自身及其直接子对象。\n\n计算监控树的所有节点所需的最小摄像头数量。\n\n示例 1：\n\n![](https://img-blog.csdnimg.cn/20201229175736596.png)\n\n-   输入：[0,0,null,0,0]\n-   输出：1\n-   解释：如图所示，一台摄像头足以监控所有节点。\n\n示例 2：\n\n![](https://img-blog.csdnimg.cn/2020122917584449.png)\n\n-   输入：[0,0,null,0,null,0,null,null,0]\n-   输出：2\n-   解释：需要至少两个摄像头来监视树的所有节点。 上图显示了摄像头放置的有效位置之一。\n\n提示：\n\n-   给定树的节点数的范围是 [1, 1000]。\n-   **每个节点的值都是 0**。\n\n# 2 思路\n摄像头放在叶子节点的父节点位置，才能充分利用摄像头的覆盖面积。\n\n为什么不从头结点开始看起呢，为啥要从叶子节点看呢\n?\n因为头结点放不放摄像头也就省下一个摄像头， 叶子节点放不放摄像头省下了的摄像头数量是指数阶别的。\n**局部最优：让叶子节点的父节点安摄像头，所用摄像头最少，\n整体最优：全部摄像头数量所用最少！**\n\n大体思路就是：从低到上，先给叶子节点父节点放个摄像头，然后隔两个节点放一个摄像头，直至到二叉树头结点\n\n每个节点可能有几种状态：\n有如下三种：\n\n-   该节点无覆盖\n-   本节点有摄像头\n-   本节点有覆盖\n\n我们分别有三个数字来表示：\n\n-   0：该节点无覆盖\n-   1：本节点有摄像头\n-   2：本节点有覆盖\n\n\n![](https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207051425661.png)\n\n\n# 3 参考资料\n[代码随想录](https://www.programmercarl.com/0968.%E7%9B%91%E6%8E%A7%E4%BA%8C%E5%8F%89%E6%A0%91.html#%E6%80%9D%E8%B7%AF)\n自用跳转连接：🈚️\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/24.监控二叉树","published":1,"updated":"2022-07-12T09:02:14.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fkf00iwe0mgcdoh23xs","content":"<p>文章简介：968.监控二叉树</p>\n<span id=\"more\"></span>\n<h1 id=\"1-968监控二叉树\"><a class=\"markdownIt-Anchor\" href=\"#1-968监控二叉树\"></a> 1 968.监控二叉树</h1>\n<p><a href=\"https://leetcode.cn/problems/binary-tree-cameras/\">力扣题目链接</a></p>\n<p>给定一个二叉树，我们在树的节点上安装摄像头。</p>\n<p>节点上的每个摄影头都可以监视其父对象、自身及其直接子对象。</p>\n<p>计算监控树的所有节点所需的最小摄像头数量。</p>\n<p>示例 1：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201229175736596.png\" alt=\"\"></p>\n<ul>\n<li>输入：[0,0,null,0,0]</li>\n<li>输出：1</li>\n<li>解释：如图所示，一台摄像头足以监控所有节点。</li>\n</ul>\n<p>示例 2：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2020122917584449.png\" alt=\"\"></p>\n<ul>\n<li>输入：[0,0,null,0,null,0,null,null,0]</li>\n<li>输出：2</li>\n<li>解释：需要至少两个摄像头来监视树的所有节点。 上图显示了摄像头放置的有效位置之一。</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>给定树的节点数的范围是 [1, 1000]。</li>\n<li><strong>每个节点的值都是 0</strong>。</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>摄像头放在叶子节点的父节点位置，才能充分利用摄像头的覆盖面积。</p>\n<p>为什么不从头结点开始看起呢，为啥要从叶子节点看呢<br>\n?<br>\n因为头结点放不放摄像头也就省下一个摄像头， 叶子节点放不放摄像头省下了的摄像头数量是指数阶别的。<br>\n<strong>局部最优：让叶子节点的父节点安摄像头，所用摄像头最少，<br>\n整体最优：全部摄像头数量所用最少！</strong></p>\n<p>大体思路就是：从低到上，先给叶子节点父节点放个摄像头，然后隔两个节点放一个摄像头，直至到二叉树头结点</p>\n<p>每个节点可能有几种状态：<br>\n有如下三种：</p>\n<ul>\n<li>该节点无覆盖</li>\n<li>本节点有摄像头</li>\n<li>本节点有覆盖</li>\n</ul>\n<p>我们分别有三个数字来表示：</p>\n<ul>\n<li>0：该节点无覆盖</li>\n<li>1：本节点有摄像头</li>\n<li>2：本节点有覆盖</li>\n</ul>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207051425661.png\" alt=\"\"></p>\n<h1 id=\"3-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#3-参考资料\"></a> 3 参考资料</h1>\n<p><a href=\"https://www.programmercarl.com/0968.%E7%9B%91%E6%8E%A7%E4%BA%8C%E5%8F%89%E6%A0%91.html#%E6%80%9D%E8%B7%AF\">代码随想录</a><br>\n自用跳转连接：🈚️</p>\n","site":{"data":{}},"wordcount":559,"excerpt":"<p>文章简介：968.监控二叉树</p>","more":"<h1 id=\"1-968监控二叉树\"><a class=\"markdownIt-Anchor\" href=\"#1-968监控二叉树\"></a> 1 968.监控二叉树</h1>\n<p><a href=\"https://leetcode.cn/problems/binary-tree-cameras/\">力扣题目链接</a></p>\n<p>给定一个二叉树，我们在树的节点上安装摄像头。</p>\n<p>节点上的每个摄影头都可以监视其父对象、自身及其直接子对象。</p>\n<p>计算监控树的所有节点所需的最小摄像头数量。</p>\n<p>示例 1：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201229175736596.png\" alt=\"\" /></p>\n<ul>\n<li>输入：[0,0,null,0,0]</li>\n<li>输出：1</li>\n<li>解释：如图所示，一台摄像头足以监控所有节点。</li>\n</ul>\n<p>示例 2：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2020122917584449.png\" alt=\"\" /></p>\n<ul>\n<li>输入：[0,0,null,0,null,0,null,null,0]</li>\n<li>输出：2</li>\n<li>解释：需要至少两个摄像头来监视树的所有节点。 上图显示了摄像头放置的有效位置之一。</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>给定树的节点数的范围是 [1, 1000]。</li>\n<li><strong>每个节点的值都是 0</strong>。</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>摄像头放在叶子节点的父节点位置，才能充分利用摄像头的覆盖面积。</p>\n<p>为什么不从头结点开始看起呢，为啥要从叶子节点看呢<br />\n?<br />\n因为头结点放不放摄像头也就省下一个摄像头， 叶子节点放不放摄像头省下了的摄像头数量是指数阶别的。<br />\n<strong>局部最优：让叶子节点的父节点安摄像头，所用摄像头最少，<br />\n整体最优：全部摄像头数量所用最少！</strong></p>\n<p>大体思路就是：从低到上，先给叶子节点父节点放个摄像头，然后隔两个节点放一个摄像头，直至到二叉树头结点</p>\n<p>每个节点可能有几种状态：<br />\n有如下三种：</p>\n<ul>\n<li>该节点无覆盖</li>\n<li>本节点有摄像头</li>\n<li>本节点有覆盖</li>\n</ul>\n<p>我们分别有三个数字来表示：</p>\n<ul>\n<li>0：该节点无覆盖</li>\n<li>1：本节点有摄像头</li>\n<li>2：本节点有覆盖</li>\n</ul>\n<p><img src=\"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207051425661.png\" alt=\"\" /></p>\n<h1 id=\"3-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#3-参考资料\"></a> 3 参考资料</h1>\n<p><a href=\"https://www.programmercarl.com/0968.%E7%9B%91%E6%8E%A7%E4%BA%8C%E5%8F%89%E6%A0%91.html#%E6%80%9D%E8%B7%AF\">代码随想录</a><br />\n自用跳转连接：🈚️</p>"},{"title":"3.摆动序列","published":1,"hideInList":false,"isTop":false,"abbrlink":74,"date":"2022-05-28T08:57:45.000Z","feature":null,"_content":"# 1 摆动序列\n\n[力扣题目链接](https://leetcode-cn.com/problems/wiggle-subsequence/)\n\n如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。\n\n例如， [1,7,4,9,2,5] 是一个摆动序列，因为差值 (6,-3,5,-7,3) 是正负交替出现的。相反, [1,4,7,2,5] 和 [1,7,4,5,5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。\n\n给定一个整数序列，返回作为摆动序列的最长子序列的长度。 通过从原始序列中删除一些（也可以不删除）元素来获得子序列，剩下的元素保持其原始顺序。\n\n示例 1:\n\n-   输入: [1,7,4,9,2,5]\n-   输出: 6\n-   解释: 整个序列均为摆动序列。\n\n示例 2:\n\n-   输入: [1,17,5,10,13,15,10,5,16,8]\n-   输出: 7\n-   解释: 这个序列包含几个长度为 7 摆动序列，其中一个可为[1,17,10,13,10,16,8]。\n\n示例 3:\n\n-   输入: [1,2,3,4,5,6,7,8,9]\n-   输出: 2\n>后一个数减前一个数的值，正负交替\n\n\n# 2 思路\n![](https://s1.vika.cn/space/2022/05/28/1af591dff4b846a3999e21e948dd6e70)\n\n局部最优：变成没有坡度的峰\n整体最优：尽可能有最多的**没有坡度的峰**\n\n最左面和最右面的峰值不好统计\n可以针对序列[2,5]，可以假设为[2,2,5]，这样它就有坡度了即preDiff = 0\n\n\n定义变量：\n左坡度：preDiff >= 0 或者preDiff <= 0也行，(等于0是最左面的情况)\n右坡度：curDiff < 0 或者cur >0,\nresult：统计百度序列的个数\n>反正左坡度和右坡度需要异号，并且左坡度可以 = 0；\n>![](https://s1.vika.cn/space/2022/05/28/f1551bf99b894ba08967e7dd87387603)\n\nresult初始为1（默认最右面有一个峰值），此时curDiff > 0 && preDiff <= 0，那么result++（计算了左面的峰值），最后得到的result就是2（峰值个数为2即摆动序列长度为2）\n>问：这样话直接把result初始为2不行吗？\n>\t答：要用到前一对和后一对的差值。只有有两个数就可以有这两个差值，所以nums.size() <= 1 即可返回\n\n\n\n\n\n编译已通过\n```cpp\nclass Solution {\npublic:\n    int wiggleMaxLength(vector<int>& nums) {\n        if( nums.size() <= 1 ) return nums.size();// 长度不超过1\n        int left = 0;\n        int right = 0;\n        int result = 1;\n\n        for (int i = 1; i < nums.size() ; i++){ // 这样写更好\n            right = nums[i] - nums[i-1];\n            if (right > 0 && left <= 0 || right < 0 && left >= 0){ // 两边要异号啊\n                result++;\n                left = right;\n            }\n        }\n        return result;\n\n    }\n};\n```\n\n\n\n**贪心的题目说简单有的时候就是常识，说难就难在都不知道该怎么用贪心**。\n有什么方法想到贪心→多做","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/3.摆动序列.md","raw":"---\ntitle: 3.摆动序列\ntags:\n  - 代码随想录\n  - 贪心算法\npublished: true\nhideInList: false\nisTop: false\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 贪心算法\nabbrlink: 74\ndate: 2022-05-28 16:57:45\nfeature:\n---\n# 1 摆动序列\n\n[力扣题目链接](https://leetcode-cn.com/problems/wiggle-subsequence/)\n\n如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。\n\n例如， [1,7,4,9,2,5] 是一个摆动序列，因为差值 (6,-3,5,-7,3) 是正负交替出现的。相反, [1,4,7,2,5] 和 [1,7,4,5,5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。\n\n给定一个整数序列，返回作为摆动序列的最长子序列的长度。 通过从原始序列中删除一些（也可以不删除）元素来获得子序列，剩下的元素保持其原始顺序。\n\n示例 1:\n\n-   输入: [1,7,4,9,2,5]\n-   输出: 6\n-   解释: 整个序列均为摆动序列。\n\n示例 2:\n\n-   输入: [1,17,5,10,13,15,10,5,16,8]\n-   输出: 7\n-   解释: 这个序列包含几个长度为 7 摆动序列，其中一个可为[1,17,10,13,10,16,8]。\n\n示例 3:\n\n-   输入: [1,2,3,4,5,6,7,8,9]\n-   输出: 2\n>后一个数减前一个数的值，正负交替\n\n\n# 2 思路\n![](https://s1.vika.cn/space/2022/05/28/1af591dff4b846a3999e21e948dd6e70)\n\n局部最优：变成没有坡度的峰\n整体最优：尽可能有最多的**没有坡度的峰**\n\n最左面和最右面的峰值不好统计\n可以针对序列[2,5]，可以假设为[2,2,5]，这样它就有坡度了即preDiff = 0\n\n\n定义变量：\n左坡度：preDiff >= 0 或者preDiff <= 0也行，(等于0是最左面的情况)\n右坡度：curDiff < 0 或者cur >0,\nresult：统计百度序列的个数\n>反正左坡度和右坡度需要异号，并且左坡度可以 = 0；\n>![](https://s1.vika.cn/space/2022/05/28/f1551bf99b894ba08967e7dd87387603)\n\nresult初始为1（默认最右面有一个峰值），此时curDiff > 0 && preDiff <= 0，那么result++（计算了左面的峰值），最后得到的result就是2（峰值个数为2即摆动序列长度为2）\n>问：这样话直接把result初始为2不行吗？\n>\t答：要用到前一对和后一对的差值。只有有两个数就可以有这两个差值，所以nums.size() <= 1 即可返回\n\n\n\n\n\n编译已通过\n```cpp\nclass Solution {\npublic:\n    int wiggleMaxLength(vector<int>& nums) {\n        if( nums.size() <= 1 ) return nums.size();// 长度不超过1\n        int left = 0;\n        int right = 0;\n        int result = 1;\n\n        for (int i = 1; i < nums.size() ; i++){ // 这样写更好\n            right = nums[i] - nums[i-1];\n            if (right > 0 && left <= 0 || right < 0 && left >= 0){ // 两边要异号啊\n                result++;\n                left = right;\n            }\n        }\n        return result;\n\n    }\n};\n```\n\n\n\n**贪心的题目说简单有的时候就是常识，说难就难在都不知道该怎么用贪心**。\n有什么方法想到贪心→多做","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/3.摆动序列","updated":"2022-07-12T09:02:14.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fkf00iye0mg090n8sxy","content":"<h1 id=\"1-摆动序列\"><a class=\"markdownIt-Anchor\" href=\"#1-摆动序列\"></a> 1 摆动序列</h1>\n<p><a href=\"https://leetcode-cn.com/problems/wiggle-subsequence/\">力扣题目链接</a></p>\n<p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。</p>\n<p>例如，&nbsp;[1,7,4,9,2,5] 是一个摆动序列，因为差值 (6,-3,5,-7,3)&nbsp;是正负交替出现的。相反, [1,4,7,2,5]&nbsp;和&nbsp;[1,7,4,5,5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。</p>\n<p>给定一个整数序列，返回作为摆动序列的最长子序列的长度。 通过从原始序列中删除一些（也可以不删除）元素来获得子序列，剩下的元素保持其原始顺序。</p>\n<p>示例 1:</p>\n<ul>\n<li>输入: [1,7,4,9,2,5]</li>\n<li>输出: 6</li>\n<li>解释: 整个序列均为摆动序列。</li>\n</ul>\n<p>示例 2:</p>\n<ul>\n<li>输入: [1,17,5,10,13,15,10,5,16,8]</li>\n<li>输出: 7</li>\n<li>解释: 这个序列包含几个长度为 7 摆动序列，其中一个可为[1,17,10,13,10,16,8]。</li>\n</ul>\n<p>示例 3:</p>\n<ul>\n<li>输入: [1,2,3,4,5,6,7,8,9]</li>\n<li>输出: 2</li>\n</ul>\n<blockquote>\n<p>后一个数减前一个数的值，正负交替</p>\n</blockquote>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p><img src=\"https://s1.vika.cn/space/2022/05/28/1af591dff4b846a3999e21e948dd6e70\" alt=\"\"></p>\n<p>局部最优：变成没有坡度的峰<br>\n整体最优：尽可能有最多的<strong>没有坡度的峰</strong></p>\n<p>最左面和最右面的峰值不好统计<br>\n可以针对序列[2,5]，可以假设为[2,2,5]，这样它就有坡度了即preDiff = 0</p>\n<p>定义变量：<br>\n左坡度：preDiff &gt;= 0 或者preDiff &lt;= 0也行，(等于0是最左面的情况)<br>\n右坡度：curDiff &lt; 0 或者cur &gt;0,<br>\nresult：统计百度序列的个数</p>\n<blockquote>\n<p>反正左坡度和右坡度需要异号，并且左坡度可以 = 0；<br>\n<img src=\"https://s1.vika.cn/space/2022/05/28/f1551bf99b894ba08967e7dd87387603\" alt=\"\"></p>\n</blockquote>\n<p>result初始为1（默认最右面有一个峰值），此时curDiff &gt; 0 &amp;&amp; preDiff &lt;= 0，那么result++（计算了左面的峰值），最后得到的result就是2（峰值个数为2即摆动序列长度为2）</p>\n<blockquote>\n<p>问：这样话直接把result初始为2不行吗？<br>\n答：要用到前一对和后一对的差值。只有有两个数就可以有这两个差值，所以nums.size() &lt;= 1 即可返回</p>\n</blockquote>\n<p>编译已通过</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">wiggleMaxLength</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums)</span> </span>{<br>        <span class=\"hljs-keyword\">if</span>( nums.<span class=\"hljs-built_in\">size</span>() &lt;= <span class=\"hljs-number\">1</span> ) <span class=\"hljs-keyword\">return</span> nums.<span class=\"hljs-built_in\">size</span>();<span class=\"hljs-comment\">// 长度不超过1</span><br>        <span class=\"hljs-type\">int</span> left = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> right =&nbsp;<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> result = <span class=\"hljs-number\">1</span>;<br><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>() ; i++){ <span class=\"hljs-comment\">// 这样写更好</span><br>            right =&nbsp;nums[i] - nums[i<span class=\"hljs-number\">-1</span>];<br>            <span class=\"hljs-keyword\">if</span> (right &gt; <span class=\"hljs-number\">0</span> &amp;&amp; left &lt;= <span class=\"hljs-number\">0</span> || right &lt; <span class=\"hljs-number\">0</span> &amp;&amp; left &gt;= <span class=\"hljs-number\">0</span>){ <span class=\"hljs-comment\">// 两边要异号啊</span><br>                result++;<br>                left = right;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">return</span> result;<br><br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<p><strong>贪心的题目说简单有的时候就是常识，说难就难在都不知道该怎么用贪心</strong>。<br>\n有什么方法想到贪心→多做</p>\n","site":{"data":{}},"wordcount":1288,"excerpt":"","more":"<h1 id=\"1-摆动序列\"><a class=\"markdownIt-Anchor\" href=\"#1-摆动序列\"></a> 1 摆动序列</h1>\n<p><a href=\"https://leetcode-cn.com/problems/wiggle-subsequence/\">力扣题目链接</a></p>\n<p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。</p>\n<p>例如， [1,7,4,9,2,5] 是一个摆动序列，因为差值 (6,-3,5,-7,3) 是正负交替出现的。相反, [1,4,7,2,5] 和 [1,7,4,5,5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。</p>\n<p>给定一个整数序列，返回作为摆动序列的最长子序列的长度。 通过从原始序列中删除一些（也可以不删除）元素来获得子序列，剩下的元素保持其原始顺序。</p>\n<p>示例 1:</p>\n<ul>\n<li>输入: [1,7,4,9,2,5]</li>\n<li>输出: 6</li>\n<li>解释: 整个序列均为摆动序列。</li>\n</ul>\n<p>示例 2:</p>\n<ul>\n<li>输入: [1,17,5,10,13,15,10,5,16,8]</li>\n<li>输出: 7</li>\n<li>解释: 这个序列包含几个长度为 7 摆动序列，其中一个可为[1,17,10,13,10,16,8]。</li>\n</ul>\n<p>示例 3:</p>\n<ul>\n<li>输入: [1,2,3,4,5,6,7,8,9]</li>\n<li>输出: 2</li>\n</ul>\n<blockquote>\n<p>后一个数减前一个数的值，正负交替</p>\n</blockquote>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p><img src=\"https://s1.vika.cn/space/2022/05/28/1af591dff4b846a3999e21e948dd6e70\" alt=\"\" /></p>\n<p>局部最优：变成没有坡度的峰<br />\n整体最优：尽可能有最多的<strong>没有坡度的峰</strong></p>\n<p>最左面和最右面的峰值不好统计<br />\n可以针对序列[2,5]，可以假设为[2,2,5]，这样它就有坡度了即preDiff = 0</p>\n<p>定义变量：<br />\n左坡度：preDiff &gt;= 0 或者preDiff &lt;= 0也行，(等于0是最左面的情况)<br />\n右坡度：curDiff &lt; 0 或者cur &gt;0,<br />\nresult：统计百度序列的个数</p>\n<blockquote>\n<p>反正左坡度和右坡度需要异号，并且左坡度可以 = 0；<br />\n<img src=\"https://s1.vika.cn/space/2022/05/28/f1551bf99b894ba08967e7dd87387603\" alt=\"\" /></p>\n</blockquote>\n<p>result初始为1（默认最右面有一个峰值），此时curDiff &gt; 0 &amp;&amp; preDiff &lt;= 0，那么result++（计算了左面的峰值），最后得到的result就是2（峰值个数为2即摆动序列长度为2）</p>\n<blockquote>\n<p>问：这样话直接把result初始为2不行吗？<br />\n答：要用到前一对和后一对的差值。只有有两个数就可以有这两个差值，所以nums.size() &lt;= 1 即可返回</p>\n</blockquote>\n<p>编译已通过</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">wiggleMaxLength</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span>( nums.<span class=\"hljs-built_in\">size</span>() &lt;= <span class=\"hljs-number\">1</span> ) <span class=\"hljs-keyword\">return</span> nums.<span class=\"hljs-built_in\">size</span>();<span class=\"hljs-comment\">// 长度不超过1</span><br>        <span class=\"hljs-type\">int</span> left = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> right = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> result = <span class=\"hljs-number\">1</span>;<br><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>() ; i++)&#123; <span class=\"hljs-comment\">// 这样写更好</span><br>            right = nums[i] - nums[i<span class=\"hljs-number\">-1</span>];<br>            <span class=\"hljs-keyword\">if</span> (right &gt; <span class=\"hljs-number\">0</span> &amp;&amp; left &lt;= <span class=\"hljs-number\">0</span> || right &lt; <span class=\"hljs-number\">0</span> &amp;&amp; left &gt;= <span class=\"hljs-number\">0</span>)&#123; <span class=\"hljs-comment\">// 两边要异号啊</span><br>                result++;<br>                left = right;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> result;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p><strong>贪心的题目说简单有的时候就是常识，说难就难在都不知道该怎么用贪心</strong>。<br />\n有什么方法想到贪心→多做</p>\n"},{"title":"6. 买卖股票的最佳时机II","date":"2022-05-30T02:19:00.000Z","index_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207032058950.jpg","banner_img":"https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207032058950.jpg","abbrlink":38547,"_content":"\n文章简介\n\t力扣题解：\n<!-- more -->\n\n\n\n\n\n# 1 122.买卖股票的最佳时机II\n\n[力扣题目链接](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/)\n\n给定一个数组，它的第 i 个元素是一支**给定股票**第 i 天的价格。\n\n设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。\n\n注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。\n\n示例 1:\n\n-   输入: [7,1,5,3,6,4]\n-   输出: 7\n-   解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4。随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。\n\n示例 2:\n\n-   输入: [1,2,3,4,5]\n-   输出: 4\n-   解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。\n\n示例 3:\n\n-   输入: [7,6,4,3,1]\n-   输出: 0\n-   解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。\n\n提示：\n\n-   1 <= prices.length <= 3 * 10 ^ 4\n-   0 <= prices[i] <= 10 ^ 4\n\n# 2 思路\n\n**最终利润是可以分解的**，**把利润分解为每天为单位的维度**\n假如第0天买入，第3天卖出，那么利润为：prices[3] - prices[0]。\n相当于(prices[3] - prices[2]) + (prices[2] - prices[1]) + (prices[1] - prices[0])。 \n\n**把整体利润拆为每天的利润**\n每天的利润序列：(prices[i] - prices[i - 1])+.....+(prices[1] - prices[0])\n![122.买卖股票的最佳时机II|650](https://img-blog.csdnimg.cn/2020112917480858.png)\n第一天没利润，利润表比股票价格表少一位 \n\n局部最优：求得每天的正利润， \n\n全局最优：求和每天的正利润 \n\n\n\n\n# 3 代码\n[[for 循环]]\n\n编译已通过 \n```cpp\n\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        int result = 0;\n        for (int i = 0; i != prices.size(); i++){\n            result += max(prices[i+1] - prices[i],0);\n        }\n        return result;\n    }\n};\n```\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/6. 买卖股票的最佳时机II.md","raw":"---\ntitle: 6. 买卖股票的最佳时机II\ndate: '2022-05-30 10:19'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 贪心算法\ntags:\n  - 贪心算法\nindex_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207032058950.jpg'\nbanner_img: 'https://hexoblogzeefan.oss-cn-guangzhou.aliyuncs.com/img/202207032058950.jpg'\nabbrlink: 38547\n---\n\n文章简介\n\t力扣题解：\n<!-- more -->\n\n\n\n\n\n# 1 122.买卖股票的最佳时机II\n\n[力扣题目链接](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/)\n\n给定一个数组，它的第 i 个元素是一支**给定股票**第 i 天的价格。\n\n设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。\n\n注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。\n\n示例 1:\n\n-   输入: [7,1,5,3,6,4]\n-   输出: 7\n-   解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4。随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。\n\n示例 2:\n\n-   输入: [1,2,3,4,5]\n-   输出: 4\n-   解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。\n\n示例 3:\n\n-   输入: [7,6,4,3,1]\n-   输出: 0\n-   解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。\n\n提示：\n\n-   1 <= prices.length <= 3 * 10 ^ 4\n-   0 <= prices[i] <= 10 ^ 4\n\n# 2 思路\n\n**最终利润是可以分解的**，**把利润分解为每天为单位的维度**\n假如第0天买入，第3天卖出，那么利润为：prices[3] - prices[0]。\n相当于(prices[3] - prices[2]) + (prices[2] - prices[1]) + (prices[1] - prices[0])。 \n\n**把整体利润拆为每天的利润**\n每天的利润序列：(prices[i] - prices[i - 1])+.....+(prices[1] - prices[0])\n![122.买卖股票的最佳时机II|650](https://img-blog.csdnimg.cn/2020112917480858.png)\n第一天没利润，利润表比股票价格表少一位 \n\n局部最优：求得每天的正利润， \n\n全局最优：求和每天的正利润 \n\n\n\n\n# 3 代码\n[[for 循环]]\n\n编译已通过 \n```cpp\n\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        int result = 0;\n        for (int i = 0; i != prices.size(); i++){\n            result += max(prices[i+1] - prices[i],0);\n        }\n        return result;\n    }\n};\n```\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/6. 买卖股票的最佳时机II","published":1,"updated":"2022-07-12T09:02:14.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fkf00j0e0mg61g6bmnk","content":"<p>文章简介<br>\n力扣题解：</p>\n<span id=\"more\"></span>\n<h1 id=\"1-122买卖股票的最佳时机ii\"><a class=\"markdownIt-Anchor\" href=\"#1-122买卖股票的最佳时机ii\"></a> 1 122.买卖股票的最佳时机II</h1>\n<p><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/\">力扣题目链接</a></p>\n<p>给定一个数组，它的第&nbsp;i 个元素是一支<strong>给定股票</strong>第 i 天的价格。</p>\n<p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p>\n<p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>\n<p>示例 1:</p>\n<ul>\n<li>输入: [7,1,5,3,6,4]</li>\n<li>输出: 7</li>\n<li>解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4。随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</li>\n</ul>\n<p>示例 2:</p>\n<ul>\n<li>输入: [1,2,3,4,5]</li>\n<li>输出: 4</li>\n<li>解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</li>\n</ul>\n<p>示例&nbsp;3:</p>\n<ul>\n<li>输入: [7,6,4,3,1]</li>\n<li>输出: 0</li>\n<li>解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= prices.length &lt;= 3 * 10 ^ 4</li>\n<li>0 &lt;= prices[i] &lt;= 10 ^ 4</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p><strong>最终利润是可以分解的</strong>，<strong>把利润分解为每天为单位的维度</strong><br>\n假如第0天买入，第3天卖出，那么利润为：prices[3] - prices[0]。<br>\n相当于(prices[3] - prices[2]) + (prices[2] - prices[1]) + (prices[1] - prices[0])。</p>\n<p><strong>把整体利润拆为每天的利润</strong><br>\n每天的利润序列：(prices[i] - prices[i - 1])+…+(prices[1] - prices[0])<br>\n<img src=\"https://img-blog.csdnimg.cn/2020112917480858.png\" alt=\"122.买卖股票的最佳时机II|650\"><br>\n第一天没利润，利润表比股票价格表少一位</p>\n<p>局部最优：求得每天的正利润，</p>\n<p>全局最优：求和每天的正利润</p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>[[for 循环]]</p>\n<p>编译已通过</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">maxProfit</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; prices)</span> </span>{<br>        <span class=\"hljs-type\">int</span> result = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i != prices.<span class=\"hljs-built_in\">size</span>(); i++){<br>            result += <span class=\"hljs-built_in\">max</span>(prices[i+<span class=\"hljs-number\">1</span>] - prices[i],<span class=\"hljs-number\">0</span>);<br>        }<br>        <span class=\"hljs-keyword\">return</span> result;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n","site":{"data":{}},"wordcount":993,"excerpt":"<p>文章简介<br>\n力扣题解：</p>","more":"<h1 id=\"1-122买卖股票的最佳时机ii\"><a class=\"markdownIt-Anchor\" href=\"#1-122买卖股票的最佳时机ii\"></a> 1 122.买卖股票的最佳时机II</h1>\n<p><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/\">力扣题目链接</a></p>\n<p>给定一个数组，它的第 i 个元素是一支<strong>给定股票</strong>第 i 天的价格。</p>\n<p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p>\n<p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>\n<p>示例 1:</p>\n<ul>\n<li>输入: [7,1,5,3,6,4]</li>\n<li>输出: 7</li>\n<li>解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4。随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</li>\n</ul>\n<p>示例 2:</p>\n<ul>\n<li>输入: [1,2,3,4,5]</li>\n<li>输出: 4</li>\n<li>解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</li>\n</ul>\n<p>示例 3:</p>\n<ul>\n<li>输入: [7,6,4,3,1]</li>\n<li>输出: 0</li>\n<li>解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= prices.length &lt;= 3 * 10 ^ 4</li>\n<li>0 &lt;= prices[i] &lt;= 10 ^ 4</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p><strong>最终利润是可以分解的</strong>，<strong>把利润分解为每天为单位的维度</strong><br />\n假如第0天买入，第3天卖出，那么利润为：prices[3] - prices[0]。<br />\n相当于(prices[3] - prices[2]) + (prices[2] - prices[1]) + (prices[1] - prices[0])。</p>\n<p><strong>把整体利润拆为每天的利润</strong><br />\n每天的利润序列：(prices[i] - prices[i - 1])+…+(prices[1] - prices[0])<br />\n<img src=\"https://img-blog.csdnimg.cn/2020112917480858.png\" alt=\"122.买卖股票的最佳时机II|650\" /><br />\n第一天没利润，利润表比股票价格表少一位</p>\n<p>局部最优：求得每天的正利润，</p>\n<p>全局最优：求和每天的正利润</p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>[[for 循环]]</p>\n<p>编译已通过</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">maxProfit</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; prices)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> result = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i != prices.<span class=\"hljs-built_in\">size</span>(); i++)&#123;<br>            result += <span class=\"hljs-built_in\">max</span>(prices[i+<span class=\"hljs-number\">1</span>] - prices[i],<span class=\"hljs-number\">0</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>"},{"cards-deck":"source::_posts::👨🏻‍💻code::数据结构与算法::代码随想录::数组::数组理论基础.md","title":"1. 数组理论基础","date":"2022-08-08T01:18:00.000Z","abbrlink":52749,"_content":"# 1 一维数组\n**数组是存放在连续内存空间上的相同类型数据的集合。**\n数组可以方便的通过下标索引的方式获取到下标下对应的数据。\n![算法通关数组](https://code-thinking.cdn.bcebos.com/pics/%E7%AE%97%E6%B3%95%E9%80%9A%E5%85%B3%E6%95%B0%E7%BB%84.png)\n\n-   ==**数组下标都是从0开始的。**==\n-   ==**数组内存空间的地址是连续的**, **数组的元素是不能删的，只能覆盖。**==\n\n正是**因为数组的在内存空间的地址是连续的，所以我们在删除或者增添元素的时候，就难免要移动其他元素的地址。**\n进行删除操作,后边的数据整体移动到了前边\n![算法通关数组1|700](https://code-thinking.cdn.bcebos.com/pics/%E7%AE%97%E6%B3%95%E9%80%9A%E5%85%B3%E6%95%B0%E7%BB%841.png)\n\n而且大家如果使用C++的话，要注意vector 和 array(数组)的区别，vector的底层实现是array，严格来讲vector是容器，不是数组。[^1]\n\n\n\n# 2 二维数组\n## 2.1 C++\n**C++中二维数组是连续分布**的。\n\n我们来做一个实验，C++测试代码如下：\n\n```c++\nvoid test_arr() {\n    int array[2][3] = {\n\t\t{0, 1, 2},\n\t\t{3, 4, 5}\n    };\n    cout << &array[0][0] << \" \" << &array[0][1] << \" \" << &array[0][2] << endl;\n    cout << &array[1][0] << \" \" << &array[1][1] << \" \" << &array[1][2] << endl;\n}\n\nint main() {\n    test_arr();\n}\n\n```\n测试地址为\n```c\n0x7ffee4065820 0x7ffee4065824 0x7ffee4065828\n0x7ffee406582c 0x7ffee4065830 0x7ffee4065834\n```\n注意地址为16进制[^2]，可以看出二维数组地址是连续一条线的。\n\n\n![[数组理论基础 2022-08-08 10.31.06.excalidraw]]\n\n\n## 2.2 java\n像Java是没有指针的，同时也不对程序员暴露其元素的地址，寻址操作完全交给虚拟机。\n\n所以看不到每个元素的地址情况，这里我以Java为例，也做一个实验。\n\n```java\npublic static void test_arr() {\n    int[][] arr = {{1, 2, 3}, {3, 4, 5}, {6, 7, 8}, {9,9,9}};\n    System.out.println(arr[0]);\n    System.out.println(arr[1]);\n    System.out.println(arr[2]);\n    System.out.println(arr[3]);\n}\n```\n\n输出的地址为：\n\n```java\n[I@7852e922\n[I@4e25154f\n[I@70dea4e\n[I@5c647e05\n```\n\n这里的数值也是16进制，这不是真正的地址，而是经过处理过后的数值了，我们也可以看出，二维数组的每一行头结点的地址是没有规则的，更谈不上连续。\n\n所以Java的二维数组可能是如下排列的方式：\n\n![算法通关数组3|600](https://img-blog.csdnimg.cn/20201214111631844.png)\n\n这里面试中数组相关的理论知识就介绍完了。\n\n---\n**参考资料**\n[代码随想录](https://www.programmercarl.com/%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80)\n[^1]: [[vector]]\n[^2]:  [[进制转换]]","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/数组/1. 数组理论基础.md","raw":"---\ncards-deck: \"source::_posts::\\U0001F468\\U0001F3FB‍\\U0001F4BBcode::数据结构与算法::代码随想录::数组::数组理论基础.md\"\ntitle: 1. 数组理论基础\ndate: '2022-08-08 09:18'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 数组\nabbrlink: 52749\ntags: 数组\n---\n# 1 一维数组\n**数组是存放在连续内存空间上的相同类型数据的集合。**\n数组可以方便的通过下标索引的方式获取到下标下对应的数据。\n![算法通关数组](https://code-thinking.cdn.bcebos.com/pics/%E7%AE%97%E6%B3%95%E9%80%9A%E5%85%B3%E6%95%B0%E7%BB%84.png)\n\n-   ==**数组下标都是从0开始的。**==\n-   ==**数组内存空间的地址是连续的**, **数组的元素是不能删的，只能覆盖。**==\n\n正是**因为数组的在内存空间的地址是连续的，所以我们在删除或者增添元素的时候，就难免要移动其他元素的地址。**\n进行删除操作,后边的数据整体移动到了前边\n![算法通关数组1|700](https://code-thinking.cdn.bcebos.com/pics/%E7%AE%97%E6%B3%95%E9%80%9A%E5%85%B3%E6%95%B0%E7%BB%841.png)\n\n而且大家如果使用C++的话，要注意vector 和 array(数组)的区别，vector的底层实现是array，严格来讲vector是容器，不是数组。[^1]\n\n\n\n# 2 二维数组\n## 2.1 C++\n**C++中二维数组是连续分布**的。\n\n我们来做一个实验，C++测试代码如下：\n\n```c++\nvoid test_arr() {\n    int array[2][3] = {\n\t\t{0, 1, 2},\n\t\t{3, 4, 5}\n    };\n    cout << &array[0][0] << \" \" << &array[0][1] << \" \" << &array[0][2] << endl;\n    cout << &array[1][0] << \" \" << &array[1][1] << \" \" << &array[1][2] << endl;\n}\n\nint main() {\n    test_arr();\n}\n\n```\n测试地址为\n```c\n0x7ffee4065820 0x7ffee4065824 0x7ffee4065828\n0x7ffee406582c 0x7ffee4065830 0x7ffee4065834\n```\n注意地址为16进制[^2]，可以看出二维数组地址是连续一条线的。\n\n\n![[数组理论基础 2022-08-08 10.31.06.excalidraw]]\n\n\n## 2.2 java\n像Java是没有指针的，同时也不对程序员暴露其元素的地址，寻址操作完全交给虚拟机。\n\n所以看不到每个元素的地址情况，这里我以Java为例，也做一个实验。\n\n```java\npublic static void test_arr() {\n    int[][] arr = {{1, 2, 3}, {3, 4, 5}, {6, 7, 8}, {9,9,9}};\n    System.out.println(arr[0]);\n    System.out.println(arr[1]);\n    System.out.println(arr[2]);\n    System.out.println(arr[3]);\n}\n```\n\n输出的地址为：\n\n```java\n[I@7852e922\n[I@4e25154f\n[I@70dea4e\n[I@5c647e05\n```\n\n这里的数值也是16进制，这不是真正的地址，而是经过处理过后的数值了，我们也可以看出，二维数组的每一行头结点的地址是没有规则的，更谈不上连续。\n\n所以Java的二维数组可能是如下排列的方式：\n\n![算法通关数组3|600](https://img-blog.csdnimg.cn/20201214111631844.png)\n\n这里面试中数组相关的理论知识就介绍完了。\n\n---\n**参考资料**\n[代码随想录](https://www.programmercarl.com/%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80)\n[^1]: [[vector]]\n[^2]:  [[进制转换]]","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/数组/1. 数组理论基础","published":1,"updated":"2022-08-08T07:53:14.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fkg00j3e0mgb75shcl7","content":"<h1 id=\"1-一维数组\"><a class=\"markdownIt-Anchor\" href=\"#1-一维数组\"></a> 1 一维数组</h1>\n<p><strong>数组是存放在连续内存空间上的相同类型数据的集合。</strong><br>\n数组可以方便的通过下标索引的方式获取到下标下对应的数据。<br>\n<img src=\"https://code-thinking.cdn.bcebos.com/pics/%E7%AE%97%E6%B3%95%E9%80%9A%E5%85%B3%E6%95%B0%E7%BB%84.png\" alt=\"算法通关数组\"></p>\n<ul>\n<li><mark><strong>数组下标都是从0开始的。</strong></mark></li>\n<li><mark><strong>数组内存空间的地址是连续的</strong>, <strong>数组的元素是不能删的，只能覆盖。</strong></mark></li>\n</ul>\n<p>正是<strong>因为数组的在内存空间的地址是连续的，所以我们在删除或者增添元素的时候，就难免要移动其他元素的地址。</strong><br>\n进行删除操作,后边的数据整体移动到了前边<br>\n<img src=\"https://code-thinking.cdn.bcebos.com/pics/%E7%AE%97%E6%B3%95%E9%80%9A%E5%85%B3%E6%95%B0%E7%BB%841.png\" alt=\"算法通关数组1|700\"></p>\n<p>而且大家如果使用C++的话，要注意vector 和 array(数组)的区别，vector的底层实现是array，严格来讲vector是容器，不是数组。<sup id=\"fnref:1\" class=\"footnote-ref\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"[[vector]]\n\">[1]</span></a></sup></p>\n<h1 id=\"2-二维数组\"><a class=\"markdownIt-Anchor\" href=\"#2-二维数组\"></a> 2 二维数组</h1>\n<h2 id=\"21-c\"><a class=\"markdownIt-Anchor\" href=\"#21-c\"></a> 2.1 C++</h2>\n<p><strong>C++中二维数组是连续分布</strong>的。</p>\n<p>我们来做一个实验，C++测试代码如下：</p>\n<figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_arr</span><span class=\"hljs-params\">()</span> </span>{<br>    <span class=\"hljs-type\">int</span> array[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">3</span>] = {<br>\t\t{<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>},<br>\t\t{<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>}<br>    };<br>    cout &lt;&lt; &amp;array[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] &lt;&lt; <span class=\"hljs-string\">\" \"</span> &lt;&lt; &amp;array[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] &lt;&lt; <span class=\"hljs-string\">\" \"</span> &lt;&lt; &amp;array[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">2</span>] &lt;&lt; endl;<br>    cout &lt;&lt; &amp;array[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>] &lt;&lt; <span class=\"hljs-string\">\" \"</span> &lt;&lt; &amp;array[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] &lt;&lt; <span class=\"hljs-string\">\" \"</span> &lt;&lt; &amp;array[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>] &lt;&lt; endl;<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{<br>    <span class=\"hljs-built_in\">test_arr</span>();<br>}<br><br></code></pre></td></tr></tbody></table></figure>\n<p>测试地址为</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-number\">0x7ffee4065820</span> <span class=\"hljs-number\">0x7ffee4065824</span> <span class=\"hljs-number\">0x7ffee4065828</span><br><span class=\"hljs-number\">0x7ffee406582c</span> <span class=\"hljs-number\">0x7ffee4065830</span> <span class=\"hljs-number\">0x7ffee4065834</span><br></code></pre></td></tr></tbody></table></figure>\n<p>注意地址为16进制<sup id=\"fnref:2\" class=\"footnote-ref\"><a href=\"#fn:2\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"[[进制转换]]\n\">[2]</span></a></sup>，可以看出二维数组地址是连续一条线的。</p>\n<p>![[数组理论基础 2022-08-08 10.31.06.excalidraw]]</p>\n<h2 id=\"22-java\"><a class=\"markdownIt-Anchor\" href=\"#22-java\"></a> 2.2 java</h2>\n<p>像Java是没有指针的，同时也不对程序员暴露其元素的地址，寻址操作完全交给虚拟机。</p>\n<p>所以看不到每个元素的地址情况，这里我以Java为例，也做一个实验。</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test_arr</span><span class=\"hljs-params\">()</span> {<br>    <span class=\"hljs-type\">int</span>[][] arr = {{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>}, {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>}, {<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>}, {<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">9</span>}};<br>    System.out.println(arr[<span class=\"hljs-number\">0</span>]);<br>    System.out.println(arr[<span class=\"hljs-number\">1</span>]);<br>    System.out.println(arr[<span class=\"hljs-number\">2</span>]);<br>    System.out.println(arr[<span class=\"hljs-number\">3</span>]);<br>}<br></code></pre></td></tr></tbody></table></figure>\n<p>输出的地址为：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">[I@<span class=\"hljs-number\">7852e922</span><br>[I@<span class=\"hljs-number\">4e25154f</span><br>[I@70dea4e<br>[I@5c647e05<br></code></pre></td></tr></tbody></table></figure>\n<p>这里的数值也是16进制，这不是真正的地址，而是经过处理过后的数值了，我们也可以看出，二维数组的每一行头结点的地址是没有规则的，更谈不上连续。</p>\n<p>所以Java的二维数组可能是如下排列的方式：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201214111631844.png\" alt=\"算法通关数组3|600\"></p>\n<p>这里面试中数组相关的理论知识就介绍完了。</p>\n<hr>\n<p><strong>参考资料</strong><br>\n<a href=\"https://www.programmercarl.com/%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80\">代码随想录</a></p>\n<section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span>[[vector]]\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li><li><span id=\"fn:2\" class=\"footnote-text\"><span>[[进制转换]]\n<a href=\"#fnref:2\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>","site":{"data":{}},"wordcount":1374,"excerpt":"","more":"<h1 id=\"1-一维数组\"><a class=\"markdownIt-Anchor\" href=\"#1-一维数组\"></a> 1 一维数组</h1>\n<p><strong>数组是存放在连续内存空间上的相同类型数据的集合。</strong><br />\n数组可以方便的通过下标索引的方式获取到下标下对应的数据。<br />\n<img src=\"https://code-thinking.cdn.bcebos.com/pics/%E7%AE%97%E6%B3%95%E9%80%9A%E5%85%B3%E6%95%B0%E7%BB%84.png\" alt=\"算法通关数组\" /></p>\n<ul>\n<li><mark><strong>数组下标都是从0开始的。</strong></mark></li>\n<li><mark><strong>数组内存空间的地址是连续的</strong>, <strong>数组的元素是不能删的，只能覆盖。</strong></mark></li>\n</ul>\n<p>正是<strong>因为数组的在内存空间的地址是连续的，所以我们在删除或者增添元素的时候，就难免要移动其他元素的地址。</strong><br />\n进行删除操作,后边的数据整体移动到了前边<br />\n<img src=\"https://code-thinking.cdn.bcebos.com/pics/%E7%AE%97%E6%B3%95%E9%80%9A%E5%85%B3%E6%95%B0%E7%BB%841.png\" alt=\"算法通关数组1|700\" /></p>\n<p>而且大家如果使用C++的话，要注意vector 和 array(数组)的区别，vector的底层实现是array，严格来讲vector是容器，不是数组。<sup id=\"fnref:1\" class=\"footnote-ref\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"[[vector]]\n\">[1]</span></a></sup></p>\n<h1 id=\"2-二维数组\"><a class=\"markdownIt-Anchor\" href=\"#2-二维数组\"></a> 2 二维数组</h1>\n<h2 id=\"21-c\"><a class=\"markdownIt-Anchor\" href=\"#21-c\"></a> 2.1 C++</h2>\n<p><strong>C++中二维数组是连续分布</strong>的。</p>\n<p>我们来做一个实验，C++测试代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_arr</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-type\">int</span> array[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">3</span>] = &#123;<br>\t\t&#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>&#125;,<br>\t\t&#123;<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>&#125;<br>    &#125;;<br>    cout &lt;&lt; &amp;array[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; &amp;array[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; &amp;array[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">2</span>] &lt;&lt; endl;<br>    cout &lt;&lt; &amp;array[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; &amp;array[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; &amp;array[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>] &lt;&lt; endl;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-built_in\">test_arr</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>测试地址为</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-number\">0x7ffee4065820</span> <span class=\"hljs-number\">0x7ffee4065824</span> <span class=\"hljs-number\">0x7ffee4065828</span><br><span class=\"hljs-number\">0x7ffee406582c</span> <span class=\"hljs-number\">0x7ffee4065830</span> <span class=\"hljs-number\">0x7ffee4065834</span><br></code></pre></td></tr></table></figure>\n<p>注意地址为16进制<sup id=\"fnref:2\" class=\"footnote-ref\"><a href=\"#fn:2\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"[[进制转换]]\n\">[2]</span></a></sup>，可以看出二维数组地址是连续一条线的。</p>\n<p>![[数组理论基础 2022-08-08 10.31.06.excalidraw]]</p>\n<h2 id=\"22-java\"><a class=\"markdownIt-Anchor\" href=\"#22-java\"></a> 2.2 java</h2>\n<p>像Java是没有指针的，同时也不对程序员暴露其元素的地址，寻址操作完全交给虚拟机。</p>\n<p>所以看不到每个元素的地址情况，这里我以Java为例，也做一个实验。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test_arr</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">int</span>[][] arr = &#123;&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>&#125;, &#123;<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>&#125;, &#123;<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>&#125;, &#123;<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">9</span>&#125;&#125;;<br>    System.out.println(arr[<span class=\"hljs-number\">0</span>]);<br>    System.out.println(arr[<span class=\"hljs-number\">1</span>]);<br>    System.out.println(arr[<span class=\"hljs-number\">2</span>]);<br>    System.out.println(arr[<span class=\"hljs-number\">3</span>]);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>输出的地址为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">[I@<span class=\"hljs-number\">7852e922</span><br>[I@<span class=\"hljs-number\">4e25154f</span><br>[I@70dea4e<br>[I@5c647e05<br></code></pre></td></tr></table></figure>\n<p>这里的数值也是16进制，这不是真正的地址，而是经过处理过后的数值了，我们也可以看出，二维数组的每一行头结点的地址是没有规则的，更谈不上连续。</p>\n<p>所以Java的二维数组可能是如下排列的方式：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201214111631844.png\" alt=\"算法通关数组3|600\" /></p>\n<p>这里面试中数组相关的理论知识就介绍完了。</p>\n<hr />\n<p><strong>参考资料</strong><br />\n<a href=\"https://www.programmercarl.com/%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80\">代码随想录</a></p>\n<section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span>[[vector]]\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li><li><span id=\"fn:2\" class=\"footnote-text\"><span>[[进制转换]]\n<a href=\"#fnref:2\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>"},{"cards-deck":"source::_posts::👨🏻‍💻code::数据结构与算法::代码随想录::数组::二分查找.md","title":"2. 二分查找","date":"2022-08-08T02:52:00.000Z","abbrlink":42878,"_content":"\n# 1 704二分查找\n\n[力扣题目链接](https://leetcode.cn/problems/binary-search/)\n\n给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。\n\n示例 1:\n\n```\n输入: nums = [-1,0,3,5,9,12], target = 9     \n输出: 4       \n解释: 9 出现在 nums 中并且下标为 4     \n```\n示例 2:\n```\n输入: nums = [-1,0,3,5,9,12], target = 2     \n输出: -1        \n解释: 2 不存在 nums 中因此返回 -1        \n```\n\n提示：\n\n-   你可以假设 nums 中的所有元素是不重复的。\n-   n 将在 [1, 10000]之间。\n-   nums 的每个元素都将在 [-9999, 9999]之间。\n\n# 2 思路\n\n二分法使用的前提\n1. 有序数组\n\t1. 能够循环在左右区间内查找\n2. 无重复的元素\n\t1. 有重复的元素返回的下标不唯 1, \n\n区间的定义决定了二分法的代码怎么写, \n**记住一个原则更新区间端点的时候要保持同步,** \n- 左闭右闭要一直保持左闭右闭\n- 左闭右开要一直保持左闭右开\n\n## 2.1 数组为左闭右闭区间: [a, ..... ,g]\n\n也就是target 在一个[left, right]数组中,left 可能等于 right\n\n![[二分查找 2022-08-08 12.08.05.excalidraw|1500]]\n\n\n**定义target在[left, right]区间，所以有如下两点：**\n\n-   while (left <= right) 要使用 <= ，因为left == right是有意义的，所以使用 <=\n-   if (nums[middle] > target) ,right 赋值middle - 1，因为当前这个nums[middle]一定不是target(已经大于了,当然不是) ，那么接下来要查找的左区间结束下标位置就是 middle - 1\n\n\n\n## 2.2 数组为左闭右开\ntarget 是在一个在左闭右开的区间里，也就是[left, right) ，那么二分法的边界处理方式则截然不同。\n\n有如下两点：\n- while (left < right)，这里使用 < ,因为left == right在区间[left, right)是没有意义的\n\n- if (nums[middle] > target) right 更新为 middle，因为是左闭右开区间,target 取不到 middle ,最多取到 middle 前一个值 ,因为 [left, middle)\n\n\n# 3 代码\n\n左闭右闭编译已通过,💡表示出错的地方\n```c++\nclass Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0;\n        int right = nums.size()-1;\n\n        while (left <= right){\n            int middle =  left + (right - left)/2; //💡 middle 要不断的更新所以要放到里边去\n            if (target < nums[middle]) { // 在左区间里,更新右边界\n            right = middle -1;\n            }\n            else if (target > nums[middle]){ // 在右区间里更新,更新左边界\n            left = middle +1;\n            }\n            else return middle;// 💡返回下标值,前边要加 else 不然直接返回 middle 了\n        }\n        return -1;\n\n    }\n};\n```\n\n左闭右开的无法填入示例\n\n```c++\n// 整体区间要一直保持左闭右开\nclass Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0;\n        int right = nums.size()-1;\n\n        while (left <= right){\n            int middle =  left + (right - left)/2; //💡 middle 要不断的更新所以要放到里边去\n            if (target < nums[middle]) { // 在左区间里,更新右边界\n            right = middle; // 保持右开\n            }\n            else if (target > nums[middle]){ // 在右区间里更新,更新左边界\n            left = middle +1; //保持左闭\n            }\n            else return middle;// 💡返回下标值,前边要加 else 不然直接返回 middle 了\n        }\n        return -1;\n\n    }\n};\n```\n\n\n\n---\n **参考资料**\n[代码随想录](https://www.programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html#_704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/数组/2.  二分查找.md","raw":"---\ncards-deck: \"source::_posts::\\U0001F468\\U0001F3FB‍\\U0001F4BBcode::数据结构与算法::代码随想录::数组::二分查找.md\"\ntitle: 2. 二分查找\ndate: '2022-08-08 10:52'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 数组\nabbrlink: 42878\ntags: 数组\n---\n\n# 1 704二分查找\n\n[力扣题目链接](https://leetcode.cn/problems/binary-search/)\n\n给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。\n\n示例 1:\n\n```\n输入: nums = [-1,0,3,5,9,12], target = 9     \n输出: 4       \n解释: 9 出现在 nums 中并且下标为 4     \n```\n示例 2:\n```\n输入: nums = [-1,0,3,5,9,12], target = 2     \n输出: -1        \n解释: 2 不存在 nums 中因此返回 -1        \n```\n\n提示：\n\n-   你可以假设 nums 中的所有元素是不重复的。\n-   n 将在 [1, 10000]之间。\n-   nums 的每个元素都将在 [-9999, 9999]之间。\n\n# 2 思路\n\n二分法使用的前提\n1. 有序数组\n\t1. 能够循环在左右区间内查找\n2. 无重复的元素\n\t1. 有重复的元素返回的下标不唯 1, \n\n区间的定义决定了二分法的代码怎么写, \n**记住一个原则更新区间端点的时候要保持同步,** \n- 左闭右闭要一直保持左闭右闭\n- 左闭右开要一直保持左闭右开\n\n## 2.1 数组为左闭右闭区间: [a, ..... ,g]\n\n也就是target 在一个[left, right]数组中,left 可能等于 right\n\n![[二分查找 2022-08-08 12.08.05.excalidraw|1500]]\n\n\n**定义target在[left, right]区间，所以有如下两点：**\n\n-   while (left <= right) 要使用 <= ，因为left == right是有意义的，所以使用 <=\n-   if (nums[middle] > target) ,right 赋值middle - 1，因为当前这个nums[middle]一定不是target(已经大于了,当然不是) ，那么接下来要查找的左区间结束下标位置就是 middle - 1\n\n\n\n## 2.2 数组为左闭右开\ntarget 是在一个在左闭右开的区间里，也就是[left, right) ，那么二分法的边界处理方式则截然不同。\n\n有如下两点：\n- while (left < right)，这里使用 < ,因为left == right在区间[left, right)是没有意义的\n\n- if (nums[middle] > target) right 更新为 middle，因为是左闭右开区间,target 取不到 middle ,最多取到 middle 前一个值 ,因为 [left, middle)\n\n\n# 3 代码\n\n左闭右闭编译已通过,💡表示出错的地方\n```c++\nclass Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0;\n        int right = nums.size()-1;\n\n        while (left <= right){\n            int middle =  left + (right - left)/2; //💡 middle 要不断的更新所以要放到里边去\n            if (target < nums[middle]) { // 在左区间里,更新右边界\n            right = middle -1;\n            }\n            else if (target > nums[middle]){ // 在右区间里更新,更新左边界\n            left = middle +1;\n            }\n            else return middle;// 💡返回下标值,前边要加 else 不然直接返回 middle 了\n        }\n        return -1;\n\n    }\n};\n```\n\n左闭右开的无法填入示例\n\n```c++\n// 整体区间要一直保持左闭右开\nclass Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0;\n        int right = nums.size()-1;\n\n        while (left <= right){\n            int middle =  left + (right - left)/2; //💡 middle 要不断的更新所以要放到里边去\n            if (target < nums[middle]) { // 在左区间里,更新右边界\n            right = middle; // 保持右开\n            }\n            else if (target > nums[middle]){ // 在右区间里更新,更新左边界\n            left = middle +1; //保持左闭\n            }\n            else return middle;// 💡返回下标值,前边要加 else 不然直接返回 middle 了\n        }\n        return -1;\n\n    }\n};\n```\n\n\n\n---\n **参考资料**\n[代码随想录](https://www.programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html#_704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/数组/2.  二分查找","published":1,"updated":"2022-08-08T07:53:04.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fkg00j6e0mg7igz3lmt","content":"<h1 id=\"1-704二分查找\"><a class=\"markdownIt-Anchor\" href=\"#1-704二分查找\"></a> 1 704二分查找</h1>\n<p><a href=\"https://leetcode.cn/problems/binary-search/\">力扣题目链接</a></p>\n<p>给定一个&nbsp;n&nbsp;个元素有序的（升序）整型数组&nbsp;nums 和一个目标值&nbsp;target &nbsp;，写一个函数搜索&nbsp;nums&nbsp;中的 target，如果目标值存在返回下标，否则返回 -1。</p>\n<p>示例 1:</p>\n<figure class=\"highlight tap\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">输入: nums = [-1,0,3,5,9,12], target =<span class=\"hljs-number\"> 9 </span>    <br>输出:<span class=\"hljs-number\"> 4 </span>      <br>解释:<span class=\"hljs-number\"> 9 </span>出现在 nums 中并且下标为<span class=\"hljs-number\"> 4 </span>    <br></code></pre></td></tr></tbody></table></figure>\n<p>示例&nbsp;2:</p>\n<figure class=\"highlight makefile\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-section\">输入: nums = [-1,0,3,5,9,12], target = 2     </span><br><span class=\"hljs-section\">输出: -1        </span><br><span class=\"hljs-section\">解释: 2 不存在 nums 中因此返回 -1        </span><br></code></pre></td></tr></tbody></table></figure>\n<p>提示：</p>\n<ul>\n<li>你可以假设 nums&nbsp;中的所有元素是不重复的。</li>\n<li>n&nbsp;将在&nbsp;[1, 10000]之间。</li>\n<li>nums&nbsp;的每个元素都将在&nbsp;[-9999, 9999]之间。</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>二分法使用的前提</p>\n<ol>\n<li>有序数组\n<ol>\n<li>能够循环在左右区间内查找</li>\n</ol>\n</li>\n<li>无重复的元素\n<ol>\n<li>有重复的元素返回的下标不唯 1,</li>\n</ol>\n</li>\n</ol>\n<p>区间的定义决定了二分法的代码怎么写,<br>\n<strong>记住一个原则更新区间端点的时候要保持同步,</strong></p>\n<ul>\n<li>左闭右闭要一直保持左闭右闭</li>\n<li>左闭右开要一直保持左闭右开</li>\n</ul>\n<h2 id=\"21-数组为左闭右闭区间-a-g\"><a class=\"markdownIt-Anchor\" href=\"#21-数组为左闭右闭区间-a-g\"></a> 2.1 数组为左闭右闭区间: [a, … ,g]</h2>\n<p>也就是target 在一个[left, right]数组中,left 可能等于 right</p>\n<p>![[二分查找 2022-08-08 12.08.05.excalidraw|1500]]</p>\n<p><strong>定义target在[left, right]区间，所以有如下两点：</strong></p>\n<ul>\n<li>while (left &lt;= right) 要使用 &lt;= ，因为left == right是有意义的，所以使用 &lt;=</li>\n<li>if (nums[middle] &gt; target) ,right 赋值middle - 1，因为当前这个nums[middle]一定不是target(已经大于了,当然不是) ，那么接下来要查找的左区间结束下标位置就是 middle - 1</li>\n</ul>\n<h2 id=\"22-数组为左闭右开\"><a class=\"markdownIt-Anchor\" href=\"#22-数组为左闭右开\"></a> 2.2 数组为左闭右开</h2>\n<p>target 是在一个在左闭右开的区间里，也就是[left, right) ，那么二分法的边界处理方式则截然不同。</p>\n<p>有如下两点：</p>\n<ul>\n<li>\n<p>while (left &lt; right)，这里使用 &lt; ,因为left == right在区间[left, right)是没有意义的</p>\n</li>\n<li>\n<p>if (nums[middle] &gt; target) right 更新为 middle，因为是左闭右开区间,target 取不到 middle ,最多取到 middle 前一个值 ,因为 [left, middle)</p>\n</li>\n</ul>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>左闭右闭编译已通过,💡表示出错的地方</p>\n<figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">search</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums, <span class=\"hljs-type\">int</span> target)</span> </span>{<br>        <span class=\"hljs-type\">int</span> left = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> right = nums.<span class=\"hljs-built_in\">size</span>()<span class=\"hljs-number\">-1</span>;<br><br>        <span class=\"hljs-keyword\">while</span> (left &lt;= right){<br>            <span class=\"hljs-type\">int</span> middle =  left + (right - left)/<span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">//💡 middle 要不断的更新所以要放到里边去</span><br>            <span class=\"hljs-keyword\">if</span> (target &lt; nums[middle]) { <span class=\"hljs-comment\">// 在左区间里,更新右边界</span><br>            right = middle <span class=\"hljs-number\">-1</span>;<br>            }<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (target &gt; nums[middle]){ <span class=\"hljs-comment\">// 在右区间里更新,更新左边界</span><br>            left = middle +<span class=\"hljs-number\">1</span>;<br>            }<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> middle;<span class=\"hljs-comment\">// 💡返回下标值,前边要加 else 不然直接返回 middle 了</span><br>        }<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br><br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<p>左闭右开的无法填入示例</p>\n<figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">// 整体区间要一直保持左闭右开</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">search</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums, <span class=\"hljs-type\">int</span> target)</span> </span>{<br>        <span class=\"hljs-type\">int</span> left = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> right = nums.<span class=\"hljs-built_in\">size</span>()<span class=\"hljs-number\">-1</span>;<br><br>        <span class=\"hljs-keyword\">while</span> (left &lt;= right){<br>            <span class=\"hljs-type\">int</span> middle =  left + (right - left)/<span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">//💡 middle 要不断的更新所以要放到里边去</span><br>            <span class=\"hljs-keyword\">if</span> (target &lt; nums[middle]) { <span class=\"hljs-comment\">// 在左区间里,更新右边界</span><br>            right = middle; <span class=\"hljs-comment\">// 保持右开</span><br>            }<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (target &gt; nums[middle]){ <span class=\"hljs-comment\">// 在右区间里更新,更新左边界</span><br>            left = middle +<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">//保持左闭</span><br>            }<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> middle;<span class=\"hljs-comment\">// 💡返回下标值,前边要加 else 不然直接返回 middle 了</span><br>        }<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br><br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<hr>\n<p><strong>参考资料</strong><br>\n<a href=\"https://www.programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html#_704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE\">代码随想录</a></p>\n","site":{"data":{}},"wordcount":1871,"excerpt":"","more":"<h1 id=\"1-704二分查找\"><a class=\"markdownIt-Anchor\" href=\"#1-704二分查找\"></a> 1 704二分查找</h1>\n<p><a href=\"https://leetcode.cn/problems/binary-search/\">力扣题目链接</a></p>\n<p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p>\n<p>示例 1:</p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">输入: nums = [-1,0,3,5,9,12], target =<span class=\"hljs-number\"> 9 </span>    <br>输出:<span class=\"hljs-number\"> 4 </span>      <br>解释:<span class=\"hljs-number\"> 9 </span>出现在 nums 中并且下标为<span class=\"hljs-number\"> 4 </span>    <br></code></pre></td></tr></table></figure>\n<p>示例 2:</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-section\">输入: nums = [-1,0,3,5,9,12], target = 2     </span><br><span class=\"hljs-section\">输出: -1        </span><br><span class=\"hljs-section\">解释: 2 不存在 nums 中因此返回 -1        </span><br></code></pre></td></tr></table></figure>\n<p>提示：</p>\n<ul>\n<li>你可以假设 nums 中的所有元素是不重复的。</li>\n<li>n 将在 [1, 10000]之间。</li>\n<li>nums 的每个元素都将在 [-9999, 9999]之间。</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>二分法使用的前提</p>\n<ol>\n<li>有序数组\n<ol>\n<li>能够循环在左右区间内查找</li>\n</ol>\n</li>\n<li>无重复的元素\n<ol>\n<li>有重复的元素返回的下标不唯 1,</li>\n</ol>\n</li>\n</ol>\n<p>区间的定义决定了二分法的代码怎么写,<br />\n<strong>记住一个原则更新区间端点的时候要保持同步,</strong></p>\n<ul>\n<li>左闭右闭要一直保持左闭右闭</li>\n<li>左闭右开要一直保持左闭右开</li>\n</ul>\n<h2 id=\"21-数组为左闭右闭区间-a-g\"><a class=\"markdownIt-Anchor\" href=\"#21-数组为左闭右闭区间-a-g\"></a> 2.1 数组为左闭右闭区间: [a, … ,g]</h2>\n<p>也就是target 在一个[left, right]数组中,left 可能等于 right</p>\n<p>![[二分查找 2022-08-08 12.08.05.excalidraw|1500]]</p>\n<p><strong>定义target在[left, right]区间，所以有如下两点：</strong></p>\n<ul>\n<li>while (left &lt;= right) 要使用 &lt;= ，因为left == right是有意义的，所以使用 &lt;=</li>\n<li>if (nums[middle] &gt; target) ,right 赋值middle - 1，因为当前这个nums[middle]一定不是target(已经大于了,当然不是) ，那么接下来要查找的左区间结束下标位置就是 middle - 1</li>\n</ul>\n<h2 id=\"22-数组为左闭右开\"><a class=\"markdownIt-Anchor\" href=\"#22-数组为左闭右开\"></a> 2.2 数组为左闭右开</h2>\n<p>target 是在一个在左闭右开的区间里，也就是[left, right) ，那么二分法的边界处理方式则截然不同。</p>\n<p>有如下两点：</p>\n<ul>\n<li>\n<p>while (left &lt; right)，这里使用 &lt; ,因为left == right在区间[left, right)是没有意义的</p>\n</li>\n<li>\n<p>if (nums[middle] &gt; target) right 更新为 middle，因为是左闭右开区间,target 取不到 middle ,最多取到 middle 前一个值 ,因为 [left, middle)</p>\n</li>\n</ul>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>左闭右闭编译已通过,💡表示出错的地方</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">search</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums, <span class=\"hljs-type\">int</span> target)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> left = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> right = nums.<span class=\"hljs-built_in\">size</span>()<span class=\"hljs-number\">-1</span>;<br><br>        <span class=\"hljs-keyword\">while</span> (left &lt;= right)&#123;<br>            <span class=\"hljs-type\">int</span> middle =  left + (right - left)/<span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">//💡 middle 要不断的更新所以要放到里边去</span><br>            <span class=\"hljs-keyword\">if</span> (target &lt; nums[middle]) &#123; <span class=\"hljs-comment\">// 在左区间里,更新右边界</span><br>            right = middle <span class=\"hljs-number\">-1</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (target &gt; nums[middle])&#123; <span class=\"hljs-comment\">// 在右区间里更新,更新左边界</span><br>            left = middle +<span class=\"hljs-number\">1</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> middle;<span class=\"hljs-comment\">// 💡返回下标值,前边要加 else 不然直接返回 middle 了</span><br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>左闭右开的无法填入示例</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">// 整体区间要一直保持左闭右开</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">search</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums, <span class=\"hljs-type\">int</span> target)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> left = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> right = nums.<span class=\"hljs-built_in\">size</span>()<span class=\"hljs-number\">-1</span>;<br><br>        <span class=\"hljs-keyword\">while</span> (left &lt;= right)&#123;<br>            <span class=\"hljs-type\">int</span> middle =  left + (right - left)/<span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">//💡 middle 要不断的更新所以要放到里边去</span><br>            <span class=\"hljs-keyword\">if</span> (target &lt; nums[middle]) &#123; <span class=\"hljs-comment\">// 在左区间里,更新右边界</span><br>            right = middle; <span class=\"hljs-comment\">// 保持右开</span><br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (target &gt; nums[middle])&#123; <span class=\"hljs-comment\">// 在右区间里更新,更新左边界</span><br>            left = middle +<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">//保持左闭</span><br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> middle;<span class=\"hljs-comment\">// 💡返回下标值,前边要加 else 不然直接返回 middle 了</span><br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<hr />\n<p><strong>参考资料</strong><br />\n<a href=\"https://www.programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html#_704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE\">代码随想录</a></p>\n"},{"title":"2.分发饼干","published":1,"hideInList":false,"isTop":false,"abbrlink":42003,"date":"2022-05-27T03:07:52.000Z","feature":null,"_content":"\n# 1 455.分发饼干\n\n[力扣题目链接](https://leetcode-cn.com/problems/assign-cookies/)\n\n\n假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。\n\n对每个孩子 i，都有一个胃口值 **g[i]**，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 **s[j]** 。如果 s[j] >= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。\n\n示例 1:\n\n-   输入: g = [1,2,3], s = [1,1]\n-   输出: 1 解释:你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。所以你应该输出1。\n\n示例 2:\n\n-   输入: g = [1,2], s = [1,2,3]\n-   输出: 2\n-   解释:你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。你拥有的饼干数量和尺寸都足以让所有孩子满足。所以你应该输出2.\n\n提示：\n\n-   1 <= g.length <= 3 * 10^4\n-   0 <= s.length <= 3 * 10^4\n-   1 <= g[i], s[j] <= 2^31 - 1\n\n\n# 2 思路\n\n局部最优：大饼干喂给胃口大的孩子(尽量充分利用饼干)\n全局最优：喂饱尽可能多的小孩\n\n将饼干数组和小孩数组拍个序\n**从后向前遍历**，即大饼干满足胃口的大孩子，**并**统计满足小孩数量\n![|700](https://s1.vika.cn/space/2022/05/27/1c68ab105c2d4666a72ac61ebbca6600)\n这个例子可以看出饼干9只有喂给胃口为7的小孩，这样才是整体最优解，并想不出反例，那么就可以撸代码了。\n\n# 3 力扣代码\n\n编译已通过\n```cpp\nclass Solution {\npublic:\n    int findContentChildren(vector<int>& g, vector<int>& s) {\n        sort(g.begin(), g.end());\n        sort(s.begin(), s.end());\n        int index = s.size() - 1; // 饼干数组的最后一个元素\n        int result = 0; // 统计孩子的数\n        //因为想从后往前遍历对比，所以用i-- ，而不用i++，g.size() - 1是孩子数组的最后一个元素，\n        for (int i = g.size() - 1; i >=0  ; i--){ // ”=“号为对比到最后一个孩子 \n            if (index  >= 0 && s[index] >= g[i]){\n                result++;\n                index--;\n            }\n        } \n        return result;\n\n    }\n};\n```\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/2.分发饼干.md","raw":"---\ntitle: 2.分发饼干\ntags:\n  - 代码随想录\n  - 贪心算法\npublished: true\nhideInList: false\nisTop: false\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 贪心算法\nabbrlink: 42003\ndate: 2022-05-27 11:07:52\nfeature:\n---\n\n# 1 455.分发饼干\n\n[力扣题目链接](https://leetcode-cn.com/problems/assign-cookies/)\n\n\n假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。\n\n对每个孩子 i，都有一个胃口值 **g[i]**，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 **s[j]** 。如果 s[j] >= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。\n\n示例 1:\n\n-   输入: g = [1,2,3], s = [1,1]\n-   输出: 1 解释:你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。所以你应该输出1。\n\n示例 2:\n\n-   输入: g = [1,2], s = [1,2,3]\n-   输出: 2\n-   解释:你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。你拥有的饼干数量和尺寸都足以让所有孩子满足。所以你应该输出2.\n\n提示：\n\n-   1 <= g.length <= 3 * 10^4\n-   0 <= s.length <= 3 * 10^4\n-   1 <= g[i], s[j] <= 2^31 - 1\n\n\n# 2 思路\n\n局部最优：大饼干喂给胃口大的孩子(尽量充分利用饼干)\n全局最优：喂饱尽可能多的小孩\n\n将饼干数组和小孩数组拍个序\n**从后向前遍历**，即大饼干满足胃口的大孩子，**并**统计满足小孩数量\n![|700](https://s1.vika.cn/space/2022/05/27/1c68ab105c2d4666a72ac61ebbca6600)\n这个例子可以看出饼干9只有喂给胃口为7的小孩，这样才是整体最优解，并想不出反例，那么就可以撸代码了。\n\n# 3 力扣代码\n\n编译已通过\n```cpp\nclass Solution {\npublic:\n    int findContentChildren(vector<int>& g, vector<int>& s) {\n        sort(g.begin(), g.end());\n        sort(s.begin(), s.end());\n        int index = s.size() - 1; // 饼干数组的最后一个元素\n        int result = 0; // 统计孩子的数\n        //因为想从后往前遍历对比，所以用i-- ，而不用i++，g.size() - 1是孩子数组的最后一个元素，\n        for (int i = g.size() - 1; i >=0  ; i--){ // ”=“号为对比到最后一个孩子 \n            if (index  >= 0 && s[index] >= g[i]){\n                result++;\n                index--;\n            }\n        } \n        return result;\n\n    }\n};\n```\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/2.分发饼干","updated":"2022-07-12T09:02:14.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fkg00jae0mgctbw4ryl","content":"<h1 id=\"1-455分发饼干\"><a class=\"markdownIt-Anchor\" href=\"#1-455分发饼干\"></a> 1 455.分发饼干</h1>\n<p><a href=\"https://leetcode-cn.com/problems/assign-cookies/\">力扣题目链接</a></p>\n<p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p>\n<p>对每个孩子 i，都有一个胃口值&nbsp;<strong>g[i]</strong>，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 <strong>s[j]</strong>&nbsp;。如果 s[j]&nbsp;&gt;= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p>\n<p>示例&nbsp;1:</p>\n<ul>\n<li>输入: g = [1,2,3], s = [1,1]</li>\n<li>输出: 1 解释:你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。所以你应该输出1。</li>\n</ul>\n<p>示例&nbsp;2:</p>\n<ul>\n<li>输入: g = [1,2], s = [1,2,3]</li>\n<li>输出: 2</li>\n<li>解释:你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。你拥有的饼干数量和尺寸都足以让所有孩子满足。所以你应该输出2.</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= g.length &lt;= 3 * 10^4</li>\n<li>0 &lt;= s.length &lt;= 3 * 10^4</li>\n<li>1 &lt;= g[i], s[j] &lt;=&nbsp;2^31 - 1</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>局部最优：大饼干喂给胃口大的孩子(尽量充分利用饼干)<br>\n全局最优：喂饱尽可能多的小孩</p>\n<p>将饼干数组和小孩数组拍个序<br>\n<strong>从后向前遍历</strong>，即大饼干满足胃口的大孩子，<strong>并</strong>统计满足小孩数量<br>\n<img src=\"https://s1.vika.cn/space/2022/05/27/1c68ab105c2d4666a72ac61ebbca6600\" alt=\"|700\"><br>\n这个例子可以看出饼干9只有喂给胃口为7的小孩，这样才是整体最优解，并想不出反例，那么就可以撸代码了。</p>\n<h1 id=\"3-力扣代码\"><a class=\"markdownIt-Anchor\" href=\"#3-力扣代码\"></a> 3 力扣代码</h1>\n<p>编译已通过</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">findContentChildren</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; g, vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; s)</span> </span>{<br>        <span class=\"hljs-built_in\">sort</span>(g.<span class=\"hljs-built_in\">begin</span>(), g.<span class=\"hljs-built_in\">end</span>());<br>        <span class=\"hljs-built_in\">sort</span>(s.<span class=\"hljs-built_in\">begin</span>(), s.<span class=\"hljs-built_in\">end</span>());<br>        <span class=\"hljs-type\">int</span> index = s.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 饼干数组的最后一个元素</span><br>        <span class=\"hljs-type\">int</span> result = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 统计孩子的数</span><br>        <span class=\"hljs-comment\">//因为想从后往前遍历对比，所以用i-- ，而不用i++，g.size() - 1是孩子数组的最后一个元素，</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = g.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; i &gt;=<span class=\"hljs-number\">0</span>  ; i--){ <span class=\"hljs-comment\">// ”=“号为对比到最后一个孩子 </span><br>            <span class=\"hljs-keyword\">if</span> (index  &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; s[index] &gt;= g[i]){<br>                result++;<br>                index--;<br>            }<br>        } <br>        <span class=\"hljs-keyword\">return</span> result;<br><br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n","site":{"data":{}},"wordcount":1047,"excerpt":"","more":"<h1 id=\"1-455分发饼干\"><a class=\"markdownIt-Anchor\" href=\"#1-455分发饼干\"></a> 1 455.分发饼干</h1>\n<p><a href=\"https://leetcode-cn.com/problems/assign-cookies/\">力扣题目链接</a></p>\n<p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p>\n<p>对每个孩子 i，都有一个胃口值 <strong>g[i]</strong>，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 <strong>s[j]</strong> 。如果 s[j] &gt;= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p>\n<p>示例 1:</p>\n<ul>\n<li>输入: g = [1,2,3], s = [1,1]</li>\n<li>输出: 1 解释:你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。所以你应该输出1。</li>\n</ul>\n<p>示例 2:</p>\n<ul>\n<li>输入: g = [1,2], s = [1,2,3]</li>\n<li>输出: 2</li>\n<li>解释:你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。你拥有的饼干数量和尺寸都足以让所有孩子满足。所以你应该输出2.</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= g.length &lt;= 3 * 10^4</li>\n<li>0 &lt;= s.length &lt;= 3 * 10^4</li>\n<li>1 &lt;= g[i], s[j] &lt;= 2^31 - 1</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>局部最优：大饼干喂给胃口大的孩子(尽量充分利用饼干)<br />\n全局最优：喂饱尽可能多的小孩</p>\n<p>将饼干数组和小孩数组拍个序<br />\n<strong>从后向前遍历</strong>，即大饼干满足胃口的大孩子，<strong>并</strong>统计满足小孩数量<br />\n<img src=\"https://s1.vika.cn/space/2022/05/27/1c68ab105c2d4666a72ac61ebbca6600\" alt=\"|700\" /><br />\n这个例子可以看出饼干9只有喂给胃口为7的小孩，这样才是整体最优解，并想不出反例，那么就可以撸代码了。</p>\n<h1 id=\"3-力扣代码\"><a class=\"markdownIt-Anchor\" href=\"#3-力扣代码\"></a> 3 力扣代码</h1>\n<p>编译已通过</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">findContentChildren</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; g, vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; s)</span> </span>&#123;<br>        <span class=\"hljs-built_in\">sort</span>(g.<span class=\"hljs-built_in\">begin</span>(), g.<span class=\"hljs-built_in\">end</span>());<br>        <span class=\"hljs-built_in\">sort</span>(s.<span class=\"hljs-built_in\">begin</span>(), s.<span class=\"hljs-built_in\">end</span>());<br>        <span class=\"hljs-type\">int</span> index = s.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 饼干数组的最后一个元素</span><br>        <span class=\"hljs-type\">int</span> result = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 统计孩子的数</span><br>        <span class=\"hljs-comment\">//因为想从后往前遍历对比，所以用i-- ，而不用i++，g.size() - 1是孩子数组的最后一个元素，</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = g.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; i &gt;=<span class=\"hljs-number\">0</span>  ; i--)&#123; <span class=\"hljs-comment\">// ”=“号为对比到最后一个孩子 </span><br>            <span class=\"hljs-keyword\">if</span> (index  &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; s[index] &gt;= g[i])&#123;<br>                result++;<br>                index--;<br>            &#125;<br>        &#125; <br>        <span class=\"hljs-keyword\">return</span> result;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n"},{"cards-deck":"source::_posts::👨🏻‍💻code::数据结构与算法::代码随想录::数组::3. 移除元素.md","title":"3. 移除元素","date":"2022-08-08T07:06:00.000Z","abbrlink":37506,"_content":"\n\n\n# 1 移除元素\n\n[力扣题目链接](https://leetcode.cn/problems/remove-element/)\n\n给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n\n不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并**原地**修改输入数组。\n\n元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n\n示例 1: 给定 nums = [3,2,2,3], val = 3, 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。 你不需要考虑数组中超出新长度后面的元素。\n\n示例 2: 给定 nums = [0,1,2,2,3,0,4,2], val = 2, 函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。\n\n**你不需要考虑数组中超出新长度后面的元素。**\n\n# 2 思路\n\n数组的元素在内存地址中是连续的,不能单独删除某个元素,只能覆盖\n\n\n## 2.1 暴力解法\n**发现需要移除的元素,就将数组集体向前移动一位**\n两层 for 循环, 一个遍历数组,一个更新数组\n\n时间复杂度: O(n^2) : 第一层for 循环找 n 次, 第二层 for 循环更新n 次, 总时间复杂度为 O(n^2) \n空间复杂度:O(1): 没有新增空间\n\n![27.移除元素-暴力解法](https://tva1.sinaimg.cn/large/008eGmZEly1gntrc7x9tjg30du09m1ky.gif)\n\n## 2.2 双指针法\n双指针法（快慢指针法）： **通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。**\n\n\n快指针: 寻找新数组的元素\n慢指针: 新数组的下标值\n总结: 将快指针或者的元素赋给, 慢指针的所对应的下标值\n\n\n![27.移除元素-双指针法](https://tva1.sinaimg.cn/large/008eGmZEly1gntrds6r59g30du09mnpd.gif)\n\n\n\n# 3 代码\n\n编译已通过\n```c++\nclass Solution {\npublic:\n    int removeElement(vector<int>& nums, int val) {\n        int slowIndex = 0;\n        for (int fastIndex = 0; fastIndex < nums.size(); fastIndex++){ // 类似 int i ,i在不断的跑起来\n            if(nums[fastIndex] != val){\n                nums[slowIndex] = nums[fastIndex]; // 给新数组的下标赋值\n                slowIndex++; // 下次更新下一个位置\n            }\n        }\n        return slowIndex;\n\n    }\n};\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n **参考资料**\n [代码随想录](https://www.programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html#%E6%80%9D%E8%B7%AF)\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/数组/3. 移除元素.md","raw":"---\ncards-deck: \"source::_posts::\\U0001F468\\U0001F3FB‍\\U0001F4BBcode::数据结构与算法::代码随想录::数组::3. 移除元素.md\"\ntitle: 3. 移除元素\ndate: '2022-08-08 15:06'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 数组\nabbrlink: 37506\ntags: 数组\n---\n\n\n\n# 1 移除元素\n\n[力扣题目链接](https://leetcode.cn/problems/remove-element/)\n\n给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\n\n不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并**原地**修改输入数组。\n\n元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n\n示例 1: 给定 nums = [3,2,2,3], val = 3, 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。 你不需要考虑数组中超出新长度后面的元素。\n\n示例 2: 给定 nums = [0,1,2,2,3,0,4,2], val = 2, 函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。\n\n**你不需要考虑数组中超出新长度后面的元素。**\n\n# 2 思路\n\n数组的元素在内存地址中是连续的,不能单独删除某个元素,只能覆盖\n\n\n## 2.1 暴力解法\n**发现需要移除的元素,就将数组集体向前移动一位**\n两层 for 循环, 一个遍历数组,一个更新数组\n\n时间复杂度: O(n^2) : 第一层for 循环找 n 次, 第二层 for 循环更新n 次, 总时间复杂度为 O(n^2) \n空间复杂度:O(1): 没有新增空间\n\n![27.移除元素-暴力解法](https://tva1.sinaimg.cn/large/008eGmZEly1gntrc7x9tjg30du09m1ky.gif)\n\n## 2.2 双指针法\n双指针法（快慢指针法）： **通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。**\n\n\n快指针: 寻找新数组的元素\n慢指针: 新数组的下标值\n总结: 将快指针或者的元素赋给, 慢指针的所对应的下标值\n\n\n![27.移除元素-双指针法](https://tva1.sinaimg.cn/large/008eGmZEly1gntrds6r59g30du09mnpd.gif)\n\n\n\n# 3 代码\n\n编译已通过\n```c++\nclass Solution {\npublic:\n    int removeElement(vector<int>& nums, int val) {\n        int slowIndex = 0;\n        for (int fastIndex = 0; fastIndex < nums.size(); fastIndex++){ // 类似 int i ,i在不断的跑起来\n            if(nums[fastIndex] != val){\n                nums[slowIndex] = nums[fastIndex]; // 给新数组的下标赋值\n                slowIndex++; // 下次更新下一个位置\n            }\n        }\n        return slowIndex;\n\n    }\n};\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n **参考资料**\n [代码随想录](https://www.programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html#%E6%80%9D%E8%B7%AF)\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/数组/3. 移除元素","published":1,"updated":"2022-08-08T08:24:57.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fkh00jde0mghqjehkho","content":"<h1 id=\"1-移除元素\"><a class=\"markdownIt-Anchor\" href=\"#1-移除元素\"></a> 1 移除元素</h1>\n<p><a href=\"https://leetcode.cn/problems/remove-element/\">力扣题目链接</a></p>\n<p>给你一个数组 nums&nbsp;和一个值 val，你需要 原地 移除所有数值等于&nbsp;val&nbsp;的元素，并返回移除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并<strong>原地</strong>修改输入数组。</p>\n<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>\n<p>示例 1: 给定 nums = [3,2,2,3], val = 3, 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。 你不需要考虑数组中超出新长度后面的元素。</p>\n<p>示例&nbsp;2: 给定 nums = [0,1,2,2,3,0,4,2], val = 2, 函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</p>\n<p><strong>你不需要考虑数组中超出新长度后面的元素。</strong></p>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>数组的元素在内存地址中是连续的,不能单独删除某个元素,只能覆盖</p>\n<h2 id=\"21-暴力解法\"><a class=\"markdownIt-Anchor\" href=\"#21-暴力解法\"></a> 2.1 暴力解法</h2>\n<p><strong>发现需要移除的元素,就将数组集体向前移动一位</strong><br>\n两层 for 循环, 一个遍历数组,一个更新数组</p>\n<p>时间复杂度: O(n^2) : 第一层for 循环找 n 次, 第二层 for 循环更新n 次, 总时间复杂度为 O(n^2)<br>\n空间复杂度:O(1): 没有新增空间</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008eGmZEly1gntrc7x9tjg30du09m1ky.gif\" alt=\"27.移除元素-暴力解法\"></p>\n<h2 id=\"22-双指针法\"><a class=\"markdownIt-Anchor\" href=\"#22-双指针法\"></a> 2.2 双指针法</h2>\n<p>双指针法（快慢指针法）： <strong>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</strong></p>\n<p>快指针: 寻找新数组的元素<br>\n慢指针: 新数组的下标值<br>\n总结: 将快指针或者的元素赋给, 慢指针的所对应的下标值</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008eGmZEly1gntrds6r59g30du09mnpd.gif\" alt=\"27.移除元素-双指针法\"></p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>编译已通过</p>\n<figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">removeElement</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums, <span class=\"hljs-type\">int</span> val)</span> </span>{<br>        <span class=\"hljs-type\">int</span> slowIndex = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> fastIndex = <span class=\"hljs-number\">0</span>; fastIndex &lt; nums.<span class=\"hljs-built_in\">size</span>(); fastIndex++){ <span class=\"hljs-comment\">// 类似 int i ,i在不断的跑起来</span><br>            <span class=\"hljs-keyword\">if</span>(nums[fastIndex] != val){<br>                nums[slowIndex] = nums[fastIndex]; <span class=\"hljs-comment\">// 给新数组的下标赋值</span><br>                slowIndex++; <span class=\"hljs-comment\">// 下次更新下一个位置</span><br>            }<br>        }<br>        <span class=\"hljs-keyword\">return</span> slowIndex;<br><br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<hr>\n<p><strong>参考资料</strong><br>\n<a href=\"https://www.programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html#%E6%80%9D%E8%B7%AF\">代码随想录</a></p>\n","site":{"data":{}},"wordcount":898,"excerpt":"","more":"<h1 id=\"1-移除元素\"><a class=\"markdownIt-Anchor\" href=\"#1-移除元素\"></a> 1 移除元素</h1>\n<p><a href=\"https://leetcode.cn/problems/remove-element/\">力扣题目链接</a></p>\n<p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并<strong>原地</strong>修改输入数组。</p>\n<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>\n<p>示例 1: 给定 nums = [3,2,2,3], val = 3, 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。 你不需要考虑数组中超出新长度后面的元素。</p>\n<p>示例 2: 给定 nums = [0,1,2,2,3,0,4,2], val = 2, 函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</p>\n<p><strong>你不需要考虑数组中超出新长度后面的元素。</strong></p>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>数组的元素在内存地址中是连续的,不能单独删除某个元素,只能覆盖</p>\n<h2 id=\"21-暴力解法\"><a class=\"markdownIt-Anchor\" href=\"#21-暴力解法\"></a> 2.1 暴力解法</h2>\n<p><strong>发现需要移除的元素,就将数组集体向前移动一位</strong><br />\n两层 for 循环, 一个遍历数组,一个更新数组</p>\n<p>时间复杂度: O(n^2) : 第一层for 循环找 n 次, 第二层 for 循环更新n 次, 总时间复杂度为 O(n^2)<br />\n空间复杂度:O(1): 没有新增空间</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008eGmZEly1gntrc7x9tjg30du09m1ky.gif\" alt=\"27.移除元素-暴力解法\" /></p>\n<h2 id=\"22-双指针法\"><a class=\"markdownIt-Anchor\" href=\"#22-双指针法\"></a> 2.2 双指针法</h2>\n<p>双指针法（快慢指针法）： <strong>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</strong></p>\n<p>快指针: 寻找新数组的元素<br />\n慢指针: 新数组的下标值<br />\n总结: 将快指针或者的元素赋给, 慢指针的所对应的下标值</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008eGmZEly1gntrds6r59g30du09mnpd.gif\" alt=\"27.移除元素-双指针法\" /></p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>编译已通过</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">removeElement</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums, <span class=\"hljs-type\">int</span> val)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> slowIndex = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> fastIndex = <span class=\"hljs-number\">0</span>; fastIndex &lt; nums.<span class=\"hljs-built_in\">size</span>(); fastIndex++)&#123; <span class=\"hljs-comment\">// 类似 int i ,i在不断的跑起来</span><br>            <span class=\"hljs-keyword\">if</span>(nums[fastIndex] != val)&#123;<br>                nums[slowIndex] = nums[fastIndex]; <span class=\"hljs-comment\">// 给新数组的下标赋值</span><br>                slowIndex++; <span class=\"hljs-comment\">// 下次更新下一个位置</span><br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> slowIndex;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<hr />\n<p><strong>参考资料</strong><br />\n<a href=\"https://www.programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html#%E6%80%9D%E8%B7%AF\">代码随想录</a></p>\n"},{"title":"4. 有序数组的平方","date":"2022-08-08T08:26:00.000Z","abbrlink":34285,"cards-deck":"source::_posts::👨🏻‍💻code::数据结构与算法::代码随想录::数组::4. 有序数组的平方.md","_content":"\n\n\n# 1 977.有序数组的平方\n\n[力扣题目链接](https://leetcode.cn/problems/squares-of-a-sorted-array/)\n\n\n给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。\n\n示例 1： 输入：nums = [-4,-1,0,3,10] 输出：[0,1,9,16,100] 解释：平方后，数组变为 [16,1,0,9,100]，排序后，数组变为 [0,1,9,16,100]\n\n示例 2： 输入：nums = [-7,-3,2,3,11] 输出：[4,9,9,49,121]\n\n\n# 2 思路\n\n## 2.1 暴力解法\n每个数平方之后，排个序\n```c++\nclass Solution {\npublic:\n    vector<int> sortedSquares(vector<int>& A) {\n        for (int i = 0; i < A.size(); i++) {\n            A[i] *= A[i];\n        }\n        sort(A.begin(), A.end()); // 快速排序\n        return A;\n    }\n};\n```\nfor 循环中乘了 n 次, 时间复杂度为 O(n), sort 快速排序[^1]O(nlogn), 两个函数取大者,总体的时间复杂度为 O(nlogn)\n>这个时间复杂度本质是 O(n + nlogn)， 取完大头为 O(nlogn)\n\n\n## 2.2 双指针法\n数组有序,数组平方的最大值就在数组的两端，不是最左边就是最右边，不可能是中间。\n\n用两个指针指向头尾, 逐步向中间靠拢, 不断的寻找: `数组元素平方的第一大,` `第二大`, ........\n因为每次找的是最大值, 所以结果集中,从后往前赋值. 因为题目要求返回的是递增数组\n\n\n![](https://code-thinking.cdn.bcebos.com/gifs/977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.gif)\n\n# 3 代码\n[[容器的使用]]\n\n```c\nclass Solution {\npublic:\n    vector<int> sortedSquares(vector<int>& nums) {\n        // int i = 0;\n        // int j = nums.size() - 1;\n        //💡 i 和 j 是要不断循环动的,要写在 for 循环中\n    \n        int k = nums.size()-1;\n        vector<int> result(k+1, 0);\n        for (int i=0, j = nums.size()-1; i <= j; ){ // 要在元素平方的大小,控制 i,j 的移动\n            if(nums[i] * nums[i] > nums[j] * nums[j] ){\n                result[k] = nums[i]*nums[i];\n                k--;// 以后要更新结果集的前一个数了,可以在上边直接写成 result[k--]\n                i++;\n            }\n            else{\n                result[k] = nums[j]*nums[j];\n                k--;\n                j--;\n            }\n        }\n        return result;\n\n    }\n};\n\n```\n\n---\n **参考资料**\n[^1]: [[时间复杂度分析]]","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/数组/4. 有序数组的平方.md","raw":"---\ntitle: 4. 有序数组的平方\ndate: '2022-08-08 16:26'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 数组\nabbrlink: 34285\ntags: 数组\ncards-deck: source::_posts::👨🏻‍💻code::数据结构与算法::代码随想录::数组::4. 有序数组的平方.md\n---\n\n\n\n# 1 977.有序数组的平方\n\n[力扣题目链接](https://leetcode.cn/problems/squares-of-a-sorted-array/)\n\n\n给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。\n\n示例 1： 输入：nums = [-4,-1,0,3,10] 输出：[0,1,9,16,100] 解释：平方后，数组变为 [16,1,0,9,100]，排序后，数组变为 [0,1,9,16,100]\n\n示例 2： 输入：nums = [-7,-3,2,3,11] 输出：[4,9,9,49,121]\n\n\n# 2 思路\n\n## 2.1 暴力解法\n每个数平方之后，排个序\n```c++\nclass Solution {\npublic:\n    vector<int> sortedSquares(vector<int>& A) {\n        for (int i = 0; i < A.size(); i++) {\n            A[i] *= A[i];\n        }\n        sort(A.begin(), A.end()); // 快速排序\n        return A;\n    }\n};\n```\nfor 循环中乘了 n 次, 时间复杂度为 O(n), sort 快速排序[^1]O(nlogn), 两个函数取大者,总体的时间复杂度为 O(nlogn)\n>这个时间复杂度本质是 O(n + nlogn)， 取完大头为 O(nlogn)\n\n\n## 2.2 双指针法\n数组有序,数组平方的最大值就在数组的两端，不是最左边就是最右边，不可能是中间。\n\n用两个指针指向头尾, 逐步向中间靠拢, 不断的寻找: `数组元素平方的第一大,` `第二大`, ........\n因为每次找的是最大值, 所以结果集中,从后往前赋值. 因为题目要求返回的是递增数组\n\n\n![](https://code-thinking.cdn.bcebos.com/gifs/977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.gif)\n\n# 3 代码\n[[容器的使用]]\n\n```c\nclass Solution {\npublic:\n    vector<int> sortedSquares(vector<int>& nums) {\n        // int i = 0;\n        // int j = nums.size() - 1;\n        //💡 i 和 j 是要不断循环动的,要写在 for 循环中\n    \n        int k = nums.size()-1;\n        vector<int> result(k+1, 0);\n        for (int i=0, j = nums.size()-1; i <= j; ){ // 要在元素平方的大小,控制 i,j 的移动\n            if(nums[i] * nums[i] > nums[j] * nums[j] ){\n                result[k] = nums[i]*nums[i];\n                k--;// 以后要更新结果集的前一个数了,可以在上边直接写成 result[k--]\n                i++;\n            }\n            else{\n                result[k] = nums[j]*nums[j];\n                k--;\n                j--;\n            }\n        }\n        return result;\n\n    }\n};\n\n```\n\n---\n **参考资料**\n[^1]: [[时间复杂度分析]]","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/数组/4. 有序数组的平方","published":1,"updated":"2022-08-08T09:49:35.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fkh00jge0mg98jl4mpe","content":"<h1 id=\"1-977有序数组的平方\"><a class=\"markdownIt-Anchor\" href=\"#1-977有序数组的平方\"></a> 1 977.有序数组的平方</h1>\n<p><a href=\"https://leetcode.cn/problems/squares-of-a-sorted-array/\">力扣题目链接</a></p>\n<p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。</p>\n<p>示例 1： 输入：nums = [-4,-1,0,3,10] 输出：[0,1,9,16,100] 解释：平方后，数组变为 [16,1,0,9,100]，排序后，数组变为 [0,1,9,16,100]</p>\n<p>示例 2： 输入：nums = [-7,-3,2,3,11] 输出：[4,9,9,49,121]</p>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<h2 id=\"21-暴力解法\"><a class=\"markdownIt-Anchor\" href=\"#21-暴力解法\"></a> 2.1 暴力解法</h2>\n<p>每个数平方之后，排个序</p>\n<figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">sortedSquares</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; A)</span> </span>{<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; A.<span class=\"hljs-built_in\">size</span>(); i++) {<br>            A[i] *= A[i];<br>        }<br>        <span class=\"hljs-built_in\">sort</span>(A.<span class=\"hljs-built_in\">begin</span>(), A.<span class=\"hljs-built_in\">end</span>()); <span class=\"hljs-comment\">// 快速排序</span><br>        <span class=\"hljs-keyword\">return</span> A;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<p>for 循环中乘了 n 次, 时间复杂度为 O(n), sort 快速排序<sup id=\"fnref:1\" class=\"footnote-ref\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"[[时间复杂度分析]]\n\">[1]</span></a></sup>O(nlogn), 两个函数取大者,总体的时间复杂度为 O(nlogn)</p>\n<blockquote>\n<p>这个时间复杂度本质是 O(n + nlogn)， 取完大头为 O(nlogn)</p>\n</blockquote>\n<h2 id=\"22-双指针法\"><a class=\"markdownIt-Anchor\" href=\"#22-双指针法\"></a> 2.2 双指针法</h2>\n<p>数组有序,数组平方的最大值就在数组的两端，不是最左边就是最右边，不可能是中间。</p>\n<p>用两个指针指向头尾, 逐步向中间靠拢, 不断的寻找: <code>数组元素平方的第一大,</code> <code>第二大</code>, …<br>\n因为每次找的是最大值, 所以结果集中,从后往前赋值. 因为题目要求返回的是递增数组</p>\n<p><img src=\"https://code-thinking.cdn.bcebos.com/gifs/977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.gif\" alt=\"\"></p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>[[容器的使用]]</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> {</span><br>public:<br>    <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title function_\">sortedSquares</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums)</span> {<br>        <span class=\"hljs-comment\">// int i = 0;</span><br>        <span class=\"hljs-comment\">// int j = nums.size() - 1;</span><br>        <span class=\"hljs-comment\">//💡 i 和 j 是要不断循环动的,要写在 for 循环中</span><br>    <br>        <span class=\"hljs-type\">int</span> k = nums.size()<span class=\"hljs-number\">-1</span>;<br>        <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title function_\">result</span><span class=\"hljs-params\">(k+<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>, j = nums.size()<span class=\"hljs-number\">-1</span>; i &lt;= j; ){ <span class=\"hljs-comment\">// 要在元素平方的大小,控制 i,j 的移动</span><br>            <span class=\"hljs-keyword\">if</span>(nums[i] * nums[i] &gt; nums[j] * nums[j] ){<br>                result[k] = nums[i]*nums[i];<br>                k--;<span class=\"hljs-comment\">// 以后要更新结果集的前一个数了,可以在上边直接写成 result[k--]</span><br>                i++;<br>            }<br>            <span class=\"hljs-keyword\">else</span>{<br>                result[k] = nums[j]*nums[j];<br>                k--;<br>                j--;<br>            }<br>        }<br>        <span class=\"hljs-keyword\">return</span> result;<br><br>    }<br>};<br><br></code></pre></td></tr></tbody></table></figure>\n<hr>\n<p><strong>参考资料</strong></p>\n<section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span>[[时间复杂度分析]]\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>","site":{"data":{}},"wordcount":1181,"excerpt":"","more":"<h1 id=\"1-977有序数组的平方\"><a class=\"markdownIt-Anchor\" href=\"#1-977有序数组的平方\"></a> 1 977.有序数组的平方</h1>\n<p><a href=\"https://leetcode.cn/problems/squares-of-a-sorted-array/\">力扣题目链接</a></p>\n<p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。</p>\n<p>示例 1： 输入：nums = [-4,-1,0,3,10] 输出：[0,1,9,16,100] 解释：平方后，数组变为 [16,1,0,9,100]，排序后，数组变为 [0,1,9,16,100]</p>\n<p>示例 2： 输入：nums = [-7,-3,2,3,11] 输出：[4,9,9,49,121]</p>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<h2 id=\"21-暴力解法\"><a class=\"markdownIt-Anchor\" href=\"#21-暴力解法\"></a> 2.1 暴力解法</h2>\n<p>每个数平方之后，排个序</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">sortedSquares</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; A)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; A.<span class=\"hljs-built_in\">size</span>(); i++) &#123;<br>            A[i] *= A[i];<br>        &#125;<br>        <span class=\"hljs-built_in\">sort</span>(A.<span class=\"hljs-built_in\">begin</span>(), A.<span class=\"hljs-built_in\">end</span>()); <span class=\"hljs-comment\">// 快速排序</span><br>        <span class=\"hljs-keyword\">return</span> A;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>for 循环中乘了 n 次, 时间复杂度为 O(n), sort 快速排序<sup id=\"fnref:1\" class=\"footnote-ref\"><a href=\"#fn:1\" rel=\"footnote\"><span class=\"hint--top hint--rounded\" aria-label=\"[[时间复杂度分析]]\n\">[1]</span></a></sup>O(nlogn), 两个函数取大者,总体的时间复杂度为 O(nlogn)</p>\n<blockquote>\n<p>这个时间复杂度本质是 O(n + nlogn)， 取完大头为 O(nlogn)</p>\n</blockquote>\n<h2 id=\"22-双指针法\"><a class=\"markdownIt-Anchor\" href=\"#22-双指针法\"></a> 2.2 双指针法</h2>\n<p>数组有序,数组平方的最大值就在数组的两端，不是最左边就是最右边，不可能是中间。</p>\n<p>用两个指针指向头尾, 逐步向中间靠拢, 不断的寻找: <code>数组元素平方的第一大,</code> <code>第二大</code>, …<br />\n因为每次找的是最大值, 所以结果集中,从后往前赋值. 因为题目要求返回的是递增数组</p>\n<p><img src=\"https://code-thinking.cdn.bcebos.com/gifs/977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.gif\" alt=\"\" /></p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>[[容器的使用]]</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> &#123;</span><br>public:<br>    <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title function_\">sortedSquares</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums)</span> &#123;<br>        <span class=\"hljs-comment\">// int i = 0;</span><br>        <span class=\"hljs-comment\">// int j = nums.size() - 1;</span><br>        <span class=\"hljs-comment\">//💡 i 和 j 是要不断循环动的,要写在 for 循环中</span><br>    <br>        <span class=\"hljs-type\">int</span> k = nums.size()<span class=\"hljs-number\">-1</span>;<br>        <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title function_\">result</span><span class=\"hljs-params\">(k+<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>, j = nums.size()<span class=\"hljs-number\">-1</span>; i &lt;= j; )&#123; <span class=\"hljs-comment\">// 要在元素平方的大小,控制 i,j 的移动</span><br>            <span class=\"hljs-keyword\">if</span>(nums[i] * nums[i] &gt; nums[j] * nums[j] )&#123;<br>                result[k] = nums[i]*nums[i];<br>                k--;<span class=\"hljs-comment\">// 以后要更新结果集的前一个数了,可以在上边直接写成 result[k--]</span><br>                i++;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span>&#123;<br>                result[k] = nums[j]*nums[j];<br>                k--;<br>                j--;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> result;<br><br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>\n<hr />\n<p><strong>参考资料</strong></p>\n<section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span>[[时间复杂度分析]]\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>"},{"cards-deck":"source::_posts::👨🏻‍💻code::数据结构与算法::代码随想录::数组::5. 长度最小的子数组.md","title":"5. 长度最小的子数组","date":"2022-08-08T09:54:00.000Z","abbrlink":31461,"_content":"\n\n\n# 1 209.长度最小的子数组\n\n[力扣题目链接](https://leetcode.cn/problems/minimum-size-subarray-sum/)\n\n\n\n给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。\n\n示例：\n\n输入：s = 7, nums = [2,3,1,2,4,3] 输出：2 解释：子数组 [4,3] 是该条件下的长度最小的子数组。\n\n# 2 思路\n\n## 2.1 暴力解法\n两个 for 循环不断寻找符合条件的子序列, 时间复杂度: O(n^2), 空间复杂度 O(1)\n```c++\nclass Solution {\npublic:\n    int minSubArrayLen(int s, vector<int>& nums) {\n        int result = INT32_MAX; // 最终的结果\n        int sum = 0; // 子序列的数值之和\n        int subLength = 0; // 子序列的长度\n        for (int i = 0; i < nums.size(); i++) { // 设置子序列起点为i\n            sum = 0;\n            for (int j = i; j < nums.size(); j++) { // 设置子序列终止位置为j\n                sum += nums[j];\n                if (sum >= s) { // 一旦发现子序列和超过了s，更新result\n                    subLength = j - i + 1; // 取子序列的长度\n                    result = result < subLength ? result : subLength;\n                    break; // 因为我们是找符合条件最短的子序列，所以一旦符合条件就break\n                }\n            }\n        }\n        // 如果result没有被赋值的话，就返回0，说明没有符合条件的子序列\n        return result == INT32_MAX ? 0 : result;\n    }\n};\n```\n\n## 2.2 滑动窗口\n\n滑动窗口的本质还是双指针, 因为只取起始指针和终止指针范围内的值,所以称为滑动窗口\n\n\n滑动窗口: **就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果**。\n\n只用一个 for 循环解决暴力循环中两个 for 循环的操作\n\n首先要思考 如果用一个for循环，那么应该表示 滑动窗口的起始位置，还是终止位置。\n如果只用一个for循环来表示 滑动窗口的起始位置，那么如何遍历剩下的终止位置？\n此时难免再次陷入 暴力解法的怪圈。\n所以 只用一个for循环，那么这个循环的索引，一定是表示 滑动窗口的终止位置。\n\n\ns=7， 数组是 2，3，1，2，4，3，来看一下查找的过程：\n![209.长度最小的子数组](https://code-thinking.cdn.bcebos.com/gifs/209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.gif)\n\n\n\n本题中实现滑动窗口，主要确定如下三点：\n问:\n-   窗口内是什么？\n-   如何移动窗口的起始位置？\n-   如何移动窗口的结束位置？\n答:\n-  窗口就是 满足其和 ≥ s 的长度最小的 连续 子数组。\n- 窗口的起始位置如何移动：如果当前窗口的值大于s了，窗口就要向前移动了（也就是该缩小了）。\n- 窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针，也就是for循环里的索引。\n\n![leetcode_209|600](https://img-blog.csdnimg.cn/20210312160441942.png)\n\n**滑动窗口的精妙之处在于根据当前子序列和大小的情况，不断调节子序列的起始位置。从而将O(n^2)暴力解法降为O(n)。每个元素在滑动窗后进来操作一次，出去操作一次，每个元素都是被操作两次，所以时间复杂度是 2 × n 也就是O(n)**\n\n# 3 代码\n编译已通过\n```c++\nclass Solution {\npublic:\n    int minSubArrayLen(int target, vector<int>& nums) {\n        int result = INT_MAX;\n        int sum = 0;\n        int i = 0;\n        int subLength = 0;\n        for (int j = 0; j < nums.size(); j++){\n            sum += nums[j];\n            while(sum >= target){\n                subLength = j - i + 1;\n                result = subLength < result ? subLength : result;\n                sum -= nums[i]; // 缩短一个数之后的和\n                i++; // 缩短区间,💡i不断的++,直至能sum < target 跳出 while 循环\n            }\n        }\n        return result == INT_MAX ? 0 : result;\n\n    }\n};\n```\n不要以为for里放一个while就以为是O(n^2)啊， 主要是看每一个元素被操作的次数，每个元素在滑动窗后进来操作一次，出去操作一次，每个元素都是被操作两次，所以时间复杂度是 2 × n 也就是O(n)。\n\n\n\n\n\n---\n **参考资料**\n [代码随想录](https://www.programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html)\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/数组/5. 长度最小的子数组.md","raw":"---\ncards-deck: source::_posts::👨🏻‍💻code::数据结构与算法::代码随想录::数组::5. 长度最小的子数组.md\ntitle: 5. 长度最小的子数组\ndate: '2022-08-08 17:54'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 数组\nabbrlink: 31461\ntags:\n---\n\n\n\n# 1 209.长度最小的子数组\n\n[力扣题目链接](https://leetcode.cn/problems/minimum-size-subarray-sum/)\n\n\n\n给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。\n\n示例：\n\n输入：s = 7, nums = [2,3,1,2,4,3] 输出：2 解释：子数组 [4,3] 是该条件下的长度最小的子数组。\n\n# 2 思路\n\n## 2.1 暴力解法\n两个 for 循环不断寻找符合条件的子序列, 时间复杂度: O(n^2), 空间复杂度 O(1)\n```c++\nclass Solution {\npublic:\n    int minSubArrayLen(int s, vector<int>& nums) {\n        int result = INT32_MAX; // 最终的结果\n        int sum = 0; // 子序列的数值之和\n        int subLength = 0; // 子序列的长度\n        for (int i = 0; i < nums.size(); i++) { // 设置子序列起点为i\n            sum = 0;\n            for (int j = i; j < nums.size(); j++) { // 设置子序列终止位置为j\n                sum += nums[j];\n                if (sum >= s) { // 一旦发现子序列和超过了s，更新result\n                    subLength = j - i + 1; // 取子序列的长度\n                    result = result < subLength ? result : subLength;\n                    break; // 因为我们是找符合条件最短的子序列，所以一旦符合条件就break\n                }\n            }\n        }\n        // 如果result没有被赋值的话，就返回0，说明没有符合条件的子序列\n        return result == INT32_MAX ? 0 : result;\n    }\n};\n```\n\n## 2.2 滑动窗口\n\n滑动窗口的本质还是双指针, 因为只取起始指针和终止指针范围内的值,所以称为滑动窗口\n\n\n滑动窗口: **就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果**。\n\n只用一个 for 循环解决暴力循环中两个 for 循环的操作\n\n首先要思考 如果用一个for循环，那么应该表示 滑动窗口的起始位置，还是终止位置。\n如果只用一个for循环来表示 滑动窗口的起始位置，那么如何遍历剩下的终止位置？\n此时难免再次陷入 暴力解法的怪圈。\n所以 只用一个for循环，那么这个循环的索引，一定是表示 滑动窗口的终止位置。\n\n\ns=7， 数组是 2，3，1，2，4，3，来看一下查找的过程：\n![209.长度最小的子数组](https://code-thinking.cdn.bcebos.com/gifs/209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.gif)\n\n\n\n本题中实现滑动窗口，主要确定如下三点：\n问:\n-   窗口内是什么？\n-   如何移动窗口的起始位置？\n-   如何移动窗口的结束位置？\n答:\n-  窗口就是 满足其和 ≥ s 的长度最小的 连续 子数组。\n- 窗口的起始位置如何移动：如果当前窗口的值大于s了，窗口就要向前移动了（也就是该缩小了）。\n- 窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针，也就是for循环里的索引。\n\n![leetcode_209|600](https://img-blog.csdnimg.cn/20210312160441942.png)\n\n**滑动窗口的精妙之处在于根据当前子序列和大小的情况，不断调节子序列的起始位置。从而将O(n^2)暴力解法降为O(n)。每个元素在滑动窗后进来操作一次，出去操作一次，每个元素都是被操作两次，所以时间复杂度是 2 × n 也就是O(n)**\n\n# 3 代码\n编译已通过\n```c++\nclass Solution {\npublic:\n    int minSubArrayLen(int target, vector<int>& nums) {\n        int result = INT_MAX;\n        int sum = 0;\n        int i = 0;\n        int subLength = 0;\n        for (int j = 0; j < nums.size(); j++){\n            sum += nums[j];\n            while(sum >= target){\n                subLength = j - i + 1;\n                result = subLength < result ? subLength : result;\n                sum -= nums[i]; // 缩短一个数之后的和\n                i++; // 缩短区间,💡i不断的++,直至能sum < target 跳出 while 循环\n            }\n        }\n        return result == INT_MAX ? 0 : result;\n\n    }\n};\n```\n不要以为for里放一个while就以为是O(n^2)啊， 主要是看每一个元素被操作的次数，每个元素在滑动窗后进来操作一次，出去操作一次，每个元素都是被操作两次，所以时间复杂度是 2 × n 也就是O(n)。\n\n\n\n\n\n---\n **参考资料**\n [代码随想录](https://www.programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html)\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/数组/5. 长度最小的子数组","published":1,"updated":"2022-08-08T14:35:02.439Z","_id":"cl6ku8fki00jle0mg0xxuhk1a","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-209长度最小的子数组\"><a class=\"markdownIt-Anchor\" href=\"#1-209长度最小的子数组\"></a> 1 209.长度最小的子数组</h1>\n<p><a href=\"https://leetcode.cn/problems/minimum-size-subarray-sum/\">力扣题目链接</a></p>\n<p>给定一个含有&nbsp;n&nbsp;个正整数的数组和一个正整数&nbsp;s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。</p>\n<p>示例：</p>\n<p>输入：s = 7, nums = [2,3,1,2,4,3] 输出：2 解释：子数组&nbsp;[4,3]&nbsp;是该条件下的长度最小的子数组。</p>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<h2 id=\"21-暴力解法\"><a class=\"markdownIt-Anchor\" href=\"#21-暴力解法\"></a> 2.1 暴力解法</h2>\n<p>两个 for 循环不断寻找符合条件的子序列, 时间复杂度: O(n^2), 空间复杂度 O(1)</p>\n<figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">minSubArrayLen</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s, vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums)</span> </span>{<br>        <span class=\"hljs-type\">int</span> result = INT32_MAX; <span class=\"hljs-comment\">// 最终的结果</span><br>        <span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 子序列的数值之和</span><br>        <span class=\"hljs-type\">int</span> subLength = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 子序列的长度</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>(); i++) { <span class=\"hljs-comment\">// 设置子序列起点为i</span><br>            sum = <span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = i; j &lt; nums.<span class=\"hljs-built_in\">size</span>(); j++) { <span class=\"hljs-comment\">// 设置子序列终止位置为j</span><br>                sum += nums[j];<br>                <span class=\"hljs-keyword\">if</span> (sum &gt;= s) { <span class=\"hljs-comment\">// 一旦发现子序列和超过了s，更新result</span><br>                    subLength = j - i + <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 取子序列的长度</span><br>                    result = result &lt; subLength ? result : subLength;<br>                    <span class=\"hljs-keyword\">break</span>; <span class=\"hljs-comment\">// 因为我们是找符合条件最短的子序列，所以一旦符合条件就break</span><br>                }<br>            }<br>        }<br>        <span class=\"hljs-comment\">// 如果result没有被赋值的话，就返回0，说明没有符合条件的子序列</span><br>        <span class=\"hljs-keyword\">return</span> result == INT32_MAX ? <span class=\"hljs-number\">0</span> : result;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<h2 id=\"22-滑动窗口\"><a class=\"markdownIt-Anchor\" href=\"#22-滑动窗口\"></a> 2.2 滑动窗口</h2>\n<p>滑动窗口的本质还是双指针, 因为只取起始指针和终止指针范围内的值,所以称为滑动窗口</p>\n<p>滑动窗口: <strong>就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果</strong>。</p>\n<p>只用一个 for 循环解决暴力循环中两个 for 循环的操作</p>\n<p>首先要思考 如果用一个for循环，那么应该表示 滑动窗口的起始位置，还是终止位置。<br>\n如果只用一个for循环来表示 滑动窗口的起始位置，那么如何遍历剩下的终止位置？<br>\n此时难免再次陷入 暴力解法的怪圈。<br>\n所以 只用一个for循环，那么这个循环的索引，一定是表示 滑动窗口的终止位置。</p>\n<p>s=7， 数组是 2，3，1，2，4，3，来看一下查找的过程：<br>\n<img src=\"https://code-thinking.cdn.bcebos.com/gifs/209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.gif\" alt=\"209.长度最小的子数组\"></p>\n<p>本题中实现滑动窗口，主要确定如下三点：<br>\n问:</p>\n<ul>\n<li>窗口内是什么？</li>\n<li>如何移动窗口的起始位置？</li>\n<li>如何移动窗口的结束位置？<br>\n答:</li>\n<li>窗口就是 满足其和 ≥ s 的长度最小的 连续 子数组。</li>\n<li>窗口的起始位置如何移动：如果当前窗口的值大于s了，窗口就要向前移动了（也就是该缩小了）。</li>\n<li>窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针，也就是for循环里的索引。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20210312160441942.png\" alt=\"leetcode_209|600\"></p>\n<p><strong>滑动窗口的精妙之处在于根据当前子序列和大小的情况，不断调节子序列的起始位置。从而将O(n^2)暴力解法降为O(n)。每个元素在滑动窗后进来操作一次，出去操作一次，每个元素都是被操作两次，所以时间复杂度是 2 × n 也就是O(n)</strong></p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>编译已通过</p>\n<figure class=\"highlight c++\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">minSubArrayLen</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> target, vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums)</span> </span>{<br>        <span class=\"hljs-type\">int</span> result = INT_MAX;<br>        <span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> subLength = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; nums.<span class=\"hljs-built_in\">size</span>(); j++){<br>            sum += nums[j];<br>            <span class=\"hljs-keyword\">while</span>(sum &gt;= target){<br>                subLength = j - i + <span class=\"hljs-number\">1</span>;<br>                result = subLength &lt; result ? subLength : result;<br>                sum -= nums[i]; <span class=\"hljs-comment\">// 缩短一个数之后的和</span><br>                i++; <span class=\"hljs-comment\">// 缩短区间,💡i不断的++,直至能sum &lt; target 跳出 while 循环</span><br>            }<br>        }<br>        <span class=\"hljs-keyword\">return</span> result == INT_MAX ? <span class=\"hljs-number\">0</span> : result;<br><br>    }<br>};<br></code></pre></td></tr></tbody></table></figure>\n<p>不要以为for里放一个while就以为是O(n^2)啊， 主要是看每一个元素被操作的次数，每个元素在滑动窗后进来操作一次，出去操作一次，每个元素都是被操作两次，所以时间复杂度是 2 × n 也就是O(n)。</p>\n<hr>\n<p><strong>参考资料</strong><br>\n<a href=\"https://www.programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html\">代码随想录</a></p>\n","site":{"data":{}},"wordcount":1840,"excerpt":"","more":"<h1 id=\"1-209长度最小的子数组\"><a class=\"markdownIt-Anchor\" href=\"#1-209长度最小的子数组\"></a> 1 209.长度最小的子数组</h1>\n<p><a href=\"https://leetcode.cn/problems/minimum-size-subarray-sum/\">力扣题目链接</a></p>\n<p>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。</p>\n<p>示例：</p>\n<p>输入：s = 7, nums = [2,3,1,2,4,3] 输出：2 解释：子数组 [4,3] 是该条件下的长度最小的子数组。</p>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<h2 id=\"21-暴力解法\"><a class=\"markdownIt-Anchor\" href=\"#21-暴力解法\"></a> 2.1 暴力解法</h2>\n<p>两个 for 循环不断寻找符合条件的子序列, 时间复杂度: O(n^2), 空间复杂度 O(1)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">minSubArrayLen</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s, vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> result = INT32_MAX; <span class=\"hljs-comment\">// 最终的结果</span><br>        <span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 子序列的数值之和</span><br>        <span class=\"hljs-type\">int</span> subLength = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 子序列的长度</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>(); i++) &#123; <span class=\"hljs-comment\">// 设置子序列起点为i</span><br>            sum = <span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = i; j &lt; nums.<span class=\"hljs-built_in\">size</span>(); j++) &#123; <span class=\"hljs-comment\">// 设置子序列终止位置为j</span><br>                sum += nums[j];<br>                <span class=\"hljs-keyword\">if</span> (sum &gt;= s) &#123; <span class=\"hljs-comment\">// 一旦发现子序列和超过了s，更新result</span><br>                    subLength = j - i + <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 取子序列的长度</span><br>                    result = result &lt; subLength ? result : subLength;<br>                    <span class=\"hljs-keyword\">break</span>; <span class=\"hljs-comment\">// 因为我们是找符合条件最短的子序列，所以一旦符合条件就break</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-comment\">// 如果result没有被赋值的话，就返回0，说明没有符合条件的子序列</span><br>        <span class=\"hljs-keyword\">return</span> result == INT32_MAX ? <span class=\"hljs-number\">0</span> : result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h2 id=\"22-滑动窗口\"><a class=\"markdownIt-Anchor\" href=\"#22-滑动窗口\"></a> 2.2 滑动窗口</h2>\n<p>滑动窗口的本质还是双指针, 因为只取起始指针和终止指针范围内的值,所以称为滑动窗口</p>\n<p>滑动窗口: <strong>就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果</strong>。</p>\n<p>只用一个 for 循环解决暴力循环中两个 for 循环的操作</p>\n<p>首先要思考 如果用一个for循环，那么应该表示 滑动窗口的起始位置，还是终止位置。<br />\n如果只用一个for循环来表示 滑动窗口的起始位置，那么如何遍历剩下的终止位置？<br />\n此时难免再次陷入 暴力解法的怪圈。<br />\n所以 只用一个for循环，那么这个循环的索引，一定是表示 滑动窗口的终止位置。</p>\n<p>s=7， 数组是 2，3，1，2，4，3，来看一下查找的过程：<br />\n<img src=\"https://code-thinking.cdn.bcebos.com/gifs/209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.gif\" alt=\"209.长度最小的子数组\" /></p>\n<p>本题中实现滑动窗口，主要确定如下三点：<br />\n问:</p>\n<ul>\n<li>窗口内是什么？</li>\n<li>如何移动窗口的起始位置？</li>\n<li>如何移动窗口的结束位置？<br />\n答:</li>\n<li>窗口就是 满足其和 ≥ s 的长度最小的 连续 子数组。</li>\n<li>窗口的起始位置如何移动：如果当前窗口的值大于s了，窗口就要向前移动了（也就是该缩小了）。</li>\n<li>窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针，也就是for循环里的索引。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20210312160441942.png\" alt=\"leetcode_209|600\" /></p>\n<p><strong>滑动窗口的精妙之处在于根据当前子序列和大小的情况，不断调节子序列的起始位置。从而将O(n^2)暴力解法降为O(n)。每个元素在滑动窗后进来操作一次，出去操作一次，每个元素都是被操作两次，所以时间复杂度是 2 × n 也就是O(n)</strong></p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>编译已通过</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">minSubArrayLen</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> target, vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> result = INT_MAX;<br>        <span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> subLength = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; nums.<span class=\"hljs-built_in\">size</span>(); j++)&#123;<br>            sum += nums[j];<br>            <span class=\"hljs-keyword\">while</span>(sum &gt;= target)&#123;<br>                subLength = j - i + <span class=\"hljs-number\">1</span>;<br>                result = subLength &lt; result ? subLength : result;<br>                sum -= nums[i]; <span class=\"hljs-comment\">// 缩短一个数之后的和</span><br>                i++; <span class=\"hljs-comment\">// 缩短区间,💡i不断的++,直至能sum &lt; target 跳出 while 循环</span><br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> result == INT_MAX ? <span class=\"hljs-number\">0</span> : result;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>不要以为for里放一个while就以为是O(n^2)啊， 主要是看每一个元素被操作的次数，每个元素在滑动窗后进来操作一次，出去操作一次，每个元素都是被操作两次，所以时间复杂度是 2 × n 也就是O(n)。</p>\n<hr />\n<p><strong>参考资料</strong><br />\n<a href=\"https://www.programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html\">代码随想录</a></p>\n"},{"abbrlink":3,"_content":"\n\n---\ndg-home: true\ndg-publish: true\n---\n# 1 1005.K次取反后最大化的数组和\n\n[力扣题目链接](https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations/)\n\n\n1131\n\n给定一个整数数组 A，我们只能用以下方法修改该数组：我们选择某个索引 i 并将 A[i] 替换为 -A[i]，然后总共重复这个过程 K 次。（我们可以多次选择同一个索引 i。）\n\n以这种方式修改数组后，返回数组可能的最大和。\n\n示例 1：\n\n-   输入：A = [4,2,3], K = 1\n-   输出：5\n-   解释：选择索引 (1,) ，然后 A 变为 [4,-2,3]。\n\n示例 2：\n\n-   输入：A = [3,-1,0,2], K = 3\n-   输出：6\n-   解释：选择索引 (1, 2, 2) ，然后 A 变为 [3,1,0,2]。\n\n示例 3：\n\n-   输入：A = [2,-3,-1,5,-4], K = 2\n-   输出：13\n-   解释：选择索引 (1, 4) ，然后 A 变为 [2,3,-1,5,4]。\n\n提示：\n\n-   1 <= A.length <= 10000\n-   1 <= K <= 10000\n-   -100 <= A[i] <= 100\n\n\n# 2 思路\n\n局部最优：让绝对值大的负数变成正数\n整体最优：整个数组求和变最大\n\n如果将负数都转变为正数了，K依然大于0，就把绝对值最小的数变为负数\n\n本题的解题步骤为：\n\n-   第一步：将数组按照绝对值大小从大到小排序，**注意要按照绝对值的大小**\n-   第二步：从前向后遍历，遇到负数将其变为正数，同时K--\n-   第三步：如果K还大于0，那么反复转变数值最小的元素，将K用完\n\t- 如果k是偶数则相当于没有变，因为可以对一个数重复两次操作\n\t- 如果是奇数，只需要操作一个数，剩下的就是偶数也不用管了\n\t\t- 即`if (K % 2 == 1) A[A.size() - 1] *= -1;`\n-   第四步：求和\n\n相关知识点\n\t[[sort函数]]\n\t[[for 循环]]\n\n# 3 代码\n\n\n自写：编译通过\n```cpp\nclass Solution {\nstatic bool cmp (int a , int b){\n    return abs(a) > abs(b);    \n}\npublic:\nint largestSumAfterKNegations(vector<int>& A, int K){\n    sort(A.begin(), A.end(), cmp); // 第一步\n    for (int i=0; i != A.size(); i++){ // 第二步\n        if (A[i] < 0 && K > 0){\n            A[i] *= -1;\n            K--;\n        }\n    }\n        if (K % 2 == 1){ // 第三步\n            A[A.size() - 1] *= -1;\n        }\n        int result = 0;\n        for (int a : A) result += a; // 注意是小a(A中的每个元素)\n        return result;\n    }\n\n};\n```\n","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/9. K次取反后最大化的数组和.md","raw":"---\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 贪心算法\nabbrlink: 3\n---\n\n\n---\ndg-home: true\ndg-publish: true\n---\n# 1 1005.K次取反后最大化的数组和\n\n[力扣题目链接](https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations/)\n\n\n1131\n\n给定一个整数数组 A，我们只能用以下方法修改该数组：我们选择某个索引 i 并将 A[i] 替换为 -A[i]，然后总共重复这个过程 K 次。（我们可以多次选择同一个索引 i。）\n\n以这种方式修改数组后，返回数组可能的最大和。\n\n示例 1：\n\n-   输入：A = [4,2,3], K = 1\n-   输出：5\n-   解释：选择索引 (1,) ，然后 A 变为 [4,-2,3]。\n\n示例 2：\n\n-   输入：A = [3,-1,0,2], K = 3\n-   输出：6\n-   解释：选择索引 (1, 2, 2) ，然后 A 变为 [3,1,0,2]。\n\n示例 3：\n\n-   输入：A = [2,-3,-1,5,-4], K = 2\n-   输出：13\n-   解释：选择索引 (1, 4) ，然后 A 变为 [2,3,-1,5,4]。\n\n提示：\n\n-   1 <= A.length <= 10000\n-   1 <= K <= 10000\n-   -100 <= A[i] <= 100\n\n\n# 2 思路\n\n局部最优：让绝对值大的负数变成正数\n整体最优：整个数组求和变最大\n\n如果将负数都转变为正数了，K依然大于0，就把绝对值最小的数变为负数\n\n本题的解题步骤为：\n\n-   第一步：将数组按照绝对值大小从大到小排序，**注意要按照绝对值的大小**\n-   第二步：从前向后遍历，遇到负数将其变为正数，同时K--\n-   第三步：如果K还大于0，那么反复转变数值最小的元素，将K用完\n\t- 如果k是偶数则相当于没有变，因为可以对一个数重复两次操作\n\t- 如果是奇数，只需要操作一个数，剩下的就是偶数也不用管了\n\t\t- 即`if (K % 2 == 1) A[A.size() - 1] *= -1;`\n-   第四步：求和\n\n相关知识点\n\t[[sort函数]]\n\t[[for 循环]]\n\n# 3 代码\n\n\n自写：编译通过\n```cpp\nclass Solution {\nstatic bool cmp (int a , int b){\n    return abs(a) > abs(b);    \n}\npublic:\nint largestSumAfterKNegations(vector<int>& A, int K){\n    sort(A.begin(), A.end(), cmp); // 第一步\n    for (int i=0; i != A.size(); i++){ // 第二步\n        if (A[i] < 0 && K > 0){\n            A[i] *= -1;\n            K--;\n        }\n    }\n        if (K % 2 == 1){ // 第三步\n            A[A.size() - 1] *= -1;\n        }\n        int result = 0;\n        for (int a : A) result += a; // 注意是小a(A中的每个元素)\n        return result;\n    }\n\n};\n```\n","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/贪心算法/9. K次取反后最大化的数组和","published":1,"date":"2022-05-30T13:30:31.000Z","updated":"2022-07-12T09:02:14.320Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ku8fki00joe0mga3phcpuv","content":"<hr>\n<h2 id=\"dg-home-truedg-publish-true\"><a class=\"markdownIt-Anchor\" href=\"#dg-home-truedg-publish-true\"></a> dg-home: true<br>\ndg-publish: true</h2>\n<h1 id=\"1-1005k次取反后最大化的数组和\"><a class=\"markdownIt-Anchor\" href=\"#1-1005k次取反后最大化的数组和\"></a> 1 1005.K次取反后最大化的数组和</h1>\n<p><a href=\"https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations/\">力扣题目链接</a></p>\n<p>1131</p>\n<p>给定一个整数数组 A，我们只能用以下方法修改该数组：我们选择某个索引 i&nbsp;并将 A[i] 替换为 -A[i]，然后总共重复这个过程 K 次。（我们可以多次选择同一个索引 i。）</p>\n<p>以这种方式修改数组后，返回数组可能的最大和。</p>\n<p>示例 1：</p>\n<ul>\n<li>输入：A = [4,2,3], K = 1</li>\n<li>输出：5</li>\n<li>解释：选择索引 (1,) ，然后 A 变为 [4,-2,3]。</li>\n</ul>\n<p>示例 2：</p>\n<ul>\n<li>输入：A = [3,-1,0,2], K = 3</li>\n<li>输出：6</li>\n<li>解释：选择索引 (1, 2, 2) ，然后 A 变为 [3,1,0,2]。</li>\n</ul>\n<p>示例 3：</p>\n<ul>\n<li>输入：A = [2,-3,-1,5,-4], K = 2</li>\n<li>输出：13</li>\n<li>解释：选择索引 (1, 4) ，然后 A 变为 [2,3,-1,5,4]。</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= A.length &lt;= 10000</li>\n<li>1 &lt;= K &lt;= 10000</li>\n<li>-100 &lt;= A[i] &lt;= 100</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>局部最优：让绝对值大的负数变成正数<br>\n整体最优：整个数组求和变最大</p>\n<p>如果将负数都转变为正数了，K依然大于0，就把绝对值最小的数变为负数</p>\n<p>本题的解题步骤为：</p>\n<ul>\n<li>第一步：将数组按照绝对值大小从大到小排序，<strong>注意要按照绝对值的大小</strong></li>\n<li>第二步：从前向后遍历，遇到负数将其变为正数，同时K–</li>\n<li>第三步：如果K还大于0，那么反复转变数值最小的元素，将K用完\n<ul>\n<li>如果k是偶数则相当于没有变，因为可以对一个数重复两次操作</li>\n<li>如果是奇数，只需要操作一个数，剩下的就是偶数也不用管了\n<ul>\n<li>即<code>if (K % 2 == 1) A[A.size() - 1] *= -1;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第四步：求和</li>\n</ul>\n<p>相关知识点<br>\n[[sort函数]]<br>\n[[for 循环]]</p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>自写：编译通过</p>\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br><span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a , <span class=\"hljs-type\">int</span> b)</span></span>{<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">abs</span>(a) &gt; <span class=\"hljs-built_in\">abs</span>(b);    <br>}<br><span class=\"hljs-keyword\">public</span>:<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">largestSumAfterKNegations</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; A, <span class=\"hljs-type\">int</span> K)</span></span>{<br>    <span class=\"hljs-built_in\">sort</span>(A.<span class=\"hljs-built_in\">begin</span>(), A.<span class=\"hljs-built_in\">end</span>(), cmp); <span class=\"hljs-comment\">// 第一步</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i != A.<span class=\"hljs-built_in\">size</span>(); i++){ <span class=\"hljs-comment\">// 第二步</span><br>        <span class=\"hljs-keyword\">if</span> (A[i] &lt; <span class=\"hljs-number\">0</span> &amp;&amp; K &gt; <span class=\"hljs-number\">0</span>){<br>            A[i] *= <span class=\"hljs-number\">-1</span>;<br>            K--;<br>        }<br>    }<br>        <span class=\"hljs-keyword\">if</span> (K % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>){ <span class=\"hljs-comment\">// 第三步</span><br>            A[A.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>] *= <span class=\"hljs-number\">-1</span>;<br>        }<br>        <span class=\"hljs-type\">int</span> result = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> a : A) result += a; <span class=\"hljs-comment\">// 注意是小a(A中的每个元素)</span><br>        <span class=\"hljs-keyword\">return</span> result;<br>    }<br><br>};<br></code></pre></td></tr></tbody></table></figure>\n","site":{"data":{}},"wordcount":1114,"excerpt":"","more":"<hr />\n<h2 id=\"dg-home-truedg-publish-true\"><a class=\"markdownIt-Anchor\" href=\"#dg-home-truedg-publish-true\"></a> dg-home: true<br />\ndg-publish: true</h2>\n<h1 id=\"1-1005k次取反后最大化的数组和\"><a class=\"markdownIt-Anchor\" href=\"#1-1005k次取反后最大化的数组和\"></a> 1 1005.K次取反后最大化的数组和</h1>\n<p><a href=\"https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations/\">力扣题目链接</a></p>\n<p>1131</p>\n<p>给定一个整数数组 A，我们只能用以下方法修改该数组：我们选择某个索引 i 并将 A[i] 替换为 -A[i]，然后总共重复这个过程 K 次。（我们可以多次选择同一个索引 i。）</p>\n<p>以这种方式修改数组后，返回数组可能的最大和。</p>\n<p>示例 1：</p>\n<ul>\n<li>输入：A = [4,2,3], K = 1</li>\n<li>输出：5</li>\n<li>解释：选择索引 (1,) ，然后 A 变为 [4,-2,3]。</li>\n</ul>\n<p>示例 2：</p>\n<ul>\n<li>输入：A = [3,-1,0,2], K = 3</li>\n<li>输出：6</li>\n<li>解释：选择索引 (1, 2, 2) ，然后 A 变为 [3,1,0,2]。</li>\n</ul>\n<p>示例 3：</p>\n<ul>\n<li>输入：A = [2,-3,-1,5,-4], K = 2</li>\n<li>输出：13</li>\n<li>解释：选择索引 (1, 4) ，然后 A 变为 [2,3,-1,5,4]。</li>\n</ul>\n<p>提示：</p>\n<ul>\n<li>1 &lt;= A.length &lt;= 10000</li>\n<li>1 &lt;= K &lt;= 10000</li>\n<li>-100 &lt;= A[i] &lt;= 100</li>\n</ul>\n<h1 id=\"2-思路\"><a class=\"markdownIt-Anchor\" href=\"#2-思路\"></a> 2 思路</h1>\n<p>局部最优：让绝对值大的负数变成正数<br />\n整体最优：整个数组求和变最大</p>\n<p>如果将负数都转变为正数了，K依然大于0，就把绝对值最小的数变为负数</p>\n<p>本题的解题步骤为：</p>\n<ul>\n<li>第一步：将数组按照绝对值大小从大到小排序，<strong>注意要按照绝对值的大小</strong></li>\n<li>第二步：从前向后遍历，遇到负数将其变为正数，同时K–</li>\n<li>第三步：如果K还大于0，那么反复转变数值最小的元素，将K用完\n<ul>\n<li>如果k是偶数则相当于没有变，因为可以对一个数重复两次操作</li>\n<li>如果是奇数，只需要操作一个数，剩下的就是偶数也不用管了\n<ul>\n<li>即<code>if (K % 2 == 1) A[A.size() - 1] *= -1;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第四步：求和</li>\n</ul>\n<p>相关知识点<br />\n[[sort函数]]<br />\n[[for 循环]]</p>\n<h1 id=\"3-代码\"><a class=\"markdownIt-Anchor\" href=\"#3-代码\"></a> 3 代码</h1>\n<p>自写：编译通过</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a , <span class=\"hljs-type\">int</span> b)</span></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">abs</span>(a) &gt; <span class=\"hljs-built_in\">abs</span>(b);    <br>&#125;<br><span class=\"hljs-keyword\">public</span>:<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">largestSumAfterKNegations</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; A, <span class=\"hljs-type\">int</span> K)</span></span>&#123;<br>    <span class=\"hljs-built_in\">sort</span>(A.<span class=\"hljs-built_in\">begin</span>(), A.<span class=\"hljs-built_in\">end</span>(), cmp); <span class=\"hljs-comment\">// 第一步</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i != A.<span class=\"hljs-built_in\">size</span>(); i++)&#123; <span class=\"hljs-comment\">// 第二步</span><br>        <span class=\"hljs-keyword\">if</span> (A[i] &lt; <span class=\"hljs-number\">0</span> &amp;&amp; K &gt; <span class=\"hljs-number\">0</span>)&#123;<br>            A[i] *= <span class=\"hljs-number\">-1</span>;<br>            K--;<br>        &#125;<br>    &#125;<br>        <span class=\"hljs-keyword\">if</span> (K % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>)&#123; <span class=\"hljs-comment\">// 第三步</span><br>            A[A.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>] *= <span class=\"hljs-number\">-1</span>;<br>        &#125;<br>        <span class=\"hljs-type\">int</span> result = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> a : A) result += a; <span class=\"hljs-comment\">// 注意是小a(A中的每个元素)</span><br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure>\n"},{"cards-deck":"source::_posts::👨🏻‍💻code::数据结构与算法::代码随想录::动态规划::测试.md","title":"测试","date":"2022-08-09T06:29:00.000Z","abbrlink":37774,"_content":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n **参考资料**","source":"_posts/👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/测试.md","raw":"---\ncards-deck: source::_posts::👨🏻‍💻code::数据结构与算法::代码随想录::动态规划::测试.md\ntitle: 测试\ndate: '2022-08-09 14:29'\ncategories:\n  - \"\\U0001F468\\U0001F3FB‍\\U0001F4BBcode\"\n  - 数据结构与算法\n  - 代码随想录\n  - 动态规划\nabbrlink: 37774\ntags:\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n **参考资料**","slug":"👨🏻‍💻code/数据结构与算法/代码随想录/动态规划/测试","published":1,"updated":"2022-08-09T06:30:18.822Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6lxn3bj00008qmg76pu1dwg","content":"<hr>\n<p><strong>参考资料</strong></p>\n","site":{"data":{}},"wordcount":4,"excerpt":"","more":"<hr />\n<p><strong>参考资料</strong></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl6ku8fit0009e0mg3o12dkk9","category_id":"cl6ku8fir0004e0mg90ahcv1i","_id":"cl6ku8fiw000je0mgenbg7lbj"},{"post_id":"cl6ku8fio0001e0mghlvw3bkw","category_id":"cl6ku8fir0004e0mg90ahcv1i","_id":"cl6ku8fix000le0mgczxcgphw"},{"post_id":"cl6ku8fiu000be0mghzb30kbo","category_id":"cl6ku8fir0004e0mg90ahcv1i","_id":"cl6ku8fix000oe0mgb97gg4po"},{"post_id":"cl6ku8fiv000fe0mgdx5p70r8","category_id":"cl6ku8fir0004e0mg90ahcv1i","_id":"cl6ku8fiy000se0mg20d549yt"},{"post_id":"cl6ku8fit0007e0mg445walpp","category_id":"cl6ku8fir0004e0mg90ahcv1i","_id":"cl6ku8fiy000ue0mght1lc5bc"},{"post_id":"cl6ku8fiw000ie0mggzwv3sne","category_id":"cl6ku8fir0004e0mg90ahcv1i","_id":"cl6ku8fiy000ye0mg0tuj992d"},{"post_id":"cl6ku8fiy000te0mg9cxa60gg","category_id":"cl6ku8fix000pe0mg71ks4zmr","_id":"cl6ku8fiz0012e0mg4nvcgy58"},{"post_id":"cl6ku8fiw000ke0mg79w1fa5d","category_id":"cl6ku8fix000pe0mg71ks4zmr","_id":"cl6ku8fiz0016e0mgc4fv106d"},{"post_id":"cl6ku8fiy000we0mg0h4i61tt","category_id":"cl6ku8fix000pe0mg71ks4zmr","_id":"cl6ku8fj1001ae0mgfgf574y7"},{"post_id":"cl6ku8fix000me0mg27x75f3p","category_id":"cl6ku8fix000pe0mg71ks4zmr","_id":"cl6ku8fj1001de0mghcq38590"},{"post_id":"cl6ku8fix000re0mgemhgf1ou","category_id":"cl6ku8fix000pe0mg71ks4zmr","_id":"cl6ku8fj1001fe0mg2hdmgix1"},{"post_id":"cl6ku8fj1001ce0mgaurhhsp2","category_id":"cl6ku8fj1001be0mgg0wq29oo","_id":"cl6ku8fj60029e0mghp3r5q2h"},{"post_id":"cl6ku8fj1001ce0mgaurhhsp2","category_id":"cl6ku8fj4001we0mgbd3xasco","_id":"cl6ku8fj7002ce0mgfnjrdhju"},{"post_id":"cl6ku8fiy000ze0mgf91y0y0s","category_id":"cl6ku8fj1001be0mgg0wq29oo","_id":"cl6ku8fj7002fe0mght499xx6"},{"post_id":"cl6ku8fiy000ze0mgf91y0y0s","category_id":"cl6ku8fj4001we0mgbd3xasco","_id":"cl6ku8fj8002ke0mg85lj22j2"},{"post_id":"cl6ku8fj1001ee0mg57aigmjy","category_id":"cl6ku8fix000pe0mg71ks4zmr","_id":"cl6ku8fj8002oe0mg0yete3rd"},{"post_id":"cl6ku8fj1001ee0mg57aigmjy","category_id":"cl6ku8fj60028e0mg1fvr9k48","_id":"cl6ku8fj9002re0mgh3nc4z2t"},{"post_id":"cl6ku8fj2001je0mg840u2f6f","category_id":"cl6ku8fix000pe0mg71ks4zmr","_id":"cl6ku8fj9002ve0mgh1qk6oap"},{"post_id":"cl6ku8fj2001je0mg840u2f6f","category_id":"cl6ku8fj60028e0mg1fvr9k48","_id":"cl6ku8fj9002ye0mg4nos4ipv"},{"post_id":"cl6ku8fiz0011e0mgd0eec34z","category_id":"cl6ku8fj1001be0mgg0wq29oo","_id":"cl6ku8fja0032e0mg9p9m06pj"},{"post_id":"cl6ku8fiz0011e0mgd0eec34z","category_id":"cl6ku8fj4001we0mgbd3xasco","_id":"cl6ku8fja0035e0mg3qf38pxi"},{"post_id":"cl6ku8fj2001le0mgdyyu8jgx","category_id":"cl6ku8fix000pe0mg71ks4zmr","_id":"cl6ku8fja0038e0mgb48xb4sw"},{"post_id":"cl6ku8fj2001le0mgdyyu8jgx","category_id":"cl6ku8fj60028e0mg1fvr9k48","_id":"cl6ku8fjb003be0mgal9k9jyo"},{"post_id":"cl6ku8fj2001pe0mg50z7gxcy","category_id":"cl6ku8fix000pe0mg71ks4zmr","_id":"cl6ku8fjb003he0mghr2ff5h5"},{"post_id":"cl6ku8fj2001pe0mg50z7gxcy","category_id":"cl6ku8fja0031e0mga15vc1tb","_id":"cl6ku8fjb003ke0mg8utndl54"},{"post_id":"cl6ku8fiz0015e0mg1eudcq1b","category_id":"cl6ku8fj1001be0mgg0wq29oo","_id":"cl6ku8fjc003oe0mga36u5bn7"},{"post_id":"cl6ku8fiz0015e0mg1eudcq1b","category_id":"cl6ku8fj4001we0mgbd3xasco","_id":"cl6ku8fjc003re0mg5by251fw"},{"post_id":"cl6ku8fj3001te0mg7lwehnbv","category_id":"cl6ku8fix000pe0mg71ks4zmr","_id":"cl6ku8fjd0041e0mg4d0p6e49"},{"post_id":"cl6ku8fj3001te0mg7lwehnbv","category_id":"cl6ku8fja0031e0mga15vc1tb","_id":"cl6ku8fje0044e0mg7ssn84tr"},{"post_id":"cl6ku8fiz0019e0mg2icgbcsg","category_id":"cl6ku8fj1001be0mgg0wq29oo","_id":"cl6ku8fje0048e0mge3yg6lvn"},{"post_id":"cl6ku8fiz0019e0mg2icgbcsg","category_id":"cl6ku8fj4001we0mgbd3xasco","_id":"cl6ku8fje004be0mg7ig6cod6"},{"post_id":"cl6ku8fj3001qe0mg97950214","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fjs007fe0mgbr4wb2wr"},{"post_id":"cl6ku8fj3001qe0mg97950214","category_id":"cl6ku8fjr0073e0mg0gneb4xh","_id":"cl6ku8fjs007he0mg02l85egb"},{"post_id":"cl6ku8fj3001ve0mga9g194q9","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fjt0085e0mg95ux12yo"},{"post_id":"cl6ku8fj3001ve0mga9g194q9","category_id":"cl6ku8fjs0080e0mg7bojczrs","_id":"cl6ku8fjt0086e0mg9kt3a68q"},{"post_id":"cl6ku8fj4001ye0mgbgzpe4zx","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fjt008ae0mggyp8e7lx"},{"post_id":"cl6ku8fj4001ye0mgbgzpe4zx","category_id":"cl6ku8fjt0087e0mg8xgr23f9","_id":"cl6ku8fjt008be0mgb2gi3ofo"},{"post_id":"cl6ku8fjb003je0mg8kzaffrh","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fjy009re0mgb1374vd4"},{"post_id":"cl6ku8fjb003je0mg8kzaffrh","category_id":"cl6ku8fjq006xe0mg84qz6atm","_id":"cl6ku8fjy009se0mg2k7025mt"},{"post_id":"cl6ku8fjb003je0mg8kzaffrh","category_id":"cl6ku8fjx009oe0mgc202c3py","_id":"cl6ku8fjy009ue0mg5w0f2tkm"},{"post_id":"cl6ku8fjc003ne0mg76nnh3rz","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fjz009ye0mg95q2dysp"},{"post_id":"cl6ku8fjc003ne0mg76nnh3rz","category_id":"cl6ku8fjq006xe0mg84qz6atm","_id":"cl6ku8fjz009ze0mg3a4t7jiq"},{"post_id":"cl6ku8fjc003ne0mg76nnh3rz","category_id":"cl6ku8fjx009oe0mgc202c3py","_id":"cl6ku8fjz00a1e0mg5g3j0e3c"},{"post_id":"cl6ku8fjc003qe0mgbnmn3r8c","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fjz00a2e0mg074cgjz8"},{"post_id":"cl6ku8fjc003qe0mgbnmn3r8c","category_id":"cl6ku8fjq006xe0mg84qz6atm","_id":"cl6ku8fjz00a4e0mgaseme46m"},{"post_id":"cl6ku8fjc003qe0mgbnmn3r8c","category_id":"cl6ku8fjx009oe0mgc202c3py","_id":"cl6ku8fjz00a5e0mgdycpflgz"},{"post_id":"cl6ku8fjc003ue0mgdr9ygr18","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fjz00a6e0mgfw488u1z"},{"post_id":"cl6ku8fjc003ue0mgdr9ygr18","category_id":"cl6ku8fjq006xe0mg84qz6atm","_id":"cl6ku8fjz00a8e0mg3len7u14"},{"post_id":"cl6ku8fjc003ue0mgdr9ygr18","category_id":"cl6ku8fjx009oe0mgc202c3py","_id":"cl6ku8fk000a9e0mg74eff4pw"},{"post_id":"cl6ku8fjd003we0mgfrglblw5","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk000abe0mgb8nh87yk"},{"post_id":"cl6ku8fjd003we0mgfrglblw5","category_id":"cl6ku8fjq006xe0mg84qz6atm","_id":"cl6ku8fk000ace0mg8oj93c4d"},{"post_id":"cl6ku8fjd003we0mgfrglblw5","category_id":"cl6ku8fjx009oe0mgc202c3py","_id":"cl6ku8fk000aee0mg7pv7gkdm"},{"post_id":"cl6ku8fjd003ze0mg0ky2e0hy","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk000afe0mg3gd0fsss"},{"post_id":"cl6ku8fjd003ze0mg0ky2e0hy","category_id":"cl6ku8fjs007se0mgdos2h84i","_id":"cl6ku8fk000ahe0mg376lg0rn"},{"post_id":"cl6ku8fjd003ze0mg0ky2e0hy","category_id":"cl6ku8fjz00a3e0mgf8p88g05","_id":"cl6ku8fk000aie0mga4uxcsj3"},{"post_id":"cl6ku8fj40020e0mghjmb3zjx","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk000ane0mgd9zwdfs6"},{"post_id":"cl6ku8fj40020e0mghjmb3zjx","category_id":"cl6ku8fjs007se0mgdos2h84i","_id":"cl6ku8fk100aoe0mg3gu74oyx"},{"post_id":"cl6ku8fj40020e0mghjmb3zjx","category_id":"cl6ku8fjz00a3e0mgf8p88g05","_id":"cl6ku8fk100aqe0mg64lqe5bt"},{"post_id":"cl6ku8fj60024e0mg0xjr02hb","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk100ate0mg46nq6v0m"},{"post_id":"cl6ku8fj60024e0mg0xjr02hb","category_id":"cl6ku8fjs007se0mgdos2h84i","_id":"cl6ku8fk100aue0mg3n0067hf"},{"post_id":"cl6ku8fj60024e0mg0xjr02hb","category_id":"cl6ku8fjz00a3e0mgf8p88g05","_id":"cl6ku8fk100awe0mg8f91aq85"},{"post_id":"cl6ku8fj60026e0mga6rv85xv","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk100aze0mga0jmhpzd"},{"post_id":"cl6ku8fj60026e0mga6rv85xv","category_id":"cl6ku8fjs007se0mgdos2h84i","_id":"cl6ku8fk100b0e0mgbljzhca3"},{"post_id":"cl6ku8fj60026e0mga6rv85xv","category_id":"cl6ku8fjz00a3e0mgf8p88g05","_id":"cl6ku8fk100b2e0mg91tr3qkh"},{"post_id":"cl6ku8fj7002be0mg1c034j8r","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk100b5e0mg2fq84uh7"},{"post_id":"cl6ku8fj7002be0mg1c034j8r","category_id":"cl6ku8fjs007se0mgdos2h84i","_id":"cl6ku8fk100b6e0mg9pvx68pw"},{"post_id":"cl6ku8fj7002be0mg1c034j8r","category_id":"cl6ku8fjz00a3e0mgf8p88g05","_id":"cl6ku8fk100b8e0mg328db2po"},{"post_id":"cl6ku8fj7002ee0mg0ca442d6","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk200bbe0mg94l1471a"},{"post_id":"cl6ku8fj7002ee0mg0ca442d6","category_id":"cl6ku8fjs007se0mgdos2h84i","_id":"cl6ku8fk200bce0mgbo1ma4ad"},{"post_id":"cl6ku8fj7002ee0mg0ca442d6","category_id":"cl6ku8fjz00a3e0mgf8p88g05","_id":"cl6ku8fk300bee0mg7a0vez54"},{"post_id":"cl6ku8fj7002ie0mg9zqfddvh","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk300bhe0mgf2hrfeac"},{"post_id":"cl6ku8fj7002ie0mg9zqfddvh","category_id":"cl6ku8fjs007se0mgdos2h84i","_id":"cl6ku8fk300bie0mg3d3rc509"},{"post_id":"cl6ku8fj7002ie0mg9zqfddvh","category_id":"cl6ku8fjz00a3e0mgf8p88g05","_id":"cl6ku8fk300bke0mg0uemawsv"},{"post_id":"cl6ku8fj8002me0mg9rujet2g","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk300bne0mg7ruh11th"},{"post_id":"cl6ku8fj8002me0mg9rujet2g","category_id":"cl6ku8fjs007se0mgdos2h84i","_id":"cl6ku8fk300boe0mg47wl4h0z"},{"post_id":"cl6ku8fj8002me0mg9rujet2g","category_id":"cl6ku8fjz00a3e0mgf8p88g05","_id":"cl6ku8fk300bqe0mg185215bd"},{"post_id":"cl6ku8fj8002pe0mgg1l309hc","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk400bte0mgbugk3y03"},{"post_id":"cl6ku8fj8002pe0mgg1l309hc","category_id":"cl6ku8fjs007se0mgdos2h84i","_id":"cl6ku8fk400bue0mgdmfy2ubc"},{"post_id":"cl6ku8fj8002pe0mgg1l309hc","category_id":"cl6ku8fjz00a3e0mgf8p88g05","_id":"cl6ku8fk400bwe0mgf2oegln4"},{"post_id":"cl6ku8fj9002se0mgdj1r72vm","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk400bze0mg87lt6o47"},{"post_id":"cl6ku8fj9002se0mgdj1r72vm","category_id":"cl6ku8fjs007se0mgdos2h84i","_id":"cl6ku8fk400c0e0mg0iyj8l08"},{"post_id":"cl6ku8fj9002se0mgdj1r72vm","category_id":"cl6ku8fjz00a3e0mgf8p88g05","_id":"cl6ku8fk400c2e0mg7v2he1b4"},{"post_id":"cl6ku8fj9002we0mg0dyddgso","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk400c5e0mgbsycd1kl"},{"post_id":"cl6ku8fj9002we0mg0dyddgso","category_id":"cl6ku8fjs007se0mgdos2h84i","_id":"cl6ku8fk400c6e0mgaonp7no6"},{"post_id":"cl6ku8fj9002we0mg0dyddgso","category_id":"cl6ku8fjz00a3e0mgf8p88g05","_id":"cl6ku8fk400c8e0mgamdgdr9o"},{"post_id":"cl6ku8fj9002ze0mgaumu7h41","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk400cbe0mggezu0v0x"},{"post_id":"cl6ku8fj9002ze0mgaumu7h41","category_id":"cl6ku8fjs007se0mgdos2h84i","_id":"cl6ku8fk400cce0mgftlz4f44"},{"post_id":"cl6ku8fj9002ze0mgaumu7h41","category_id":"cl6ku8fjz00a3e0mgf8p88g05","_id":"cl6ku8fk400cee0mg8t02344r"},{"post_id":"cl6ku8fja0033e0mggp4cg5p4","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk500che0mgdh0qhg6j"},{"post_id":"cl6ku8fja0033e0mggp4cg5p4","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fk500cie0mg2kvhdus6"},{"post_id":"cl6ku8fja0033e0mggp4cg5p4","category_id":"cl6ku8fk400cde0mg6m4ubl8v","_id":"cl6ku8fk500cke0mg0daab1rc"},{"post_id":"cl6ku8fja0036e0mg6s7qdgwx","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk500cne0mg9ftw057y"},{"post_id":"cl6ku8fja0036e0mg6s7qdgwx","category_id":"cl6ku8fjq006xe0mg84qz6atm","_id":"cl6ku8fk500coe0mg75o1dozk"},{"post_id":"cl6ku8fja0036e0mg6s7qdgwx","category_id":"cl6ku8fk500cje0mg80ynb830","_id":"cl6ku8fk500cqe0mg0lyj6q9i"},{"post_id":"cl6ku8fja0039e0mggvvs3c6n","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk500cte0mgbo5g24ja"},{"post_id":"cl6ku8fja0039e0mggvvs3c6n","category_id":"cl6ku8fjq006xe0mg84qz6atm","_id":"cl6ku8fk500cue0mg777m91ff"},{"post_id":"cl6ku8fja0039e0mggvvs3c6n","category_id":"cl6ku8fjx009oe0mgc202c3py","_id":"cl6ku8fk500cwe0mgacxwg2k4"},{"post_id":"cl6ku8fjb003de0mg1cet8p9g","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk500cze0mgan8vb1ff"},{"post_id":"cl6ku8fjb003de0mg1cet8p9g","category_id":"cl6ku8fjq006xe0mg84qz6atm","_id":"cl6ku8fk500d0e0mg6bmr8ks2"},{"post_id":"cl6ku8fjb003de0mg1cet8p9g","category_id":"cl6ku8fjx009oe0mgc202c3py","_id":"cl6ku8fk500d2e0mgc5e2gsr2"},{"post_id":"cl6ku8fjb003fe0mg0999a892","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk600d5e0mgbjwr8xlp"},{"post_id":"cl6ku8fjb003fe0mg0999a892","category_id":"cl6ku8fjq006xe0mg84qz6atm","_id":"cl6ku8fk600d6e0mgdropgesu"},{"post_id":"cl6ku8fjb003fe0mg0999a892","category_id":"cl6ku8fjx009oe0mgc202c3py","_id":"cl6ku8fk600d8e0mg0k36axrl"},{"post_id":"cl6ku8fjd0042e0mgh59016ha","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk600dee0mgcw3o1mfh"},{"post_id":"cl6ku8fjd0042e0mgh59016ha","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fk600dfe0mg9y8wcttb"},{"post_id":"cl6ku8fjd0042e0mgh59016ha","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fk600dge0mg2c3d38tm"},{"post_id":"cl6ku8fjd0042e0mgh59016ha","category_id":"cl6ku8fk600dbe0mgbte7friv","_id":"cl6ku8fk600die0mgb9t5eu07"},{"post_id":"cl6ku8fje0046e0mgearb1u93","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk600dje0mg8kumat74"},{"post_id":"cl6ku8fje0046e0mgearb1u93","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fk600dle0mg9wdp4r4f"},{"post_id":"cl6ku8fje0046e0mgearb1u93","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fk700dme0mgh6vpd7m8"},{"post_id":"cl6ku8fje0046e0mgearb1u93","category_id":"cl6ku8fk600dbe0mgbte7friv","_id":"cl6ku8fk700doe0mg0w8wf6k5"},{"post_id":"cl6ku8fje0049e0mgbdcbckwn","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk700dpe0mgaxqi2inr"},{"post_id":"cl6ku8fje0049e0mgbdcbckwn","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fk700dre0mg1ziga99o"},{"post_id":"cl6ku8fje0049e0mgbdcbckwn","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fk700dse0mg06yqclkh"},{"post_id":"cl6ku8fje0049e0mgbdcbckwn","category_id":"cl6ku8fk600dde0mg7qtid23k","_id":"cl6ku8fk700due0mgcs2a8qnw"},{"post_id":"cl6ku8fjf004de0mgfad00yhn","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk700dve0mg0q0vdxeh"},{"post_id":"cl6ku8fjf004de0mgfad00yhn","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fk700dxe0mghu3lf52q"},{"post_id":"cl6ku8fjf004de0mgfad00yhn","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fk700dye0mggx9130yj"},{"post_id":"cl6ku8fjf004de0mgfad00yhn","category_id":"cl6ku8fk600dhe0mgbd7469yx","_id":"cl6ku8fk700e0e0mgb6672vwa"},{"post_id":"cl6ku8fjf004fe0mghkuh1dey","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk700e1e0mga51ghulb"},{"post_id":"cl6ku8fjf004fe0mghkuh1dey","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fk700e3e0mgbra0571v"},{"post_id":"cl6ku8fjf004fe0mghkuh1dey","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fk700e4e0mg1buj1239"},{"post_id":"cl6ku8fjf004fe0mghkuh1dey","category_id":"cl6ku8fk600dhe0mgbd7469yx","_id":"cl6ku8fk700e6e0mg2f32cjan"},{"post_id":"cl6ku8fjf004ie0mgeol28kkd","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk700e7e0mg8ii34ipi"},{"post_id":"cl6ku8fjf004ie0mgeol28kkd","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fk700e9e0mg308911mx"},{"post_id":"cl6ku8fjf004ie0mgeol28kkd","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fk700eae0mgfiij3u7i"},{"post_id":"cl6ku8fjf004ie0mgeol28kkd","category_id":"cl6ku8fk600dhe0mgbd7469yx","_id":"cl6ku8fk800ece0mg37c5bbw5"},{"post_id":"cl6ku8fjf004ke0mg2fw8dgsv","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk800ede0mge7qq5zqv"},{"post_id":"cl6ku8fjf004ke0mg2fw8dgsv","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fk800efe0mg1yiwg8tw"},{"post_id":"cl6ku8fjf004ke0mg2fw8dgsv","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fk800ege0mgc9nf8ukl"},{"post_id":"cl6ku8fjf004ke0mg2fw8dgsv","category_id":"cl6ku8fk600dhe0mgbd7469yx","_id":"cl6ku8fk800eie0mg1wbacbhm"},{"post_id":"cl6ku8fjg004ne0mg6mq9euev","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk800eje0mg6ihve2ef"},{"post_id":"cl6ku8fjg004ne0mg6mq9euev","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fk800ele0mg2jbuf8uz"},{"post_id":"cl6ku8fjg004ne0mg6mq9euev","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fk800eme0mg009navie"},{"post_id":"cl6ku8fjg004ne0mg6mq9euev","category_id":"cl6ku8fk600dhe0mgbd7469yx","_id":"cl6ku8fk800eoe0mgb4bbgd6z"},{"post_id":"cl6ku8fjg004pe0mg0ne73di1","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk800epe0mg7xff9qk5"},{"post_id":"cl6ku8fjg004pe0mg0ne73di1","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fk900ere0mghl731g5i"},{"post_id":"cl6ku8fjg004pe0mg0ne73di1","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fk900ese0mgcukz0ja8"},{"post_id":"cl6ku8fjg004pe0mg0ne73di1","category_id":"cl6ku8fk600dhe0mgbd7469yx","_id":"cl6ku8fk900eue0mgatfzeau4"},{"post_id":"cl6ku8fjg004re0mg7275bl8q","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk900eve0mgbafia3x4"},{"post_id":"cl6ku8fjg004re0mg7275bl8q","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fk900exe0mg57z9ewlh"},{"post_id":"cl6ku8fjg004re0mg7275bl8q","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fk900eye0mg936xgnf7"},{"post_id":"cl6ku8fjg004re0mg7275bl8q","category_id":"cl6ku8fk700dze0mgbquc9705","_id":"cl6ku8fk900f0e0mgcpbh6ri8"},{"post_id":"cl6ku8fjh004ue0mg6qzbf578","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk900f1e0mgaoh8fyv5"},{"post_id":"cl6ku8fjh004ue0mg6qzbf578","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fk900f3e0mg7q0pd5wo"},{"post_id":"cl6ku8fjh004ue0mg6qzbf578","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fk900f4e0mgasu9449u"},{"post_id":"cl6ku8fjh004ue0mg6qzbf578","category_id":"cl6ku8fk700dze0mgbquc9705","_id":"cl6ku8fk900f6e0mg3yaw5v09"},{"post_id":"cl6ku8fjh004xe0mgear7dhyc","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fk900f7e0mgcgo36f23"},{"post_id":"cl6ku8fjh004xe0mgear7dhyc","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fk900f9e0mgb47lhe0g"},{"post_id":"cl6ku8fjh004xe0mgear7dhyc","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fk900fae0mg68stfz7g"},{"post_id":"cl6ku8fjh004xe0mgear7dhyc","category_id":"cl6ku8fk700dze0mgbquc9705","_id":"cl6ku8fka00fce0mg7fahbnsa"},{"post_id":"cl6ku8fjh0050e0mg3sfoe8ht","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fka00fde0mgc5rhako5"},{"post_id":"cl6ku8fjh0050e0mg3sfoe8ht","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fka00ffe0mgeff70ojp"},{"post_id":"cl6ku8fjh0050e0mg3sfoe8ht","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fka00fge0mg08kner6x"},{"post_id":"cl6ku8fjh0050e0mg3sfoe8ht","category_id":"cl6ku8fk700dze0mgbquc9705","_id":"cl6ku8fka00fie0mg2c3eg4f5"},{"post_id":"cl6ku8fjh0053e0mgdngp8063","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fka00fje0mg3xm51zfa"},{"post_id":"cl6ku8fjh0053e0mgdngp8063","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fka00fle0mgbxr7aory"},{"post_id":"cl6ku8fjh0053e0mgdngp8063","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fka00fme0mge0p6004h"},{"post_id":"cl6ku8fjh0053e0mgdngp8063","category_id":"cl6ku8fk700dze0mgbquc9705","_id":"cl6ku8fka00foe0mgg18131jv"},{"post_id":"cl6ku8fji0056e0mgcfi2g20c","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fka00fpe0mggcth247m"},{"post_id":"cl6ku8fji0056e0mgcfi2g20c","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fka00fre0mggubpdt6u"},{"post_id":"cl6ku8fji0056e0mgcfi2g20c","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fka00fse0mg4kr7dhbm"},{"post_id":"cl6ku8fji0056e0mgcfi2g20c","category_id":"cl6ku8fk700dze0mgbquc9705","_id":"cl6ku8fka00fue0mgezzm5cw1"},{"post_id":"cl6ku8fji0058e0mgecx36na0","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fka00fve0mg8q0ge179"},{"post_id":"cl6ku8fji0058e0mgecx36na0","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fka00fxe0mg0gei24sq"},{"post_id":"cl6ku8fji0058e0mgecx36na0","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkb00fye0mg5h2adu79"},{"post_id":"cl6ku8fji0058e0mgecx36na0","category_id":"cl6ku8fk700dze0mgbquc9705","_id":"cl6ku8fkb00g0e0mg1lo7bvyc"},{"post_id":"cl6ku8fjj005ce0mg6lpobdnj","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkb00g1e0mg63sg8r5l"},{"post_id":"cl6ku8fjj005ce0mg6lpobdnj","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkb00g3e0mggpda4719"},{"post_id":"cl6ku8fjj005ce0mg6lpobdnj","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkb00g4e0mggd2r4jw0"},{"post_id":"cl6ku8fjj005ce0mg6lpobdnj","category_id":"cl6ku8fk700dze0mgbquc9705","_id":"cl6ku8fkb00g6e0mg1eizh6sg"},{"post_id":"cl6ku8fjj005ee0mg4oc8b4ru","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkb00g7e0mg80e56rhq"},{"post_id":"cl6ku8fjj005ee0mg4oc8b4ru","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkb00g9e0mg5iyx964i"},{"post_id":"cl6ku8fjj005ee0mg4oc8b4ru","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkb00gae0mg0699hrdu"},{"post_id":"cl6ku8fjj005ee0mg4oc8b4ru","category_id":"cl6ku8fk700dze0mgbquc9705","_id":"cl6ku8fkb00gce0mg0wvmfv5k"},{"post_id":"cl6ku8fjj005ie0mg47ci7xwo","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkb00gde0mg1ayy4pkd"},{"post_id":"cl6ku8fjj005ie0mg47ci7xwo","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkb00gfe0mg5hgxe7nk"},{"post_id":"cl6ku8fjj005ie0mg47ci7xwo","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkb00gge0mg9s4j8vyt"},{"post_id":"cl6ku8fjj005ie0mg47ci7xwo","category_id":"cl6ku8fk700dze0mgbquc9705","_id":"cl6ku8fkb00gie0mgc0wdc3d1"},{"post_id":"cl6ku8fjk005ke0mg2fw9bm6q","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkb00gje0mg0wu86mr1"},{"post_id":"cl6ku8fjk005ke0mg2fw9bm6q","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkc00gke0mg4z2od41u"},{"post_id":"cl6ku8fjk005ke0mg2fw9bm6q","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkc00gle0mg8vk00459"},{"post_id":"cl6ku8fjk005ke0mg2fw9bm6q","category_id":"cl6ku8fk700dze0mgbquc9705","_id":"cl6ku8fkc00gme0mg7u4hamp3"},{"post_id":"cl6ku8fjk005oe0mg9els8xjk","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkc00gne0mgbsxmfvkn"},{"post_id":"cl6ku8fjk005oe0mg9els8xjk","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkc00goe0mg3wl5a19s"},{"post_id":"cl6ku8fjk005oe0mg9els8xjk","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkc00gpe0mg9b3o565u"},{"post_id":"cl6ku8fjk005oe0mg9els8xjk","category_id":"cl6ku8fk700dze0mgbquc9705","_id":"cl6ku8fkc00gqe0mg786xgazh"},{"post_id":"cl6ku8fjk005qe0mg6pcy9e81","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkc00gre0mg4h2wax2l"},{"post_id":"cl6ku8fjk005qe0mg6pcy9e81","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkc00gse0mg1b9n3ik2"},{"post_id":"cl6ku8fjk005qe0mg6pcy9e81","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkc00gte0mgblaybt62"},{"post_id":"cl6ku8fjk005qe0mg6pcy9e81","category_id":"cl6ku8fk700dze0mgbquc9705","_id":"cl6ku8fkc00gue0mgbfsd3w76"},{"post_id":"cl6ku8fjl005ue0mg35g51krz","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkc00gve0mg8y262i6s"},{"post_id":"cl6ku8fjl005ue0mg35g51krz","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkc00gwe0mg159weksz"},{"post_id":"cl6ku8fjl005ue0mg35g51krz","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkc00gxe0mg077a0ojq"},{"post_id":"cl6ku8fjl005ue0mg35g51krz","category_id":"cl6ku8fk700dze0mgbquc9705","_id":"cl6ku8fkc00gye0mg6rjuaegm"},{"post_id":"cl6ku8fjl005we0mg7qji3qav","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkc00gze0mge6cw3qci"},{"post_id":"cl6ku8fjl005we0mg7qji3qav","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkc00h0e0mgezvkeub2"},{"post_id":"cl6ku8fjl005we0mg7qji3qav","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkc00h1e0mgg7s8caug"},{"post_id":"cl6ku8fjl005we0mg7qji3qav","category_id":"cl6ku8fk700dze0mgbquc9705","_id":"cl6ku8fkc00h2e0mg621h8iwm"},{"post_id":"cl6ku8fjm0060e0mgcvp1da98","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkc00h3e0mg4f0l51hk"},{"post_id":"cl6ku8fjm0060e0mgcvp1da98","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkc00h4e0mg6zhn3ehh"},{"post_id":"cl6ku8fjm0060e0mgcvp1da98","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkc00h5e0mgb119hmhc"},{"post_id":"cl6ku8fjm0060e0mgcvp1da98","category_id":"cl6ku8fk700dze0mgbquc9705","_id":"cl6ku8fkc00h6e0mgem9qf04y"},{"post_id":"cl6ku8fjm0062e0mg5no686wl","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkc00h7e0mg5t6v9nf0"},{"post_id":"cl6ku8fjm0062e0mg5no686wl","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkc00h8e0mg7h1x6sm2"},{"post_id":"cl6ku8fjm0062e0mg5no686wl","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkc00h9e0mg4ppjgg3b"},{"post_id":"cl6ku8fjm0062e0mg5no686wl","category_id":"cl6ku8fk700dze0mgbquc9705","_id":"cl6ku8fkc00hae0mgejjo58l1"},{"post_id":"cl6ku8fjn0066e0mghjgu6mh3","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkc00hbe0mg8xbta4wz"},{"post_id":"cl6ku8fjn0066e0mghjgu6mh3","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkc00hce0mg0wwm8ylk"},{"post_id":"cl6ku8fjn0066e0mghjgu6mh3","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkc00hde0mg2dir2bki"},{"post_id":"cl6ku8fjn0066e0mghjgu6mh3","category_id":"cl6ku8fk700dze0mgbquc9705","_id":"cl6ku8fkc00hee0mg1vee92g5"},{"post_id":"cl6ku8fjo0068e0mg0gswgqec","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkc00hfe0mga8ud8rid"},{"post_id":"cl6ku8fjo0068e0mg0gswgqec","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkc00hge0mg1fu697bd"},{"post_id":"cl6ku8fjo0068e0mg0gswgqec","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkc00hhe0mg6axfdo67"},{"post_id":"cl6ku8fjo0068e0mg0gswgqec","category_id":"cl6ku8fk700dze0mgbquc9705","_id":"cl6ku8fkc00hie0mg4x2x7c3c"},{"post_id":"cl6ku8fjo006ce0mg41u1c5jx","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkc00hje0mg9k258z86"},{"post_id":"cl6ku8fjo006ce0mg41u1c5jx","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkc00hke0mg8coc0x11"},{"post_id":"cl6ku8fjo006ce0mg41u1c5jx","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkc00hle0mg0n5e1syr"},{"post_id":"cl6ku8fjo006ce0mg41u1c5jx","category_id":"cl6ku8fk700dze0mgbquc9705","_id":"cl6ku8fkc00hme0mgc0xu200z"},{"post_id":"cl6ku8fjo006ee0mgfln5hhcr","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkc00hne0mgd5b5em2y"},{"post_id":"cl6ku8fjo006ee0mgfln5hhcr","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkc00hoe0mg44wtf8rm"},{"post_id":"cl6ku8fjo006ee0mgfln5hhcr","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkc00hpe0mg4l07cktp"},{"post_id":"cl6ku8fjo006ee0mgfln5hhcr","category_id":"cl6ku8fk700dze0mgbquc9705","_id":"cl6ku8fkc00hqe0mg0c7n5x9x"},{"post_id":"cl6ku8fjp006ie0mg45j22he5","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkc00hre0mg5ts615hg"},{"post_id":"cl6ku8fjp006ie0mg45j22he5","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkc00hse0mgedzvf93t"},{"post_id":"cl6ku8fjp006ie0mg45j22he5","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkc00hte0mg5mxt5q5p"},{"post_id":"cl6ku8fjp006ie0mg45j22he5","category_id":"cl6ku8fk700dze0mgbquc9705","_id":"cl6ku8fkc00hue0mg20dm68d2"},{"post_id":"cl6ku8fjp006ke0mgdml36v3i","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkc00hve0mg2d04a0g5"},{"post_id":"cl6ku8fjp006ke0mgdml36v3i","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkc00hwe0mgcup696p4"},{"post_id":"cl6ku8fjp006ke0mgdml36v3i","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkc00hxe0mg0v9eb4e0"},{"post_id":"cl6ku8fjp006ke0mgdml36v3i","category_id":"cl6ku8fka00fte0mg2goc54t7","_id":"cl6ku8fkc00hye0mg997tg2f7"},{"post_id":"cl6ku8fjp006ne0mg71ime785","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkc00hze0mg98fl6ys8"},{"post_id":"cl6ku8fjp006ne0mg71ime785","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkc00i0e0mggnle5kho"},{"post_id":"cl6ku8fjp006ne0mg71ime785","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkc00i1e0mgbtb9exkw"},{"post_id":"cl6ku8fjp006ne0mg71ime785","category_id":"cl6ku8fka00fte0mg2goc54t7","_id":"cl6ku8fkc00i2e0mgeukn27fk"},{"post_id":"cl6ku8fjp006qe0mgb52bbnz7","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkc00i3e0mgbai80rbr"},{"post_id":"cl6ku8fjp006qe0mgb52bbnz7","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkc00i4e0mg33cb2pzb"},{"post_id":"cl6ku8fjp006qe0mgb52bbnz7","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkc00i5e0mg66bhgfm3"},{"post_id":"cl6ku8fjp006qe0mgb52bbnz7","category_id":"cl6ku8fka00fte0mg2goc54t7","_id":"cl6ku8fkc00i6e0mg2nazfbaf"},{"post_id":"cl6ku8fjq006te0mgdavc8n5x","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkc00i7e0mgcqe33uuh"},{"post_id":"cl6ku8fjq006te0mgdavc8n5x","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkc00i8e0mg128mbs8l"},{"post_id":"cl6ku8fjq006te0mgdavc8n5x","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkc00i9e0mge5q6fw2z"},{"post_id":"cl6ku8fjq006te0mgdavc8n5x","category_id":"cl6ku8fka00fte0mg2goc54t7","_id":"cl6ku8fkc00iae0mgc8i8h8xg"},{"post_id":"cl6ku8fjq006we0mgbkho1pst","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkc00ibe0mg2odz1485"},{"post_id":"cl6ku8fjq006we0mgbkho1pst","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkc00ice0mg6h193qlq"},{"post_id":"cl6ku8fjq006we0mgbkho1pst","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkc00ide0mgdqs93iln"},{"post_id":"cl6ku8fjq006we0mgbkho1pst","category_id":"cl6ku8fka00fte0mg2goc54t7","_id":"cl6ku8fkc00iee0mgfgxvenu8"},{"post_id":"cl6ku8fjq006ze0mg6t3cd0lg","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkc00ife0mghzbefdbw"},{"post_id":"cl6ku8fjq006ze0mg6t3cd0lg","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkc00ige0mg8oi34ulw"},{"post_id":"cl6ku8fjq006ze0mg6t3cd0lg","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkc00ihe0mgdv5ja5ir"},{"post_id":"cl6ku8fjq006ze0mg6t3cd0lg","category_id":"cl6ku8fka00fte0mg2goc54t7","_id":"cl6ku8fkc00iie0mg8yss223a"},{"post_id":"cl6ku8fjr0072e0mgf16i7bfy","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkc00ije0mg5mvd1r4d"},{"post_id":"cl6ku8fjr0072e0mgf16i7bfy","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkc00ike0mg8q5n2bqz"},{"post_id":"cl6ku8fjr0072e0mgf16i7bfy","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkc00ile0mgeqrvcd7k"},{"post_id":"cl6ku8fjr0072e0mgf16i7bfy","category_id":"cl6ku8fka00fte0mg2goc54t7","_id":"cl6ku8fkc00ime0mg3tyxd3o6"},{"post_id":"cl6ku8fjr0075e0mg4s8x7abe","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkc00ine0mg0sswd313"},{"post_id":"cl6ku8fjr0075e0mg4s8x7abe","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkc00ioe0mggh0c1s2b"},{"post_id":"cl6ku8fjr0075e0mg4s8x7abe","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkc00ipe0mg5d6eecdg"},{"post_id":"cl6ku8fjr0075e0mg4s8x7abe","category_id":"cl6ku8fka00fte0mg2goc54t7","_id":"cl6ku8fkd00iqe0mg1yorbc1r"},{"post_id":"cl6ku8fjr0078e0mg77s67dq5","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkd00ire0mggrpx8n9v"},{"post_id":"cl6ku8fjr0078e0mg77s67dq5","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkd00ise0mgam1f0r5o"},{"post_id":"cl6ku8fjr0078e0mg77s67dq5","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkd00ite0mg9tlmbaow"},{"post_id":"cl6ku8fjr0078e0mg77s67dq5","category_id":"cl6ku8fka00fte0mg2goc54t7","_id":"cl6ku8fkd00iue0mgdrj23aiw"},{"post_id":"cl6ku8fkf00ive0mgbuffh17a","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkg00j1e0mgdloec2fy"},{"post_id":"cl6ku8fkf00ive0mgbuffh17a","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkg00j4e0mgbl8o94ev"},{"post_id":"cl6ku8fkf00ive0mgbuffh17a","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkg00j8e0mg91n1e3j8"},{"post_id":"cl6ku8fkf00ive0mgbuffh17a","category_id":"cl6ku8fka00fte0mg2goc54t7","_id":"cl6ku8fkh00jce0mgehjz5k3m"},{"post_id":"cl6ku8fkf00iwe0mgcdoh23xs","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkh00jfe0mgcwno2ib4"},{"post_id":"cl6ku8fkf00iwe0mgcdoh23xs","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fki00jke0mgeguqhq2f"},{"post_id":"cl6ku8fkf00iwe0mgcdoh23xs","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fki00jne0mgem68czgn"},{"post_id":"cl6ku8fkf00iwe0mgcdoh23xs","category_id":"cl6ku8fka00fte0mg2goc54t7","_id":"cl6ku8fkj00jqe0mg85hfeirx"},{"post_id":"cl6ku8fkf00iye0mg090n8sxy","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkj00jse0mg180xajuw"},{"post_id":"cl6ku8fkf00iye0mg090n8sxy","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkj00jue0mgdotuczk0"},{"post_id":"cl6ku8fkf00iye0mg090n8sxy","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkj00jve0mgar6e21ie"},{"post_id":"cl6ku8fkf00iye0mg090n8sxy","category_id":"cl6ku8fka00fte0mg2goc54t7","_id":"cl6ku8fkj00jwe0mghsjw749i"},{"post_id":"cl6ku8fkf00j0e0mg61g6bmnk","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkj00jxe0mg9ph70zas"},{"post_id":"cl6ku8fkf00j0e0mg61g6bmnk","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkj00jye0mggw7p20iv"},{"post_id":"cl6ku8fkf00j0e0mg61g6bmnk","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkj00jze0mgguqeferb"},{"post_id":"cl6ku8fkf00j0e0mg61g6bmnk","category_id":"cl6ku8fka00fte0mg2goc54t7","_id":"cl6ku8fkk00k0e0mg97qieuyy"},{"post_id":"cl6ku8fkg00jae0mgctbw4ryl","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkk00k1e0mg8o51h78f"},{"post_id":"cl6ku8fkg00jae0mgctbw4ryl","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkk00k2e0mgbp1b3kii"},{"post_id":"cl6ku8fkg00jae0mgctbw4ryl","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkk00k3e0mga53leab8"},{"post_id":"cl6ku8fkg00jae0mgctbw4ryl","category_id":"cl6ku8fka00fte0mg2goc54t7","_id":"cl6ku8fkk00k4e0mg8fu708pz"},{"post_id":"cl6ku8fkh00jde0mghqjehkho","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkk00k5e0mgdfts96yh"},{"post_id":"cl6ku8fkh00jde0mghqjehkho","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkk00k6e0mg1kj250hd"},{"post_id":"cl6ku8fkh00jde0mghqjehkho","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkk00k7e0mg8m8aak75"},{"post_id":"cl6ku8fkh00jde0mghqjehkho","category_id":"cl6ku8fkh00jbe0mg7tow3c9v","_id":"cl6ku8fkk00k8e0mgb1pp5vu7"},{"post_id":"cl6ku8fkg00j3e0mgb75shcl7","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkk00k9e0mg4oad9qnr"},{"post_id":"cl6ku8fkg00j3e0mgb75shcl7","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkk00kae0mg12c2e9ma"},{"post_id":"cl6ku8fkg00j3e0mgb75shcl7","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkk00kbe0mg8xh74if9"},{"post_id":"cl6ku8fkg00j3e0mgb75shcl7","category_id":"cl6ku8fkh00jbe0mg7tow3c9v","_id":"cl6ku8fkk00kce0mghm8xa4xb"},{"post_id":"cl6ku8fkh00jge0mg98jl4mpe","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkk00kde0mg478hcfue"},{"post_id":"cl6ku8fkh00jge0mg98jl4mpe","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkk00kee0mg00d91ner"},{"post_id":"cl6ku8fkh00jge0mg98jl4mpe","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkk00kfe0mg8yp204zv"},{"post_id":"cl6ku8fkh00jge0mg98jl4mpe","category_id":"cl6ku8fkh00jbe0mg7tow3c9v","_id":"cl6ku8fkk00kge0mgaekg2brn"},{"post_id":"cl6ku8fki00jle0mg0xxuhk1a","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkk00khe0mg2z881nvs"},{"post_id":"cl6ku8fki00jle0mg0xxuhk1a","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkk00kie0mgcqpuglpd"},{"post_id":"cl6ku8fki00jle0mg0xxuhk1a","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkk00kje0mg0nr38gst"},{"post_id":"cl6ku8fki00jle0mg0xxuhk1a","category_id":"cl6ku8fkh00jbe0mg7tow3c9v","_id":"cl6ku8fkk00kke0mg688761e3"},{"post_id":"cl6ku8fkg00j6e0mg7igz3lmt","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkk00kle0mg4aq164tl"},{"post_id":"cl6ku8fkg00j6e0mg7igz3lmt","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkk00kme0mg0mvy9f1t"},{"post_id":"cl6ku8fkg00j6e0mg7igz3lmt","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkk00kne0mggv1veu9e"},{"post_id":"cl6ku8fkg00j6e0mg7igz3lmt","category_id":"cl6ku8fkh00jbe0mg7tow3c9v","_id":"cl6ku8fkk00koe0mgfatkb6ps"},{"post_id":"cl6ku8fki00joe0mga3phcpuv","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6ku8fkk00kpe0mgdng50k2u"},{"post_id":"cl6ku8fki00joe0mga3phcpuv","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6ku8fkk00kqe0mgdoo90kps"},{"post_id":"cl6ku8fki00joe0mga3phcpuv","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6ku8fkk00kre0mg678q0uqe"},{"post_id":"cl6ku8fki00joe0mga3phcpuv","category_id":"cl6ku8fka00fte0mg2goc54t7","_id":"cl6ku8fkk00kse0mg1jgccbz4"},{"post_id":"cl6lxn3bj00008qmg76pu1dwg","category_id":"cl6ku8fjb003ge0mgf70u94h5","_id":"cl6lxn3bm00018qmg1h7favhe"},{"post_id":"cl6lxn3bj00008qmg76pu1dwg","category_id":"cl6ku8fjs007we0mg4u2i1qfz","_id":"cl6lxn3bm00028qmg4s2uejaa"},{"post_id":"cl6lxn3bj00008qmg76pu1dwg","category_id":"cl6ku8fjz00a7e0mg3tm8eh7a","_id":"cl6lxn3bm00038qmgdvx43ady"},{"post_id":"cl6lxn3bj00008qmg76pu1dwg","category_id":"cl6ku8fk700dze0mgbquc9705","_id":"cl6lxn3bm00048qmg95bh2b0g"}],"PostTag":[{"post_id":"cl6ku8fit0009e0mg3o12dkk9","tag_id":"cl6ku8fis0005e0mggrj9btkk","_id":"cl6ku8fiv000de0mg2gl7hf5j"},{"post_id":"cl6ku8fio0001e0mghlvw3bkw","tag_id":"cl6ku8fis0005e0mggrj9btkk","_id":"cl6ku8fiw000he0mgd9ys7bcm"},{"post_id":"cl6ku8fiu000be0mghzb30kbo","tag_id":"cl6ku8fiw000ge0mgff2j04hf","_id":"cl6ku8fix000qe0mg8ef4g6bx"},{"post_id":"cl6ku8fiw000ie0mggzwv3sne","tag_id":"cl6ku8fix000ne0mg7wbk29gs","_id":"cl6ku8fiz0014e0mgftexe0mq"},{"post_id":"cl6ku8fiw000ie0mggzwv3sne","tag_id":"cl6ku8fiy000ve0mg050v8dvr","_id":"cl6ku8fiz0017e0mg1tpj0wwh"},{"post_id":"cl6ku8fiw000ke0mg79w1fa5d","tag_id":"cl6ku8fiz0010e0mgc7ph9lz5","_id":"cl6ku8fj2001ie0mg9ivud7fa"},{"post_id":"cl6ku8fiw000ke0mg79w1fa5d","tag_id":"cl6ku8fiz0018e0mg11f65yaq","_id":"cl6ku8fj2001ke0mga71vawqa"},{"post_id":"cl6ku8fiy000we0mg0h4i61tt","tag_id":"cl6ku8fiz0018e0mg11f65yaq","_id":"cl6ku8fj2001oe0mg037r6vi1"},{"post_id":"cl6ku8fj1001ce0mgaurhhsp2","tag_id":"cl6ku8fj2001me0mg5361enzr","_id":"cl6ku8fj3001ue0mgcgfqacvw"},{"post_id":"cl6ku8fj1001ee0mg57aigmjy","tag_id":"cl6ku8fj3001se0mg3kzq7x6i","_id":"cl6ku8fj4001ze0mgaijh3dga"},{"post_id":"cl6ku8fj1001ee0mg57aigmjy","tag_id":"cl6ku8fiz0018e0mg11f65yaq","_id":"cl6ku8fj40021e0mg5pmd29r0"},{"post_id":"cl6ku8fj2001je0mg840u2f6f","tag_id":"cl6ku8fj3001se0mg3kzq7x6i","_id":"cl6ku8fj60025e0mg8yb94dtu"},{"post_id":"cl6ku8fj2001je0mg840u2f6f","tag_id":"cl6ku8fiz0018e0mg11f65yaq","_id":"cl6ku8fj60027e0mghgcr6026"},{"post_id":"cl6ku8fj2001le0mgdyyu8jgx","tag_id":"cl6ku8fj40023e0mgdxa14may","_id":"cl6ku8fj7002de0mg8u9c6u7q"},{"post_id":"cl6ku8fj2001le0mgdyyu8jgx","tag_id":"cl6ku8fiz0018e0mg11f65yaq","_id":"cl6ku8fj7002ge0mgdj7le071"},{"post_id":"cl6ku8fj2001pe0mg50z7gxcy","tag_id":"cl6ku8fj6002ae0mgc3959d7f","_id":"cl6ku8fj8002le0mgam5m3j0t"},{"post_id":"cl6ku8fj3001qe0mg97950214","tag_id":"cl6ku8fj8002je0mg3rl0f9kf","_id":"cl6ku8fj9002te0mghy9359wa"},{"post_id":"cl6ku8fj3001te0mg7lwehnbv","tag_id":"cl6ku8fj6002ae0mgc3959d7f","_id":"cl6ku8fja0030e0mg0vvvgh6d"},{"post_id":"cl6ku8fj3001ve0mga9g194q9","tag_id":"cl6ku8fj9002xe0mghnbqcu00","_id":"cl6ku8fja0037e0mggzzza99i"},{"post_id":"cl6ku8fj4001ye0mgbgzpe4zx","tag_id":"cl6ku8fja0034e0mgc5g80dv6","_id":"cl6ku8fjb003ee0mgcidze1fd"},{"post_id":"cl6ku8fja0039e0mggvvs3c6n","tag_id":"cl6ku8fiz0010e0mgc7ph9lz5","_id":"cl6ku8fjb003ie0mgekmgeojr"},{"post_id":"cl6ku8fj40020e0mghjmb3zjx","tag_id":"cl6ku8fjb003ce0mg2ay7f4af","_id":"cl6ku8fjc003me0mg9kob0v3m"},{"post_id":"cl6ku8fj60026e0mga6rv85xv","tag_id":"cl6ku8fjb003ce0mg2ay7f4af","_id":"cl6ku8fjc003te0mg7gdscyre"},{"post_id":"cl6ku8fj7002be0mg1c034j8r","tag_id":"cl6ku8fjb003ce0mg2ay7f4af","_id":"cl6ku8fjd003ye0mg8t34bzq6"},{"post_id":"cl6ku8fj7002ee0mg0ca442d6","tag_id":"cl6ku8fjb003ce0mg2ay7f4af","_id":"cl6ku8fje0045e0mgbuvr98os"},{"post_id":"cl6ku8fj8002me0mg9rujet2g","tag_id":"cl6ku8fjb003ce0mg2ay7f4af","_id":"cl6ku8fjf004ce0mgaqpvdzse"},{"post_id":"cl6ku8fj8002pe0mgg1l309hc","tag_id":"cl6ku8fjb003ce0mg2ay7f4af","_id":"cl6ku8fjf004he0mg16ccfpld"},{"post_id":"cl6ku8fj9002we0mg0dyddgso","tag_id":"cl6ku8fjb003ce0mg2ay7f4af","_id":"cl6ku8fjg004me0mgee40d51z"},{"post_id":"cl6ku8fj9002ze0mgaumu7h41","tag_id":"cl6ku8fjg004le0mg13eq183i","_id":"cl6ku8fjg004se0mg8cj7fa05"},{"post_id":"cl6ku8fjg004re0mg7275bl8q","tag_id":"cl6ku8fj40023e0mgdxa14may","_id":"cl6ku8fjh004we0mgg7624mdc"},{"post_id":"cl6ku8fja0033e0mggp4cg5p4","tag_id":"cl6ku8fjg004qe0mg1q40d7pn","_id":"cl6ku8fjh004ze0mger383kft"},{"post_id":"cl6ku8fjh004ue0mg6qzbf578","tag_id":"cl6ku8fj40023e0mgdxa14may","_id":"cl6ku8fjh0051e0mgfb44bg1z"},{"post_id":"cl6ku8fjh004xe0mgear7dhyc","tag_id":"cl6ku8fj40023e0mgdxa14may","_id":"cl6ku8fji0055e0mgefylh5g5"},{"post_id":"cl6ku8fja0036e0mg6s7qdgwx","tag_id":"cl6ku8fjh004ve0mgc1a8gamf","_id":"cl6ku8fji0057e0mgb20r4j3t"},{"post_id":"cl6ku8fjh0050e0mg3sfoe8ht","tag_id":"cl6ku8fj40023e0mgdxa14may","_id":"cl6ku8fjj005be0mg0juk0ga9"},{"post_id":"cl6ku8fjh0053e0mgdngp8063","tag_id":"cl6ku8fj40023e0mgdxa14may","_id":"cl6ku8fjj005de0mgbi7087gx"},{"post_id":"cl6ku8fji0056e0mgcfi2g20c","tag_id":"cl6ku8fj40023e0mgdxa14may","_id":"cl6ku8fjj005he0mg0gv6ao6n"},{"post_id":"cl6ku8fjb003de0mg1cet8p9g","tag_id":"cl6ku8fjh0052e0mgai6t30o4","_id":"cl6ku8fjk005je0mg7qiqc0v6"},{"post_id":"cl6ku8fji0058e0mgecx36na0","tag_id":"cl6ku8fj40023e0mgdxa14may","_id":"cl6ku8fjk005ne0mg8mej75c6"},{"post_id":"cl6ku8fjj005ce0mg6lpobdnj","tag_id":"cl6ku8fj40023e0mgdxa14may","_id":"cl6ku8fjk005pe0mg8ih85ds8"},{"post_id":"cl6ku8fjb003fe0mg0999a892","tag_id":"cl6ku8fjj0059e0mg43a25ns9","_id":"cl6ku8fjl005te0mgb8o85et9"},{"post_id":"cl6ku8fjj005ee0mg4oc8b4ru","tag_id":"cl6ku8fj40023e0mgdxa14may","_id":"cl6ku8fjl005ve0mgec0k90b1"},{"post_id":"cl6ku8fjj005ie0mg47ci7xwo","tag_id":"cl6ku8fj40023e0mgdxa14may","_id":"cl6ku8fjm005ze0mgc8ok3s7h"},{"post_id":"cl6ku8fjb003je0mg8kzaffrh","tag_id":"cl6ku8fjh0052e0mgai6t30o4","_id":"cl6ku8fjm0061e0mg9fi74rhw"},{"post_id":"cl6ku8fjk005ke0mg2fw9bm6q","tag_id":"cl6ku8fj40023e0mgdxa14may","_id":"cl6ku8fjn0065e0mg99vj27y3"},{"post_id":"cl6ku8fjk005oe0mg9els8xjk","tag_id":"cl6ku8fj40023e0mgdxa14may","_id":"cl6ku8fjo0067e0mg17gdblaw"},{"post_id":"cl6ku8fjc003ne0mg76nnh3rz","tag_id":"cl6ku8fjh0052e0mgai6t30o4","_id":"cl6ku8fjo006be0mgerztf3lu"},{"post_id":"cl6ku8fjk005qe0mg6pcy9e81","tag_id":"cl6ku8fj40023e0mgdxa14may","_id":"cl6ku8fjo006de0mg56s4apra"},{"post_id":"cl6ku8fjl005ue0mg35g51krz","tag_id":"cl6ku8fj40023e0mgdxa14may","_id":"cl6ku8fjo006ge0mgcgpy7chc"},{"post_id":"cl6ku8fjc003qe0mgbnmn3r8c","tag_id":"cl6ku8fjh0052e0mgai6t30o4","_id":"cl6ku8fjp006je0mg161063fh"},{"post_id":"cl6ku8fjl005we0mg7qji3qav","tag_id":"cl6ku8fj40023e0mgdxa14may","_id":"cl6ku8fjp006me0mgh8pd8yox"},{"post_id":"cl6ku8fjm0060e0mgcvp1da98","tag_id":"cl6ku8fj40023e0mgdxa14may","_id":"cl6ku8fjp006pe0mg0kmkgn10"},{"post_id":"cl6ku8fjc003ue0mgdr9ygr18","tag_id":"cl6ku8fjm005ye0mg7dichrsx","_id":"cl6ku8fjq006se0mg3fzj82e6"},{"post_id":"cl6ku8fjm0062e0mg5no686wl","tag_id":"cl6ku8fj40023e0mgdxa14may","_id":"cl6ku8fjq006ve0mg35b9d2nt"},{"post_id":"cl6ku8fjn0066e0mghjgu6mh3","tag_id":"cl6ku8fj40023e0mgdxa14may","_id":"cl6ku8fjq006ye0mgaiqwg2lb"},{"post_id":"cl6ku8fjd003we0mgfrglblw5","tag_id":"cl6ku8fjh0052e0mgai6t30o4","_id":"cl6ku8fjr0071e0mgh55reb2t"},{"post_id":"cl6ku8fjo0068e0mg0gswgqec","tag_id":"cl6ku8fj40023e0mgdxa14may","_id":"cl6ku8fjr0074e0mg3mlt1nmn"},{"post_id":"cl6ku8fjo006ce0mg41u1c5jx","tag_id":"cl6ku8fj40023e0mgdxa14may","_id":"cl6ku8fjr0077e0mg6xmfaqgf"},{"post_id":"cl6ku8fje0046e0mgearb1u93","tag_id":"cl6ku8fjo006ae0mgeoadgnev","_id":"cl6ku8fjr0079e0mg66114u9n"},{"post_id":"cl6ku8fjo006ee0mgfln5hhcr","tag_id":"cl6ku8fj40023e0mgdxa14may","_id":"cl6ku8fjs007be0mgdwyp8dat"},{"post_id":"cl6ku8fjp006ie0mg45j22he5","tag_id":"cl6ku8fj40023e0mgdxa14may","_id":"cl6ku8fjs007de0mgbgitfr1x"},{"post_id":"cl6ku8fjf004fe0mghkuh1dey","tag_id":"cl6ku8fjp006he0mggosg8nl7","_id":"cl6ku8fjs007ge0mg5doqhr5e"},{"post_id":"cl6ku8fjg004ne0mg6mq9euev","tag_id":"cl6ku8fjp006oe0mg110mbaho","_id":"cl6ku8fjs007je0mg56wtclep"},{"post_id":"cl6ku8fjg004pe0mg0ne73di1","tag_id":"cl6ku8fjq006ue0mg6m9y1wft","_id":"cl6ku8fjs007le0mg7tx6149j"},{"post_id":"cl6ku8fjg004pe0mg0ne73di1","tag_id":"cl6ku8fjp006he0mggosg8nl7","_id":"cl6ku8fjs007ne0mgglxo2t0b"},{"post_id":"cl6ku8fjr0078e0mg77s67dq5","tag_id":"cl6ku8fjr0076e0mg4l7teg8x","_id":"cl6ku8fjs007pe0mgd2o84llh"},{"post_id":"cl6ku8fjp006ne0mg71ime785","tag_id":"cl6ku8fjr0076e0mg4l7teg8x","_id":"cl6ku8fjs007re0mg2na6hgw3"},{"post_id":"cl6ku8fjp006qe0mgb52bbnz7","tag_id":"cl6ku8fjr0076e0mg4l7teg8x","_id":"cl6ku8fjs007te0mgb6939y14"},{"post_id":"cl6ku8fjq006te0mgdavc8n5x","tag_id":"cl6ku8fjr0076e0mg4l7teg8x","_id":"cl6ku8fjs007ve0mg5wkl3yu3"},{"post_id":"cl6ku8fjq006we0mgbkho1pst","tag_id":"cl6ku8fjr0076e0mg4l7teg8x","_id":"cl6ku8fjs007xe0mgcivg1xdn"},{"post_id":"cl6ku8fjq006ze0mg6t3cd0lg","tag_id":"cl6ku8fjr0076e0mg4l7teg8x","_id":"cl6ku8fjs007ze0mg7uatdzwz"},{"post_id":"cl6ku8fjr0072e0mgf16i7bfy","tag_id":"cl6ku8fjr0076e0mg4l7teg8x","_id":"cl6ku8fjt0081e0mg7vq005ms"},{"post_id":"cl6ku8fjr0075e0mg4s8x7abe","tag_id":"cl6ku8fjr0076e0mg4l7teg8x","_id":"cl6ku8fjt0082e0mg3jbi8wyp"},{"post_id":"cl6ku8fkf00ive0mgbuffh17a","tag_id":"cl6ku8fjr0076e0mg4l7teg8x","_id":"cl6ku8fkf00ixe0mg88ynacil"},{"post_id":"cl6ku8fkf00iwe0mgcdoh23xs","tag_id":"cl6ku8fjr0076e0mg4l7teg8x","_id":"cl6ku8fkf00ize0mgc86ahnb4"},{"post_id":"cl6ku8fkf00iye0mg090n8sxy","tag_id":"cl6ku8fjo006ae0mgeoadgnev","_id":"cl6ku8fkg00j2e0mgce0jg3i8"},{"post_id":"cl6ku8fkf00iye0mg090n8sxy","tag_id":"cl6ku8fjr0076e0mg4l7teg8x","_id":"cl6ku8fkg00j5e0mgb3i409co"},{"post_id":"cl6ku8fkf00j0e0mg61g6bmnk","tag_id":"cl6ku8fjr0076e0mg4l7teg8x","_id":"cl6ku8fkg00j9e0mggxgo1hz3"},{"post_id":"cl6ku8fkg00jae0mgctbw4ryl","tag_id":"cl6ku8fjo006ae0mgeoadgnev","_id":"cl6ku8fkh00jee0mg4eshht7t"},{"post_id":"cl6ku8fkg00jae0mgctbw4ryl","tag_id":"cl6ku8fjr0076e0mg4l7teg8x","_id":"cl6ku8fki00jie0mg6noxbu5v"},{"post_id":"cl6ku8fkh00jde0mghqjehkho","tag_id":"cl6ku8fkg00j7e0mg77dgfn62","_id":"cl6ku8fki00jme0mgbgathmzk"},{"post_id":"cl6ku8fkg00j3e0mgb75shcl7","tag_id":"cl6ku8fkg00j7e0mg77dgfn62","_id":"cl6ku8fkj00jpe0mg6omp1ipr"},{"post_id":"cl6ku8fkh00jge0mg98jl4mpe","tag_id":"cl6ku8fkg00j7e0mg77dgfn62","_id":"cl6ku8fkj00jre0mg4rj6fat7"},{"post_id":"cl6ku8fkg00j6e0mg7igz3lmt","tag_id":"cl6ku8fkg00j7e0mg77dgfn62","_id":"cl6ku8fkj00jte0mg2rnp6md8"}],"Tag":[{"name":"材料","_id":"cl6ku8fis0005e0mggrj9btkk"},{"name":"热处理","_id":"cl6ku8fiw000ge0mgff2j04hf"},{"name":"材料性能","_id":"cl6ku8fix000ne0mg7wbk29gs"},{"name":"塑性流动挤出","_id":"cl6ku8fiy000ve0mg050v8dvr"},{"name":"技能","_id":"cl6ku8fiz0010e0mgc7ph9lz5"},{"name":"已迁移","_id":"cl6ku8fiz0018e0mg11f65yaq"},{"name":"六级","_id":"cl6ku8fj2001me0mg5361enzr"},{"name":"obsidian","_id":"cl6ku8fj3001se0mg3kzq7x6i"},{"name":"动态规划","_id":"cl6ku8fj40023e0mgdxa14may"},{"name":"notion","_id":"cl6ku8fj6002ae0mgc3959d7f"},{"name":"hexo 问题","_id":"cl6ku8fj8002je0mg3rl0f9kf"},{"name":"linux命令","_id":"cl6ku8fj9002xe0mghnbqcu00"},{"name":"计算机网络","_id":"cl6ku8fja0034e0mgc5g80dv6"},{"name":"函数","_id":"cl6ku8fjb003ce0mg2ay7f4af"},{"name":"C++","_id":"cl6ku8fjg004le0mg13eq183i"},{"name":"算法","_id":"cl6ku8fjg004qe0mg1q40d7pn"},{"name":"git","_id":"cl6ku8fjh004ve0mgc1a8gamf"},{"name":"blog","_id":"cl6ku8fjh0052e0mgai6t30o4"},{"name":"mac下软件安装","_id":"cl6ku8fjj0059e0mg43a25ns9"},{"name":"hexo","_id":"cl6ku8fjm005ye0mg7dichrsx"},{"name":"代码随想录","_id":"cl6ku8fjo006ae0mgeoadgnev"},{"name":"复杂度","_id":"cl6ku8fjp006he0mggosg8nl7"},{"name":"递归","_id":"cl6ku8fjp006oe0mg110mbaho"},{"name":"待解决","_id":"cl6ku8fjq006ue0mg6m9y1wft"},{"name":"贪心算法","_id":"cl6ku8fjr0076e0mg4l7teg8x"},{"name":"数组","_id":"cl6ku8fkg00j7e0mg77dgfn62"}]}}